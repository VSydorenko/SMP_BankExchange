
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Наименование = НСтр("ru='Обработка выписки банка ОщадБанк';uk='Обробка виписки банка ОщадБанк'");
	ПараметрыРегистрации.Информация = НСтр("ru='Обработка формата загрузки данных украинского банка ОщадБанк';uk='Обробка формату завантаження даних українського банка ОщадБанк'");
	ПараметрыРегистрации.Версия = "2.1";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Обработчик чтения формата для конфигурации BASSmallBusiness
Процедура Загрузить_УНФ(Элемент, ФайлЗагрузки, ТаблицаТаблицДокументов, ТаблицаКонтрагентов) Экспорт
	
	Элемент.ТаблицаКонтрагентов.ПолучитьЭлементы().Очистить();
	
	// Подготавливаем структуры обработки данных.
	ДокументыКИмпорту = Элемент.Объект.Загрузка.Выгрузить();
	ДокументыКИмпорту.Колонки.Добавить("КодНазПлатежа", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1)));

	ИмпортЗагружаемые = Обработки.СМП_КлиентБанк.СформироватьСоответствиеЗагружаемых();
	ИмпортНеПустые = Неопределено;
	ИмпортНеПустыеПлатежноеПоручение = Неопределено;
	ИмпортНеПустыеПлатежноеПоручениеБюджет = Неопределено;
	РасчетныеСчетаКИмпорту = Элемент.Объект.ИмпортРасчетныеСчета.Выгрузить();
	
	Обработки.СМП_КлиентБанк.СформироватьСоответствияНеПустыхПриИмпорте(
	ИмпортНеПустые,
	ИмпортНеПустыеПлатежноеПоручение,
	ИмпортНеПустыеПлатежноеПоручениеБюджет
	);
	ТегиРасчетногоСчета = Обработки.СМП_КлиентБанк.СоздатьСоответствиеИзСтроки(
	ВРег("ДатаНачала,ДатаКонца,РасчСчетОрг,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток,КонецРасчСчет")
	);
	ТегиЗаголовка = Обработки.СМП_КлиентБанк.СоздатьСоответствиеИзСтроки(
	ВРег("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца")
	);
	СтруктураЗаголовок = Новый Структура(
	ВРег("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца")
	);
	Элемент.ИмпортЗаголовок = СтруктураЗаголовок;
	ИмпортПризнакОбмена = Ложь;
	НайденКонецФайла = Ложь;
	ИмпортВидыДокументов = Новый Массив;
	РасчетныеСчетаКИмпорту.Очистить();
	ДокументыКИмпорту.Очистить();
	
	КонтекстФормы = Новый Структура;
	КонтекстФормы.Вставить("ИмпортТекстДляРазбора", ФайлЗагрузки);
	КонтекстФормы.Вставить("ПослеЗагрузкиВыписокВ1С", Элемент.ПослеЗагрузкиВыписокВ1С);
	КонтекстФормы.Вставить("ИскатьВСправочникеСоответствий", Элемент.ИскатьВСправочникеСоответствий);
	КонтекстФормы.Вставить("ТаблицаКонтрагентов", ТаблицаКонтрагентов);
	КонтекстФормы.Вставить("РасчетныеСчетаКИмпорту", РасчетныеСчетаКИмпорту);
	КонтекстФормы.Вставить("ДокументыКИмпорту", ДокументыКИмпорту);
	КонтекстФормы.Вставить("ТаблицаТаблицДокументов", ТаблицаТаблицДокументов);
	
	Если Элемент.ПослеЗагрузкиВыписокВ1С Тогда
		КонтекстФормы.Вставить("СтруктураДанныхЗагрузки", Элемент.СтруктураДанныхЗагрузки);
	КонецЕсли;
	
	ВременнаяСтрока = Элемент.ТаблицаТаблицДокументов.Добавить();
	КонтекстФормы.Вставить("ТаблицаНайденныхДокументов", ВременнаяСтрока.ТаблицаНайденныхДокументов.Выгрузить());
	Элемент.ТаблицаТаблицДокументов.Удалить(0);
	
	КонтекстФормы.Вставить("ЕстьОтборПоБанковскомуСчету", Элемент.ЕстьОтборПоБанковскомуСчету);
	КонтекстФормы.Вставить("ВыдаватьСообщенияОНеверныхРеквизитахИСекциях", Элемент.ВыдаватьСообщенияОНеверныхРеквизитахИСекциях);
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Организация", Элемент.Объект.Организация);
	СтруктураОбъекта.Вставить("БанковскийСчет", Элемент.Объект.БанковскийСчет);
	СтруктураОбъекта.Вставить("АвтоматическиПодставлятьДокументы", Элемент.Объект.АвтоматическиПодставлятьДокументы);
	СтруктураОбъекта.Вставить("АнализироватьИсториюВыбораЗначенийРеквизитов", Элемент.Объект.АнализироватьИсториюВыбораЗначенийРеквизитов);
	СтруктураОбъекта.Вставить("СтатьяДДСИсходящий", Элемент.Объект.СтатьяДДСИсходящий);
	СтруктураОбъекта.Вставить("СтатьяДДСВходящий", Элемент.Объект.СтатьяДДСВходящий);
	СтруктураОбъекта.Вставить("СпособЗачета", Элемент.Объект.СпособЗачета);
	
	КонтекстФормы.Вставить("Объект", СтруктураОбъекта);
	
	ФайлDBF = Новый XBase;
	ФайлDBF.Кодировка = КодировкаXBase.ANSI;
	
	ИмяНовогоФайла = КаталогВременныхФайлов() + "import.dbf";
	ПереместитьФайл(ФайлЗагрузки, ИмяНовогоФайла);
	
	Попытка
		ФайлDBF.ОткрытьФайл(ИмяНовогоФайла,,Истина); //Только для чтения
	Исключение
		Возврат ;
		//Возврат "Ошибка открытия файла " + ИмяВременногоФайла;
	КонецПопытки;
	
	Если НЕ ФайлDBF.Открыта() Тогда
		Возврат ;
		//Возврат "Ошибка открытия файла " + ИмяВременногоФайла;
	КонецЕсли;
		
	ФайлDBF.Первая();
	
	Пока НЕ ФайлDBF.ВКонце() Цикл
		ЗаполнитьСтроку(ДокументыКИмпорту, ФайлDBF, Неопределено);
		ФайлDBF.Следующая();
	КонецЦикла;
	
	ФайлDBF.ЗакрытьФайл();
	ПереместитьФайл(ИмяНовогоФайла, ФайлЗагрузки);
	
	НомерСтроки = 0;
	
	КоличествоНеНайденныхКонтрагентов = 0;
	КоличествоНеНайденныхРСчетов = 0;
	
	ПараметрыВыделенияКолонок = Новый Структура("ВыделитьКолонкуДокумент, ВыделитьКолонкуСуммаСписано, ВыделитьКолонкуСуммаПоступило, 
	|ВыделитьКолонкуКонтрагент, ВыделитьКолонкуДоговор, ВыделитьКолонкуРСКонтрагента, ВыделитьКолонкуВидОперации", 
	Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь);
	
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		Если (СтрокаДокумента.ПлательщикСчет = Элемент.Объект.БанковскийСчет.НомерСчета
			ИЛИ СтрокаДокумента.ПолучательСчет  = Элемент.Объект.БанковскийСчет.НомерСчета) 
			И ЗначениеЗаполнено(Элемент.Объект.БанковскийСчет.ВалютаДенежныхСредств)
			Тогда
			
			Элемент.БанковскийСчетНомер = Элемент.Объект.БанковскийСчет.НомерСчета;
			Элемент.БанковскийСчетВалюта = Элемент.Объект.БанковскийСчет.ВалютаДенежныхСредств;
			
			Обработки.СМП_КлиентБанк.РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, Неопределено,ПараметрыВыделенияКолонок, Элемент.Объект, ТаблицаТаблицДокументов, КонтекстФормы, Элемент.ПослеЗагрузкиВыписокВ1С);
			НомерСтроки = НомерСтроки + 1;
			СтрокаДокумента.НомерСтроки = НомерСтроки;
			
			Для каждого КолонкаИмпорта из ДокументыКИмпорту.Колонки Цикл
				Обработки.СМП_КлиентБанк.ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, КолонкаИмпорта.Имя, КолонкаИмпорта.Заголовок, ИмпортНеПустые);
			КонецЦикла;
			
			Если ТипЗнч(СтрокаДокумента.Контрагент)=Тип("Строка") ИЛИ
				ТипЗнч(СтрокаДокумента.СчетКонтрагента)=Тип("Строка") ИЛИ
				ТипЗнч(СтрокаДокумента.Договор)=Тип("Строка") Тогда
				
				Обработки.СМП_КлиентБанк.СписокНенайденных(СтрокаДокумента, Элемент.Объект.БанковскийСчет, ТаблицаКонтрагентов, КоличествоНеНайденныхКонтрагентов, КоличествоНеНайденныхРСчетов);
			КонецЕсли;
		Иначе
			//остальные помечаем для последующего удаления
			СтрокаДокумента.НомерСтроки = 0;
		КонецЕсли;
	КонецЦикла;
	
	//Удалим не нужные строки из таблицы
	Количество = ДокументыКИмпорту.количество()-1;
	Для й=0 по Количество Цикл
		Если ДокументыКИмпорту[Количество-й].НомерСтроки = 0 Тогда
			ДокументыКИмпорту.Удалить(Количество-й);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		СтрокаДокумента.НазначениеПлатежа = СокрЛП(СтрокаДокумента.НазначениеПлатежа);
		СтрокаДокумента.НомерКартинки = ?(ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок), 0, 1);
	КонецЦикла;
	
	Элемент.Объект.Загрузка.Очистить();
	Элемент.Объект.Загрузка.Загрузить(ДокументыКИмпорту);
	
	Элемент.Объект.ИмпортРасчетныеСчета.Очистить();
	Элемент.Объект.ИмпортРасчетныеСчета.Загрузить(РасчетныеСчетаКИмпорту);
	
КонецПроцедуры

// Обработчик чтения формата для конфигурации BASБухгалтерия
Функция Загрузить_Бух(ДокументыДляИмпорта,
						СтруктураДанныхИмпорта,
						ВыводитьСообщения,
						НомерСчета, 
						КодВалютыБанковскогоСчета, 
						Кодировка,
						Организация,
						Импорт_Заголовок,
						Импорт_РасчетныеСчета,
						ИмяВременногоФайла,
						СоздаватьНенайденныеЭлементы = Истина,
						СтекОповещений = Неопределено) Экспорт
	
	ДокументыКИмпорту = СоздатьТаблицуКИмпорту();
	
	РасчетныеСчетаКИмпорту = Импорт_РасчетныеСчета;
	
	Импорт_ВидыДокументов = Новый Массив;
	ДокументыДляИмпорта.Очистить();

	РасчетныеСчетаКИмпорту.Очистить();
	ДокументыКИмпорту.Очистить();
	
	ФайлDBF = Новый XBase;
	ФайлDBF.Кодировка = КодировкаXBase.ANSI;
	
	ИмяНовогоФайла = КаталогВременныхФайлов() + "import.dbf";
	ПереместитьФайл(ИмяВременногоФайла, ИмяНовогоФайла);
	
	Попытка
		ФайлDBF.ОткрытьФайл(ИмяНовогоФайла,,Истина); //Только для чтения
	Исключение
		Возврат Ложь;
		//Возврат "Ошибка открытия файла " + ИмяВременногоФайла;
	КонецПопытки;
	
	Если НЕ ФайлDBF.Открыта() Тогда
		Возврат Ложь;
		//Возврат "Ошибка открытия файла " + ИмяВременногоФайла;
	КонецЕсли;
	
	ФайлDBF.Первая();
	
	Пока НЕ ФайлDBF.ВКонце() Цикл
		ЗаполнитьСтроку(ДокументыКИмпорту, ФайлDBF, Неопределено);
		ФайлDBF.Следующая();
	КонецЦикла;
	
	ФайлDBF.ЗакрытьФайл();
	ПереместитьФайл(ИмяНовогоФайла, ИмяВременногоФайла);
	Импорт_Заголовок = Новый Структура;
	Импорт_Заголовок.Вставить("ДатаНачала", ТекущаяДата());
	Импорт_Заголовок.Вставить("ДатаКонца", Дата("20000101"));
	
	Для каждого СтрокаДокументов из ДокументыКИмпорту Цикл
		
		Если (СтрокаДокументов.ПлательщикСчет <> "" И СтрокаДокументов.ПлательщикСчет <> НомерСчета) и 
			(СтрокаДокументов.ПолучательСчет <> "" И СтрокаДокументов.ПолучательСчет <> НомерСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДокументов, СтрокаДокументов);
		ДатаВФормате = Формат(Дата(СтрокаДокументов.Дата), "ДФ=гг") + "-" + Формат(Дата(СтрокаДокументов.Дата), "ДФ=ММ") +
							"-" + Формат(Дата(СтрокаДокументов.Дата), "ДФ=дд");
		
		НоваяСтрокаДокументов.ДокументИД 			= СтрокаДокументов.Номер;
		НоваяСтрокаДокументов.ПлательщикМФО 		= СтрокаДокументов.ПлательщикБИК;
		НоваяСтрокаДокументов.ПлательщикОКПО 		= СтрокаДокументов.ПлательщикКПП;
		НоваяСтрокаДокументов.ПлательщикБанк 		= СтрокаДокументов.ПлательщикБанк1;
		НоваяСтрокаДокументов.ПолучательМФО 		= СтрокаДокументов.ПолучательБИК;
		НоваяСтрокаДокументов.ПолучательОКПО 		= СтрокаДокументов.ПолучательКПП;
		НоваяСтрокаДокументов.ПолучательБанк 		= СтрокаДокументов.ПолучательБанк1;
		НоваяСтрокаДокументов.ДатаПоступило 		= ДатаВФормате;
		НоваяСтрокаДокументов.ДатаСписано 			= ДатаВФормате;
		НоваяСтрокаДокументов.ДатаОтсылкиДок 		= ДатаВФормате;
		НоваяСтрокаДокументов.ДатаДок 				= ДатаВФормате;
		НоваяСтрокаДокументов.Дата 					= ДатаВФормате;
		
		Импорт_ВидыДокументов.Добавить(СтрокаДокументов.Операция);
		Импорт_Заголовок.ДатаНачала 				= Мин(Импорт_Заголовок.ДатаНачала, СтрокаДокументов.Дата);
		Импорт_Заголовок.ДатаКонца 					= Макс(Импорт_Заголовок.ДатаКонца, КонецДня(СтрокаДокументов.Дата));
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // РазобратьФайлИмпорта

Функция ЗаполнитьСтроку(ДокументыДляИмпорта, СтрокаФайла, ИмпортЗагружаемые)
	
	НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
	СуммаДок = СтрЗаменить(СтрЗаменить(СтрокаФайла.SUMMA," ",""), Символы.НПП, "");
	
	Если Число(СтрокаФайла.DK) = 0 Тогда // исходящий
		ВидДокумента							= "ПлатежноеПоручение";
		НоваяСтрокаДокументов.СуммаПоступило	= 0;
		НоваяСтрокаДокументов.ДатаСписано 		= СтрокаФайла.DT;
		НоваяСтрокаДокументов.СуммаСписано		= СуммаДок;
		НоваяСтрокаДокументов.ПлательщикСчет	= СокрЛП(Формат(СтрокаФайла.acccli,"ЧГ=0"));
		НоваяСтрокаДокументов.ПлательщикКПП		= СокрЛП(Формат(СтрокаФайла.okpocli,"ЧГ=0"));
		НоваяСтрокаДокументов.ПлательщикБИК		= СокрЛП(Формат(СтрокаФайла.mfocli,"ЧГ=0"));
		НоваяСтрокаДокументов.Получатель		= СокрЛП(СтрокаФайла.namecor);
		НоваяСтрокаДокументов.ПолучательСчет	= СокрЛП(Формат(СтрокаФайла.acccor,"ЧГ=0"));
		НоваяСтрокаДокументов.ПолучательКПП		= СокрЛП(Формат(СтрокаФайла.okpocor,"ЧГ=0"));
		НоваяСтрокаДокументов.ПолучательБИК		= СокрЛП(Формат(СтрокаФайла.mfocor,"ЧГ=0"));
		НоваяСтрокаДокументов.ПолучательБанк1	= СокрЛП(СтрокаФайла.bankcor);
	Иначе
		ВидДокумента							= "ПлатежноеТребование";
		НоваяСтрокаДокументов.СуммаПоступило	= СуммаДок;
		НоваяСтрокаДокументов.ДатаПоступило 	= СтрокаФайла.DT;
		НоваяСтрокаДокументов.СуммаСписано		= 0;
		НоваяСтрокаДокументов.ПолучательСчет	= СокрЛП(Формат(СтрокаФайла.acccli,"ЧГ=0"));
		НоваяСтрокаДокументов.ПолучательКПП		= СокрЛП(Формат(СтрокаФайла.okpocli,"ЧГ=0"));
		НоваяСтрокаДокументов.ПолучательБИК		= СокрЛП(Формат(СтрокаФайла.mfocli,"ЧГ=0"));
		НоваяСтрокаДокументов.Плательщик		= СокрЛП(СтрокаФайла.namecor);
		НоваяСтрокаДокументов.ПлательщикСчет	= СокрЛП(Формат(СтрокаФайла.acccor,"ЧГ=0"));
		НоваяСтрокаДокументов.ПлательщикКПП		= СокрЛП(Формат(СтрокаФайла.okpocor,"ЧГ=0"));
		НоваяСтрокаДокументов.ПлательщикБИК		= СокрЛП(Формат(СтрокаФайла.mfocor,"ЧГ=0"));
		НоваяСтрокаДокументов.ПлательщикБанк1	= СокрЛП(СтрокаФайла.bankcor);
	КонецЕсли;
	
	НоваяСтрокаДокументов.КодВалюты				= СтрокаФайла.val;
	НоваяСтрокаДокументов.НазначениеПлатежа 	= СтрЗаменить(СтрокаФайла.NAZN,Символы.ПС," ");
	НоваяСтрокаДокументов.Номер					= СокрЛП(СтрокаФайла.NDOC);
	НоваяСтрокаДокументов.Дата					= СтрокаФайла.DT;
	НоваяСтрокаДокументов.СуммаДокумента		= СуммаДок;
	НоваяСтрокаДокументов.Сумма					= СуммаДок;
	
	Если ВидДокумента <> Неопределено Тогда
		НоваяСтрокаДокументов.Операция = ВидДокумента;
		
	Иначе // по умолчанию: "Платежное поручение"
		
		ВидДокумента = "ПлатежноеПоручение";
		НоваяСтрокаДокументов.Операция = ВидДокумента;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ФорматФайла() Экспорт
	Возврат "dbf";
КонецФункции

Функция СоздатьТаблицуКИмпорту();
	
	ОписаниеЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ДокументыКИмпорту = Новый ТаблицаЗначений;
	ДокументыКИмпорту.Колонки.Добавить("СуммаПоступило", ОписаниеЧисло);
	ДокументыКИмпорту.Колонки.Добавить("ДатаСписано");
	ДокументыКИмпорту.Колонки.Добавить("СуммаСписано", ОписаниеЧисло);
	ДокументыКИмпорту.Колонки.Добавить("ПлательщикСчет");
	ДокументыКИмпорту.Колонки.Добавить("ПлательщикБИК");
	ДокументыКИмпорту.Колонки.Добавить("ПлательщикКПП");
	ДокументыКИмпорту.Колонки.Добавить("Получатель");
	ДокументыКИмпорту.Колонки.Добавить("ПолучательСчет");
	ДокументыКИмпорту.Колонки.Добавить("ПолучательКПП");
	ДокументыКИмпорту.Колонки.Добавить("ПолучательБИК");
	ДокументыКИмпорту.Колонки.Добавить("ПолучательБанк1");
	ДокументыКИмпорту.Колонки.Добавить("ДатаПоступило");
	ДокументыКИмпорту.Колонки.Добавить("Плательщик");
	ДокументыКИмпорту.Колонки.Добавить("ПлательщикБанк1");
	ДокументыКИмпорту.Колонки.Добавить("КодВалюты");
	ДокументыКИмпорту.Колонки.Добавить("НазначениеПлатежа");
	ДокументыКИмпорту.Колонки.Добавить("Номер");
	ДокументыКИмпорту.Колонки.Добавить("Дата");
	ДокументыКИмпорту.Колонки.Добавить("СуммаДокумента", ОписаниеЧисло);
	ДокументыКИмпорту.Колонки.Добавить("Сумма");
	ДокументыКИмпорту.Колонки.Добавить("Операция");
	
	Возврат ДокументыКИмпорту;
	
КонецФункции
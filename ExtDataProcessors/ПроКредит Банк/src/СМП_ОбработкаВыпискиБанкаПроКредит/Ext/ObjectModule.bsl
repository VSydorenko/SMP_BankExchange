
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Наименование = НСтр("ru='Обработка выписки банка ПроКредит';uk='Обробка виписки банка ПроКредит'");
	ПараметрыРегистрации.Информация = НСтр("ru='Обработка формата загрузки данных украинского банка ПроКредит';uk='Обробка формату завантаження даних українського банка ПроКредит'");
	ПараметрыРегистрации.Версия = "1.1";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

&НаСервере
Процедура Загрузить(Элемент, ФайлЗагрузки) Экспорт
	
	Элемент.ТаблицаКонтрагентов.ПолучитьЭлементы().Очистить();
	// Подготавливаем структуры обработки данных.
	ДокументыКИмпорту = Элемент.Объект.Загрузка.Выгрузить();
	ИмпортЗагружаемые = Элемент.СформироватьСоответствиеЗагружаемых();
	ИмпортНеПустые = Неопределено;
	ИмпортНеПустыеПлатежноеПоручение = Неопределено;
	ИмпортНеПустыеПлатежноеПоручениеБюджет = Неопределено;
	
	РасчетныеСчетаКИмпорту = Элемент.Объект.ИмпортРасчетныеСчета.Выгрузить();
	
	Элемент.СформироватьСоответствияНеПустыхПриИмпорте(
	ИмпортНеПустые,
	ИмпортНеПустыеПлатежноеПоручение,
	ИмпортНеПустыеПлатежноеПоручениеБюджет
	);
	ТегиРасчетногоСчета = Элемент.СоздатьСоответствиеИзСтроки(
	ВРег("ДатаНачала,ДатаКонца,РасчСчетОрг,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток,КонецРасчСчет")
	);
	ТегиЗаголовка = Элемент.СоздатьСоответствиеИзСтроки(
	ВРег("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца")
	);
	СтруктураЗаголовок = Новый Структура(
	ВРег("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца")
	);
	ИмпортЗаголовок = СтруктураЗаголовок;
	ИмпортПризнакОбмена = Ложь;
	НайденКонецФайла = Ложь;
	ИмпортВидыДокументов = Новый Массив;
	РасчетныеСчетаКИмпорту.Очистить();
	ДокументыКИмпорту.Очистить();
	
	ФайлTXT	= Новый ТекстовыйДокумент;
	ФайлTXT.Прочитать(ФайлЗагрузки, КодировкаТекста.ANSI); //Windows
		
	Результат = Новый Массив;
	
	Разделитель = ";";
	
	Если НЕ ФайлTXT.КоличествоСтрок() Тогда 
		Возврат;
	КонецЕсли;
	
	Для НомерСтроки = 2 По ФайлTXT.КоличествоСтрок() Цикл
		
		Результат.Очистить();
		
		ТекСтрока = ФайлTXT.ПолучитьСтроку(НомерСтроки);
		
		Строки = СтрЗаменить(ТекСтрока, Разделитель, Символы.ПС);		
		Для Индекс = 1 По СтрЧислоСтрок(Строки) Цикл
			Результат.Добавить(СтрПолучитьСтроку(Строки, Индекс));
		КонецЦикла;
		
			
		
		ЗаполнитьСтроку(ДокументыКИмпорту, Результат, ИмпортЗагружаемые); 		
		
	КонецЦикла;
		
	НомерСтроки = 0;
	
	КоличествоНеНайденныхКонтрагентов = 0;
	КоличествоНеНайденныхРСчетов = 0;
	
	ПараметрыВыделенияКолонок = Новый Структура("ВыделитьКолонкуДокумент, ВыделитьКолонкуСуммаСписано, ВыделитьКолонкуСуммаПоступило, 
	|ВыделитьКолонкуКонтрагент, ВыделитьКолонкуДоговор, ВыделитьКолонкуРСКонтрагента, ВыделитьКолонкуВидОперации", 
	Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь);
	
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		Если (СтрокаДокумента.ПлательщикСчет = Элемент.Объект.БанковскийСчет.НомерСчета
			ИЛИ СтрокаДокумента.ПолучательСчет  = Элемент.Объект.БанковскийСчет.НомерСчета) 
			И ЗначениеЗаполнено(Элемент.Объект.БанковскийСчет.ВалютаДенежныхСредств)
			Тогда
			
			Элемент.БанковскийСчетНомер = Элемент.Объект.БанковскийСчет.НомерСчета;
			Элемент.БанковскийСчетВалюта = Элемент.Объект.БанковскийСчет.ВалютаДенежныхСредств;
			
			Элемент.РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, ПараметрыВыделенияКолонок);
			НомерСтроки = НомерСтроки + 1;
			СтрокаДокумента.НомерСтроки = НомерСтроки;
			
			Для каждого КолонкаИмпорта из ДокументыКИмпорту.Колонки Цикл
				Элемент.ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, КолонкаИмпорта.Имя, КолонкаИмпорта.Заголовок, ИмпортНеПустые);
			КонецЦикла;
			
			Если ТипЗнч(СтрокаДокумента.Контрагент)=Тип("Строка") ИЛИ
				ТипЗнч(СтрокаДокумента.СчетКонтрагента)=Тип("Строка") ИЛИ
				ТипЗнч(СтрокаДокумента.Договор)=Тип("Строка") Тогда
				
				Обработки.КлиентБанк.СписокНенайденных(СтрокаДокумента, Элемент.Объект.БанковскийСчет, Элемент.ТаблицаКонтрагентов, КоличествоНеНайденныхКонтрагентов, КоличествоНеНайденныхРСчетов);
			КонецЕсли;
		Иначе
			//остальные помечаем для последующего удаления
			СтрокаДокумента.НомерСтроки = 0;
		КонецЕсли;
	КонецЦикла;
	
	//Удалим не нужные строки из таблицы
	Количество = ДокументыКИмпорту.количество()-1;
	Для й=0 по Количество Цикл
		Если ДокументыКИмпорту[Количество-й].НомерСтроки = 0 Тогда
			ДокументыКИмпорту.Удалить(Количество-й);
		КонецЕсли;
	КонецЦикла;
		
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		СтрокаДокумента.НазначениеПлатежа = СокрЛП(СтрокаДокумента.НазначениеПлатежа);
		СтрокаДокумента.НомерКартинки = ?(ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок), 0, 1);
	КонецЦикла;
	
	Элемент.Объект.Загрузка.Очистить();
	Элемент.Объект.Загрузка.Загрузить(ДокументыКИмпорту);
	
	Элемент.Объект.ИмпортРасчетныеСчета.Очистить();
	Элемент.Объект.ИмпортРасчетныеСчета.Загрузить(РасчетныеСчетаКИмпорту);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтроку(ДокументыДляИмпорта, СтрокаФайла, ИмпортЗагружаемые)
	
	
	
НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
	
	НоваяСтрокаДокументов.Номер				= СокрЛП(СтрокаФайла[11]);
	НоваяСтрокаДокументов.Дата				= Сред(СокрЛП(СтрокаФайла[4]), 1, 2) + "." + Сред(СокрЛП(СтрокаФайла[4]), 4, 2) + "." + Сред(СокрЛП(СтрокаФайла[4]), 7, 4);
	НоваяСтрокаДокументов.СуммаДокумента	= ?(СокрЛП(СтрокаФайла[13]) <> "",Число(СокрЛП(СтрокаФайла[13])), Число(СокрЛП(СтрокаФайла[14])));
	НоваяСтрокаДокументов.Сумма				= СтрЗаменить(Формат(НоваяСтрокаДокументов.СуммаДокумента, "ЧРГ=&"), "&", "");
	
	Если СокрЛП(СтрокаФайла[13]) <> "" Тогда // исходящий
		
		ВидДокумента	= "ПлатежноеПоручение";
		НоваяСтрокаДокументов.СуммаПоступило	= 0;
		НоваяСтрокаДокументов.ДатаСписано 		= Дата( Сред(СокрЛП(СтрокаФайла[4]), 7, 4) + Сред(СокрЛП(СтрокаФайла[4]), 4, 2)  + Сред(СокрЛП(СтрокаФайла[4]), 1, 2));
		НоваяСтрокаДокументов.СуммаСписано		= НоваяСтрокаДокументов.СуммаДокумента;
		НоваяСтрокаДокументов.ПлательщикСчет	= СокрЛП(СтрокаФайла[2]);
		НоваяСтрокаДокументов.ПлательщикКПП		= СокрЛП(СтрокаФайла[0]);
		НоваяСтрокаДокументов.ПлательщикБИК		= СокрЛП(СтрокаФайла[1]);
		НоваяСтрокаДокументов.Получатель		= СокрЛП(СтрокаФайла[10]);
		НоваяСтрокаДокументов.ПолучательСчет	= СокрЛП(СтрокаФайла[8]);
		НоваяСтрокаДокументов.ПолучательКПП		= СокрЛП(СтрокаФайла[9]);
		НоваяСтрокаДокументов.ПолучательБИК		= СокрЛП(СтрокаФайла[6]);
		НоваяСтрокаДокументов.ПолучательБанк1	= СокрЛП(СтрокаФайла[7]);
	Иначе
		ВидДокумента	= "ПлатежноеТребование";
		НоваяСтрокаДокументов.СуммаПоступило	= НоваяСтрокаДокументов.СуммаДокумента;
		НоваяСтрокаДокументов.ДатаПоступило 	= Дата( Сред(СокрЛП(СтрокаФайла[4]), 7, 4) + Сред(СокрЛП(СтрокаФайла[4]), 4, 2)  + Сред(СокрЛП(СтрокаФайла[4]), 1, 2));
		НоваяСтрокаДокументов.СуммаСписано		= 0;
		НоваяСтрокаДокументов.ПолучательСчет	= СокрЛП(СтрокаФайла[2]);
		НоваяСтрокаДокументов.ПолучательКПП		= СокрЛП(СтрокаФайла[0]);
		НоваяСтрокаДокументов.ПолучательБИК		= СокрЛП(СтрокаФайла[1]);
		НоваяСтрокаДокументов.Плательщик		= СокрЛП(СтрокаФайла[10]);
		НоваяСтрокаДокументов.ПлательщикСчет	= СокрЛП(СтрокаФайла[8]);
		НоваяСтрокаДокументов.ПлательщикКПП		= СокрЛП(СтрокаФайла[9]);
		НоваяСтрокаДокументов.ПлательщикБИК		= СокрЛП(СтрокаФайла[6]);
		НоваяСтрокаДокументов.ПлательщикБанк1	= СокрЛП(СтрокаФайла[7]);
	КонецЕсли;
	
	НоваяСтрокаДокументов.КодВалюты				= СокрЛП(СтрокаФайла[3]);
	НоваяСтрокаДокументов.НазначениеПлатежа		= СокрЛП(СтрокаФайла[15]);
	
	Если ВидДокумента <> Неопределено Тогда
		НоваяСтрокаДокументов.Операция = ВидДокумента;
		
	Иначе // по умолчанию: "Платежное поручение"
		
		ВидДокумента = "ПлатежноеПоручение";
		НоваяСтрокаДокументов.Операция = ВидДокумента;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции
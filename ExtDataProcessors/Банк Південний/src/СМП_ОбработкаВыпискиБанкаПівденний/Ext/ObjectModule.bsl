
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Наименование = НСтр("ru='Обработка выписки банка Південний';uk='Обробка виписки банка Південний'");
	ПараметрыРегистрации.Информация = НСтр("ru='Обработка формата загрузки данных украинского банка Південний';uk='Обробка формату завантаження даних українського банка Південний'");
	ПараметрыРегистрации.Версия = "1.1";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

&НаСервере
Процедура Загрузить(Элемент) Экспорт
		
	Элемент.ТаблицаКонтрагентов.ПолучитьЭлементы().Очистить();
	// Подготавливаем структуры обработки данных.
	ДокументыКИмпорту = Элемент.Объект.Загрузка.Выгрузить();
	ИмпортЗагружаемые = Элемент.СформироватьСоответствиеЗагружаемых();
	ИмпортНеПустые = Неопределено;
	ИмпортНеПустыеПлатежноеПоручение = Неопределено;
	ИмпортНеПустыеПлатежноеПоручениеБюджет = Неопределено;
	
	РасчетныеСчетаКИмпорту = Элемент.Объект.ИмпортРасчетныеСчета.Выгрузить();
	
	Элемент.СформироватьСоответствияНеПустыхПриИмпорте(
		ИмпортНеПустые,
		ИмпортНеПустыеПлатежноеПоручение,
		ИмпортНеПустыеПлатежноеПоручениеБюджет
	);
	ТегиРасчетногоСчета = Элемент.СоздатьСоответствиеИзСтроки(
		ВРег("ДатаНачала,ДатаКонца,РасчСчетОрг,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток,КонецРасчСчет")
	);
	ТегиЗаголовка = Элемент.СоздатьСоответствиеИзСтроки(
		ВРег("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца")
	);
	СтруктураЗаголовок = Новый Структура(
		ВРег("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца")
	);
	ИмпортЗаголовок = СтруктураЗаголовок;
	ИмпортПризнакОбмена = Ложь;
	НайденКонецФайла = Ложь;
	ИмпортВидыДокументов = Новый Массив;
	РасчетныеСчетаКИмпорту.Очистить();
	ДокументыКИмпорту.Очистить();
	
	ФайлXML = Новый ЧтениеXML;
	
	//Попытка
		ФайлXML.ОткрытьФайл(Элемент.Объект.ФайлЗагрузки);
	//Исключение
	//	ТекстСообщения = НСтр("ru='Ошибка открытия файла ';uk='Помилка відкриття файлу '") + Элемент.Объект.ФайлЗагрузки;
	//	УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(Элемент, ТекстСообщения);
	//	Возврат;
	//КонецПопытки;	
	
	Пока ФайлXML.Прочитать() Цикл
		ИмяТега = ВРег(СокрЛП(ФайлXML.Имя)); 
		
		//АТ_Прудников <20.06.2020>  +++
		Если ИмяТега = "ROW" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если НЕ ЗагрузитьСекциюДокументаXMLROW(ДокументыКИмпорту, ФайлXML, ИмпортЗагружаемые) Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли ИмяТега = "ROW" И ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Продолжить;
		//АТ_Прудников <20.06.2020>  ---
		
		ИначеЕсли ИмяТега="ROWDATA" И ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента  Тогда
			Если НЕ ИмпортПризнакОбмена Тогда
				ТекстСообщения = НСтр("ru='В файле импорта отсутствует признак обмена ""_1CClientBankExchange""!';uk='У файлі імпорту відсутній признак обміну ""_1CClientBankExchange""!'");
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(Элемент, ТекстСообщения);
				Возврат;
			КонецЕсли;
			
			НайденКонецФайла = Истина;
			НомерСтроки = 0;
			
			КоличествоНеНайденныхКонтрагентов = 0;
			КоличествоНеНайденныхРСчетов = 0;

			ПараметрыВыделенияКолонок = Новый Структура("ВыделитьКолонкуДокумент, ВыделитьКолонкуСуммаСписано, ВыделитьКолонкуСуммаПоступило, 
			|ВыделитьКолонкуКонтрагент, ВыделитьКолонкуДоговор, ВыделитьКолонкуРСКонтрагента, ВыделитьКолонкуВидОперации", 
			Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь);
			
			Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
				Если (СтрокаДокумента.ПлательщикСчет = Элемент.Объект.БанковскийСчет.НомерСчета
					ИЛИ СтрокаДокумента.ПолучательСчет  = Элемент.Объект.БанковскийСчет.НомерСчета) 
					   И (Не ЗначениеЗаполнено(Элемент.Объект.БанковскийСчет.ВалютаДенежныхСредств) 
					   		ИЛИ Элемент.Объект.БанковскийСчет.ВалютаДенежныхСредств.Код = СтрокаДокумента.КодВалюты)
						Тогда
						
					Элемент.БанковскийСчетНомер = Элемент.Объект.БанковскийСчет.НомерСчета;
					Элемент.БанковскийСчетВалюта = Элемент.Объект.БанковскийСчет.ВалютаДенежныхСредств;

					Элемент.РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, ПараметрыВыделенияКолонок);
					НомерСтроки = НомерСтроки + 1;
					СтрокаДокумента.НомерСтроки = НомерСтроки;
					Для каждого КолонкаИмпорта из ДокументыКИмпорту.Колонки Цикл
						Элемент.ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, КолонкаИмпорта.Имя, КолонкаИмпорта.Заголовок, ИмпортНеПустые);
					КонецЦикла;
					
					Если ТипЗнч(СтрокаДокумента.Контрагент)=Тип("Строка") ИЛИ
						ТипЗнч(СтрокаДокумента.СчетКонтрагента)=Тип("Строка") ИЛИ
						ТипЗнч(СтрокаДокумента.Договор)=Тип("Строка") Тогда
						
						Обработки.КлиентБанк.СписокНенайденных(СтрокаДокумента, Элемент.Объект.БанковскийСчет, Элемент.ТаблицаКонтрагентов, КоличествоНеНайденныхКонтрагентов, КоличествоНеНайденныхРСчетов);
					КонецЕсли;
				Иначе
					//остальные помечаем для последующего удаления
					СтрокаДокумента.НомерСтроки = 0;					
				КонецЕсли;
			КонецЦикла;
			
			//Удалим не нужные строки из таблицы
			Количество = ДокументыКИмпорту.количество()-1;
			Для й=0 по Количество Цикл
				Если ДокументыКИмпорту[Количество-й].НомерСтроки = 0 Тогда
					ДокументыКИмпорту.Удалить(Количество-й);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ИмяТега="ROWDATA" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента  Тогда
			ИмпортПризнакОбмена = Истина;
						
		Иначе
			
			Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ФайлXML.Прочитать();	
				Значение = ФайлXML.Значение;
			КонецЕсли;	
			
			//ЗагрузитьСтрокуЗаголовкаXML(ИмяТега, Значение, ТегиЗаголовка, ИмпортЗаголовок);
			
			Если ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
				ФайлXML.Прочитать();	
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ НайденКонецФайла Тогда
		РасчетныеСчетаКИмпорту.Очистить();
		ДокументыКИмпорту.Очистить();
		ТекстСообщения = НСтр("ru='Файл загрузки не соответствует стандарту (не найдена секция КонецФайла)!';uk='Файл завантаження не відповідає стандарту (не знайдена секція КонецФайла)!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(Элемент, ТекстСообщения);
	КонецЕсли;
	
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		СтрокаДокумента.НазначениеПлатежа = СокрЛП(СтрокаДокумента.НазначениеПлатежа);
		СтрокаДокумента.НомерКартинки = ?(ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок), 0, 1);
	КонецЦикла;
	
	Элемент.Объект.Загрузка.Очистить();
	Элемент.Объект.Загрузка.Загрузить(ДокументыКИмпорту);
	
	Элемент.Объект.ИмпортРасчетныеСчета.Очистить();
	Элемент.Объект.ИмпортРасчетныеСчета.Загрузить(РасчетныеСчетаКИмпорту);

КонецПроцедуры

&НаСервере
Функция ЗагрузитьСекциюДокументаXMLROW(ДокументыДляИмпорта, ФайлXML, ИмпортЗагружаемые)
	
	НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
	НоваяСтрокаДокументов.Номер				= ФайлXML.ПолучитьАтрибут("DOCUMENTNO");
	НоваяСтрокаДокументов.Дата				= Сред(ФайлXML.ПолучитьАтрибут("DOCUMENTDATE"), 7, 2) + "." + Сред(ФайлXML.ПолучитьАтрибут("DOCUMENTDATE"), 5, 2) + "." + Сред(ФайлXML.ПолучитьАтрибут("DOCUMENTDATE"), 1, 4);
	НоваяСтрокаДокументов.СуммаДокумента	= Число(ФайлXML.ПолучитьАтрибут("SUMMA")) / 100;
	НоваяСтрокаДокументов.Сумма				= СтрЗаменить(Формат(НоваяСтрокаДокументов.СуммаДокумента, "ЧРГ=&"), "&", "");
	
	Если ФайлXML.ПолучитьАтрибут("OPERATIONID") = "0" Тогда // исходящий
		
		ВидДокумента	= "ПлатежноеПоручение";
		НоваяСтрокаДокументов.СуммаПоступило	= 0;
		НоваяСтрокаДокументов.ДатаСписано 		= Сред(ФайлXML.ПолучитьАтрибут("DOCUMENTDATE"), 7, 2) + "." + Сред(ФайлXML.ПолучитьАтрибут("DOCUMENTDATE"), 5, 2) + "." + Сред(ФайлXML.ПолучитьАтрибут("DOCUMENTDATE"), 1, 4);
		НоваяСтрокаДокументов.СуммаСписано		= НоваяСтрокаДокументов.СуммаДокумента;
		НоваяСтрокаДокументов.ПлательщикСчет	= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("IBAN"),"ЧГ=0"));
		НоваяСтрокаДокументов.ПлательщикКПП		= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("IDENTIFYCODE"),"ЧГ=0"));
		НоваяСтрокаДокументов.ПлательщикБИК		= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("BANKID"),"ЧГ=0"));
		НоваяСтрокаДокументов.Получатель		= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("CORRCONTRAGENTSNAME"),"ЧГ=0"));
		НоваяСтрокаДокументов.ПолучательСчет	= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("CORRIBAN"),"ЧГ=0"));
		НоваяСтрокаДокументов.ПолучательКПП		= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("CORRIDENTIFYCODE"),"ЧГ=0"));
		НоваяСтрокаДокументов.ПолучательБИК		= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("CORRBANKID"),"ЧГ=0"));
		НоваяСтрокаДокументов.ПолучательБанк1	= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("CORRBANKNAME"),"ЧГ=0"));
	Иначе
		ВидДокумента	= "ПлатежноеТребование";
		НоваяСтрокаДокументов.СуммаПоступило	= НоваяСтрокаДокументов.СуммаДокумента;
		НоваяСтрокаДокументов.ДатаПоступило 	= Сред(ФайлXML.ПолучитьАтрибут("DOCUMENTDATE"), 7, 2) + "." + Сред(ФайлXML.ПолучитьАтрибут("DOCUMENTDATE"), 5, 2) + "." + Сред(ФайлXML.ПолучитьАтрибут("DOCUMENTDATE"), 1, 4);
		НоваяСтрокаДокументов.СуммаСписано		= 0;
		НоваяСтрокаДокументов.ПолучательСчет	= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("IBAN"),"ЧГ=0"));
		НоваяСтрокаДокументов.ПолучательКПП		= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("IDENTIFYCODE"),"ЧГ=0"));
		НоваяСтрокаДокументов.ПолучательБИК		= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("BANKID"),"ЧГ=0"));
		НоваяСтрокаДокументов.Плательщик		= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("CORRCONTRAGENTSNAME"),"ЧГ=0"));
		НоваяСтрокаДокументов.ПлательщикСчет	= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("CORRIBAN"),"ЧГ=0"));
		НоваяСтрокаДокументов.ПлательщикКПП		= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("CORRIDENTIFYCODE"),"ЧГ=0"));
		НоваяСтрокаДокументов.ПлательщикБИК		= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("CORRBANKID"),"ЧГ=0"));
		НоваяСтрокаДокументов.ПлательщикБанк1	= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("CORRBANKNAME"),"ЧГ=0"));
	КонецЕсли;
	
	НоваяСтрокаДокументов.КодВалюты				= ФайлXML.ПолучитьАтрибут("CURRENCYID");
	НоваяСтрокаДокументов.НазначениеПлатежа		= СтрЗаменить(ФайлXML.ПолучитьАтрибут("PLATPURPOSE"),Символы.ПС," ");
	
	Если ВидДокумента <> Неопределено Тогда
		НоваяСтрокаДокументов.Операция = ВидДокумента;
		
	Иначе // по умолчанию: "Платежное поручение"
		
		ВидДокумента = "ПлатежноеПоручение";
		НоваяСтрокаДокументов.Операция = ВидДокумента;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция Загрузить(КонтекстФормы) Экспорт
	
	ДокументыКИмпорту = КонтекстФормы.ДокументыКИмпорту;
	ТаблицаРезультата =  КонтекстФормы.ТаблицаРезультата;
	ИмпортЗаголовок = КонтекстФормы.ИмпортЗаголовок;
	ТаблицаПомеченныхНаУдалениеКакДубль = КонтекстФормы.ТаблицаПомеченныхНаУдалениеКакДубль;
	ИмпортРасчетныеСчета = КонтекстФормы.Объект.ИмпортРасчетныеСчета;
	НеУдалятьДокументыКоторыхНетВВыписке = КонтекстФормы.Объект.НеУдалятьДокументыКоторыхНетВВыписке;
	ДанныеОбъекта = КонтекстФормы.Объект;
	
	Результат = Новый Структура;
	Результат.Вставить("ОбработкаПрервана", Ложь);
	Результат.Вставить("ТекстСообщения", "");
	
	ДанныеЗагрузки = Новый Структура;
	ДанныеЗагрузки.Вставить("ЕстьПредупреждения", Ложь);
	ДанныеЗагрузки.Вставить("ОбработаноСтрок", 0);
	ДанныеЗагрузки.Вставить("ТекстСообщения", "");
	ДанныеЗагрузки.Вставить("ВсегоСтрок", ДокументыКИмпорту.Количество());
	
	// Будем сохранять информацию о созданных во время загрузки контрагентах в отдельной таблице
	// и использовать ее, чтобы не создавать контрагентов повторно.
	ТаблицаОбъектовСозданныхПриЗагрузке = СоздатьСтруктуруТаблицыОбъектовСозданныхПриЗагрузке();
	ДатыЗагрузкиСписок = Новый СписокЗначений;
	
	НачалоИнтервалаЗагрузки = Дата("00010101");
	КонецИнтервалаЗагрузки  = Дата("00010101");
	ДокументыКИмпорту.Индексы.Добавить("Документ");
	
	НачалоИнтервала = ПолучитьДатуИзСтроки(НачалоИнтервалаЗагрузки, ИмпортЗаголовок.ДатаНачала);
	Если НЕ ЗначениеЗаполнено(НачалоИнтервала) Тогда
		Результат.ОбработкаПрервана = Истина;
		ТекстСообщения  = НСтр("ru = 'В заголовке файла загрузки неверно указана дата начала интервала! Файл не может быть загружен!'; uk = 'У заголовку файлу завантаження невірно вказана дата початку інтервалу! Файл не може бути завантажений!'");
		Результат.ТекстСообщения = ТекстСообщения;
		Возврат Результат;
	КонецЕсли;
	
	КонецИнтервала = ПолучитьДатуИзСтроки(КонецИнтервалаЗагрузки, ИмпортЗаголовок.ДатаКонца);
	Если НЕ ЗначениеЗаполнено(КонецИнтервала) Тогда
		ТекстСообщения = НСтр("ru = 'В заголовке файла импорта неверно указана дата окончания интервала!'; uk = 'У заголовку файлу імпорту невірно вказана дата закінчення інтервалу!'");
		Результат.ТекстСообщения = ТекстСообщения;
	КонецЕсли;
	
	// Загружаем отмеченные секции документов.
	Для каждого СтрокаСекции Из ДокументыКИмпорту Цикл
		Если СтрокаСекции.Загружать Тогда
			ЗагрузитьСтроку(ДанныеЗагрузки.ЕстьПредупреждения, СтрокаСекции, ДанныеОбъекта, ТаблицаРезультата, ТаблицаОбъектовСозданныхПриЗагрузке, Ложь);
			ДанныеЗагрузки.ОбработаноСтрок = ДанныеЗагрузки.ОбработаноСтрок + 1;
		Иначе
			ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru = 'Пропущен, не загружается'; uk = 'Пропущено, не завантажується'"), Ложь, Ложь, НСтр("ru = '• Пропущен, не загружается'; uk = '• Пропущено, не завантажується'"), "");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСекции.Дата) Тогда
			ДатыЗагрузкиСписок.Добавить(НачалоДня(СтрокаСекции.ДатаДок));
		КонецЕсли;
	КонецЦикла;
	
	// Платежные поручения исходящие, отсутствующие в списке загруженным помечаем
	// на удаление.
	Если НЕ НеУдалятьДокументыКоторыхНетВВыписке Тогда
		СинхронизироватьДокументыПоСчетам(
			ДокументыКИмпорту,
			"РасходСоСчета",
			"ПоступлениеНаСчет",
			ДатыЗагрузкиСписок,
			ИмпортРасчетныеСчета,
			ТаблицаРезультата,
			ТаблицаПомеченныхНаУдалениеКакДубль,
			ДанныеОбъекта
		);
	КонецЕсли;
	
	ДанныеЗагрузки.Вставить("СообщенияПользователю", ПолучитьСообщенияПользователю());
	
	Результат.Вставить("ДанныеЗагрузки", ДанныеЗагрузки);
	Результат.Вставить("ТаблицаРезультата", ТаблицаРезультата);
	Результат.Вставить("ТаблицаПомеченныхНаУдалениеКакДубль", ТаблицаПомеченныхНаУдалениеКакДубль);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#КонецЕсли

#Область ЗагрузкаБанковскойВыписки

Процедура ЗагрузитьСтроку(ЕстьПредупреждения, СтрокаСекции, ДанныеОбъекта, ТаблицаРезультата = Неопределено, ТаблицаОбъектовСозданныхПриЗагрузке = Неопределено, ВыдаватьСообщения = Истина)
	
	// Загружаем отмеченные секции документов.
	РезультатПроверки = ПроверитьДокументДляЗагрузки(СтрокаСекции);
	Если НЕ ПустаяСтрока(РезультатПроверки) Тогда
		ТекстСообщения = НСтр(
			"ru = 'По документу ""%Операция%"" №%Номер% от %Дата% есть предупреждения:
             |%РезультатПроверки%!'; uk = 'За документом ""%Операция% "" №%Номер% від %Дата% є попередження:
             |%РезультатПроверки%!'"
		);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Операция%", СтрокаСекции.Операция);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаСекции.Номер);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Дата%", СтрокаСекции.Дата);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатПроверки%", РезультатПроверки);
		Если ВыдаватьСообщения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru = 'Комментарий'; uk = 'Коментар'"), Ложь, Ложь, "", ТекстСообщения, , 1);
		ЕстьПредупреждения = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
		
		// В ИБ не найден документ, необходимо создать новый.
		ОбъектДокумента = Документы[СтрокаСекции.ВидДокумента].СоздатьДокумент();
		ЭтоНовыйДокумент = Истина;
		
	Иначе
		
		// В ИБ найден документ, необходимо получить его объект.
		ОбъектДокумента = СтрокаСекции.Документ.ПолучитьОбъект();
		ЭтоНовыйДокумент = Ложь;
		
	КонецЕсли;
	
	// Заполняем все реквизиты документа.
	Если НЕ (СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета
			ИЛИ СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет
			ИЛИ СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными
			ИЛИ СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных
			)
		Тогда
		
		// Создадим контрагента, р/счет и договор, если это необходимо.
		Если (ТипЗнч(СтрокаСекции.Контрагент) = Тип("Строка")) И 
			((СтрокаСекции.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаСекции.ДействиеСКонтрагентом)) Тогда
			
			СтруктураКонтрагентИРСчет = СоздатьНовогоКонтрагентаПриЗагрузке(ТаблицаОбъектовСозданныхПриЗагрузке, СтрокаСекции, ДанныеОбъекта);
			Если ЗначениеЗаполнено(СтруктураКонтрагентИРСчет) И ЗначениеЗаполнено(СтруктураКонтрагентИРСчет.Контрагент) Тогда
				СтрокаСекции.Контрагент = СтруктураКонтрагентИРСчет.Контрагент;
				СтрокаСекции.Договор = СтруктураКонтрагентИРСчет.Договор;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если контрагент известен, то создадим расчетный счет и договор, если это необходимо.
		Если ТипЗнч(СтрокаСекции.Контрагент) = Тип("СправочникСсылка.Контрагенты") И НЕ СтрокаСекции.Контрагент.Пустая() Тогда
			
			// Создадим р/счет.
			Если //ТипЗнч(СтрокаСекции.СчетКонтрагента) = Тип("Строка") И
				(СтрокаСекции.ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С 
				ИЛИ (НЕ ЗначениеЗаполнено(СтрокаСекции.ДействиеСоСчетомКонтрагента) И ТипЗнч(СтрокаСекции.СчетКонтрагента) = Тип("Строка"))) Тогда
				
				СтруктураДанных = ПолучитьСтруктуруДанныхРасчетногоСчета(СтрокаСекции, ДанныеОбъекта);
				
				СтруктураПоиска = Новый Структура("КонтрагентСсылка, СчетКонтрагента", СтрокаСекции.Контрагент, СтруктураДанных.Счет);
				МассивСтрок = ТаблицаОбъектовСозданныхПриЗагрузке.НайтиСтроки(СтруктураПоиска);
				
				Если МассивСтрок.Количество() > 0 Тогда // Нашли ранее созданный счет контрагента.
					
					Для каждого СтрокаМассива Из МассивСтрок Цикл
						Если НЕ СтрокаМассива.ДоговорСсылка.Пустая() Тогда
							СтрокаСекции.СчетКонтрагента = СтруктураКонтрагентИРСчет.СчетКонтрагента;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					
					СтруктураДанных.Вставить("СоздаватьРСчет", Истина);
					СтруктураДанных.Вставить("Контрагент", СтрокаСекции.Контрагент);
					
					СчетКонтрагента = Обработки.СМП_КлиентБанк.СоздатьРасчетныйСчетПоСтуктуреДанных(СтруктураДанных);
					Если ЗначениеЗаполнено(СчетКонтрагента) Тогда
						СтрокаСекции.СчетКонтрагента = СчетКонтрагента;
						
						НоваяСтрока = ТаблицаОбъектовСозданныхПриЗагрузке.Добавить();
						НоваяСтрока.КонтрагентСсылка = СтрокаСекции.Контрагент;
						НоваяСтрока.СчетКонтрагентаСсылка = СчетКонтрагента;
						НоваяСтрока.СчетКонтрагента = СтруктураДанных.Счет;
						НоваяСтрока.ТипСтроки = 3;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			// Создадим договор.
			// Договор нужно будет создавать только в случае, когда у контрагента нет не помеченного на удаление основного договора.
			// Созданный договор нужно будет сохранить в таблице созданных элементов и искать его в будущем.
			Если (СтрокаСекции.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаСекции.ДействиеСДоговором))
				И ТипЗнч(СтрокаСекции.Договор) = Тип("Строка") Тогда
				
				СтруктураПоиска = Новый Структура("КонтрагентСсылка, Договор", СтрокаСекции.Контрагент, СтрокаСекции.Договор);
				МассивСтрок = ТаблицаОбъектовСозданныхПриЗагрузке.НайтиСтроки(СтруктураПоиска);
				
				Если МассивСтрок.Количество() > 0 Тогда // Нашли ранее созданный договор по умолчанию.
					
					Для каждого СтрокаМассива Из МассивСтрок Цикл
						Если НЕ СтрокаМассива.ДоговорСсылка.Пустая() Тогда
							СтрокаСекции.Договор = СтрокаМассива.ДоговорСсылка;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
				
					СтруктураДанных = Новый Структура;
					СтруктураДанных.Вставить("Контрагент", СтрокаСекции.Контрагент);
					ДополнитьСтруктуруДаннымиДоговора(СтруктураДанных);
					
					Договор = Обработки.СМП_КлиентБанк.СоздатьДоговорПоСтруктуреДанных(СтруктураДанных);
					Если ЗначениеЗаполнено(Договор) Тогда
						СтрокаСекции.Договор = Договор;
						
						НоваяСтрока = ТаблицаОбъектовСозданныхПриЗагрузке.Добавить();
						НоваяСтрока.КонтрагентСсылка = СтрокаСекции.Контрагент;
						НоваяСтрока.ДоговорСсылка = Договор;
						НоваяСтрока.ТипСтроки = 2;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Заполним реквизиты документа в соответствии с его видом.
	СтрокаИзмененныхРеквизитов = "";
	ТипДокумента = ОбъектДокумента.Метаданные().Имя;
	Если ТипДокумента = "РасходСоСчета" Тогда
		ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов, ДанныеОбъекта);
	ИначеЕсли ТипДокумента = "ПоступлениеНаСчет" Тогда
		ЗаполнитьРеквизитыПоступлениеНаСчет(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов, ДанныеОбъекта);
	КонецЕсли;
	ОбъектДокумента.БанковскаяОперация = СтрокаСекции.Операция;
	
	// Зададим пометку на удаление.
	Если ОбъектДокумента.ПометкаУдаления Тогда
		ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь, ТаблицаРезультата, СтрокаСекции);
	КонецЕсли;
	
	// Заполним комментарий.
	Если СтрокаСекции.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента Тогда
		Если Не ПустаяСтрока(ОбъектДокумента.Комментарий) Тогда
			ОбъектДокумента.Комментарий = ОбъектДокумента.Комментарий + Символы.ПС;
		КонецЕсли;
		ОбъектДокумента.Комментарий = ОбъектДокумента.Комментарий + СтрокаСекции.ТекстДокумента;
	КонецЕсли;
	
	// Запишем объект.
	ЗаписатьОбъект(ОбъектДокумента, ДанныеОбъекта, СтрокаСекции, ЭтоНовыйДокумент, ТаблицаРезультата, ЕстьПредупреждения, ВыдаватьСообщения, СтрокаИзмененныхРеквизитов);
	
	// Обновим информацию о документе в таблице импорта.
	Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
			СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
			Если СтрокаСекции.ВидДокумента = "РасходСоСчета" Тогда
				РеквизитДаты = "ДатаОплаты";
				РеквизитНомера = "Номер";
			Иначе
				РеквизитДаты = "ДатаВходящегоДокумента";
				РеквизитНомера = "НомерВходящегоДокумента";
			КонецЕсли;
			СтрокаСекции.НомерДок = ОбъектДокумента[РеквизитНомера];
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры // Загрузить()

Функция СоздатьСтруктуруТаблицыОбъектовСозданныхПриЗагрузке()
	
	ТаблицаОбъектовСозданныхПриЗагрузке = Новый ТаблицаЗначений;
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("ТипСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("СчетКонтрагента", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("Договор", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("СчетКонтрагентаСсылка", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("КонтрагентСсылка", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("ДоговорСсылка", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	Возврат ТаблицаОбъектовСозданныхПриЗагрузке;
	
КонецФункции

Процедура ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаТаблицы, Состояние, ЭтоНовый, Загружен, СписокДействий, 
	Комментарий, Документ = Неопределено, Важность = 0, СтрокаИзмененныхРеквизитов = "")
	
	Если ТаблицаРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ложь Тогда ТаблицаРезультата = Новый ТаблицаЗначений КонецЕсли; // УДАЛИТЬ СТРОКУ!!!
	
	ДокументСтрока = СтрокаТаблицы.ИмяДокумента + НСтр("ru = ' №'; uk = ' №'") + СтрокаТаблицы.Номер + НСтр("ru = ' от '; uk = ' від '") + СтрокаТаблицы.Дата;
	
	МаксВажность = Важность;
	
	// Обработаем комментарии (
	// Строк с комментариями может быть несколько.
	МассивСтрок = ТаблицаРезультата.НайтиСтроки(Новый Структура("Документ, Состояние, Важность", ДокументСтрока, Состояние, Важность));
	ИтоговыйКомментарий = "";
	Если МассивСтрок.Количество() > 0 Тогда
		Для Каждого ЭлементМассива Из МассивСтрок Цикл
			МаксВажность = Макс(МаксВажность, ЭлементМассива.Важность);
			Если ИтоговыйКомментарий = "" Тогда
				ИтоговыйКомментарий = ЭлементМассива.Комментарий;
			Иначе
				ИтоговыйКомментарий = ИтоговыйКомментарий + Символы.ПС + ЭлементМассива.Комментарий;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИтоговыйКомментарий = "" Тогда
		ИтоговыйКомментарий = Комментарий;
	Иначе
		ИтоговыйКомментарий = ИтоговыйКомментарий + Символы.ПС + Комментарий;
	КонецЕсли;
	
	Если СтрокаИзмененныхРеквизитов <> "" Тогда
		Если ИтоговыйКомментарий = "" Тогда
			ИтоговыйКомментарий = СтрокаИзмененныхРеквизитов;
		Иначе
			ИтоговыйКомментарий = ИтоговыйКомментарий + Символы.ПС + СтрокаИзмененныхРеквизитов;
		КонецЕсли;
	КонецЕсли;
	// ) Обработаем комментарии
	
	СтрокаРезультата = ТаблицаРезультата.Добавить();
	
	СтрокаРезультата.СтрокаИзмененныхРеквизитов = СтрокаИзмененныхРеквизитов;
	СтрокаРезультата.Важность = МаксВажность;
	СтрокаРезультата.Комментарий = ИтоговыйКомментарий;
	СтрокаРезультата.Состояние = Состояние;
	СтрокаРезультата.Документ = ДокументСтрока;
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
		СтрокаРезультата.Сумма = СтрокаТаблицы.СуммаДокумента;
	Иначе
		СтрокаРезультата.ДокументСсылка = СтрокаТаблицы.Документ;
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.Документ, "ВидОперации, СуммаДокумента");
		СтрокаРезультата.ВидОперации = ДанныеДокумента.ВидОперации;
		СтрокаРезультата.Сумма = ДанныеДокумента.СуммаДокумента;
	КонецЕсли;
	
	СтрокаРезультата.Записывался = Загружен;
	СтрокаРезультата.СозданНовый = ЭтоНовый;
	
	Если ЭтоНовый И Не ЗначениеЗаполнено(СписокДействий) Тогда
		
		СтрокаРезультата.Действия = НСтр("ru = '• Создан новый документ'; uk = '• Створено новий документ'");
		
	Иначе
		Если ТипЗнч(СписокДействий) = Тип("Массив") Тогда
			ПерваяСтрока = Истина;
			Для Каждого Действие Из СписокДействий Цикл
				
				СтрокаРезультата.Действия = СтрокаРезультата.Действия + ?(ПерваяСтрока, "",Символы.ПС) + "• " + Действие;
				ПерваяСтрока = Ложь;
				
			КонецЦикла;
		Иначе
			СтрокаРезультата.Действия = СписокДействий;
		КонецЕсли;
	КонецЕсли;
	
	СчКолвоСтрок = МассивСтрок.Количество() - 1;
	Пока СчКолвоСтрок >= 0 Цикл
		ЭлементМассива = МассивСтрок[СчКолвоСтрок];
		ТаблицаРезультата.Удалить(ЭлементМассива);
		СчКолвоСтрок = СчКолвоСтрок - 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура СинхронизироватьДокументыПоСчетам(ДокументыКИмпорту, ВидДокументовИсходящих, ВидДокументовВходящих, ДатыЗагрузкиСписок, ИмпортРасчетныеСчета, ТаблицаРезультата, ТаблицаПомеченныхНаУдалениеКакДубль, ДанныеОбъекта)
	
	ИспользоватьГраницуОбработки = ДанныеОбъекта.ИспользоватьГраницуОбработки;
	ДатаГраницыОбработки = ДанныеОбъекта.ДатаГраницыОбработки;
	
	// Возможна следующая ситуация. Из клиент-банка выгружается определенный период, но не все выписки, а только некоторые.
	// Потом за тот же период выгружается еще одна порция, уже другие выписки.
	// Если искать документы для удаления используя период, то все документы из первой порции будут помечены на удаление,
	// т.к. их нет в загружаемых данных. В этом случае пользователь будет ожидать, что добавятся новые выписки и старые
	// сохранятся, но этого не происходит, старые удаляются.
	// Чтобы учесть этот сценарий, будем анализировать документы за список дат, а не за период.
	
	// Составляем список счетов.
	СписокСчетов = Новый СписокЗначений;
	Для каждого СтрокаСчета Из ИмпортРасчетныеСчета Цикл
		СписокСчетов.Добавить(СокрЛП(СтрокаСчета.РасчСчет));
	КонецЦикла;
	
	ДокументыНаУдаление = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	" + ВидДокументовИсходящих + ".Ссылка,
	|	" + ВидДокументовИсходящих + ".Дата КАК Дата,
	|	" + ВидДокументовИсходящих + ".СуммаДокумента КАК Сумма,
	|	" + ВидДокументовИсходящих + ".ВидОперации,
	|	" + ВидДокументовИсходящих + ".БанковскийСчет.НомерСчета КАК НомерСчета
	|ИЗ
	|	Документ." + ВидДокументовИсходящих + " КАК " + ВидДокументовИсходящих + "
	|ГДЕ
	// Контроль остатка ДС на счете пользователь сможет выполнить в форме обработки.
	|		НачалоПериода(" + ВидДокументовИсходящих + ".ДатаВходящегоДокумента, День) В (&ДатыЗагрузкиСписок)
	| И НЕ " + ВидДокументовИсходящих + ".ПометкаУдаления
	| И " + ВидДокументовИсходящих + ".БанковскийСчет.НомерСчета В(&НомераСчетов)");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатыЗагрузкиСписок", ДатыЗагрузкиСписок);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов", СписокСчетов);
	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ДатаГраницыОбработки) Тогда
						ТекстСообщения = НСтр("ru = 'Платежный документ ""%ОбъектДокументаКУдаление%"" не помечен на удаление, так как имеет дату равной или меньшей границы обработки!'; uk = 'Платіжний документ ""%ОбъектДокументаКУдаление%"" не позначений на видалення, оскільки має дату рівну або меншу межі обробки!'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектДокументаКУдаление%", ОбъектДокументаКУдаление);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ОперацияВыполнена = ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
			
			// Добавим информацию о помеченных на удаление документа в отдельную таблицу, 
			// которую потом выведем в протокол.
			НоваяСтрока = ТаблицаПомеченныхНаУдалениеКакДубль.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДокументов);
			НоваяСтрока.ДокументСсылка = ВыборкаДокументов.Ссылка;
			НоваяСтрока.ОперацияВыполнена = ОперацияВыполнена;
		КонецЕсли;
	КонецЦикла;
	
	// Поступления на счет, отсутствующие в списке загруженным помечаем
	// на удаление.
	ДокументыНаУдаление = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	" + ВидДокументовВходящих + ".Ссылка,
	|	" + ВидДокументовВходящих + ".ДатаВходящегоДокумента КАК Дата,
	|	" + ВидДокументовВходящих + ".СуммаДокумента КАК Сумма,
	|	" + ВидДокументовВходящих + ".ВидОперации,
	|	" + ВидДокументовВходящих + ".БанковскийСчет.НомерСчета КАК НомерСчета
	|ИЗ
	|	Документ." + ВидДокументовВходящих + " КАК " + ВидДокументовВходящих + "
	|ГДЕ
	|		НачалоПериода(" + ВидДокументовВходящих + ".ДатаВходящегоДокумента, День) В (&ДатыЗагрузкиСписок)
	| И НЕ " + ВидДокументовВходящих + ".ПометкаУдаления
	| И " + ВидДокументовВходящих + ".БанковскийСчет.НомерСчета В(&НомераСчетов)");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатыЗагрузкиСписок", ДатыЗагрузкиСписок);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов", СписокСчетов);
	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ДатаГраницыОбработки) Тогда
						ТекстСообщения = НСтр("ru = 'Платежный документ ""%ОбъектДокументаКУдаление%"" не помечен на удаление, так как имеет дату равной или меньшей границы обработки!'; uk = 'Платіжний документ ""%ОбъектДокументаКУдаление%"" не позначений на видалення, оскільки має дату рівну або меншу межі обробки!'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектДокументаКУдаление%", ОбъектДокументаКУдаление);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ОперацияВыполнена = ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
			
			// Добавим информацию о помеченных на удаление документа в отдельную таблицу, 
			// которую потом выведем в протокол.
			НоваяСтрока = ТаблицаПомеченныхНаУдалениеКакДубль.Добавить();
			НоваяСтрока.ДокументСсылка = ВыборкаДокументов.Ссылка;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДокументов);
			НоваяСтрока.ДокументСсылка = ВыборкаДокументов.Ссылка;
			НоваяСтрока.ОперацияВыполнена = ОперацияВыполнена;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗадатьПометкуНаУдаление(ОбъектДляПометки, Пометка, ТаблицаРезультата = Неопределено, СтрокаСекции = Неопределено, ТаблицаПомеченныхНаУдалениеКакДубль = Неопределено)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляПометки);
	НазваниеДействия = ?(Пометка, НСтр("ru = ' помечен на удаление'; uk = ' помічений на видалення'"), НСтр("ru = ' отменена пометка на удаление'; uk = ' відмінена помітка на видалення'"));
	НазваниеДействияДляПротокола = ?(Пометка, НСтр("ru = '• Помечен на удаление'; uk = '• Відмічений на видалення'"), НСтр("ru = '• Отменена пометка на удаление'; uk = '• Знята відмітка на видалення'"));
	
	Попытка
		
		ОбъектДляПометки.Записать(РежимЗаписиДокумента.Запись);
		ОбъектДляПометки.УстановитьПометкуУдаления(Пометка);
		ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред%: %НазваниеДействия%.'; uk = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред%: %НазваниеДействия%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеДействия%", НазваниеДействия);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Если ТаблицаРезультата <> Неопределено Тогда
			ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НазваниеДействияДляПротокола, Ложь, Ложь, НазваниеДействияДляПротокола, "");
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред%: не %НазваниеДействия%! Произошли ошибки при записи!'; uk = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред%: не %НазваниеДействия%! Відбулися помилки при записі!'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеДействия%", НазваниеДействия);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Если ТаблицаРезультата <> Неопределено Тогда
			ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НазваниеДействияДляПротокола, Ложь, Ложь, НСтр("ru = '• Произошли ошибки при записи!'; uk = '• Відбулися помилки при записі!'"), ОписаниеОшибки());
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки
	
КонецФункции

Функция ПолучитьПредставлениеОбъекта(Объект)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеНаСчет") Тогда
		НазваниеОбъекта = НСтр(
			"ru = 'документ ""Поступление на счет"" № %Номер% от %Дата%'; uk = 'документ ""Надходження на рахунок"" № %Номер% від %Дата%'"
		);
		НазваниеОбъекта = СтрЗаменить(НазваниеОбъекта, "%Номер%", Строка(СокрЛП(Объект.Номер)));
		НазваниеОбъекта = СтрЗаменить(НазваниеОбъекта, "%Дата%", Строка(Объект.Дата));
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РасходСоСчета") Тогда
		НазваниеОбъекта = НСтр(
			"ru = 'документ ""Расход со счета"" № %Номер% от %Дата%'; uk = 'документ ""Витрата з рахунка"" № %Номер% від %Дата%'"
		);
		НазваниеОбъекта = СтрЗаменить(НазваниеОбъекта, "%Номер%", Строка(СокрЛП(Объект.Номер)));
		НазваниеОбъекта = СтрЗаменить(НазваниеОбъекта, "%Дата%", Строка(Объект.Дата));
	Иначе
		НазваниеОбъекта = НСтр("ru = 'объект'; uk = 'об''єкт'");
	КонецЕсли;
	
	Возврат НазваниеОбъекта;
	
КонецФункции

Функция ПроверитьДокументДляЗагрузки(СтруктураДокумента)
	
	Результат = "";
	
	Если СтруктураДокумента.Готовность > 3 Тогда
		Результат = СтруктураДокумента.ОписаниеОшибок;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьДокументДляЗагрузки()

Функция СоздатьНовогоКонтрагентаПриЗагрузке(ТаблицаОбъектовСозданныхПриЗагрузке, ДанныеСтроки, ДанныеОбъекта)
	
	ИНН = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательИНН, ДанныеСтроки.ПлательщикИНН);
	КПП = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательКПП, ДанныеСтроки.ПлательщикКПП);
	Если ДанныеСтроки.Исходящий Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.Получатель1) Тогда
			Наименование = ДанныеСтроки.Получатель1;
		Иначе
			Наименование = ДанныеСтроки.Получатель;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДанныеСтроки.Плательщик1) Тогда
			Наименование = ДанныеСтроки.Плательщик1;
		Иначе
			Наименование = ДанныеСтроки.Плательщик;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ТипСтроки, ИНН, КПП, Наименование", 1, ИНН, КПП, Наименование);
	МассивСтрок = ТаблицаОбъектовСозданныхПриЗагрузке.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		
		НайденнаяСтрока = МассивСтрок[0];
		
		СтруктураВозвращаемоеЗначение = Новый Структура;
		СтруктураВозвращаемоеЗначение.Вставить("Контрагент", НайденнаяСтрока.КонтрагентСсылка);
		СтруктураВозвращаемоеЗначение.Вставить("Договор", НайденнаяСтрока.ДоговорСсылка);
		СтруктураВозвращаемоеЗначение.Вставить("СчетКонтрагента", НайденнаяСтрока.СчетКонтрагентаСсылка);
		
		Возврат СтруктураВозвращаемоеЗначение;
		
	Иначе
	
		СтруктураДанных = Новый Структура;
		
		ВидКонтрагента = ?(СтрДлина(СокрЛП(ИНН)) = 12, Перечисления.ВидыКонтрагентов.ФизическоеЛицо, Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
		
		СтруктураДанных = ПолучитьСтруктуруДанныхРасчетногоСчета(ДанныеСтроки, ДанныеОбъекта);
		ДополнитьСтруктуруДаннымиДоговора(СтруктураДанных);
		
		СтруктураДанных.Вставить("СоздаватьРСчет", Истина);
		СтруктураДанных.Вставить("НаименованиеПолное", СокрЛП(Наименование));
		СтруктураДанных.Вставить("Наименование", СокрЛП(Наименование));
		СтруктураДанных.Вставить("ИНН", ИНН);
		СтруктураДанных.Вставить("КПП", КПП);
		СтруктураДанных.Вставить("ВидКонтрагента", ВидКонтрагента);
		СтруктураДанных.Вставить("Родитель", ""); //Родитель);
		СтруктураДанных.Вставить("Организация", ДанныеОбъекта.Организация);
		Если Константы.ОграничиватьДоступНаУровнеЗаписей.Получить() Тогда
			СтруктураДанных.Вставить("ГруппаДоступа", ДанныеОбъекта.ГруппаДоступа);
		КонецЕсли;
		
		ВидОперации = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ВидОперацииСписание, ДанныеСтроки.ВидОперацииПоступление);
		Обработки.СМП_КлиентБанк.ДобавитьИнформациюОбОтношенияхСКонтрагентомПоВидуОперации(СтруктураДанных, ВидОперации);
		
		КонтрагентСоздан = Обработки.СМП_КлиентБанк.СоздатьКонтрагентаПоСтруктуреДанных(СтруктураДанных);
		
		Если КонтрагентСоздан Тогда
			СтруктураВозвращаемоеЗначение = Новый Структура;
			СтруктураВозвращаемоеЗначение.Вставить("Контрагент", СтруктураДанных.Контрагент);
			СтруктураВозвращаемоеЗначение.Вставить("Договор", СтруктураДанных.Договор);
			СтруктураВозвращаемоеЗначение.Вставить("СчетКонтрагента", СтруктураДанных.БанковскийСчетПоУмолчанию);
			
			НоваяСтрока = ТаблицаОбъектовСозданныхПриЗагрузке.Добавить();
			
			НоваяСтрока.ТипСтроки = 1;
			НоваяСтрока.Наименование = Наименование;
			НоваяСтрока.ИНН = ИНН;
			НоваяСтрока.КПП = КПП;
			НоваяСтрока.КонтрагентСсылка = СтруктураДанных.Контрагент;
			НоваяСтрока.ДоговорСсылка = СтруктураДанных.Договор;
			НоваяСтрока.СчетКонтрагентаСсылка = СтруктураДанных.БанковскийСчетПоУмолчанию;
			НоваяСтрока.СчетКонтрагента = СтруктураДанных.Счет;
			НоваяСтрока.Договор = СтруктураДанных.Договор;
			
			Возврат СтруктураВозвращаемоеЗначение;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхРасчетногоСчета(СтрокаДокумента, ДанныеОбъекта)
	
	СтруктураДанныхСтроки = Новый Структура;
	
	НайденКонтрагент = ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка");
	НайденСчет       = ТипЗнч(СтрокаДокумента.СчетКонтрагента) <> Тип("Строка");
	
	ТипКонтрагента = ?(СтрокаДокумента.ПлательщикСчет = СокрЛП(ДанныеОбъекта.БанковскийСчет.НомерСчета), "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
	
	СтруктураДанныхСтроки.Вставить("СЧЕТ", СтрокаДокумента[ТипКонтрагента + "СЧЕТ"]);
	
	ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ТипКонтрагента + "2"]);
	СтруктураДанныхСтроки.Вставить("ПрямыеРасчеты", ПрямыеРасчеты);
	
	Если ПрямыеРасчеты Тогда
		
		СтруктураДанныхСтроки.Вставить("Банк", СтрокаДокумента[ТипКонтрагента + "БАНК1"]);
		СтруктураДанныхСтроки.Вставить("Город", СтрокаДокумента[ТипКонтрагента + "БАНК2"]);
		СтруктураДанныхСтроки.Вставить("БИК", СтрокаДокумента[ТипКонтрагента + "БИК"]);
		СтруктураДанныхСтроки.Вставить("КоррСчет", СтрокаДокумента[ТипКонтрагента + "КОРСЧЕТ"]);
		
	Иначе
		
		СтруктураДанныхСтроки.Вставить("Банк", СтрокаДокумента[ТипКонтрагента + "3"]);
		СтруктураДанныхСтроки.Вставить("Город", СтрокаДокумента[ТипКонтрагента + "4"]);
		СтруктураДанныхСтроки.Вставить("БИК", ""); // В менеджере будем банк искать по корр. счету.
		СтруктураДанныхСтроки.Вставить("КоррСчет", СтрокаДокумента[ТипКонтрагента + "РАСЧСЧЕТ"]);
		
		СтруктураДанныхСтроки.Вставить("БанкРасчетов", СтрокаДокумента[ТипКонтрагента + "БАНК1"]);
		СтруктураДанныхСтроки.Вставить("ГородРасчетов", СтрокаДокумента[ТипКонтрагента + "БАНК2"]);
		СтруктураДанныхСтроки.Вставить("БИКРасчетов",  СтрокаДокумента[ТипКонтрагента + "БИК"]);
		СтруктураДанныхСтроки.Вставить("КоррСчетРасчетов", СтрокаДокумента[ТипКонтрагента + "КОРСЧЕТ"]);
		
	КонецЕсли;
	
	СтруктураДанныхСтроки.Вставить("БанковскийСчет", ДанныеОбъекта.БанковскийСчет);
	
	Возврат СтруктураДанныхСтроки;
	
КонецФункции

Процедура ДополнитьСтруктуруДаннымиДоговора(СтруктураДанных)
	
	СтруктураДанных.Вставить("ЗаполнятьДоговор", Ложь);
	СтруктураДанных.Вставить("ЗаполнятьДоговорПоУмолчанию", Истина);
	
КонецПроцедуры

// Процедура заполняет реквизиты документа РасходСоСчета.
//
Процедура ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов, ДанныеОбъекта)
	
	ТекущийДокументПланирования = Неопределено;
	
	// Платежное поручение укажем в качестве основания.
	Если ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение) Тогда
		
		ОбъектДокумента.Заполнить(ИсходныеДанные.ПлатежноеПоручение);
		
		УстановитьСвойство(
			ОбъектДокумента,
			"ДокументОснование",
			ИсходныеДанные.ПлатежноеПоручение,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ИсходныеДанные.ПлатежноеПоручение.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение.РасшифровкаПлатежа[0].ДокументПланирования) Тогда
				ТекущийДокументПланирования = ИсходныеДанные.ПлатежноеПоручение.РасшифровкаПлатежа[0].ДокументПланирования;
			ИначеЕсли ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение.ДокументОснование) И
				ТипЗнч(ИсходныеДанные.ПлатежноеПоручение.ДокументОснование) = Тип("ДокументСсылка.РасходДСПлан") Тогда
				ТекущийДокументПланирования = ИсходныеДанные.ПлатежноеПоручение.ДокументОснование
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение шапки документа.
	УстановитьСвойство(
		ОбъектДокумента,
		//СМП_РаботаСБанками +++
		"Дата",?(НачалоДня(ИсходныеДанные.ДатаДок) <> ИсходныеДанные.ДатаДок, ИсходныеДанные.ДатаДок, 
		?(НачалоДня(ИсходныеДанные.ДатаДок) = НачалоДня(ТекущаяДатаСеанса()), ТекущаяДатаСеанса(), 
		//КонецДня(ИсходныеДанные.ДатаДок)),
		Дата(Год(ИсходныеДанные.ДатаДок), Месяц(ИсходныеДанные.ДатаДок), День(ИсходныеДанные.ДатаДок), 12, 0, 0))),
		//СМП_РаботаСБанками ---
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ВидОперации",
		ИсходныеДанные.ВидОперации,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Организация",
		ДанныеОбъекта.Организация,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"БанковскийСчет",
		ИсходныеДанные.БанковскийСчет,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	// Перемещение денег
	УстановитьСвойство(
		ОбъектДокумента,
		"Касса",
		ИсходныеДанные.Касса,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	// Конец Перемещение денег
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ВалютаДенежныхСредств",
		ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Статья",
		ИсходныеДанные.СтатьяДДС,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"СуммаДокумента",
		ИсходныеДанные.СуммаДокумента,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"НомерВходящегоДокумента",
		ИсходныеДанные.НомерДок,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ДатаВходящегоДокумента",
		ИсходныеДанные.ДатаДок,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	Если ЭтоНовыйДокумент Тогда
		ОбъектДокумента.УстановитьНовыйНомер();
		
		// Поищем вид налогообложения в назначении платежа.
		Если СтрНайти(ВРег(ИсходныеДанные.НазначениеПлатежа), ВРег(НСтр("ru = 'НДС не облагается'; uk = 'ПДВ не обкладається'"))) > 0 ИЛИ 
			СтрНайти(ВРег(ИсходныеДанные.НазначениеПлатежа), ВРег(НСтр("ru = 'Без НДС'; uk = 'Без ПДВ'"))) > 0 ИЛИ
			СтрНайти(ВРег(ИсходныеДанные.НазначениеПлатежа), ВРег(НСтр("ru = 'Без налога (НДС)'; uk = 'Без податку (ПДВ)'"))) > 0 ИЛИ
			СтрНайти(ВРег(ИсходныеДанные.НазначениеПлатежа), ВРег(НСтр("ru = 'НДС не предусмотрен'; uk = 'ПДВ не передбачений'"))) > 0
		Тогда
			ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
		// Иначе установим налогообложение по умолчанию.
		Иначе
			ОбъектДокумента.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ДанныеОбъекта.Организация, , ИсходныеДанные.ДатаДок);
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение табличной части документа.
	Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
	 ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю
	 ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
		Тогда
		
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		Иначе
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
		
		УстановитьСвойство(
			СтрокаРасшифровки,
			"Договор",
			?(ИсходныеДанные.Договор = "Не найден", Неопределено, ИсходныеДанные.Договор),
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ЭтоНовыйДокумент ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.Документ) Тогда
			УстановитьСвойство(
				СтрокаРасшифровки,
				"ПризнакАванса",
				ИсходныеДанные.ПризнакАванса,
				Истина,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		СтрокаРасшифровки.Документ = Неопределено;
	
		Если ЭтоНовыйДокумент
		 ИЛИ ОднаСтрокаВРасшифровкеПлатежа
		   И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
			СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
			ДатаЗаполнения = ОбъектДокумента.Дата;
			ВалютаРасчетов = СтрокаРасшифровки.Договор.ВалютаРасчетов;
			
			РассчитатьКурсИСуммуРасчетов(
				СтрокаРасшифровки,
				ВалютаРасчетов,
				ДатаЗаполнения,
				ОбъектДокумента,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
			
			Если СтрокаРасшифровки.Курс = 0 Тогда
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"Курс",
					1,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов
				);
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"Кратность",
					1,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов
				);
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"СуммаРасчетов",
					СтрокаРасшифровки.СуммаПлатежа,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов
				);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение) Тогда
				СтрокаРасшифровки.СтавкаНДС = ИсходныеДанные.ПлатежноеПоручение.СтавкаНДС;
				
				Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
					ЗначениеСтавкиНДС = 0;
					ОпределитьСтавкуНДСПоНазначениюПлатежа(ИсходныеДанные, СтрокаРасшифровки.СтавкаНДС, ЗначениеСтавкиНДС);
				Иначе
					ЗначениеСтавкиНДС = ИсходныеДанные.ПлатежноеПоручение.СтавкаНДС.Ставка;
				КонецЕсли;
				
				СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа
					- (СтрокаРасшифровки.СуммаПлатежа)
					/ ((ЗначениеСтавкиНДС + 100) / 100);
			Иначе
				Если ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					
					СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(ОбъектДокумента.Организация.ВидСтавкиНДСПоУмолчанию);
					
					Если ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
						// Поищем ставку НДС в назначении платежа.
						СтавкаНДСВНазначенииПлатежа = Неопределено;
						ЗначениеСтавкиНДС = 0;
						ОпределитьСтавкуНДСПоНазначениюПлатежа(ИсходныеДанные, СтавкаНДСВНазначенииПлатежа, ЗначениеСтавкиНДС);
					Иначе
						СтавкаНДСВНазначенииПлатежа = Неопределено;
						ЗначениеСтавкиНДС = 0;
					КонецЕсли;
					
					Если ЗначениеСтавкиНДС = 0 ИЛИ СтавкаНДСВНазначенииПлатежа = Неопределено Тогда
						ЗначениеСтавкиНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
					Иначе
						СтавкаНДСПоУмолчанию = СтавкаНДСВНазначенииПлатежа;
					КонецЕсли;
					
					СтрокаРасшифровки.СтавкаНДС = СтавкаНДСПоУмолчанию;
					СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа
						- (СтрокаРасшифровки.СуммаПлатежа)
						/ ((ЗначениеСтавкиНДС + 100) / 100);
					
				Иначе
					
					Если ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
						СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
					Иначе
						СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
					КонецЕсли;
					
					СтрокаРасшифровки.СтавкаНДС = СтавкаНДСПоУмолчанию;
					СтрокаРасшифровки.СуммаНДС = 0;
					
				КонецЕсли;
				
			КонецЕсли; // Если ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение) Тогда
			
		КонецЕсли;
		
		// Способ зачета
		Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
			УстановитьСвойство(
				СтрокаРасшифровки,
				"СпособЗачета",
				ИсходныеДанные.СпособЗачетаТЧ,
				Истина,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		// Заполним информацию о заказе, счете и расчетном документе.
		Если ИсходныеДанные.СпособЗачетаТЧ <> ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто")
			И (ЭтоНовыйДокумент ИЛИ ОднаСтрокаВРасшифровкеПлатежа) Тогда
			ЗаполнитьИнформациюОЗаказеСчетеДокументеРасчетов(ЭтоНовыйДокумент, ОбъектДокумента, ИсходныеДанные, СтрокаРасшифровки, Истина, СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
		Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"Корреспонденция",
				ИсходныеДанные.Корреспонденция,
				Истина,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее
		ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы Тогда
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Корреспонденция",
			ИсходныеДанные.Корреспонденция,
			Истина,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет Тогда
		
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда
		
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ОбъектДокумента.ЭквайринговыйТерминал.Пустая() Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"ЭквайринговыйТерминал",
				Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчаниюДляОперацииЭквайринга(
					ОбъектДокумента.БанковскийСчет, ОбъектДокумента.Организация, ОбъектДокумента.Контрагент),
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя Тогда
		УстановитьСвойство(
			ОбъектДокумента,
			"Корреспонденция",
			ПланыСчетов.Управленческий.НераспределеннаяПрибыль,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги Тогда
		Если Не ЗначениеЗаполнено(ИсходныеДанные.ВидНалога)
			И ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение) Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"ВидНалога",
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходныеДанные.ПлатежноеПоручение, "Налог"),
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		ИначеЕсли ЗначениеЗаполнено(ИсходныеДанные.ВидНалога) Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"ВидНалога",
				ИсходныеДанные.ВидНалога,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсходныеДанные.СрокУплаты) Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СрокУплаты",
				ИсходныеДанные.СрокУплаты,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.КомиссияБанка Тогда
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику Тогда
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Подотчетник",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Подрезделение = Справочники.Сотрудники.ПолучитьТекущееПодразделениеСотрудника(ИсходныеДанные.Контрагент);
		Если Подрезделение <> Неопределено Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"Подразделение",
				Подрезделение,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
	КонецЕсли;
		
	Если ТекущийДокументПланирования <> Неопределено Тогда
		Для Каждого ТекущаяСтрокаРасшифровки Из ОбъектДокумента.РасшифровкаПлатежа Цикл
			ТекущаяСтрокаРасшифровки.ДокументПланирования = ТекущийДокументПланирования;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыРасходСоСчета()

// Процедура заполняет реквизиты документа ПоступлениеНаСчет.
//
Процедура ЗаполнитьРеквизитыПоступлениеНаСчет(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов, ДанныеОбъекта)
	
	УстановитьСвойство(
		ОбъектДокумента,
		//СМП_РаботаСБанками +++
		"Дата",?(НачалоДня(ИсходныеДанные.ДатаДок) <> ИсходныеДанные.ДатаДок, ИсходныеДанные.ДатаДок, 
		?(НачалоДня(ИсходныеДанные.ДатаДок) = НачалоДня(ТекущаяДатаСеанса()), ТекущаяДатаСеанса(), 
		//КонецДня(ИсходныеДанные.ДатаДок)),
		Дата(Год(ИсходныеДанные.ДатаДок), Месяц(ИсходныеДанные.ДатаДок), День(ИсходныеДанные.ДатаДок), 12, 0, 0))),
		//СМП_РаботаСБанками ---
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ВидОперации",
		ИсходныеДанные.ВидОперации,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Организация",
		ДанныеОбъекта.Организация,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"БанковскийСчет",
		ИсходныеДанные.БанковскийСчет,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	// Перемещение денег
	УстановитьСвойство(
		ОбъектДокумента,
		"Касса",
		ИсходныеДанные.Касса,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	// Конец Перемещение денег
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ВалютаДенежныхСредств",
		ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Статья",
		ИсходныеДанные.СтатьяДДС,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"СуммаДокумента",
		ИсходныеДанные.СуммаДокумента,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"НомерВходящегоДокумента",
		ИсходныеДанные.НомерДок,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ДатаВходящегоДокумента",
		ИсходныеДанные.ДатаДок,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	Если ЭтоНовыйДокумент Тогда
		ОбъектДокумента.УстановитьНовыйНомер();
		ОбъектДокумента.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ДанныеОбъекта.Организация, , ИсходныеДанные.ДатаДок);
	КонецЕсли;
	
	// Заполнение табличной части документа.
	Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя
	 ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика
	 ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты
	Тогда
	 
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		Иначе
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
		
		УстановитьСвойство(
			СтрокаРасшифровки,
			"Договор",
			?(ИсходныеДанные.Договор = "Не найден", Неопределено, ИсходныеДанные.Договор),
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ЭтоНовыйДокумент ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.Документ) Тогда
			УстановитьСвойство(
				СтрокаРасшифровки,
				"ПризнакАванса",
				ИсходныеДанные.ПризнакАванса,
				Истина,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		СтрокаРасшифровки.Документ = Неопределено;
		
		// Заполнение табличной части документа.
		Если ЭтоНовыйДокумент
		 ИЛИ ОднаСтрокаВРасшифровкеПлатежа
		   И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
			
			СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
			ДатаЗаполнения = ОбъектДокумента.Дата;
			ВалютаРасчетов = СтрокаРасшифровки.Договор.ВалютаРасчетов;
			
			РассчитатьКурсИСуммуРасчетов(
				СтрокаРасшифровки,
				ВалютаРасчетов,
				ДатаЗаполнения,
				ОбъектДокумента,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
			
			Если СтрокаРасшифровки.Курс = 0 Тогда
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"Курс",
					1,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов
				);
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"Кратность",
					1,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов
				);
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"СуммаРасчетов",
					СтрокаРасшифровки.СуммаПлатежа,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов
				);
				
			КонецЕсли;
			
			Если ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
				
				СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(ОбъектДокумента.Организация.ВидСтавкиНДСПоУмолчанию);
				
				// Поищем ставку НДС в назначении платежа.
				Если СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС 18%") > 0 ИЛИ
					СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС(18%)") > 0 ИЛИ
					СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС (18%)") > 0 Тогда
					СтавкаНДСВНазначенииПлатежа = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(18);
					ЗначениеСтавкиНДС = 18;
				ИначеЕсли СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС 10%") > 0 ИЛИ
					СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС(10%)") > 0 ИЛИ
					СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС (10%)") > 0 Тогда
					СтавкаНДСВНазначенииПлатежа = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(10);
					ЗначениеСтавкиНДС = 10;
				Иначе
					СтавкаНДСВНазначенииПлатежа = Неопределено;
					ЗначениеСтавкиНДС = 0;
				КонецЕсли;
				
				Если ЗначениеСтавкиНДС = 0 ИЛИ СтавкаНДСВНазначенииПлатежа = Неопределено Тогда
					ЗначениеСтавкиНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
				Иначе
					СтавкаНДСПоУмолчанию = СтавкаНДСВНазначенииПлатежа;
				КонецЕсли;
				
				СтрокаРасшифровки.СтавкаНДС = СтавкаНДСПоУмолчанию;
				СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа
					- (СтрокаРасшифровки.СуммаПлатежа)
					/ ((ЗначениеСтавкиНДС + 100) / 100);
				
			Иначе
				
				Если ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
				Иначе
					СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
				КонецЕсли;
				
				СтрокаРасшифровки.СтавкаНДС = СтавкаНДСПоУмолчанию;
				СтрокаРасшифровки.СуммаНДС = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Способ зачета
		Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
			УстановитьСвойство(
				СтрокаРасшифровки,
				"СпособЗачета",
				ИсходныеДанные.СпособЗачетаТЧ,
				Истина,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		// Заполним информацию о заказе, счете и расчетном документе.
		Если ИсходныеДанные.СпособЗачетаТЧ <> ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто")
			И (ЭтоНовыйДокумент ИЛИ ОднаСтрокаВРасшифровкеПлатежа) Тогда
			ЗаполнитьИнформациюОЗаказеСчетеДокументеРасчетов(ЭтоНовыйДокумент, ОбъектДокумента, ИсходныеДанные, СтрокаРасшифровки, Истина, СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
		// Корреспонденция
		Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"Корреспонденция",
				ИсходныеДанные.Корреспонденция,
				Истина,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее Тогда
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Корреспонденция",
			ИсходныеДанные.Корреспонденция,
			Истина,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты Тогда
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Корреспонденция",
			ИсходныеДанные.Корреспонденция,
			Истина,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		Иначе
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		
		УстановитьСвойство(
			СтрокаРасшифровки,
			"Договор",
			?(ИсходныеДанные.Договор = "Не найден", Неопределено, ИсходныеДанные.Договор),
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета Тогда
		
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам Тогда
		
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ОбъектДокумента.ЭквайринговыйТерминал.Пустая() Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"ЭквайринговыйТерминал",
				Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчаниюДляОперацииЭквайринга(
					ОбъектДокумента.БанковскийСчет, ОбъектДокумента.Организация, ОбъектДокумента.Контрагент),
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги Тогда
		
		Если ЗначениеЗаполнено(ИсходныеДанные.ВидНалога) Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"ВидНалога",
				ИсходныеДанные.ВидНалога,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьРеквизитыПоступлениеНаСчет()

// Процедура записывает объект.
//
Процедура ЗаписатьОбъект(ОбъектДляЗаписи, ДанныеОбъекта, СтрокаСекции, ЭтоНовыйДокумент, ТаблицаРезультата, ЕстьПредупреждения, ВыдаватьСообщения, СтрокаИзмененныхРеквизитов)
	
	ТипДокумента = ОбъектДляЗаписи.Метаданные().Имя;
	Если ТипДокумента = "РасходСоСчета" Тогда
		ИмяДокумента = "Расход со счета";
		Если ДанныеОбъекта.ЗаполнятьДолгиАвтоматически И СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
			И СтрокаСекции.СпособЗачетаТЧ <> Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
			КлиентБанкСервер.ЗаполнитьРасшифровкуПлатежаРасход(ОбъектДляЗаписи,,,,, СтрокаСекции.Договор);
		КонецЕсли;
	ИначеЕсли ТипДокумента = "ПоступлениеНаСчет" Тогда
		ИмяДокумента = "Поступление на счет";
		Если ДанныеОбъекта.ЗаполнятьДолгиАвтоматически И СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя
			И СтрокаСекции.СпособЗачетаТЧ <> Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
			КлиентБанкСервер.ЗаполнитьРасшифровкуПлатежаПриход(ОбъектДляЗаписи,,,,, СтрокаСекции.Договор);
		КонецЕсли;
	КонецЕсли;
	УстановитьСвойство(
		ОбъектДляЗаписи,
		"НазначениеПлатежа",
		СтрокаСекции.НазначениеПлатежа,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	УстановитьСвойство(
		ОбъектДляЗаписи,
		"Автор",
		Пользователи.ТекущийПользователь(),
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен = ОбъектДляЗаписи.Проведен;
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);
	
	Если ОбъектМодифицирован Тогда
		Попытка
			Если ОбъектПроведен Тогда
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
				// Очистим дополнительные свойства самого документа и всех наборов записей.
				ОбъектДляЗаписи.ДополнительныеСвойства.Очистить();
				Для Каждого НаборЗаписей Из ОбъектДляЗаписи.Движения Цикл
					НаборЗаписей.ДополнительныеСвойства.Очистить();
				КонецЦикла;
			Иначе
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			Если ЭтоНовыйДокумент Тогда
				СтрокаСекции.Документ = ОбъектДляЗаписи.Ссылка;
			КонецЕсли;
			
			ТекстСообщения = НСтр("ru = '%Статус%%НазваниеОбъекта%.'; uk = '%Статус%%НазваниеОбъекта%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%" , ?(ЭтоНовыйДокумент, НСтр("ru = 'Создан '; uk = 'Створений'"), НСтр("ru = 'Перезаписан '; uk = 'Перезаписаний'")));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъекта%", НазваниеОбъекта);
			Если ВыдаватьСообщения Тогда
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ОбъектДляЗаписи, ТекстСообщения); // ЭтотОбъект, ТекстСообщения);
			КонецЕсли;
			ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru = 'Комментарий'; uk = 'Коментар'"), ЭтоНовыйДокумент, Истина, 
				?(ЭтоНовыйДокумент, НСтр("ru = '• Создан новый документ'; uk = '• Створений новий документ'"), НСтр("ru = '• Перезаписан документ'; uk = '• Перезаписаний документ'")), "",,, 
				?(ЭтоНовыйДокумент, "", СтрокаИзмененныхРеквизитов));
			
			// Запись истории выбранных значений для последующей автоматической подстановки.
			// Сохраняем информацию о выборе пользователя, если его выбор отличается от значения по умолчанию.
			Если ТипЗнч(СтрокаСекции.Контрагент) = Тип("СправочникСсылка.Контрагенты") И
				(
				СтрокаСекции.Договор <> СтрокаСекции.ДоговорИсходноеЗначение ИЛИ
				СтрокаСекции.Корреспонденция <> СтрокаСекции.КорреспонденцияИсходноеЗначение ИЛИ
				СтрокаСекции.ВидОперации <> СтрокаСекции.ВидОперацииИсходноеЗначение ИЛИ
				СтрокаСекции.СтатьяДДС <> СтрокаСекции.СтатьяДДСИсходноеЗначение
				)Тогда
				
				НаборЗаписейИстории = РегистрыСведений.ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.СоздатьНаборЗаписей();
				
				НаборЗаписейИстории.Отбор.Контрагент.Установить(СтрокаСекции.Контрагент);
				НаборЗаписейИстории.Отбор.БанковскийСчетКонтрагента.Установить(СтрокаСекции.СчетКонтрагента);
				НаборЗаписейИстории.Отбор.БанковскийСчетОрганизации.Установить(ДанныеОбъекта.БанковскийСчет);
				НаборЗаписейИстории.Отбор.Документ.Установить(ОбъектДляЗаписи.Ссылка);
				НаборЗаписейИстории.Отбор.Исходящий.Установить(СтрокаСекции.Исходящий);
				
				ЗаписьИстории = НаборЗаписейИстории.Добавить();
				// Измерения.
				ЗаписьИстории.Контрагент = СтрокаСекции.Контрагент;
				ЗаписьИстории.БанковскийСчетКонтрагента = СтрокаСекции.СчетКонтрагента;
				ЗаписьИстории.БанковскийСчетОрганизации = ДанныеОбъекта.БанковскийСчет;
				ЗаписьИстории.Документ = ОбъектДляЗаписи.Ссылка;
				ЗаписьИстории.Исходящий = СтрокаСекции.Исходящий;
				// Ресурсы.
				ЗаписьИстории.Договор = СтрокаСекции.Договор;
				ЗаписьИстории.ВидОперации = СтрокаСекции.ВидОперации;
				ЗаписьИстории.СтатьяДДС = СтрокаСекции.СтатьяДДС;
				ЗаписьИстории.Корреспонденция = СтрокаСекции.Корреспонденция;
				ЗаписьИстории.ДатаЗагрузкиЧислом = Год(ТекущаяДатаСеанса())*10000 + Месяц(ТекущаяДатаСеанса())*100 + День(ТекущаяДатаСеанса());
				
				НаборЗаписейИстории.Записать(Истина);
				
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред% %Статус%! Произошли ошибки при записи!'; uk = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред% %Статус%! Відбулися помилки при записі!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", ?(ОбъектДляЗаписи.ЭтоНовый(), НСтр("ru = ' не создан'; uk = ' не створений'"), НСтр("ru = ' не записан'; uk = ' не записаний'")));
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
			КонецЕсли;
			ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru = 'Ошибка при загрузке'; uk = 'Помилка при завантаженні'"), ЭтоНовыйДокумент, Ложь, ТекстСообщения, ОписаниеОшибки());
			ЕстьПредупреждения = Истина;
			Возврат;
		КонецПопытки;
	Иначе
		ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред% не перезаписан, т.к. данные в нем не менялись. Возможно загрузка производилась ранее.'; uk = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред% не перезаписаний, тому що дані в ньому не змінювалися. Можливе завантаження проводилася раніше.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
		Если ВыдаватьСообщения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru = 'Комментарий'; uk = 'Коментар'"), ЭтоНовыйДокумент, Ложь, НСтр("ru = '• Не перезаписан'; uk = '• Не перезаписаний'"), ТекстСообщения);
		ЕстьПредупреждения = Истина;
	КонецЕсли;
	
	Если ДанныеОбъекта.ПроводитьЗагружаемые И (ОбъектМодифицирован ИЛИ НЕ ОбъектПроведен) 
		Тогда
		
		Попытка
			ОшибкиНеОбнаружены = ОбъектДляЗаписи.ПроверитьЗаполнение();
			Если ОшибкиНеОбнаружены Тогда
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
				ТекстСообщения = НСтр("ru = '%Статус%%НазваниеОбъекта%'; uk = '%Статус%%НазваниеОбъекта%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", ?(ОбъектПроведен, НСтр("ru = 'Перепроведен '; uk = 'Перепроведений'"), НСтр("ru = 'Проведен '; uk = 'Проведений'")));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъекта%", НазваниеОбъекта);
				Если ВыдаватьСообщения Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
				ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru = 'Комментарий'; uk = 'Коментар'"), ЭтоНовыйДокумент, Истина, 
					?(ОбъектПроведен, НСтр("ru = '• Перепроведен '; uk = '• Перепроведений '"), НСтр("ru = '• Проведен '; uk = '• Проведений '")), ТекстСообщения);
			Иначе
				ТекстСообщения = НСтр("ru = '%Статус% %НазваниеОбъекта% %Статус%'; uk = '%Статус% %НазваниеОбъекта% %Статус%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", НСтр("ru = 'Не проведен '; uk = 'Не проведений '"));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъекта%", НазваниеОбъекта);
				ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Заполнены не все реквизиты'; uk = 'Заповнені не всі реквізити'");
				Если ВыдаватьСообщения Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
				ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru = 'Комментарий'; uk = 'Коментар'"), ЭтоНовыйДокумент, Истина, 
					НСтр("ru = '• Произошли ошибки при проведении (заполнены не все реквизиты)!'; uk = '* Відбулися помилки при проведенні (заповнені не всі реквізити)!'"), ТекстСообщения,, 1);
				ЕстьПредупреждения = Истина;
			КонецЕсли;
		Исключение
			// Поищем сообщения об ошибках.
			ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред% не проведен! Произошли ошибки при проведении!'; uk = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред% не проведено! Відбулися помилки при проведенні!'");// + Символы.ПС + ОписаниеОшибки();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru = 'Ошибка при загрузке'; uk = 'Помилка при завантаженні'"), ЭтоНовыйДокумент, Ложь, 
				НСтр("ru = '• Произошли ошибки при проведении!'; uk = '• Відбулися помилки при проведенні!'"), ТекстСообщения,, 1);
			ЕстьПредупреждения = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьОбъект()

Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства, ОбязательнаяЗаменаСтарогоЗначения = Ложь, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов)
	
	Если ЗначениеСвойства <> Неопределено
		И Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		
		Если ЭтоНовыйДокумент
		 ИЛИ (НЕ ЗначениеЗаполнено(Объект[ИмяСвойства])
		 ИЛИ ОбязательнаяЗаменаСтарогоЗначения)
		 ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Булево")
		 ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Дата") 
		Тогда
		
			ПредЗнач = "" + Объект[ИмяСвойства];
			Объект[ИмяСвойства] = ЗначениеСвойства;
			
			Если Не ЭтоНовыйДокумент Тогда
				ИмяСвойстваДляПротокола = ПолучитьИмяСвойстваДляПротокола(ИмяСвойства, Объект);
				
				СтрокаИзмененныхРеквизитов = СтрокаИзмененныхРеквизитов + ?(СтрокаИзмененныхРеквизитов = "", "", Символы.ПС) + 
					ИмяСвойстваДляПротокола + ?(ЗначениеЗаполнено(ПредЗнач), НСтр("ru = ' (с '; uk = ' (з '") + ПредЗнач + НСтр("ru = ' на '; uk = ' на '"), НСтр("ru = ' ('; uk = ' ('")) + ЗначениеСвойства + ")";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСвойство()

// Процедура рассчитывает курс и сумму документа.
//
Процедура РассчитатьКурсИСуммуРасчетов(СтрокаПлатеж, ВалютаРасчетов, ДатаКурса, ОбъектДокумента, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов)
	
	СтруктураКурсаРасчетов = ПолучитьКурсВалюты(ВалютаРасчетов, ДатаКурса);
	СтруктураКурсаРасчетов.Курс = ?(СтруктураКурсаРасчетов.Курс = 0, 1, СтруктураКурсаРасчетов.Курс);
	СтруктураКурсаРасчетов.Кратность = ?(СтруктураКурсаРасчетов.Кратность = 0, 1, СтруктураКурсаРасчетов.Кратность);
	
	УстановитьСвойство(
		СтрокаПлатеж,
		"Курс",
		СтруктураКурсаРасчетов.Курс,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	УстановитьСвойство(
		СтрокаПлатеж,
		"Кратность",
		СтруктураКурсаРасчетов.Кратность,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ОбъектДокумента.ВалютаДенежныхСредств, ДатаКурса);
	
	СуммаРасчетов = ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		СтруктураКурсаДокумента.Курс,
		СтруктураКурсаРасчетов.Курс,
		СтруктураКурсаДокумента.Кратность,
		СтруктураКурсаРасчетов.Кратность
	);
	
	УстановитьСвойство(
		СтрокаПлатеж,
		"СуммаРасчетов",
		СуммаРасчетов,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
КонецПроцедуры // РассчитатьКурсИСуммуРасчетов()

Процедура ОпределитьСтавкуНДСПоНазначениюПлатежа(ИсходныеДанные, СтавкаНДСВНазначенииПлатежа, ЗначениеСтавкиНДС)
	
	Если СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС 18%") > 0 ИЛИ
		СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС(18%)") > 0 ИЛИ
		СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС (18%)") > 0 Тогда
		СтавкаНДСВНазначенииПлатежа = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(18);
		ЗначениеСтавкиНДС = 18;
	ИначеЕсли СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС 10%") > 0 ИЛИ
		СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС(10%)") > 0 ИЛИ
		СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС (10%)") > 0 Тогда
		СтавкаНДСВНазначенииПлатежа = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(10);
		ЗначениеСтавкиНДС = 10;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОЗаказеСчетеДокументеРасчетов(ЭтоНовыйДокумент, ОбъектДокумента, ИсходныеДанные, СтрокаРасшифровки, Исходящий, СтрокаИзмененныхРеквизитов)
	
	// Заполним заказ.
	Если ОбъектДокумента.Контрагент.ВестиРасчетыПоЗаказам И ЗначениеЗаполнено(ИсходныеДанные.Заказ) Тогда
		УстановитьСвойство(
				СтрокаРасшифровки,
				"Заказ",
				ИсходныеДанные.Заказ,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
	КонецЕсли;
	
	// Заполним счет на оплату.
	Если ОбъектДокумента.Контрагент.ВестиУчетОплатыПоСчетам И ЗначениеЗаполнено(ИсходныеДанные.СчетНаОплату) Тогда
		УстановитьСвойство(
				СтрокаРасшифровки,
				"СчетНаОплату",
				ИсходныеДанные.СчетНаОплату,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
	КонецЕсли;
	
	// Заполним документ расчетов.
	Если Не ИсходныеДанные.ПризнакАванса И ОбъектДокумента.Контрагент.ВестиРасчетыПоДокументам И ЗначениеЗаполнено(ИсходныеДанные.ДокументРасчетов) Тогда
		УстановитьСвойство(
				СтрокаРасшифровки,
				"Документ",
				ИсходныеДанные.ДокументРасчетов,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПоискаОбъектовИБ

// Определяем группу, в которую будет добавлен новый контрагент.
//
Функция ОпределитьАвтоГруппуКонтрагента(ДеньгиОтКонтрагентаПоступили) Экспорт 
	
	// Попробуем найти по наименованию.
	СтрокаПоиска = ?(ДеньгиОтКонтрагентаПоступили, НСтр("ru = 'Покупатели'; uk = 'Покупці'"), НСтр("ru = 'Поставщики'; uk = 'Постачальники'"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ЭтоГруппа
	|	И Контрагенты.Родитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И Контрагенты.Наименование = &Наименование
	|	И (НЕ Контрагенты.ПометкаУдаления)");
	
	Запрос.УстановитьПараметр("Наименование", СтрокаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	// По наименованию не нашли, тогда найдем самый часто используемый в соответствующей таблице.
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗАпрос.КонтрагентРодитель
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПоиска.Контрагент.Родитель КАК КонтрагентРодитель,
	|		КОЛИЧЕСТВО(ТаблицаПоиска.Контрагент.Родитель) КАК КоличествоОдинаковых
	|	ИЗ
	|		Документ.%ТАБЛИЦА_ПОИСКА% КАК ТаблицаПоиска
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПоиска.Контрагент.Родитель) КАК ВложенныйЗАпрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗАпрос.КоличествоОдинаковых УБЫВ");
	
	Запрос.Текст = 
		СтрЗаменить(
			Запрос.Текст, 
			"%ТАБЛИЦА_ПОИСКА%", 
			?(ДеньгиОтКонтрагентаПоступили, "РасходнаяНакладная", "ПриходнаяНакладная"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.КонтрагентРодитель, Справочники.Контрагенты.ПустаяСсылка());
	
КонецФункции

// Функция находит договор контрагента.
//
&НаСервере
Функция НайтиДоговор(ВладелецДоговора, ОрганизацияДоговора = Неопределено, СписокВидовДоговора = Неопределено) Экспорт
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ОсновныеДоговорыКонтрагента.Контрагент ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО (ОсновныеДоговорыКонтрагента.Контрагент = ДоговорыКонтрагентов.Владелец)
	|			И ДоговорыКонтрагентов.Ссылка = ОсновныеДоговорыКонтрагента.Договор
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ТекстФильтра =
	"	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора"
  + ?(ОрганизацияДоговора <> Неопределено, "
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора", "") 
  +	"	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
  + ?(СписокВидовДоговора <> Неопределено, "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)", "");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат НСтр("ru = 'Не найден'; uk = 'Не знайдений'");
	КонецЕсли;
	
КонецФункции // НайтиДоговор()

// Функция находит счет контрагента по номеру.
//
&НаСервере
Функция НайтиСчетКонтрагента(Контрагент, НомерСчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка,
		|	ВЫБОР
		|		КОГДА БанковскиеСчета.ПометкаУдаления
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Контрагент
		|	И БанковскиеСчета.НомерСчета = &НомерСчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка(); //НСтр("ru = 'Не найден'");
	КонецЕсли;
	
КонецФункции // НайтиДоговор()

#КонецОбласти

#Область ПроцедурыСозданияИЗаполненияОбъектов

Функция ЗаполнитьДоговорПоСтруктуреДанных(СтруктураДанных, ДоговорОбъект) Экспорт
	
	ДоговорОбъект.Наименование = СтруктураДанных.ДоговорНаименование;
	ДоговорОбъект.Владелец = СтруктураДанных.Контрагент;
	ДоговорОбъект.ВалютаРасчетов = СтруктураДанных.ДоговорВалютаРасчетов;
	ДоговорОбъект.ДатаДоговора = СтруктураДанных.ДоговорДата;
	ДоговорОбъект.НомерДоговора = СтруктураДанных.ДоговорНомер;
	ДоговорОбъект.РасчетыВУсловныхЕдиницах = СтруктураДанных.ДоговорРасчетыВУсловныхЕдиницах;
	Если СтруктураДанных.Свойство("Организация") И ЗначениеЗаполнено(СтруктураДанных.Организация) Тогда
		ДоговорОбъект.Организация = СтруктураДанных.Организация;
	КонецЕсли;
	
КонецФункции

Функция СоздатьДоговорПоСтруктуреДанных(Знач СтруктураДанных, ДоговорСсылка = Неопределено) Экспорт
	
	Попытка
		
		Если Не ЗначениеЗаполнено(СтруктураДанных.Контрагент) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Попытка записи Договора не удалась по причине, т.к. не указан контрагент, для которого оформляется договор'; uk = 'Спроба запису договору не вдалася, оскільки не вказано контрагент, для якого оформляється договір'"));
			Возврат Неопределено;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДоговорСсылка) Тогда
			НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			
			Если СтруктураДанных.Свойство("ЗаполнятьДоговорПоУмолчанию") И СтруктураДанных.ЗаполнятьДоговорПоУмолчанию Тогда
				НовыйДоговор.Заполнить(СтруктураДанных.Контрагент);
			КонецЕсли;
		Иначе
			НовыйДоговор = ДоговорСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не (СтруктураДанных.Свойство("ЗаполнятьДоговор") И Не СтруктураДанных.ЗаполнятьДоговор) Тогда
			ЗаполнитьДоговорПоСтруктуреДанных(СтруктураДанных, НовыйДоговор);
		КонецЕсли;
		
		НовыйДоговор.Записать();
		
		Возврат НовыйДоговор.Ссылка;
		
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Попытка записи Договора не удалась по причине: %1'; uk = 'Спроба запису Договору не вдалася по причині: %1'"),
				ОписаниеОшибки()));
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СоздатьРасчетныйСчетПоСтуктуреДанных(СтруктураДанных) Экспорт
	
	Попытка
		
		Если ЗначениеЗаполнено(СтруктураДанных.Счет) Тогда
			НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			
			НовыйСчет.НомерСчета = СтруктураДанных.Счет;
			НовыйСчет.Владелец   = СтруктураДанных.Контрагент;
			
			БИК = СтруктураДанных.БИК;
			КоррСчет = СтруктураДанных.КоррСчет;
			Наименование = СтруктураДанных.Банк;
			Город = СтруктураДанных.Город;
			
			Если Не СтруктураДанных.ПрямыеРасчеты Тогда
			
				БИКРасчетов = СтруктураДанных.БИКРасчетов;
				КоррСчетРасчетов = СтруктураДанных.КоррСчетРасчетов;
				НаименованиеРасчетов = СтруктураДанных.БанкРасчетов;
				ГородРасчетов = СтруктураДанных.ГородРасчетов;
				
				// Банк контрагента.
				Если НЕ ПустаяСтрока(Наименование) Тогда
					
					НовыйБанк = НайтиБанкПоМФОИСоздать(БИК);
					Если НовыйБанк = Справочники.Банки.ПустаяСсылка() Тогда
						//НовыйБанк = Справочники.Банки.СоздатьЭлемент();
						//НовыйБанк.Наименование = Наименование;
						//НовыйБанк.Город        = Город;
						//НовыйБанк.Код          = БИК;
						//НовыйБанк.КоррСчет     = КоррСчет;
						//НовыйБанк.Записать();
						ОбщегоНазначения.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Попытка записи Контрагента не удалась по причине: %1'; uk = 'Спроба запису Контрагента не вдалася з причини: %1'"),
						"Не найден банк в классификаторе с МФО " + БИК));
						Возврат Неопределено;
						
					КонецЕсли;
					НовыйСчет.Банк = НовыйБанк.Ссылка;
					
				КонецЕсли;
				
				// РЦ банка контрагента.
				Если НЕ ПустаяСтрока(НаименованиеРасчетов) Тогда
					
					НовыйБанкКорр = НайтиБанкПоМФОИСоздать(БИКРасчетов);
					Если НовыйБанкКорр = Справочники.Банки.ПустаяСсылка() Тогда
						
						//НовыйБанкКорр = Справочники.Банки.СоздатьЭлемент();
						//
						//НовыйБанкКорр.Наименование = НаименованиеРасчетов;
						//НовыйБанкКорр.Город        = ГородРасчетов;
						//НовыйБанкКорр.Код          = БИКРасчетов;
						//НовыйБанкКорр.КоррСчет     = КоррСчетРасчетов;
						//
						//НовыйБанкКорр.Записать();
						ОбщегоНазначения.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Попытка записи Контрагента не удалась по причине: %1'; uk = 'Спроба запису Контрагента не вдалася з причини: %1'"),
						"Не найден банк в классификаторе с МФО " + БИКРасчетов));
						Возврат Неопределено;
					КонецЕсли;
					
					НовыйСчет.БанкРасчетов = НовыйБанкКорр.Ссылка;
					
				КонецЕсли;
				
			Иначе
				
				// Банк контрагента.
				НовыйБанк = НайтиБанкПоМФОИСоздать(БИК);
				Если НовыйБанк = Справочники.Банки.ПустаяСсылка() Тогда
					//НовыйБанк = Справочники.Банки.СоздатьЭлемент();
					//НовыйБанк.Наименование = Наименование;
					//НовыйБанк.Город        = Город;
					//НовыйБанк.Код          = БИК;
					//НовыйБанк.КоррСчет     = КоррСчет;
					//НовыйБанк.Записать();
					ОбщегоНазначения.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Попытка записи Контрагента не удалась по причине: %1'; uk = 'Спроба запису Контрагента не вдалася з причини: %1'"),
					"Не найден банк в классификаторе с МФО " + БИК));
					Возврат Неопределено;
					
				КонецЕсли;
				НовыйСчет.Банк = НовыйБанк.Ссылка;
				
			КонецЕсли;
			
			//НовыйСчет.ВариантУказанияКПП = Перечисления.ВариантыУказанияКПП.ВоВсехПлатежныхПоручениях;
			НовыйСчет.ВидСчета = "Расчетный";
			НовыйСчет.ВалютаДенежныхСредств = СтруктураДанных.БанковскийСчет.ВалютаДенежныхСредств;
			СтрокаНаименования = СокрЛП(НовыйСчет.НомерСчета) + ?(ЗначениеЗаполнено(НовыйСчет.Банк), ", в " + Строка(НовыйСчет.Банк), "");
			СтрокаНаименования = Лев(СтрокаНаименования, 100);
			НовыйСчет.Наименование = СтрокаНаименования;
			
			НовыйСчет.Записать();
			
			Возврат НовыйСчет.Ссылка;
		Иначе
			Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
		
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Попытка записи Контрагента не удалась по причине: %1'; uk = 'Спроба запису Контрагента не вдалася з причини: %1'"),
				ОписаниеОшибки()));
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СоздатьКонтрагентаПоСтруктуреДанных(СтруктураДанных) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		КонтрагентНовый = Справочники.Контрагенты.СоздатьЭлемент();
		
		КонтрагентНовый.Заполнить(СтруктураДанных);
		
		Если НЕ ЗначениеЗаполнено(СтруктураДанных.ВидКонтрагента) Тогда
			//СМП_РаботаСБанками +++
			//КонтрагентНовый.ВидКонтрагента = ?(СтрДлина(СокрЛП(СтруктураДанных.ИНН)) = 12, Перечисления.ВидыКонтрагентов.ФизическоеЛицо, Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
			КонтрагентНовый.ВидКонтрагента = ?(СтрДлина(СокрЛП(СтруктураДанных.КПП)) = 10, Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель, Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
			//СМП_РаботаСБанками ---
		КонецЕсли;
		
		//СМП_РаботаСБанками +++
		ЗаполнитьЗначенияСвойств(КонтрагентНовый, РасчетыРаботаСФормамиВызовСервера.ПолучитьЗначенияРеквизитовПоУмолчаниюДляНовогоКонтрагента());
		Если СтруктураДанных.Свойство("КПП") Тогда
			КонтрагентНовый.КодПоЕДРПОУ = СтруктураДанных.КПП;
		ИначеЕсли СтруктураДанных.Свойство("КодПоЕДРПОУ") Тогда
			КонтрагентНовый.КодПоЕДРПОУ = СтруктураДанных.КодПоЕДРПОУ;
		КонецЕсли;
		//СМП_РаботаСБанками ---
		
		КонтрагентНовый.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
		КонтрагентНовый.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
		КонтрагентНовый.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
		КонтрагентНовый.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
		КонтрагентНовый.Записать();
		
		СтруктураДанных.Вставить("Контрагент", КонтрагентНовый.Ссылка);
		
		// Создадим расчетный счет.
		Если СтруктураДанных.СоздаватьРСчет Тогда
			КонтрагентНовый.БанковскийСчетПоУмолчанию = СоздатьРасчетныйСчетПоСтуктуреДанных(СтруктураДанных);
			КонтрагентНовый.ОбменДанными.Загрузка = Истина;
			КонтрагентНовый.Записать();
		КонецЕсли;
		
		// Перезаполним основной договор.
		ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(КонтрагентНовый);
		Если СтруктураДанных.ЗаполнятьДоговор Тогда
			
			ДоговорОбъект = ДоговорПоУмолчанию.ПолучитьОбъект();
			ЗаполнитьДоговорПоСтруктуреДанных(СтруктураДанных, ДоговорОбъект);
			ДоговорОбъект.Записать();
			
		ИначеЕсли СтруктураДанных.Свойство("Организация") И ЗначениеЗаполнено(СтруктураДанных.Организация) И
			ДоговорПоУмолчанию.Организация <> СтруктураДанных.Организация Тогда
			
			ДоговорОбъект = ДоговорПоУмолчанию.ПолучитьОбъект();
			ДоговорОбъект.Организация = СтруктураДанных.Организация;
			ДоговорОбъект.Записать();
			
		КонецЕсли;
		
		СтруктураДанных.Вставить("БанковскийСчетПоУмолчанию", КонтрагентНовый.БанковскийСчетПоУмолчанию);
		СтруктураДанных.Вставить("Договор", ДоговорПоУмолчанию);
		
		ЗафиксироватьТранзакцию();
		
		Возврат Истина;
	Исключение
		ОтменитьТранзакцию();
		
		ОбщегоНазначения.СообщитьПользователю(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Попытка записи Контрагента не удалась по причине: %1'; uk = 'Спроба запису Контрагента не вдалася з причини: %1'"),
		ОписаниеОшибки()));
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ДобавитьИнформациюОбОтношенияхСКонтрагентомПоВидуОперации(СтруктураДанных, ВидОперации) Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя ИЛИ
		ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
		СтруктураДанных.Вставить("Покупатель", Истина);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика ИЛИ
		ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
		СтруктураДанных.Вставить("Поставщик", Истина);
	Иначе
		СтруктураДанных.Вставить("ПрочиеОтношения", Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиБанкПоМФОИСоздать(МФО) Экспорт
	
	Дерево = Справочники.Банки.ПолучитьДеревоКлассификатора();
	
	Для каждого СтрокаДереваУр Из Дерево.Строки Цикл
		
		Для каждого СтрокаДерева Из СтрокаДереваУр.Строки Цикл
			
			Если СтрокаДерева.МФО = МФО тогда
				
				СправочникОбъект = Справочники.Банки.СоздатьЭлемент();
				СсылкаРодитель =  Справочники.Банки.НайтиПоНаименованию(СтрокаДерева.Родитель.Наименование, Истина);
				Если НЕ ЗначениеЗаполнено(СсылкаРодитель) Тогда
					СправочникГруппа = Справочники.Банки.СоздатьГруппу();
					СправочникГруппа.Наименование = СтрокаДерева.Родитель.Наименование;
					СправочникГруппа.УстановитьНовыйКод();
					СправочникГруппа.Записать();
					СсылкаРодитель = СправочникГруппа.Ссылка;
				КонецЕсли;
				СправочникОбъект.Родитель = СсылкаРодитель;
				
				ЗаполнитьЗначенияСвойств(СправочникОбъект, СтрокаДерева, "Наименование, КоррСчет, Город, Адрес, Телефоны, КодПоЕДРПОУ");
				
				СправочникОбъект.Код = СтрокаДерева.МФО;
				СправочникОбъект.Записать();
				Возврат СправочникОбъект.Ссылка;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Справочники.Банки.ПустаяСсылка();
КонецФункции

#КонецОбласти

#Область ДеревоНеНайденныхКонтрагентов

// Функция возвращает найденный элемент дерева.
//
&НаСервере
Функция НайтиЭлементДерева(ЭлементыДерева, ИмяКолонки, ИскомоеЗначение)
	
	Для Ном = 0 По ЭлементыДерева.Количество() - 1 Цикл
		
		ЭлементДерева = ЭлементыДерева.Получить(Ном);
		
		Если ЭлементДерева[ИмяКолонки] = ИскомоеЗначение Тогда
			Возврат ЭлементДерева;
		КонецЕсли;
		
		Если ЭлементДерева.Строки.Количество() > 0 Тогда
			
			РезультатПоиска = НайтиЭлементДерева(ЭлементДерева.Строки, ИмяКолонки, ИскомоеЗначение);
			
			Если НЕ РезультатПоиска = Неопределено Тогда
				Возврат РезультатПоиска;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиЭлементДерева()

// Функция добавляет и возвращает описание нового реквизита.
//
&НаСервере
Функция ДобавитьОписаниеНовогоРеквизита(Представление, Реквизит, ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента)
	
	РеквизитыНовогоКонтрагента = НовыйКонтрагент.Добавить();
	
	РеквизитыНовогоКонтрагента.Представление = Представление;
	РеквизитыНовогоКонтрагента.Значение      = СтрокаДокумента[ТипКонтрагента + Реквизит];
	РеквизитыНовогоКонтрагента.Реквизит      = ТипКонтрагента + Реквизит;
	
	Возврат РеквизитыНовогоКонтрагента;
	
КонецФункции // ДобавитьОписаниеНовогоРеквизита()

// Процедура создает список не найденных контрагентов.
//
Процедура СписокНеНайденных(СтрокаДокумента, БанковскийСчет, ТаблицаКонтрагентов, КолвоНеНайденныхКонтрагентов, КолвоНеНайденныхРСчетов) Экспорт
	
	НайденКонтрагент = ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка");
	НайденСчет       = ТипЗнч(СтрокаДокумента.СчетКонтрагента) <> Тип("Строка");
	
	ТипКонтрагента = ?(СтрокаДокумента.ПлательщикСчет = СокрЛП(БанковскийСчет.НомерСчета), "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
	
	Если ЗначениеЗаполнено(СтрокаДокумента[ТипКонтрагента + "ИНН"]) Тогда
		НайденнаяЗаписьОКонтрагенте = НайтиЭлементДерева(ТаблицаКонтрагентов.Строки, "Значение", СтрокаДокумента[ТипКонтрагента + "ИНН"]);
	Иначе
		Окончание = ?(СтрокаДокумента[ТипКонтрагента + "1"] = "", "", "1");
		НайденнаяЗаписьОКонтрагенте = НайтиЭлементДерева(ТаблицаКонтрагентов.Строки, "Значение", СтрокаДокумента[ТипКонтрагента + Окончание]);
	КонецЕсли;
	
	// Контрагент
	Если НайденнаяЗаписьОКонтрагенте = Неопределено Тогда
		
		НовыйКонтрагент = ТаблицаКонтрагентов.Строки.Добавить();
		
		Окончание = ?(СтрокаДокумента[ТипКонтрагента + "1"] = "", "", "1");
		
		НовыйКонтрагент.Представление = СтрокаДокумента[ТипКонтрагента + Окончание];
		НовыйКонтрагент.НомСтроки     = СтрокаДокумента.НомерСтроки;
		НовыйКонтрагент.Загружать     = Истина;
		НовыйКонтрагент.ЭтоКонтрагент = Истина;
		
		ВидОперации = ?(СтрокаДокумента.Исходящий, СтрокаДокумента.ВидОперацииСписание, СтрокаДокумента.ВидОперацииПоступление);
		НовыйКонтрагент.ВидОперации   = ВидОперации;
		
		ДобавитьОписаниеНовогоРеквизита("Юридическое название", Окончание, ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("ИНН"		  , "ИНН"	 , ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("КПП"		  , "КПП"	 , ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
		
		Если НайденКонтрагент Тогда
			НовыйКонтрагент.Реквизит = СтрокаДокумента.Контрагент;
			НовыйКонтрагент.Значение = СтрокаДокумента.Контрагент;
		Иначе
			КолвоНеНайденныхКонтрагентов = КолвоНеНайденныхКонтрагентов + 1;
		КонецЕсли;
		
	Иначе
		
		НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте.Родитель;
		
		Если НовыйКонтрагент = Неопределено Тогда
			НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте;
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныеСтроки = НайтиЭлементДерева(НовыйКонтрагент.Строки, "Значение", СтрокаДокумента[ТипКонтрагента + "СЧЕТ"]);
	
	Если НЕ НайденСчет И НайденныеСтроки = Неопределено Тогда
		
		РеквизитыНовогоКонтрагента = ДобавитьОписаниеНовогоРеквизита("Р/счет", "СЧЕТ", ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
		
		ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ТипКонтрагента + "2"]);
		
		Если ПрямыеРасчеты Тогда
			
			ДобавитьОписаниеНовогоРеквизита("Банк",            "БАНК1",   ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Город банка",     "БАНК2",   ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Код банка (БИК)",       "БИК",     ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет банка", "КОРСЧЕТ", ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			
		Иначе
			
			ДобавитьОписаниеНовогоРеквизита("Банк",                     "3",        ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Город банка",              "4",        ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет банка",          "РАСЧСЧЕТ", ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("РЦ банка",                 "БАНК1",    ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Местонахождение РЦ банка", "БАНК2",    ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Код РЦ банка (БИК)",       "БИК",      ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет РЦ банка",       "КОРСЧЕТ",  ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			
		КонецЕсли;
		
		КолвоНеНайденныхРСчетов = КолвоНеНайденныхРСчетов + 1;
		
	КонецЕсли;
	
КонецПроцедуры // СписокНеНайденных()

// Процедура создает список не найденных контрагентов.
//
Процедура СписокНеНайденныхДляЗаполненияДерева(СтрокаДокумента, БанковскийСчет, ТаблицаКонтрагентов) Экспорт
	
	НайденКонтрагент = ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка");
	НайденСчет       = ТипЗнч(СтрокаДокумента.СчетКонтрагента) <> Тип("Строка");
	
	ТипКонтрагента = ?(СтрокаДокумента.ПлательщикСчет = СокрЛП(БанковскийСчет.НомерСчета), "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
	
	Если ЗначениеЗаполнено(СтрокаДокумента[ТипКонтрагента + "ИНН"]) Тогда
		НайденнаяЗаписьОКонтрагенте = НайтиЭлементДерева(ТаблицаКонтрагентов.Строки, "Значение", СтрокаДокумента[ТипКонтрагента + "ИНН"]);
	Иначе
		Окончание = ?(СтрокаДокумента[ТипКонтрагента + "1"] = "", "", "1");
		НайденнаяЗаписьОКонтрагенте = НайтиЭлементДерева(ТаблицаКонтрагентов.Строки, "Значение", СтрокаДокумента[ТипКонтрагента + Окончание]);
	КонецЕсли;
	
	// Контрагент
	Если НайденнаяЗаписьОКонтрагенте = Неопределено Тогда
		
		НовыйКонтрагент = ТаблицаКонтрагентов.Строки.Добавить();
		
		Окончание = ?(СтрокаДокумента[ТипКонтрагента + "1"] = "", "", "1");
		
		НовыйКонтрагент.Представление = СтрокаДокумента[ТипКонтрагента + Окончание];
		НовыйКонтрагент.НомСтроки     = СтрокаДокумента.НомерСтроки;
		НовыйКонтрагент.Загружать     = Истина;
		НовыйКонтрагент.ЭтоКонтрагент = Истина;
		
		ДобавитьОписаниеНовогоРеквизита("Юридическое название", Окончание, ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("ИНН"		  , "ИНН"	 , ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("КПП"		  , "КПП"	 , ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
		
		Если НайденКонтрагент Тогда
			НовыйКонтрагент.Реквизит = СтрокаДокумента.Контрагент;
		КонецЕсли;
		
	Иначе
		
		НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте.Родитель;
		
		Если НовыйКонтрагент = Неопределено Тогда
			НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте;
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныеСтроки = НайтиЭлементДерева(НовыйКонтрагент.Строки, "Значение", СтрокаДокумента[ТипКонтрагента + "СЧЕТ"]);
	
	Если НЕ НайденСчет И НайденныеСтроки = Неопределено Тогда
		
		РеквизитыНовогоКонтрагента = ДобавитьОписаниеНовогоРеквизита("Р/счет", "СЧЕТ", ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
		
		ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ТипКонтрагента + "2"]);
		
		Если ПрямыеРасчеты Тогда
			
			ДобавитьОписаниеНовогоРеквизита("Банк",            "БАНК1",   ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Город банка",     "БАНК2",   ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Код банка",       "БИК",     ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет банка", "КОРСЧЕТ", ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			
		Иначе
			
			ДобавитьОписаниеНовогоРеквизита("Банк",                     "3",        ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Город банка",              "4",        ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет банка",          "РАСЧСЧЕТ", ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("РЦ банка",                 "БАНК1",    ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Местонахождение РЦ банка", "БАНК2",    ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Код РЦ банка",             "БИК",      ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет РЦ банка",       "КОРСЧЕТ",  ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СписокНеНайденных()

#КонецОбласти

Функция ЕстьСимволыВНачалеСтроки(Строка, ПроверяемыеСимволы)
	
	Для Позиция = 1 По СтрДлина(ПроверяемыеСимволы) Цикл
		Символ = Сред(ПроверяемыеСимволы, Позиция, 1);
		СимволНайден = СтрНачинаетсяС(Строка, Символ) ИЛИ СтрЗаканчиваетсяНа(Строка, Символ);
		Если СимволНайден Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СтрокаСодержитТолькоДопустимыеСимволы(СтрокаПроверки, ДопустимыеСимволы)
	
	// Кириллица
	КодСимволаА = КодСимвола("а"); 
	КодСимволаЯ = КодСимвола("я");
	
	// Цифры
	КодСимвола0 = КодСимвола("0");
	КодСимвола9 = КодСимвола("9");
	
	// Латиница
	КодСимволаA = КодСимвола("a");
	КодСимволаZ = КодСимвола("z");
	
	// Спецсимволы
	КодыДопустимыхСимволов = Новый Массив;
	Для Индекс = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		Символ = Сред(ДопустимыеСимволы, Индекс, 1);
		КодыДопустимыхСимволов.Добавить(КодСимвола(Символ));
	КонецЦикла;
	
	КодыДопустимыхСимволов.Добавить(1105); // "ё"
	
	// Проверяем каждым символ в строке
	// допустим ли он.
	Для Индекс = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодПроверяемогоСимвола = КодСимвола(Сред(СтрокаПроверки, Индекс, 1));
		ЭтоДопустимыйСимвол = 
			КодСимволаА <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимволаЯ     // Кириллица
			ИЛИ КодСимволаA <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимволаZ // Латиница
			ИЛИ КодСимвола0 <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимвола9 // Цифры
			ИЛИ КодыДопустимыхСимволов.Найти(КодПроверяемогоСимвола) <> Неопределено;         // Спецсимволы и ё
			
		Если НЕ ЭтоДопустимыйСимвол Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#Область ПроцедурыИФункцииПроверкиВыгружаемыхПлатежныхПоручений

// Функция проверяет корректность данных для выгрузки.
//
&НаСервере
Функция ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента, Форма) Экспорт
	
	ПеречислениеНалога          = Ложь;
	НепрямыеРасчетыУПлательщика = Ложь;
	НепрямыеРасчетыУПолучателя  = Ложь;
	ПеречислениеНалога          = (СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога);
	НепрямыеРасчетыУПлательщика = ЗначениеЗаполнено(СтрокаДокумента.ОрганизацияБанкДляРасчетов);
	НепрямыеРасчетыУПолучателя  = ЗначениеЗаполнено(СтрокаДокумента.КонтрагентБанкДляРасчетов);
	Плательщик = "Организация";
	Получатель = "Контрагент";
	РеквизитыПлДокЭксОсновные = "Номер,Дата,СуммаДокумента";
	РеквизитыПлДокЭксПлательщик = Плательщик + "Счет," + Плательщик + "," + Плательщик + "ИНН";
	РеквизитыПлДокЭксПлательщикНПР = Плательщик + "РасчСчет," + Плательщик + "БанкДляРасчетов," + Плательщик + "ГородБанка," + Плательщик + "БИКРЦБанка";
	РеквизитыПлДокЭксПолучатель = Получатель + "Счет," + Получатель + "," + Получатель + "ИНН";
	РеквизитыПлДокЭксПолучательНПР = Получатель + "РасчСчет," + Получатель + "БанкДляРасчетов," + Получатель + "ГородБанка," + Получатель + "БИКРЦБанка";
	РеквизитыПлДокЭксБюджетПлатеж = "СтатусСоставителя,КПППлательщика,КПППолучателя,КодБК,КодОКАТО,ПоказательОснования,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа";
	
	СтрокаРеквизиты = "%РеквизитыПлДокЭксОсновные%,%РеквизитыПлДокЭксПлательщик%,%РеквизитыПлДокЭксПлательщикНПР%%РеквизитыПлДокЭксПолучатель%,%РеквизитыПлДокЭксПолучательНПР%";
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксОсновные%", РеквизитыПлДокЭксОсновные);
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксПлательщик%", РеквизитыПлДокЭксПлательщик);
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксПлательщикНПР%", ?(НепрямыеРасчетыУПлательщика, РеквизитыПлДокЭксПлательщикНПР + ",", ""));
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксПолучатель%", РеквизитыПлДокЭксПолучатель);
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксПолучательНПР%", ?(НепрямыеРасчетыУПолучателя, РеквизитыПлДокЭксПолучательНПР + ",", ""));
	
	ЭкспортНеПустые = СоздатьСоответствиеИзСтроки(СтрокаРеквизиты);
	
	Для каждого Свойство Из ЭкспортНеПустые Цикл
		ПроверитьНаПустоеЗначениеЭкспорта(СтрокаДокумента, Свойство.Ключ);
	КонецЦикла;
	Если ПеречислениеНалога Тогда
		ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаДокумента, Форма);
	КонецЕсли;
	ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаДокумента);
	
КонецФункции // ПроверитьНаКорректностьИПустоеЗначениеЭкспорта()

// Процедура проверяет пустое значение данных для выгрузки.
//
&НаСервере
Процедура ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, ИмяСвойства)
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта[СокрЛП(ИмяСвойства)]) Тогда
		СтрокаЗамечание = НСтр("ru = 'Не заполнено ""%ИмяСвойства%""!'; uk = 'Не заповнено ""%ИмяСвойства%""!'");
		СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИмяСвойства%", ИмяСвойства);
		ДобавитьЗамечание(СтрокаЭкспорта, 3, СтрокаЗамечание);
		УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаПустоеЗначениеЭкспорта()

// Процедура проверяет корректность номера для выгрузки.
//
&НаСервере
Процедура ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаЭкспорта)
	
	Значение = СокрЛП(СтрокаЭкспорта.Номер);
	Попытка
		Если Число(Строка(Число(Прав(Значение, 3)))) = 0 Тогда
			ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'Номер должен оканчиваться на три цифры и не на ""000""!'; uk = 'Номер повинен закінчуватися на три цифри і не на ""000""!'"));
		КонецЕсли;
	Исключение
		ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'Номер должен оканчиваться на три цифры и не на ""000""!'; uk = 'Номер повинен закінчуватися на три цифри і не на ""000""!'"));
	КонецПопытки;
	
КонецПроцедуры // ПроверитьНаКорректностьНомераПриВыгрузке()

Функция ТолькоНулиВСтроке(Строка)
	
	ЗначащиеСимволы = СокрЛП(СтрЗаменить(Строка, "0", ""));
	Возврат ПустаяСтрока(ЗначащиеСимволы);
	
КонецФункции

// Функция проверяет правильность заполнения налоговых реквизитов.
//
&НаСервере
Функция ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаЭкспорта, Форма)
	
	Ошибка = Новый СписокЗначений();
	П101 = СокрЛП(СтрокаЭкспорта.СтатусСоставителя);
	П104 = СокрЛП(СтрокаЭкспорта.КодБК);
	П105 = СокрЛП(СтрокаЭкспорта.КодОКАТО);
	П106 = СокрЛП(СтрокаЭкспорта.ПоказательОснования);
	П107 = ?(
		ПустаяСтрока(СокрЛП(СтрЗаменить(СтрокаЭкспорта.ПоказательПериода , ".", ""))) = 1,
		"",
		СтрокаЭкспорта.ПоказательПериода
	);
	П107 = ?(
		СокрЛП(СтрЗаменить(СтрокаЭкспорта.ПоказательПериода, ".", "")) = "0",
		"",
		СтрокаЭкспорта.ПоказательПериода
	);
	П108 = СокрЛП(СтрокаЭкспорта.ПоказательНомера);
	П109 = ?(
		НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПоказательДаты),
		"0",
		Строка(СтрокаЭкспорта.ПоказательДаты)
	);
	П110 = СокрЛП(СтрокаЭкспорта.ПоказательТипа);
	УИН = СокрЛП(СтрокаЭкспорта.ИдентификаторПлатежа);
	
	Если (СтрНайти("01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26", П101) = 0)
	 ИЛИ (ПустаяСтрока(СокрЛП(П101))) Тогда
		ДобавитьЗамечание(
			СтрокаЭкспорта,
			3,
			НСтр("ru = 'Неверное значение поля реквизита для платежей в бюджет ""Статус составителя"" на закладке ""Бюджет"".'; uk = 'Невірне значення поля реквізиту для платежів до бюджету "" Статус укладача"" на закладці ""Бюджет"".'")
		);
		УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	Если НЕ (УправлениеНебольшойФирмойКлиентСервер.ДопускаетсяПустойКБК(СтрокаЭкспорта.ВидПеречисленияВБюджет, СтрокаЭкспорта.КонтрагентНомерСчета, СтрокаЭкспорта.Дата)) Тогда
		Если (СтрЗаменить(П104, "0", "") = "")
			 И (СтрНайти("06, 07", П101) = 0) Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'Не заполнено поле ""КБК"" на закладке ""Бюджет"".'; uk = 'Не заповнено поле ""КБК "" на закладці ""Бюджет"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если ПустаяСтрока(П105)
			ИЛИ СтрЗаменить(П105, "0", "") = "" Тогда
			Если СтрокаЭкспорта.Дата >= '20140101' Тогда // ОКТМО действует в любом случае с 01.01.2014 
				ДобавитьЗамечание(
					СтрокаЭкспорта,
					3,
					НСтр("ru = 'Не заполнено поле ""Код ОКТМО"" на закладке ""Бюджет"".'; uk = 'Не заповнено поле ""Код ОКТМО"" на закладці ""Бюджет"".'")
				);
			Иначе
				ДобавитьЗамечание(
					СтрокаЭкспорта,
					3,
					НСтр("ru = 'Не заполнено поле ""Код ОКАТО"" на закладке ""Бюджет"".'; uk = 'Не заповнено поле ""Код ОКАТО"" на закладці ""Бюджет"".'")
				);
			Конецесли;
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
	КонецЕсли;
	
	// Проверяем в зависимости от статуса составителя.
	Если П101 = "08" Тогда
		Если СтрЗаменить(П106, "0", "") <> "" Тогда 
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'При статусе составителя ""08"" следует указать ""0"" в поле ""Основание платежа"" на закладке ""Бюджет"".'; uk = 'При статусі укладача ""08"" слід вказати ""0"" в поле ""Підстава платежу"" на закладці ""Бюджет"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П107, "0", "") <> "" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'При статусе составителя ""08"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Бюджет"".'; uk = 'При статусі укладача ""08"" слід вказати ""0"" в поле ""Податковий період"" на закладці ""Бюджет"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П108, "0", "") <> "" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'При статусе составителя ""08"" не следует заполнять поле ""Номер документа"" на закладке ""Бюджет"".'; uk = 'При статусі укладача ""08"" не потрібно заповняти поле ""Номер документа"" на закладці ""Бюджет"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П109, "0", "") <> "" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'При статусе составителя ""08"" не следует заполнять поле ""Дата документа"" на закладке ""Бюджет"".'; uk = 'При статусі укладача ""08"" не потрібно заповняти поле ""Дата документа"" на закладці ""Бюджет"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П110, "0", "") <> "" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'При статусе составителя ""08"" следует указать ""0"" в поле ""Тип платежа"" на закладке ""Бюджет"".'; uk = 'При статусі укладача ""08"" слід вказати ""0"" в поле ""Тип платежу"" на закладці ""Бюджет"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
	Иначе
		// Проверяем в зависимости от основания платежа.
		Если СтрЗаменить(СокрЛП(П106), "0", "") = "" Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(
						СтрокаЭкспорта,
						3,
						НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'; uk = 'Можливо, невірно вказано значення в полі ""Податковий період"" на закладці ""Бюджет"".'")
					);
					УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(П106) <> 2 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(
						СтрокаЭкспорта,
						3,
						НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""м"".'; uk = 'Можливо, невірно вказано значення в полі ""Податковий період"" на закладці ""М"".'")
					);
					УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрНайти("АП, АР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				ДобавитьЗамечание(
					СтрокаЭкспорта,
					3,
					НСтр("ru = 'При основании платежа ""АП"" или ""АР"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Бюджет"".'; uk = 'При підставі платежу ""АП"" або ""АР"" потрібно вказати ""0"" в полі ""Податковий період"" на закладці ""Бюджет"".'")
				);
				УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
			КонецЕсли;
		ИначеЕсли СтрНайти("ТР, РС, ОТ, РТ, ВУ, ПР, ПБ, ЗТ, ИН", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(
						СтрокаЭкспорта,
						3,
						НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'; uk = 'Можливо, невірно вказано значення в полі ""Податковий період"" на закладці ""Бюджет"".'")
					);
					УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрНайти("ТП ,ЗД ", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				ДД = Сред((П107), 1, 2);
				ММ = Сред((П107), 4, 2);
				ГГ = Сред((П107), 7, 4);
				Если НЕ ММ = "" Тогда
					ММ = Число(Сред((П107), 4, 2));
				Иначе
					ММ = 0;
				КонецЕсли;
				Если НЕ ГГ = "" Тогда
					ГГ = Число(Сред((П107), 7, 4));
				Иначе
					ГГ = 0;
				КонецЕсли;
				Если (СтрНайти("Д1, Д2, Д3, МС", ДД) > 0) Тогда
					Если (ММ < 1)
					 ИЛИ (ММ > 12)
					 ИЛИ (ГГ < 2000)
					 ИЛИ (СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(
							СтрокаЭкспорта,
							3,
							НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'; uk = 'Можливо, невірно вказано значення в полі ""Податковий період"" на закладці ""Бюджет"".'")
						);
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (СтрНайти("КВ", ДД) > 0) Тогда
					Если (ММ < 1)
					 ИЛИ (ММ > 4)
					 ИЛИ (ГГ < 2000)
					 ИЛИ (СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(
							СтрокаЭкспорта,
							3,
							НСтр("ru = 'Неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'; uk = 'Невірно вказано значення в полі ""Податковий період"" на закладці ""Бюджет"".'")
						);
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (СтрНайти("ПЛ", ДД) > 0) Тогда
					Если (ММ < 1)
					 ИЛИ (ММ > 2)
					 ИЛИ (ГГ < 2000)
					 ИЛИ (СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(
							СтрокаЭкспорта,
							3,
							НСтр("ru = 'Неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'; uk = 'Невірно вказано значення в полі ""Податковий період"" на закладці ""Бюджет"".'")
						);
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (СтрНайти("ГД", ДД) > 0) Тогда
					Если (ММ <> 0)
					 ИЛИ (ГГ < 2000)
					 ИЛИ (СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(
							СтрокаЭкспорта,
							3,
							НСтр("ru = 'Неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'; uk = 'Невірно вказано значення в полі ""Податковий період"" на закладці ""Бюджет"".'")
						);
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(П107) Тогда
						ДобавитьЗамечание(
							СтрокаЭкспорта,
							3,
							НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'; uk = 'Можливо, невірно вказано значення в полі ""Податковий період"" на закладці ""Бюджет"".'")
						); 
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П108, "0", "") <> "" Тогда
				ДобавитьЗамечание(
					СтрокаЭкспорта,
					3,
					НСтр("ru = 'При основании платежа ""ТП"" или ""ЗД"" необходимо указывать ""0"" в поле ""Номер документа"" на закладке ""Бюджет"".'; uk = 'При підставі платежу ""ТП"" або ""ЗД"" потрібно вказати ""0"" в полі ""Номер документа"" на закладці ""Бюджет"".'")
				);
				УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
			КонецЕсли;
			Если СтрНайти("ЗД ", П106) > 0 Тогда
				Если СтрЗаменить(П109, "0", "") <> "" Тогда
					ДобавитьЗамечание(
						СтрокаЭкспорта,
						3,
						НСтр("ru = 'При основании платежа ""ЗД"" не должно заполняться поле ""Дата документа"" на закладке ""Бюджет"".'; uk = 'При підставі платежу ""ЗД"" не повинно заповняться поле ""Дата документа"" на закладці ""Бюджет"".'")
					);
					УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрНайти("БФ, ДЕ, ПО, КТ, ИД, ИП, ТУ, БД, ИН, КП", П106) > 0 Тогда
		Иначе
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'Неверно указано значение в поле ""Основание платежа"" на закладке ""Бюджет"".'; uk = 'Невірно вказано значення в поле ""Підстава платежу"" на закладці ""Бюджет"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П110, "0", "") = "" Тогда
		ИначеЕсли СтрНайти("НС, АВ, ПЕ, ПЦ, СА, АШ, ИШ, ПЛ, ГП, ВЗ, ШТ, ЗД", П110) > 0 Тогда
		Иначе
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'Неверно указано значение в поле ""Тип платежа"" на закладке ""Бюджет"".'; uk = 'Невірно вуказано значення в полі ""Тип платежу"" на закладці ""Бюджет"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаЭкспорта.Дата >= '2016-03-28' Тогда // Дополнительные проверки по Приказу Минфина России от 23 сентября 2015 г. № 148н.
												   //  Указание ЦБ РФ от 6 ноября 2015 г. № 3844-У
		Если Лев(СтрокаЭкспорта.ИННПлательщика, 2) = "00" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'Первые две цифры ИНН плательщика не могут быть ""00"".'; uk = 'Перші дві цифри ІПН платника не можуть бути ""00"".'")
			);
		КонецЕсли;
		Если Лев(СтрокаЭкспорта.ИННПолучателя, 2) = "00" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3, 
				НСтр("ru = 'Первые две цифры ИНН получателя не могут быть ""00"".'; uk = 'Перші дві цифри ІПН отримувача не можуть бути ""00"".'")
			);
		КонецЕсли;
		Если Лев(СтрокаЭкспорта.КПППлательщика, 2) = "00" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'КПП плательщика не должен начинаться на ""00"".'; uk = 'КПП плательщика не должен начинаться на ""00"".'")
			);
		КонецЕсли;
		Если Лев(СтрокаЭкспорта.КПППолучателя, 2) = "00" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'КПП получателя не должен начинаться на ""00"".'; uk = 'КПП получателя не должен начинаться на ""00"".'"
			));
		КонецЕсли;
		Если ЗначениеЗаполнено(СокрЛП(УИН))
			И СокрЛП(УИН) <> "0"
			И ТолькоНулиВСтроке(УИН) Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'Все знаки уникального идентификатора начисления не могут одновременно принимать значение ""0"".'; uk = 'Всі знаки унікального ідентифікатора нарахування не можуть одночасно приймати значення ""0"".'"
			));
		КонецЕсли;
	КонецЕсли;
	
	// Выводим список найденых ошибок.
	Для Ном = 0 По Ошибка.Количество() - 1 Цикл
		ТекстСообщения = Ошибка.Получить(Ном);
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(Форма, ТекстСообщения);
	КонецЦикла;
	
	Возврат Ошибка;
	
КонецФункции // ПроверитьЗаполнениеНалоговыхРеквизитов()

// Процедура проверяет устанавливает готовность.
//
&НаСервере
Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)
	
	Если ЗначениеЗаполнено(ТекущаяГотовность)
	   И ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяГотовность) Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;
	
КонецПроцедуры // УстановитьГотовность()

// Процедура добавляет замечание.
//
Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания, ВНачало = Ложь)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания, ВНачало);
	СтруктураДокумента.НомерКартинки = 1;
	УстановитьНомерКартинкиДляПодвалаНаСервере(СтруктураДокумента);
	
КонецПроцедуры // ДобавитьЗамечание()

// Процедура добавляет строку.
//
Процедура ДобавитьВСтроку(Буфер, НоваяСтрока, ВНачало = Ложь)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	ИначеЕсли ВНачало Тогда
		Буфер = НоваяСтрока + Символы.ПС + Буфер;
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьВСтроку()

// Функция создает соответствие из строки.
//
//СМП_РаботаСБанками +++
//Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую)
Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую) Экспорт
//СМП_РаботаСБанками ---

	НовоеСоответствие = Новый Соответствие;
	ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
	Пока ПозицияРазделителя > 0 Цикл
		ИмяИтема = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяИтема, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
	КонецЦикла;
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
	КонецЕсли;
	
	Возврат НовоеСоответствие;
	
КонецФункции // СоздатьСоответствиеИзСтроки()

// Функция возвращает имя свойства (синоним реквизита), который был изменен в документе.
//
Функция ПолучитьИмяСвойстваДляПротокола(ИмяСвойства, Объект)
	
	// Реквизиты документа.
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеНаСчет") Тогда
		РеквизитМетаданных = Метаданные.Документы.ПоступлениеНаСчет.Реквизиты.Найти(ИмяСвойства);
		Если РеквизитМетаданных = Неопределено Тогда
			Возврат Метаданные.Документы.ПоступлениеНаСчет.СтандартныеРеквизиты[ИмяСвойства].Синоним;
		Иначе
			Возврат Метаданные.Документы.ПоступлениеНаСчет.Реквизиты[ИмяСвойства].Синоним;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РасходСоСчета") Тогда
		РеквизитМетаданных = Метаданные.Документы.РасходСоСчета.Реквизиты.Найти(ИмяСвойства);
		Если РеквизитМетаданных = Неопределено Тогда
			Возврат Метаданные.Документы.РасходСоСчета.СтандартныеРеквизиты[ИмяСвойства].Синоним;
		Иначе
			Возврат Метаданные.Документы.РасходСоСчета.Реквизиты[ИмяСвойства].Синоним;
		КонецЕсли;
	// Реквизиты табличной части.
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументТабличнаяЧастьСтрока.ПоступлениеНаСчет.РасшифровкаПлатежа") Тогда
		Возврат Метаданные.Документы.ПоступлениеНаСчет.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты[ИмяСвойства].Синоним;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументТабличнаяЧастьСтрока.РасходСоСчета.РасшифровкаПлатежа") Тогда
		Возврат Метаданные.Документы.РасходСоСчета.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты[ИмяСвойства].Синоним;
	// Имя свойства как оно есть.
	Иначе
		Возврат ИмяСвойства;
	КонецЕсли;
	
КонецФункции // ПолучитьИмяСвойстваДляПротокола()

Функция ПолучитьКурсВалюты(Валюта, ДатаКурса)
	
	Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
	
	Возврат Структура;
	
КонецФункции

Функция ПересчитатьИзВалютыВВалюту(Сумма, КурсНач, КурсКон,	КратностьНач = 1, КратностьКон = 1) Экспорт
	
	Если (КурсНач = КурсКон) И (КратностьНач = КратностьКон) Тогда
		Возврат Сумма;
	КонецЕсли;
	
	Если КурсНач = 0
	 ИЛИ КурсКон = 0
	 ИЛИ КратностьНач = 0
	 ИЛИ КратностьКон = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Обнаружен нулевой курс валюты. Пересчет не выполнен.'; uk = 'Виявлено нульовий курс валюти. Перерахунок не виконано.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Сумма;
	КонецЕсли;
	
	СуммаПересчитанная = Окр((Сумма * КурсНач * КратностьКон) / (КурсКон * КратностьНач), 2);
	
	Возврат СуммаПересчитанная;
	
КонецФункции

#КонецОбласти

// Процедура формирует соответствие непустых при загрузке.
//
//СМП_РаботаСБанками +++
//Процедура СформироватьСоответствияНеПустыхПриИмпорте(ИмпортНеПустые, ИмпортНеПустыеПлатежноеПоручение, ИмпортНеПустыеПлатежноеПоручениеБюджет)
Процедура СформироватьСоответствияНеПустыхПриИмпорте(ИмпортНеПустые, ИмпортНеПустыеПлатежноеПоручение, ИмпортНеПустыеПлатежноеПоручениеБюджет) Экспорт
//СМП_РаботаСБанками ---
	
	ИмпортНеПустыеПлатежноеПоручение = СоздатьСоответствиеИзСтроки(
		"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН");
	
	// По наличию статуса составителя определяется что платеж - налоговый.
	ИмпортНеПустыеПлатежноеПоручениеБюджет = СоздатьСоответствиеИзСтроки(
		"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН,"
	  + "СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования,"
	  + "ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа");
	
	ИмпортНеПустые = Новый Массив;
	ИмпортНеПустые.Добавить(ИмпортНеПустыеПлатежноеПоручение);
	ИмпортНеПустые.Добавить(ИмпортНеПустыеПлатежноеПоручениеБюджет);
	
КонецПроцедуры

Функция ПолучитьВыборкуПоНомеруСчета(НомерСчета, ЕстьОтборПоБанковскомуСчету, БанковскийСчет)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Владелец КАК Владелец,
	|	БанковскиеСчета.ВалютаДенежныхСредств.Наименование КАК Валюта,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.ВалютаДенежныхСредств КАК ВалютаДС,
	|	БанковскиеСчета.ВалютаДенежныхСредств.СимвольноеПредставление КАК ВалютаСимвольноеПредставление
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(БанковскиеСчета.Владелец) = ТИП(Справочник.Организации)
	|	И (НЕ &ЕстьОтборПоБанковскомуСчету
	|				И БанковскиеСчета.НомерСчета = &НомерСчета
	|			ИЛИ &ЕстьОтборПоБанковскомуСчету
	|				И БанковскиеСчета.Ссылка = &БанковскийСчет)
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|	И НЕ БанковскиеСчета.Недействителен";
	
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	Запрос.УстановитьПараметр("ЕстьОтборПоБанковскомуСчету", ЕстьОтборПоБанковскомуСчету);
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

//СМП_РаботаСБанками +++
//Функция СформироватьСоответствиеЗагружаемых()
Функция СформироватьСоответствиеЗагружаемых() Экспорт 
//СМП_РаботаСБанками ---
	
	ИмпортЗагружаемые = СоздатьСоответствиеИзСтроки(
		ВРег("Номер,Дата,Сумма,ВидПлатежа,ВидОплаты,КвитанцияДата,КвитанцияВремя,КвитанцияСодержание,ДатаСписано,ДатаПоступило,"
		   + "ПлательщикСчет,Плательщик,ПлательщикИНН,Плательщик1,ПлательщикРасчСчет,ПлательщикБанк1,ПлательщикБанк2,ПлательщикБИК,ПлательщикКорсчет,Плательщик2,Плательщик3,Плательщик4,"
		   + "ПолучательСчет,Получатель,ПолучательИНН,Получатель1,ПолучательРасчСчет,ПолучательБанк1,ПолучательБанк2,ПолучательБИК,ПолучательКорсчет,Получатель2,Получатель3,Получатель4,"
		   + "СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа,"
		   + "НазначениеПлатежа,НазначениеПлатежа1,НазначениеПлатежа2,НазначениеПлатежа3,НазначениеПлатежа4,НазначениеПлатежа5,НазначениеПлатежа6,"
		   + "Очередность,СрокПлатежа,УсловиеОплаты1,УсловиеОплаты2,УсловиеОплаты3,СрокАкцепта,ВидАккредитива,ПлатежПоПредст,ДополнУсловия,НомерСчетаПоставщика,ДатаОтсылкиДок,Код,"
		   + "КодНазПлатежа"));
	
	Возврат ИмпортЗагружаемые;
	
КонецФункции // СформироватьСоответствиеЗагружаемых()

//СМП_РаботаСБанками +++
//Процедура ПроверитьНаПустоеЗначениеИмпорта(СтрокаИмпорта, ИмяСвойства, ПредставлениеСвойства, ИмпортНеПустые)
Процедура ПроверитьНаПустоеЗначениеИмпорта(СтрокаИмпорта, ИмяСвойства, ПредставлениеСвойства, ИмпортНеПустые) Экспорт
	
	Если СтрНайти(Врег(ИмяСвойства), "ИНН") <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	//СМП_РаботаСБанками ---
	
	Если ИмпортНеПустые[0][ИмяСвойства] = Истина Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаИмпорта[ИмяСвойства]) Тогда
			СтрокаЗамечание = НСтр("ru = 'Не заполнено ""%ИмяСвойства%"".'; uk = 'Не заповнено ""%ИмяСвойства%"".'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИмяСвойства%", ИмяСвойства);
			ДобавитьЗамечание(СтрокаИмпорта, 3, СтрокаЗамечание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаПустоеЗначениеИмпорта()

Процедура УстановитьНомерКартинкиДляПодвалаНаСервере(ДанныеСтроки)
	
	ДанныеСтроки.НомерКартинкиДляПодвала = ?(ДанныеСтроки.НомерКартинки = -1, 0, ДанныеСтроки.НомерКартинки);
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьВыделятьКолонки(ДокументыКИмпорту, ПараметрыВыделенияКолонок)
	
	ПараметрыВыделенияКолонок.ВыделитьКолонкуВидОперации = Ложь;
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		Если СтрНайти(СтрокаДокумента.ОписаниеОшибокПодТЧ, НСтр("ru = 'Проверьте операцию'; uk = 'Перевірте операцію'")) > 0 Тогда
			ПараметрыВыделенияКолонок.ВыделитьКолонкуВидОперации = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//СМП_РаботаСБанками +++
//Процедура РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, Документ, ПараметрыВыделенияКолонок, Объект, ТаблицаТаблицДокументов, КонтекстФормы, ПослеЗагрузкиВыписокВ1С = Ложь)
Процедура РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, Документ, ПараметрыВыделенияКолонок, Объект, ТаблицаТаблицДокументов, КонтекстФормы, ПослеЗагрузкиВыписокВ1С = Ложь) Экспорт
//СМП_РаботаСБанками ---

	//СМП_РаботаСБанками +++
	СтрокаДокумента.Получатель = СтрЗаменить(СтрокаДокумента.Получатель, """""", """");
	Если Лев(СтрокаДокумента.Получатель, 1) = """" Тогда
		СтрокаДокумента.Получатель = Сред(СтрокаДокумента.Получатель, 2, СтрДлина(СтрокаДокумента.Получатель) - 1);
		СтрокаДокумента.Получатель = ?(Прав(СтрокаДокумента.Получатель, 1) = """", Лев(СтрокаДокумента.Получатель, СтрДлина(СтрокаДокумента.Получатель) - 1), СтрокаДокумента.Получатель);
	КонецЕсли;
	
	СтрокаДокумента.Плательщик = СтрЗаменить(СтрокаДокумента.Плательщик, """""", """");
	Если Лев(СтрокаДокумента.Плательщик, 1) = """" Тогда
		СтрокаДокумента.Плательщик = Сред(СтрокаДокумента.Плательщик, 2, СтрДлина(СтрокаДокумента.Плательщик) - 1);
		СтрокаДокумента.Плательщик = ?(Прав(СтрокаДокумента.Плательщик, 1) = """", Лев(СтрокаДокумента.Плательщик, СтрДлина(СтрокаДокумента.Плательщик) - 1), СтрокаДокумента.Плательщик);
	КонецЕсли;
	//СМП_РаботаСБанками ---
	
	// Предопределенные значения
	ВидОперацииВзносНаличных = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными;
	ВидОперацииСписаниеНаличных = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных;
	ВидОперацииПереводСДругогоСчета = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета;
	ВидОперацииПереводНаДругойСчет = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет;
	ВидОперацииОтКурьерскойКомпанииПочты = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты;
	
	ДействиеНеСоздаватьНовогоКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
	
	СпособЗачетаВручную = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	СпособЗачетаАвтоматически = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
	СпособРазнесенияОплатыПоУмолчанию = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособРазнесенияОплатыПоУмолчанию();
	// Конец Предопределенные значения
	
	// Сводим старый и новый форматы
	
	//СМП_РаботаСБанками +++
	//ЗаполнитьЗначенияСвойств(СтрокаДокумента, Документ);
	//СтрокаДокумента.Операция = Документ.Вид;
	//
	//СтрокаДокумента.Плательщик =         ?(Документ.ПлательщикРеквизиты.Свойство("НаименованиеРасширенное"), Документ.ПлательщикРеквизиты.НаименованиеРасширенное, "");
	//СтрокаДокумента.Плательщик1 =        ?(Документ.ПлательщикРеквизиты.Свойство("Наименование"),			 Документ.ПлательщикРеквизиты.Наименование, "");
	//СтрокаДокумента.ПлательщикБИК =      ?(Документ.ПлательщикРеквизиты.Свойство("БИК"),					 Документ.ПлательщикРеквизиты.БИК, "");
	//СтрокаДокумента.ПлательщикБанк1 =    ?(Документ.ПлательщикРеквизиты.Свойство("Банк"),					 Документ.ПлательщикРеквизиты.Банк, "");
	//СтрокаДокумента.ПлательщикБанк2 =    ?(Документ.ПлательщикРеквизиты.Свойство("ГородБанка"),				 Документ.ПлательщикРеквизиты.ГородБанка, "");
	//СтрокаДокумента.ПлательщикКПП =      ?(Документ.ПлательщикРеквизиты.Свойство("КПП"),					 Документ.ПлательщикРеквизиты.КПП, "");
	//СтрокаДокумента.ПлательщикКорСчет =  ?(Документ.ПлательщикРеквизиты.Свойство("КорСчет"),				 Документ.ПлательщикРеквизиты.КорСчет, "");
	//СтрокаДокумента.ПлательщикРасчСчет = ?(Документ.ПлательщикРеквизиты.Свойство("РасчСчет"),				 Документ.ПлательщикРеквизиты.РасчСчет, "");
	//
	//СтрокаДокумента.Получатель =         ?(Документ.ПолучательРеквизиты.Свойство("НаименованиеРасширенное"), Документ.ПолучательРеквизиты.НаименованиеРасширенное, "");
	//СтрокаДокумента.Получатель1 =        ?(Документ.ПолучательРеквизиты.Свойство("Наименование"),			 Документ.ПолучательРеквизиты.Наименование, "");
	//СтрокаДокумента.ПолучательБИК =      ?(Документ.ПолучательРеквизиты.Свойство("БИК"),					 Документ.ПолучательРеквизиты.БИК, "");
	//СтрокаДокумента.ПолучательБанк1 =    ?(Документ.ПолучательРеквизиты.Свойство("Банк"),					 Документ.ПолучательРеквизиты.Банк, "");
	//СтрокаДокумента.ПолучательБанк2 =    ?(Документ.ПолучательРеквизиты.Свойство("ГородБанка"),				 Документ.ПолучательРеквизиты.ГородБанка, "");
	//СтрокаДокумента.ПолучательКорСчет =  ?(Документ.ПолучательРеквизиты.Свойство("КорСчет"),				 Документ.ПолучательРеквизиты.КорСчет, "");
	//СтрокаДокумента.ПолучательРасчСчет = ?(Документ.ПолучательРеквизиты.Свойство("РасчСчет"),				 Документ.ПолучательРеквизиты.РасчСчет, "");
	//
	//СтрокаДокумента.Сумма = СтрЗаменить(Документ.Сумма, Символы.НПП, "");
	
	РеквизитПоискаКлиента = "КодПоЕДРПОУ";
	Если Документ <> Неопределено тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, Документ);
		СтрокаДокумента.Операция = Документ.Вид;
		
		СтрокаДокумента.Плательщик =         ?(Документ.ПлательщикРеквизиты.Свойство("НаименованиеРасширенное"), Документ.ПлательщикРеквизиты.НаименованиеРасширенное, "");
		СтрокаДокумента.Плательщик1 =        ?(Документ.ПлательщикРеквизиты.Свойство("Наименование"),			 Документ.ПлательщикРеквизиты.Наименование, "");
		СтрокаДокумента.ПлательщикБИК =      ?(Документ.ПлательщикРеквизиты.Свойство("БИК"),					 Документ.ПлательщикРеквизиты.БИК, "");
		СтрокаДокумента.ПлательщикБанк1 =    ?(Документ.ПлательщикРеквизиты.Свойство("Банк"),					 Документ.ПлательщикРеквизиты.Банк, "");
		СтрокаДокумента.ПлательщикБанк2 =    ?(Документ.ПлательщикРеквизиты.Свойство("ГородБанка"),				 Документ.ПлательщикРеквизиты.ГородБанка, "");
		СтрокаДокумента.ПлательщикКПП =      ?(Документ.ПлательщикРеквизиты.Свойство("КПП"),					 Документ.ПлательщикРеквизиты.КПП, "");
		СтрокаДокумента.ПлательщикКорСчет =  ?(Документ.ПлательщикРеквизиты.Свойство("КорСчет"),				 Документ.ПлательщикРеквизиты.КорСчет, "");
		СтрокаДокумента.ПлательщикРасчСчет = ?(Документ.ПлательщикРеквизиты.Свойство("РасчСчет"),				 Документ.ПлательщикРеквизиты.РасчСчет, "");
		
		СтрокаДокумента.Получатель =         ?(Документ.ПолучательРеквизиты.Свойство("НаименованиеРасширенное"), Документ.ПолучательРеквизиты.НаименованиеРасширенное, "");
		СтрокаДокумента.Получатель1 =        ?(Документ.ПолучательРеквизиты.Свойство("Наименование"),			 Документ.ПолучательРеквизиты.Наименование, "");
		СтрокаДокумента.ПолучательБИК =      ?(Документ.ПолучательРеквизиты.Свойство("БИК"),					 Документ.ПолучательРеквизиты.БИК, "");
		СтрокаДокумента.ПолучательБанк1 =    ?(Документ.ПолучательРеквизиты.Свойство("Банк"),					 Документ.ПолучательРеквизиты.Банк, "");
		СтрокаДокумента.ПолучательБанк2 =    ?(Документ.ПолучательРеквизиты.Свойство("ГородБанка"),				 Документ.ПолучательРеквизиты.ГородБанка, "");
		СтрокаДокумента.ПолучательКорСчет =  ?(Документ.ПолучательРеквизиты.Свойство("КорСчет"),				 Документ.ПолучательРеквизиты.КорСчет, "");
		СтрокаДокумента.ПолучательРасчСчет = ?(Документ.ПолучательРеквизиты.Свойство("РасчСчет"),				 Документ.ПолучательРеквизиты.РасчСчет, "");
		
		СтрокаДокумента.Сумма = СтрЗаменить(Документ.Сумма, Символы.НПП, "");
		
	КонецЕсли;
	ИскатьВСправочникеСоответствий = СМП_ЕстьЗаписиВСправочникеСоответствий();
	//СМП_РаботаСБанками ---
	
	//СМП_РаботаСБанками +++
	//СтруктураЗначенийИзСоответствия = ПолучитьДанныеИзСоответствияНазначенияПлатежа(СтрокаДокумента, КонтекстФормы.ИскатьВСправочникеСоответствий);
	СтруктураЗначенийИзСоответствия = ПолучитьДанныеИзСоответствияНазначенияПлатежа(СтрокаДокумента, ИскатьВСправочникеСоответствий);
	//СМП_РаботаСБанками ---
	ПустаяДата = Дата("00010101");
	
	// Установим номера картинок.
	СтрокаДокумента.КонтрагентНеНайденКартинка = -1;
	СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = -1;
	СтрокаДокумента.ДоговорНеНайденКартинка = -1;
	
	// 1) Определим вид платежа: входящий или исходящий.
	ПлатежноеПоручение = ВРег(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ";
	Исходящий = (СтрокаДокумента.ПлательщикСчет = СокрЛП(Объект.БанковскийСчет.НомерСчета));
	
	СтрокаДокумента.Исходящий = Исходящий;
	
	// 2) Определим вид документа в программе.
	ВидДокумента = ?(Исходящий, "РасходСоСчета", "ПоступлениеНаСчет"); // Не локализуется
	ИмяДокумента = ?(Исходящий, НСтр("ru = 'Расход со счета'; uk = 'Витрата з рахунка'"), НСтр("ru = 'Поступление на счет'; uk = 'Надходження на рахунок'"));
	
	СтрокаДокумента.ИмяДокумента = ИмяДокумента;
	СтрокаДокумента.ВидДокумента = ВидДокумента;
	РеквизитСчета = ?(Исходящий, "БанковскийСчет", "СчетКонтрагента"); // Не локализуется
	
	// 10) Определим сумму.
	
	// Преобразуем из строки в число.
	Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
	
	Если ПустаяСтрока(Буфер) Тогда
		СтрокаДокумента.НеВерныйФорматСуммыКартинка = 0;
		СтрокаЗамечание = НСтр("ru = 'Сумма не указана'; uk = 'Сума не вказана'");
		ДобавитьЗамечание(СтрокаДокумента, 4, СтрокаЗамечание);
		Если Исходящий Тогда
			ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаСписано = Истина;
		Иначе
			ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаПоступило = Истина;
		КонецЕсли;
	ИначеЕсли Не ЕстьНеЦифрыНаСервере(СтрЗаменить(СтрЗаменить(СтрЗаменить(Буфер, ".", ""), "-", ""), ",", "")) Тогда
		Сумма = Число(Буфер);
		Если Сумма < 0 Тогда
			Сумма = - Сумма;
		КонецЕсли;
		СтрокаДокумента.СуммаДокумента = Сумма;
		Если Исходящий Тогда
			СтрокаДокумента.СуммаСписано = Сумма;
			СтрокаДокумента.СуммаСписаноСМинусом = -Сумма;
		Иначе
			СтрокаДокумента.СуммаПоступило = Сумма;
		КонецЕсли;
		СтрокаДокумента.НеВерныйФорматСуммыКартинка = -1;
	Иначе
		СтрокаДокумента.НеВерныйФорматСуммыКартинка = 0;
		СтрокаЗамечание = НСтр("ru = 'Укажите сумму вручную (%Буфер%)'; uk = 'Вкажіть суму вручну (%Буфер%)'");
		СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Буфер%", Буфер);
		ДобавитьЗамечание(СтрокаДокумента, 4, СтрокаЗамечание);
		Если Исходящий Тогда
			ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаСписано = Истина;
		Иначе
			ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаПоступило = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// 3) Найдем ранее загруженный (введенный вручную) документ.
	// Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.
	
	// Распознаем дату документа.
	ДатаДок = ПустаяДата;
	
	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаСписано) Тогда
		Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.ДатаСписано);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) И НЕ ПустаяСтрока(СтрокаДокумента.ДатаПоступило) Тогда
		Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.ДатаПоступило);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.Дата);
	КонецЕсли;

	Если ЗначениеЗаполнено(Результат) Тогда
		СтрокаДокумента.ДатаДок = Результат;
		НомерДляПоискаДок = СтрокаДокумента.Номер;
		РеквизитДаты = "ДатаВходящегоДокумента";
		РеквизитНомера = "НомерВходящегоДокумента";
		ВсеРеквизитыПоискаЕсть = Истина;
	Иначе
		ВсеРеквизитыПоискаЕсть = Ложь;
	КонецЕсли;
	
	СтрокаДокумента.НомерДок = СтрокаДокумента.Номер;
	СтрокаДокумента.НесколькоДокументовКартинка = -1;
	
	АнализироватьИсторию = Ложь;
	ДокументНайден = Ложь;
	Если ВсеРеквизитыПоискаЕсть Тогда
		
		// При наличии нескольких предпочтение отдается первому, с совпадающим
		// номером счета.
		ЗапросПоискаДокумента = Новый Запрос;
		ЗапросПоискаДокумента.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлатежныеДокументы.Ссылка,
		|	ПлатежныеДокументы.ВидОперации,
		|	ПлатежныеДокументы.Статья,
		|	ПлатежныеДокументы.СчетКонтрагента,
		|	ПлатежныеДокументы.Контрагент,
		|	ПлатежныеДокументы.Контрагент.ИНН КАК КонтрагентИНН,
		|	ПлатежныеДокументы.Контрагент.Наименование КАК КонтрагентНаименование,
		|	ПлатежныеДокументы.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
		|	ПлатежныеДокументы.Проведен,
		|	ПлатежныеДокументы." + РеквизитНомера + " КАК Номер,
		|	ПлатежныеДокументы." + РеквизитДаты + " КАК Дата,
		|	ПлатежныеДокументы.Дата КАК ДатаДок,
		|	ПлатежныеДокументы.СчетКонтрагента.НомерСчета КАК НомерСчета,
		|	ПлатежныеДокументы.Организация,
		|	ПлатежныеДокументы.Корреспонденция,
		|	ПлатежныеДокументы.Касса,
		|	ПлатежныеДокументы.СуммаДокумента КАК Сумма,
		|	ТипЗначения(ПлатежныеДокументы.Ссылка) КАК ВидДокумента,
		|	ПлатежныеДокументы.ДокументОснование КАК ПлатежноеПоручение,
		|	ПлатежныеДокументы.БанковскаяОперация КАК БанковскаяОперация,
		|	ПлатежныеДокументы.ВидНалога КАК ВидНалога,
		|	ПлатежныеДокументы.Подотчетник КАК Подотчетник,
		|	&ЗаменитьНаСрокУплаты
		|ИЗ
		|	Документ." + СтрокаДокумента.ВидДокумента + " КАК ПлатежныеДокументы
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ПлатежныеДокументы." + РеквизитДаты + ", ДЕНЬ)= &ДатаДок
		|	И ПлатежныеДокументы.БанковскийСчет = &БанковскийСчет
		|	И ПлатежныеДокументы.Организация = &Организация";
		
		Если НРег(СтрокаДокумента.ВидДокумента) = НРег("РасходСоСчета") Тогда
			ЗапросПоискаДокумента.Текст = СтрЗаменить(ЗапросПоискаДокумента.Текст, "&ЗаменитьНаСрокУплаты", "ПлатежныеДокументы.СрокУплаты КАК СрокУплаты");
		Иначе
			ЗапросПоискаДокумента.Текст = СтрЗаменить(ЗапросПоискаДокумента.Текст, "&ЗаменитьНаСрокУплаты", "Неопределено КАК СрокУплаты");
		КонецЕсли;
		//СМП_РаботаСБанками +++
		//ЗапросПоискаДокумента.УстановитьПараметр("ДатаДок", ДатаДок);
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаДок", НачалоДня(ДатаДок));
		//СМП_РаботаСБанками ---
		ЗапросПоискаДокумента.УстановитьПараметр("Организация", Объект.Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("БанковскийСчет", Объект.БанковскийСчет);
		Результат = ЗапросПоискаДокумента.Выполнить();
		ВыборкаДокументов = Результат.Выбрать();
		СчетДляПоискаДок = ?(Исходящий, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
		ДлинаНомера = СтрДлина(НомерДляПоискаДок);
		КоличествоДок = 0;
		
		СтрокаСТаблицейДокументов = ТаблицаТаблицДокументов.Добавить();
		СтрокаСТаблицейДокументов.НомерСтрокиВТаблицеИмпорта = СтрокаДокумента.Владелец().Индекс(СтрокаДокумента);
		СтрокаСТаблицейДокументов.ТаблицаНайденныхДокументов = КонтекстФормы.ТаблицаНайденныхДокументов.Скопировать();
		
		Пока ВыборкаДокументов.Следующий() Цикл
															// Так не очень корректно, т.к. нумерация за расчетное обслуживание может быть одна, а по фактическим операциям другая.
			ВыборкаНомер = СокрЛП(ВыборкаДокументов.Номер); // Прав(СокрЛП(ВыборкаДокументов.Номер), ДлинаНомера);
			Если ВыборкаНомер = НомерДляПоискаДок
				И (НЕ ЗначениеЗаполнено(ВыборкаДокументов.НомерСчета) ИЛИ ВыборкаДокументов.НомерСчета = СчетДляПоискаДок) Тогда
				
				БудетОбрабатыватьсяПриЗагрузке = Ложь;
				
				ДокументПодходит = Истина;
				Если КоличествоДок = 0 Тогда
					
					Если СтрокаДокумента.СуммаДокумента <> ВыборкаДокументов.Сумма И НЕ ВыборкаДокументов.Проведен Тогда
						
						ДокументПодходит = Ложь;
						
					// У документа может быть нужный номер и дата, но он может быть не тот, что нужен.
					// Из банка иногда приходит файл, в котором у документов разного вида будут одинаковые номера, например,
					// у банковского ордера и платежного поручения.
					ИначеЕсли СтрокаДокумента.СуммаДокумента <> ВыборкаДокументов.Сумма 
						И (СокрЛП(ВРег(СтрокаДокумента.Операция)) <> СокрЛП(ВРег(ВыборкаДокументов.БанковскаяОперация)) 
						И ЗначениеЗаполнено(СтрокаДокумента.Операция) 
						И ЗначениеЗаполнено(ВыборкаДокументов.БанковскаяОперация)) Тогда
						
						ДокументПодходит = Ложь;
						
					КонецЕсли;
					
					Если ДокументПодходит Тогда
						
						СтрокаДокумента.Документ = ВыборкаДокументов.Ссылка;
						Если ПослеЗагрузкиВыписокВ1С Тогда
							СтрокаДокумента.ДокументНайден = Строка(ВыборкаДокументов.Ссылка);
						Иначе
							Шаблон = ?(СтрокаДокумента.Исходящий, НСтр("ru = 'Найден %1'; uk = 'Знайдено %1'"), НСтр("ru = 'Найдено %1'; uk = 'Знайдено %1'"));
							СтрокаДокумента.ДокументНайден =  СтрШаблон(Шаблон, ВыборкаДокументов.Ссылка);
						КонецЕсли;
						СтрокаДокумента.Проведен = ВыборкаДокументов.Проведен;
						СтрокаДокумента.НомерДок = ВыборкаДокументов.Номер;
						
						//СМП_РаботаСБанками +++
						//СтрокаДокумента.ДатаДок = ВыборкаДокументов.Дата;
						СтрокаДокумента.ДатаДок = ВыборкаДокументов.ДатаДок;
						//СМП_РаботаСБанками ---
						
						СтрокаДокумента.ВидОперации = ВыборкаДокументов.ВидОперации;
						СтрокаДокумента.СтатьяДДС = ВыборкаДокументов.Статья; 
						СтрокаДокумента.СчетКонтрагента = ВыборкаДокументов.СчетКонтрагента;
						Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета
							ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет
							Тогда
							
							//
							
						ИначеЕсли СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными
							ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных
							Тогда
							
							СтрокаДокумента.Касса = ВыборкаДокументов.Касса;
							
						Иначе
							СтрокаДокумента.Контрагент = ВыборкаДокументов.Контрагент;
						КонецЕсли;
						СтрокаДокумента.Корреспонденция = ВыборкаДокументов.Корреспонденция;
						БудетОбрабатыватьсяПриЗагрузке = Истина;
						
						// Налоги
						СтрокаДокумента.ВидНалога = ВыборкаДокументов.ВидНалога;
						СтрокаДокумента.СрокУплаты = ВыборкаДокументов.СрокУплаты;
						
						// Зарплата
						Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику Тогда
							СтрокаДокумента.Контрагент = ВыборкаДокументов.Подотчетник;
						КонецЕсли;
						
						// Подотчетнику
						Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику Тогда
							СтрокаДокумента.Контрагент = ВыборкаДокументов.Подотчетник;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				Если ДокументПодходит Тогда
					КоличествоДок = КоличествоДок + 1;
				КонецЕсли;
				
				// Поместим данные о документа в служебную таблицу.
				СтрокаНайденныеДокументы = СтрокаСТаблицейДокументов.ТаблицаНайденныхДокументов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНайденныеДокументы, ВыборкаДокументов);
				СтрокаНайденныеДокументы.БудетОбрабатыватьсяПриЗагрузке = БудетОбрабатыватьсяПриЗагрузке;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоДок > 1 Тогда
			
			СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%КоличествоДок%) соответствующих документов.'; uk = 'В інформаційній базі знайдено декілька (%КоличествоДок%) відповідних документів.'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%КоличествоДок%", КоличествоДок);
			
			Если Не ПослеЗагрузкиВыписокВ1С Тогда
				СтрокаДокумента.ДокументНайден = СтрокаДокумента.ДокументНайден + НСтр("ru = '. И еще %КоличествоДок% док.'; uk = '. І ще %КоличествоДок% док.'");
				СтрокаДокумента.ДокументНайден = СтрЗаменить(СтрокаДокумента.ДокументНайден, "%КоличествоДок%", КоличествоДок-1);
			КонецЕсли;
			
			ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
			ПараметрыВыделенияКолонок.ВыделитьКолонкуДокумент = Истина;
			СтрокаДокумента.НесколькоДокументовКартинка = 0;
			
		КонецЕсли;
		
		// Если документ уже есть в ИБ, то берем все данные из него.
		ДокументНайден = ЗначениеЗаполнено(СтрокаДокумента.Документ);
		Если ДокументНайден Тогда
			
			Документ = СтрокаДокумента.Документ; 
			СтрокаДокумента.БанковскийСчет = Объект.БанковскийСчет;
			
			Если Документ.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаДокумента.Договор = Документ.РасшифровкаПлатежа[0].Договор;
				СтрокаДокумента.ПризнакАванса = Документ.РасшифровкаПлатежа[0].ПризнакАванса;
				СтрокаДокумента.Заказ = Документ.РасшифровкаПлатежа[0].Заказ;
				СтрокаДокумента.ДокументРасчетов = Документ.РасшифровкаПлатежа[0].Документ;
				СтрокаДокумента.СчетНаОплату = Документ.РасшифровкаПлатежа[0].СчетНаОплату;
				Если ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
					СтрокаДокумента.ПлатежноеПоручение = Документ.ДокументОснование;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			АнализироватьИсторию = Истина;
		КонецЕсли;
		
	Иначе // Попробуем собрать статистику использования данных по выбранному контрагенту.
		
		АнализироватьИсторию = Истина;
	КонецЕсли;
	
	#Область ВидОперации
	// 4) Определяем вид операции документа.
	ЭтоПереводМеждуСчетами = Ложь;
	ЭтоСнятиеИлиВзносНаличных = Ложь;
	ЭтоКомиссия = Ложь;
	ЭтоПлатежСотруднику = Ложь;
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		
		НеСоздаватьНовыхЭлементов = Ложь;
		
		Если Исходящий Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.СтатусСоставителя) И СокрП(СтрокаДокумента.СтатусСоставителя) <> "0" Тогда // перечисление налога 
				Если СтрокаДокумента.СтатусСоставителя = "06" ИЛИ СтрокаДокумента.СтатусСоставителя = "08" 
				 ИЛИ ((Число(СтрокаДокумента.СтатусСоставителя) >= 16) И (Число(СтрокаДокумента.СтатусСоставителя) <= 20)) Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
				Иначе
					ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.Налоги;
				КонецЕсли;
				СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
			ИначеЕсли Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", СтрокаДокумента.ПолучательСчет).Владелец = Объект.БанковскийСчет.Владелец Тогда // перевод на другой счет
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет;
				СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
				ЭтоПереводМеждуСчетами = Истина;
				НеСоздаватьНовыхЭлементов = Истина;
				
			ИначеЕсли ЭтоСчетКассыКредитнойОрганизации(БалансовыйСчет(СтрокаДокумента.ПолучательСчет)) Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных;
				СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
				ЭтоСнятиеИлиВзносНаличных = Истина;
				НеСоздаватьНовыхЭлементов = Истина;
				
			ИначеЕсли ЭтоКомиссияБанка(СтрокаДокумента, Исходящий) Тогда
				ЭтоКомиссия = Истина;
				ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
				СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
				
			ИначеЕсли ТипЗнч(Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", СтрокаДокумента.ПолучательСчет).Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда // Сотруднику
				ЭтоПлатежСотруднику = Истина;
				ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику;
				СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
				
			Иначе // оплата поставщику
				
				ВидОперацииДокумента = ПроверитьВидОперации(СтрокаДокумента, ПараметрыВыделенияКолонок, СтруктураЗначенийИзСоответствия);
				
			КонецЕсли;
		ИначеЕсли Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", СтрокаДокумента.ПлательщикСчет).Владелец = Объект.БанковскийСчет.Владелец Тогда // перевод на другой счет
			
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета;
			СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
			ЭтоПереводМеждуСчетами = Истина;
			НеСоздаватьНовыхЭлементов = Истина;
			
		ИначеЕсли ЭтоСчетКассыКредитнойОрганизации(БалансовыйСчет(СтрокаДокумента.ПлательщикСчет)) Тогда
			
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными;
			СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
			ЭтоСнятиеИлиВзносНаличных = Истина;
			НеСоздаватьНовыхЭлементов = Истина;
			
		Иначе
			
			ВидОперацииДокумента = ПроверитьВидОперации(СтрокаДокумента, ПараметрыВыделенияКолонок, СтруктураЗначенийИзСоответствия);
			
		КонецЕсли;
		
		Если НеСоздаватьНовыхЭлементов Тогда
			СтрокаДокумента.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
			СтрокаДокумента.ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
			СтрокаДокумента.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
		КонецЕсли;
		
		СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
	Иначе
		ВидОперацииДокумента = СтрокаДокумента.ВидОперации;
		СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
	КонецЕсли;
	#КонецОбласти
	
	// 5) Определяем банковский счет организации
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.БанковскийСчет) Тогда
		СтрокаДокумента.БанковскийСчет = Объект.БанковскийСчет;
	КонецЕсли;
	
	#Область БанковскийСчет
	// 6) Определяем банковский счет контрагента
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
		ЗапросПоискаСчета = Новый Запрос;
		Если ОрганизацияПлательщик(ВидДокумента) Тогда
			СчетКонтрагента = СтрокаДокумента.ПолучательСчет;
			ИННКонтрагента = СтрокаДокумента.ПолучательИНН;
			КППКонтрагента = СтрокаДокумента.ПолучательКПП;
			Если ЗначениеЗаполнено(СтрокаДокумента.Получатель1) Тогда
				ИмяКонтрагента = СтрокаДокумента.Получатель1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Получатель;
			КонецЕсли;
			БИКСчета = СтрокаДокумента.ПолучательБИК;
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СокрЛП(СтрокаДокумента.ПолучательСчет));
		Иначе
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СокрЛП(СтрокаДокумента.ПлательщикСчет));
			СчетКонтрагента = СтрокаДокумента.ПлательщикСчет;
			ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
			КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
			Если СтрокаДокумента.Плательщик1 <> "" Тогда
				ИмяКонтрагента = СтрокаДокумента.Плательщик1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Плательщик;
			КонецЕсли;
			БИКСчета = СтрокаДокумента.ПлательщикБИК;
		КонецЕсли;
		Если СокрЛП(КППКонтрагента) = "0" Тогда
			КППКонтрагента = "";
		КонецЕсли;
		
		Если ПустаяСтрока(СчетКонтрагента) Тогда
			
			СтрокаЗамечание = НСтр("ru = 'Не найден счет контрагента (%СчетКонтрагента%).'; uk = 'Не знайдено рахунок контрагента (%СчетКонтрагента%).'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%СчетКонтрагента%", СчетКонтрагента);
			
			ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
			
			СтрокаСчетКонтрагента = НСтр("ru = 'Не найден (%СчетКонтрагента%).'; uk = 'Не знайдено (%СчетКонтрагента%).'");
			СтрокаСчетКонтрагента = СтрЗаменить(СтрокаСчетКонтрагента, "%СчетКонтрагента%", СчетКонтрагента);
			СтрокаДокумента.СчетКонтрагента = СтрокаСчетКонтрагента;
			СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаСчетКонтрагента;
			ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
			СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
			
		Иначе
		
			ЗапросПоискаСчета.УстановитьПараметр("ИННКонтрагента", ИННКонтрагента);
			ЗапросПоискаСчета.УстановитьПараметр("КППКонтрагента", КППКонтрагента);
			ЗапросПоискаСчета.УстановитьПараметр("ИмяКонтрагента", ИмяКонтрагента);
			ИмяКонтрагентаДополнительно = СтрЗаменить(ИмяКонтрагента, "ё", "е");
			ИмяКонтрагентаДополнительно = СтрЗаменить(ИмяКонтрагентаДополнительно, "Ё", "Е");
			ЗапросПоискаСчета.УстановитьПараметр("ИмяКонтрагентаДополнительно", ИмяКонтрагентаДополнительно);
			ЗапросПоискаСчета.УстановитьПараметр("БИКБанка", БИКСчета);
			
			ЗапросПоискаСчета.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БанковскиеСчета.Владелец КАК Владелец,
			|	БанковскиеСчета.Владелец.ИНН КАК ВладелецИНН,
			|	БанковскиеСчета.Владелец." + РеквизитПоискаКлиента + " КАК ВладелецКПП,
			|	БанковскиеСчета.Ссылка КАК Ссылка,
			|	БанковскиеСчета.НомерСчета КАК НомерСчета,
			|	БанковскиеСчета.Банк.Код КАК БИК_из_Базы,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.Банк.Код = &БИКБанка
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетБИК,
			|	ВЫБОР
			|		КОГДА ВЫБОР
			//СМП_РаботаСБанками +++
			//|				КОГДА БанковскиеСчета.Владелец.КПП = ""0""
			//|					ТОГДА """"
			//|				ИНАЧЕ БанковскиеСчета.Владелец.КПП
			|				КОГДА БанковскиеСчета.Владелец." + РеквизитПоискаКлиента + " = ""0""
			|					ТОГДА """"
			|				ИНАЧЕ БанковскиеСчета.Владелец." + РеквизитПоискаКлиента + "
			//СМП_РаботаСБанками ---
			|			КОНЕЦ = &КППКонтрагента
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетКПП,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.Владелец.ИНН = &ИННКонтрагента
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетИНН,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.Владелец.Наименование = &ИмяКонтрагента
			|				ИЛИ БанковскиеСчета.Владелец.Наименование = &ИмяКонтрагентаДополнительно
			|				ИЛИ (ВЫРАЗИТЬ(БанковскиеСчета.Владелец.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагента
			|				ИЛИ (ВЫРАЗИТЬ(БанковскиеСчета.Владелец.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагентаДополнительно
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетНаименования
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Контрагенты
			|	И БанковскиеСчета.НомерСчета = &НомерСчета
			|	И НЕ БанковскиеСчета.ПометкаУдаления
			|	И НЕ БанковскиеСчета.Недействителен
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПриоритетИНН,
			|	ПриоритетБИК,
			|	ПриоритетНаименования,
			|	ПриоритетКПП";
			
			Если ЭтоПереводМеждуСчетами Тогда
				ЗапросПоискаСчета.Текст = СтрЗаменить(ЗапросПоискаСчета.Текст,
					"БанковскиеСчета.Владелец ССЫЛКА Справочник.Контрагенты",
					"БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации");
			ИначеЕсли ЭтоПлатежСотруднику Тогда
				ЗапросПоискаСчета.Текст = СтрЗаменить(ЗапросПоискаСчета.Текст,
					"БанковскиеСчета.Владелец ССЫЛКА Справочник.Контрагенты",
					"БанковскиеСчета.Владелец ССЫЛКА Справочник.ФизическиеЛица");
			КонецЕсли;
			
			РезультатЗапросаПоБС = ЗапросПоискаСчета.Выполнить();
			ВыборкаПоиска = РезультатЗапросаПоБС.Выбрать();
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			
			// Нужно обработать следующую ситуацию.
			// У контрагента изменился ИНН, но номер счета остался прежним.
			// Будем в этом случае выдавать предупреждающее сообщение и предлагать создать нового контрагента, если не нашли
			// контрагента с нужным ИНН.
			
			КонтрагентНеНайден = Истина;
			Если ВыборкаПоиска.Следующий() Тогда
				ПроверкаБИКа = Ложь;
				
				// Если в файле указан ИНН контрагента, но мы его не нашли.
				Если НЕ ПустаяСтрока(ИННКонтрагента) И ВыборкаПоиска.ПриоритетИНН = 2 И ВыборкаПоиска.ПриоритетНаименования = 2 Тогда
					
					СтрокаЗамечание = НСтр("ru = 'Банковский счет найден у контрагента с другим ИНН (%ВладелецИНН%).'; uk = 'Банківский рахунок знайдено у контрагента с другим ІПН (%ВладелецИНН%).'");
					Если ЗначениеЗаполнено(ВыборкаПоиска.ВладелецИНН) Тогда
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", ВыборкаПоиска.ВладелецИНН);
					Иначе
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", НСтр("ru = '<Не заполнен>'; uk = '<Не заповнено>'"));
					КонецЕсли;
					ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
					СтрокаДокумента.СчетКонтрагента = СтрокаЗамечание;
					СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаЗамечание;
					ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
					СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
					СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
					
				Иначе
					
					КонтрагентНеНайден = Ложь;
					
					СтрокаДокумента.СчетКонтрагента = ВыборкаПоиска.Ссылка;
					Контрагент = ВыборкаПоиска.Владелец;
					СтрокаДокумента.КонтрагентНеНайденКартинка = -1;
					
					// Не совпадает БИК в базе и в выписке.
					Если (ВыборкаПоиска.ПриоритетБИК = 2) Тогда
						// Проверим БИК банка. Может не совпадать. Например у разных контрагентов есть разные счета в разных банках,
						// но с одинаковым номером.
						ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
						СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
						
						СтрокаЗамечание = НСтр("ru = 'БИК банка счета контрагента в базе (%БИК_из_Базы%) не совпадает с БИК банка в выписке (%БИК_в_Выписке%).'; uk = 'БІК банка рахунка контрагента в базі (%БИК_из_Базы%) не співпадає з БІК банка у виписці (%БИК_в_Выписке%).'");
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%БИК_из_Базы%", ?(ЗначениеЗаполнено(ВыборкаПоиска.БИК_из_Базы), ВыборкаПоиска.БИК_из_Базы, НСтр("ru = '<пустой>'")));
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%БИК_в_Выписке%", ?(ЗначениеЗаполнено(БИКСчета), БИКСчета, НСтр("ru = '<пустой>'")));
						ДобавитьЗамечание(СтрокаДокумента, 4, СтрокаЗамечание);
					КонецЕсли;
					
					// Не совпадает ИНН (в частности, когда ИНН не заполнен в ИБ.
					Если НЕ ПустаяСтрока(ИННКонтрагента) И ВыборкаПоиска.ПриоритетИНН = 2 Тогда
						СтрокаЗамечание = НСтр("ru = 'Банковский счет найден у контрагента с другим ИНН (%ВладелецИНН%).'; uk = 'Банківський рахунок знайдено у контрагента з іншим ІПН (%ВладелецИНН%).'");
						Если ЗначениеЗаполнено(ВыборкаПоиска.ВладелецИНН) Тогда
							СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", ВыборкаПоиска.ВладелецИНН);
						Иначе
							СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", НСтр("ru = '<Не заполнен>'; uk = '<Не заповнено>'"));
						КонецЕсли;
						ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
						СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаЗамечание;
						ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
						СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
						СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если КонтрагентНеНайден Тогда
				СтрокаЗамечание = НСтр("ru = 'Не найден счет контрагента (%СчетКонтрагента%).'; uk = 'Не знайдено рахунок контрагента (%СчетКонтрагента%).'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%СчетКонтрагента%", СчетКонтрагента);
				
				ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
				
				СтрокаСчетКонтрагента = НСтр("ru = 'Не найден (%СчетКонтрагента%).'; uk = 'Не знайдено (%СчетКонтрагента%).'");
				СтрокаСчетКонтрагента = СтрЗаменить(СтрокаСчетКонтрагента, "%СчетКонтрагента%", СчетКонтрагента);
				СтрокаДокумента.СчетКонтрагента = СтрокаСчетКонтрагента;
				СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаСчетКонтрагента;
				ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
				СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
			КонецЕсли;
			
			// Если ИНН не указан, то в выборку попадут все контрагенты, у которых есть счет с нужным номером.
			// Если ИНН указан, то нужно сообщать только количестве счетов у контрагентов с ИНН как в выписке из банка.
			Если НЕ ПустаяСтрока(ИННКонтрагента) Тогда
				КоличествоЭлементовВВыборке = 0;
				ВыборкаПоиска.Сбросить();
				Пока ВыборкаПоиска.Следующий() Цикл
					Если ВыборкаПоиска.ВладелецИНН = ИННКонтрагента Тогда
						КоличествоЭлементовВВыборке = КоличествоЭлементовВВыборке + 1;
					КонецЕсли;
				КонецЦикла;
			Иначе
				КоличествоЭлементовВВыборке = ВыборкаПоиска.Количество();
			КонецЕсли;
			
			Если КоличествоЭлементовВВыборке > 1 Тогда
				// Если ИНН и наименование контрагента совпадают с теми, что указаны в выписке, то не будем выдавать сообщения о
				// нескольких РС.
				СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%Количество%) одинаковых банковских счетов. Проверьте контрагента и р/счет.'; uk = 'В інформаційній базі знайдено декілька (%Количество%) однакових банківських рахунків. Перевірте контрагента та р/р.'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Количество%", КоличествоЭлементовВВыборке);
				ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
				Если ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка") ИЛИ Не ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
					СтрокаДокумента.СчетКонтрагента = СтрокаЗамечание;
				КонецЕсли;
				СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаСчетКонтрагента;
				ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
				СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
				СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область КассаОрганизации
	// Определим кассу организации для операций снятия наличных и взноса наличных на счет организации.
	Если ЭтоСнятиеИлиВзносНаличных И СтрокаДокумента.Касса.Пустая() Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Кассы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Кассы КАК Кассы
			|ГДЕ
			|	НЕ Кассы.ПометкаУдаления
			|ИТОГИ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
			|ПО
			|	ОБЩИЕ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ВыборкаОбщийИтог.Следующий();		// Общий итог
		
		Если ВыборкаОбщийИтог.Ссылка = 1 Тогда
			
			ВыборкаДетальныеЗаписи = ВыборкаОбщийИтог.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			
			СтрокаДокумента.Касса = ВыборкаДетальныеЗаписи.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область Контрагент
	
	// 7) Определим контрагента.
	ДанныеКонтрагентаПолучены = Ложь;
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СтрокаДокумента.Контрагент = Контрагент;
		
		//СМП_РаботаСБанками +++
		//ИначеЕсли НЕ ПустаяСтрока(ИННКонтрагента) Тогда
		ИначеЕсли НЕ ПустаяСтрока(ИННКонтрагента) или НЕ ПустаяСтрока(КППКонтрагента)Тогда
		//СМП_РаботаСБанками ---
			
			СтрокаДокумента.Контрагент = Контрагент;
			ЗапросПоискаКонтрагента = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка КАК Ссылка,
			|	Контрагенты.ИНН КАК ИНН,
			|	Контрагенты.Наименование КАК Наименование,
			|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
			|	ВЫБОР
			//СМП_РаботаСБанками +++
			//|		КОГДА Контрагенты.КПП = ""0""
			//|			ТОГДА """"
			//|		ИНАЧЕ Контрагенты.КПП
			|		КОГДА Контрагенты." + РеквизитПоискаКлиента + " = ""0""
			|			ТОГДА """"
			|		ИНАЧЕ Контрагенты." + РеквизитПоискаКлиента + "
			//СМП_РаботаСБанками ---
			|	КОНЕЦ КАК КПП,
			|	ВЫБОР
			|		КОГДА ВЫБОР
			//СМП_РаботаСБанками +++
			//|				КОГДА Контрагенты.КПП = ""0""
			//|					ТОГДА """"
			//|				ИНАЧЕ Контрагенты.КПП
			|				КОГДА Контрагенты." + РеквизитПоискаКлиента + " = ""0""
			|					ТОГДА """"
			|				ИНАЧЕ Контрагенты." + РеквизитПоискаКлиента + "
			//СМП_РаботаСБанками ---
			|			КОНЕЦ = &КППКонтрагента
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетКПП,
			|	ВЫБОР
			|		КОГДА Контрагенты.ИНН = &КонтрагентИНН
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетИНН,
			|	ВЫБОР
			|		КОГДА Контрагенты.Наименование = &ИмяКонтрагента
			|				ИЛИ Контрагенты.Наименование = &ИмяКонтрагентаДополнительно
			|				ИЛИ (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагента
			|				ИЛИ (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагентаДополнительно
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетНаименования
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			//СМП_РаботаСБанками +++
			//|	(Контрагенты.ИНН = &КонтрагентИНН
			|	(" + ?(РеквизитПоискаКлиента = "КодПоЕДРПОУ","Контрагенты." + РеквизитПоискаКлиента + " = &КППКонтрагента","Контрагенты.ИНН = &КонтрагентИНН") + "
			//СМП_РаботаСБанками ---
			|			ИЛИ ВЫБОР
			|				КОГДА Контрагенты.Наименование = &ИмяКонтрагента
			|						ИЛИ Контрагенты.Наименование = &ИмяКонтрагентаДополнительно
			|						ИЛИ (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагента
			|						ИЛИ (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагентаДополнительно
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПриоритетИНН,
			|	ПриоритетНаименования,
			|	ПриоритетКПП");
			
			ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентИНН", ИННКонтрагента);
			ЗапросПоискаКонтрагента.УстановитьПараметр("КППКонтрагента", КППКонтрагента);
			ЗапросПоискаКонтрагента.УстановитьПараметр("ИмяКонтрагента", ИмяКонтрагента);
			ЗапросПоискаКонтрагента.УстановитьПараметр("ИмяКонтрагентаДополнительно", ИмяКонтрагентаДополнительно);
			
			ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выбрать();
			
			Если ВыборкаПоиска.Следующий() Тогда
				СтрокаДокумента.Контрагент = ВыборкаПоиска.Ссылка;
				
				ИННКонтрагентаВБазе = ВыборкаПоиска.ИНН;
				КППКонтрагентаВБазе = ВыборкаПоиска.КПП;
				
				НаименованиеПолноеКонтрагентаВБазе = ВыборкаПоиска.НаименованиеПолное;
				
				ДанныеКонтрагентаПолучены = Истина;
				
				//СМП_РаботаСБанками +++
				//Если ПустаяСтрока(ВыборкаПоиска.ИНН) Тогда
				Если ПустаяСтрока(ВыборкаПоиска.ИНН) и РеквизитПоискаКлиента <> "КодПоЕДРПОУ" Тогда
				//СМП_РаботаСБанками ---
				
					СтрокаЗамечание = НСтр("ru = 'У контрагента не заполнен ИНН!'; uk = 'У контрагента не заповнений ІПН!'");
					ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
					ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
					СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
					
				//СМП_РаботаСБанками +++
				ИначеЕсли  ПустаяСтрока(ВыборкаПоиска.КПП) и РеквизитПоискаКлиента = "КодПоЕДРПОУ" Тогда
					СтрокаЗамечание = НСтр("ru = 'У контрагента не заполнен код ЕДРПОУ!'; uk = 'У контрагента не заповнений код ЄДРПОУ!'");
					ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
					ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
					СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
				//СМП_РаботаСБанками ---
				
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВыборкаПоиска.Количество() > 1 Тогда
				СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%Количество%) контрагентов с одинаковым ИНН.'; uk = 'В інформаційній базі знайдено декілька (%Количество%) контрагентів з однаковим ІПН.'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Количество%", ВыборкаПоиска.Количество());
				ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
				ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
				СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
			ИначеЕсли ВыборкаПоиска.Количество() = 0 Тогда
				
				//СМП_РаботаСБанками +++
				//СтрокаЗамечание = НСтр("ru = 'Не найден контрагент (%ИмяКонтрагента%, ИНН %ИННКонтрагента%).'");
				//СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИмяКонтрагента%", ИмяКонтрагента);
				//СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИННКонтрагента%", ИННКонтрагента);
				//ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание, Истина);
				//СтрокаКонтрагент = НСтр("ru = 'Не найден (%ИмяКонтрагента%, ИНН %ИННКонтрагента%).'");
				//СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИмяКонтрагента%", ИмяКонтрагента);
				//СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИННКонтрагента%", ИННКонтрагента);
				
				Если РеквизитПоискаКлиента = "КодПоЕДРПОУ" Тогда
					СтрокаЗамечание = НСтр("ru = 'Не найден контрагент (%ИмяКонтрагента%, ЕДРПОУ %ИННКонтрагента%).'; uk = 'Не знайдено контрагента (%ИмяКонтрагента%, ЄДРПОУ %ИННКонтрагента%).'");
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИмяКонтрагента%", ИмяКонтрагента);
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИННКонтрагента%", КППКонтрагента);
					ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание, Истина);
					СтрокаКонтрагент = НСтр("ru = 'Не найден (%ИмяКонтрагента%, ЕДРПОУ %ИННКонтрагента%).'; uk = 'Не знайдений (%ИмяКонтрагента%, ЄДРПОУ %ИННКонтрагента%).'");
					СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИмяКонтрагента%", ИмяКонтрагента);
					СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИННКонтрагента%", КППКонтрагента);
				Иначе
					СтрокаЗамечание = НСтр("ru = 'Не найден контрагент (%ИмяКонтрагента%, ИНН %ИННКонтрагента%).'; uk = 'Не знайдено контрагента (%ИмяКонтрагента%, ІПН %ИННКонтрагента%).'");
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИмяКонтрагента%", ИмяКонтрагента);
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИННКонтрагента%", ИННКонтрагента);
					ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание, Истина);
					СтрокаКонтрагент = НСтр("ru = 'Не найден (%ИмяКонтрагента%, ИНН %ИННКонтрагента%).'; uk = 'Не знайдений (%ИмяКонтрагента%, ІПН %ИННКонтрагента%).'");
					СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИмяКонтрагента%", ИмяКонтрагента);
					СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИННКонтрагента%", ИННКонтрагента);
				КонецЕсли;
				//СМП_РаботаСБанками ---
				
				СтрокаДокумента.Контрагент = СтрокаКонтрагент; // БЫЛО РАНЬШЕ - СтрокаСчетКонтрагента;
				ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
				СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
			КонецЕсли;
			
		Иначе
			ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru = 'Не указан ИНН контрагента.'; uk = 'Не вказаний ІПН контрагента.'"), Истина);
			СтрокаКонтрагент = НСтр("ru = 'Не найден (%ИмяКонтрагента%, не указан ИНН).'; uk = 'Не знайдено (%ИмяКонтрагента%, не вказаний ІПН).'");
			СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИмяКонтрагента%", ИмяКонтрагента);
			СтрокаДокумента.Контрагент = СтрокаКонтрагент;
			ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
			СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
		КонецЕсли;
	КонецЕсли;
	
	
	// Если платеж осуществляется сотруднику, подставляем первого подходящего сотрудника по найденному физ лицу
	Если ЭтоПлатежСотруднику И ЗначениеЗаполнено(Контрагент) Тогда
		
		ЗапросПоСотруднику = Новый Запрос;
		ЗапросПоСотруднику.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Физлицо = &Физлицо
			|	И НЕ Сотрудники.Недействителен
			|	И НЕ Сотрудники.ПометкаУдаления";
		
		ЗапросПоСотруднику.УстановитьПараметр("Физлицо", Контрагент);
		
		ВыборкаСотрудник = ЗапросПоСотруднику.Выполнить().Выбрать();
		
		Если ВыборкаСотрудник.Следующий() Тогда
			СтрокаДокумента.Контрагент = ВыборкаСотрудник.Ссылка;
			СтрокаДокумента.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
			СтрокаДокумента.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
			СтрокаДокумента.КонтрагентНайден = Истина;
			Контрагент = ВыборкаСотрудник.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим совпадают ли данные контрагента в выписке с данными в информационной базе.
	// Если не совпадают, то будем выводить восклицательный знак.
	Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если НЕ ДанныеКонтрагентаПолучены И ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
			ИННКонтрагентаВБазе = СтрокаДокумента.Контрагент.ИНН;
			КППКонтрагентаВБазе = "0";
			//СМП_РаботаСБанками +++
			ЕДРПОУКонтрагентаВБазе = СтрокаДокумента.Контрагент.КодПоЕДРПОУ;
			//СМП_РаботаСБанками ---
			Если СокрЛП(КППКонтрагентаВБазе) = "0" Тогда
				КППКонтрагентаВБазе = "";
			КонецЕсли;
			НаименованиеПолноеКонтрагентаВБазе = СтрокаДокумента.Контрагент.НаименованиеПолное;
		КонецЕсли;
		Если ИмяКонтрагента = Неопределено Тогда
			Если ОрганизацияПлательщик(ВидДокумента) Тогда
				ИННКонтрагента = СтрокаДокумента.ПолучательИНН;
				КППКонтрагента = СтрокаДокумента.ПолучательКПП;
				Если ЗначениеЗаполнено(СтрокаДокумента.Получатель1) Тогда
					ИмяКонтрагента = СтрокаДокумента.Получатель1;
				Иначе
					ИмяКонтрагента = СтрокаДокумента.Получатель;
				КонецЕсли;
			Иначе
				ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
				КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
				Если СтрокаДокумента.Плательщик1 <> "" Тогда
					ИмяКонтрагента = СтрокаДокумента.Плательщик1;
				Иначе
					ИмяКонтрагента = СтрокаДокумента.Плательщик;
				КонецЕсли;
			КонецЕсли;
			
			Если СокрЛП(КППКонтрагента) = "0" Тогда
				КППКонтрагента = "";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) И СтрокаДокумента.КонтрагентНеНайденКартинка = -1 Тогда
			
			//СМП_РаботаСБанками +++
			Если (ИННКонтрагентаВБазе <> ИННКонтрагента И РеквизитПоискаКлиента <> "КодПоЕДРПОУ")
				//ИЛИ КППКонтрагентаВБазе <> КППКонтрагента
				ИЛИ (КППКонтрагентаВБазе <> КППКонтрагента И ЕДРПОУКонтрагентаВБазе <> КППКонтрагента)
			//СМП_РаботаСБанками ---
				
				ИЛИ ВРег(СокрЛП(НаименованиеПолноеКонтрагентаВБазе)) <> ВРег(СокрЛП(ИмяКонтрагента)) Тогда
				
				СтрокаПроверки = "";
				РеквизитовДляПроверки = 0;
				
				//СМП_РаботаСБанками +++
				//Если ИННКонтрагентаВБазе <> ИННКонтрагента Тогда
				Если РеквизитПоискаКлиента <> "КодПоЕДРПОУ" И ИННКонтрагентаВБазе <> ИННКонтрагента Тогда
					СтрокаПроверки = НСтр("ru = 'ИНН%'; uk = 'ИНН%'");
					РеквизитовДляПроверки = РеквизитовДляПроверки + 1;
				КонецЕсли;
				
				//Если КППКонтрагентаВБазе <> КППКонтрагента Тогда
				Если КППКонтрагентаВБазе <> КППКонтрагента И ЕДРПОУКонтрагентаВБазе <> КППКонтрагента Тогда
					
					//СтрокаПроверки = СтрокаПроверки + НСтр("ru = 'КПП%'");
					СтрокаПроверки = СтрокаПроверки + НСтр("ru = '" + РеквизитПоискаКлиента + "%'");
					//СМП_РаботаСБанками ---
					
					РеквизитовДляПроверки = РеквизитовДляПроверки + 1;
				КонецЕсли;
				Если ВРег(СокрЛП(НаименованиеПолноеКонтрагентаВБазе)) <> ВРег(СокрЛП(ИмяКонтрагента)) Тогда
					СтрокаПроверки = СтрокаПроверки + НСтр("ru = 'юридическое название%'; uk = 'юридическое название%'");
					РеквизитовДляПроверки = РеквизитовДляПроверки + 1;
				КонецЕсли;
				СтрокаПроверки = Лев(СтрокаПроверки, СтрДлина(СтрокаПроверки) - 1);
				
				Если РеквизитовДляПроверки = 2 Тогда
					СтрокаПроверки = СтрЗаменить(СтрокаПроверки, "%", " и "); // Не локализуется
				Иначе
					СтрокаПроверки = СтрЗаменить(СтрокаПроверки, "%", ", "); // Не локализуется
				КонецЕсли;
				
				СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
				ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
				Если РеквизитовДляПроверки = 1 Тогда
					СтрокаЗамечание = НСтр("ru = 'Проверьте %СтрокаПроверки% контрагента.'; uk = 'Перевірте %СтрокаПроверки% контрагента.'");
				Иначе
					СтрокаЗамечание = НСтр("ru = 'Проверьте реквизиты контрагента: %СтрокаПроверки%.'; uk = 'Перевірте реквізити контрагента: %СтрокаПроверки%.'");
				КонецЕсли;
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%СтрокаПроверки%", СтрокаПроверки);
				ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
				ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Для новых контрагентов не будем выводить информацию о том, что не найден РС или договор.
		СтрокаДокумента.ОписаниеОшибок = УдалитьДанныеИзОписанияОшибкиНаСервере(НСтр("ru = 'Не найден счет контрагента'; uk = 'Не знайдено рахунок контрагента'"), СтрокаДокумента.ОписаниеОшибок, СтрокаДокумента);
	КонецЕсли;
	
	#КонецОбласти
	
	ВидОперацииОпределен = Ложь;
	
	// 14) Поищем платежное поручение, заказ покупателя и счет на оплату.
	//     Ищем только точное совпадение суммы, вхождение номера и года.
	Если Не ДокументНайден Тогда
		// Поищем платежное поручение и заполним все по нему, если найдем.
		НашлиПП = Ложь;
		
		Если Объект.АвтоматическиПодставлятьДокументы Тогда
			Если Исходящий Тогда
				СтруктураВозвратаПП = ОпределитьПлатежноеПоручение(СтрокаДокумента);
				НашлиПП = СтруктураВозвратаПП.НашлиПП;
			КонецЕсли;
			
			// Поищем заказ или счет на оплату. Если найдем, то договор возьмем оттуда.
			ДоговорВЗаказеСчете = ОпределитьЗаказИСчетНаСервере(СтрокаДокумента, Объект);
			// Поищем расчетный документ. Если договор уже определили, то документы ищем с отбором по договору.
			// Более приоритетны расчетные документы, которые связаны с найденным заказом.
			Если ЗначениеЗаполнено(ДоговорВЗаказеСчете) Тогда
				ОпределитьДокументРасчетовНаСервере(СтрокаДокумента, Объект, ДоговорВЗаказеСчете);
			Иначе
				ДоговорВЗаказеСчете = ОпределитьДокументРасчетовНаСервере(СтрокаДокумента, Объект);
			КонецЕсли;
			
			// Если заказ и счет на оплату определить не удалось, то поищем их в связанных документах.
			// Если они там есть в единственном экземпляре, то подставим их.
			Если ЗначениеЗаполнено(СтрокаДокумента.ДокументРасчетов)
				И НЕ ЗначениеЗаполнено(СтрокаДокумента.Заказ)
				И НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетНаОплату) Тогда
				СчетНаОплату = УчетРасчетовСКонтрагентами.ПолучитьСчетНаОплатуПоОснованию(СтрокаДокумента.ДокументРасчетов, Истина);
				СчетНаОплатуПоставщика = УчетРасчетовСКонтрагентами.ПолучитьСчетНаОплатуПоОснованию(СтрокаДокумента.ДокументРасчетов, Ложь);
				Если ЗначениеЗаполнено(СчетНаОплату) И НЕ ЗначениеЗаполнено(СчетНаОплатуПоставщика) Тогда
					СтрокаДокумента.СчетНаОплату = СчетНаОплату;
				ИначеЕсли НЕ ЗначениеЗаполнено(СчетНаОплату) И ЗначениеЗаполнено(СчетНаОплатуПоставщика) Тогда
					СтрокаДокумента.СчетНаОплату = СчетНаОплатуПоставщика;
				КонецЕсли;
			КонецЕсли;
			
			Если НашлиПП Тогда
				
				Если СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа.Количество() = 1 Тогда
					
					// Документ расчетов
					Если ЗначениеЗаполнено(СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].Документ) Тогда
						СтрокаДокумента.ДокументРасчетов = СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].Документ;
					КонецЕсли;
					
					// Заказ
					Если ЗначениеЗаполнено(СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].Заказ) Тогда
						СтрокаДокумента.Заказ = СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].Заказ;
					КонецЕсли;
					
					// Счет на оплату
					Если ЗначениеЗаполнено(СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].СчетНаОплату) Тогда
						СтрокаДокумента.СчетНаОплату = СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].СчетНаОплату;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаДокумента.Заказ) Тогда
					
					Если ТипЗнч(СтруктураВозвратаПП.ДокументОснованиеПП) = Тип("ДокументСсылка.ЗаказПоставщику")
						И ЗначениеЗаполнено(СтруктураВозвратаПП.ДокументОснованиеПП) Тогда
						СтрокаДокумента.Заказ = СтруктураВозвратаПП.ДокументОснованиеПП;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрокаДокумента.Договор) И ЗначениеЗаполнено(СтруктураВозвратаПП.Договор) Тогда
						СтрокаДокумента.Договор = СтруктураВозвратаПП.Договор;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаДокумента.СчетНаОплату) Тогда
					
					Если ТипЗнч(СтруктураВозвратаПП.ДокументОснованиеПП) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") 
						И ЗначениеЗаполнено(СтруктураВозвратаПП.ДокументОснованиеПП) Тогда
						
						Если СтруктураВозвратаПП.ДокументОснованиеПП.Контрагент = СтрокаДокумента.Контрагент Тогда
							СтрокаДокумента.СчетНаОплату = СтруктураВозвратаПП.ДокументОснованиеПП;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Попробуем определить вид операции по данным в ПП.
				Если СтруктураВозвратаПП.ВидОперацииПП <> Неопределено Тогда
					
					ВидОперацииОпределен = Истина;
					
					Если СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.Зарплата Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.ЛичныеСредстваПредпринимателя Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.НаРасходы Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.Покупателю Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.Прочее Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.ПрочиеРасчеты Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.Подотчетнику Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику;
					Иначе
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
						ВидОперацииОпределен = Ложь;
					КонецЕсли;
					
					Если ВидОперацииОпределен Тогда
						// Удалим предупреждение о проверке вида операции.
						СтрокаДокумента.ОписаниеОшибок = УдалитьДанныеИзОписанияОшибкиНаСервере(НСтр("ru = 'Проверьте операцию'; uk = 'Перевірте операцію'"), СтрокаДокумента.ОписаниеОшибок, СтрокаДокумента);
						СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
					КонецЕсли;
					
				КонецЕсли;
				
				// Корреспонденция и статья ДДС
				Если СтруктураВозвратаПП.КорреспонденцияПП <> Неопределено Тогда
					СтрокаДокумента.Корреспонденция = СтруктураВозвратаПП.КорреспонденцияПП;
				КонецЕсли;
				Если СтруктураВозвратаПП.СтатьяДДС_ПП <> Неопределено Тогда
					СтрокаДокумента.СтатьяДДС = СтруктураВозвратаПП.СтатьяДДС_ПП;
				КонецЕсли;
				
			ИначеЕсли Не ДоговорВЗаказеСчете.Пустая() Тогда
				СтрокаДокумента.Договор = ДоговорВЗаказеСчете;
			КонецЕсли; // Если НашлиПП Тогда
		Иначе
			ДоговорВЗаказеСчете = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
		// Заполним договор, вид операции, статью ДДС и корреспонденцию по данным из предыдущих документов (загрузок).
		Если Объект.АнализироватьИсториюВыбораЗначенийРеквизитов
			И АнализироватьИсторию И (ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты")) 
			И ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
			
			ВыполнитьАнализИсторииНаСервере(СтрокаДокумента, Объект, ДоговорВЗаказеСчете, ПараметрыВыделенияКолонок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Исходящий Тогда
		СтрокаДокумента.ВидОперацииСписание = СтрокаДокумента.ВидОперации;
	Иначе
		СтрокаДокумента.ВидОперацииПоступление = СтрокаДокумента.ВидОперации;
	КонецЕсли;
	
	// 8) Определим договор контрагента
	Если СтрокаДокумента.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Налоги
	И СтрокаДокумента.ВидОперации <> Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги
	И СтрокаДокумента.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику
	И СтрокаДокумента.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику
	И НЕ ЗначениеЗаполнено(СтрокаДокумента.Договор) Тогда
	    СтруктураДанныхПоискаДоговора = НайтиДоговорВВидеСтруктуры(СтрокаДокумента.Контрагент, Объект.Организация);
		СтрокаДокумента.Договор = СтруктураДанныхПоискаДоговора.Договор;
		Если СтрНайти(СтрокаДокумента.Договор, НСтр("ru = 'Не найден'; uk = 'Не знайдено'")) > 0 Тогда
			СтруктураДанныхПоискаДоговора = НайтиДоговорВВидеСтруктуры(СтрокаДокумента.Контрагент);
			СтрокаДокумента.Договор = СтруктураДанныхПоискаДоговора.Договор;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
				
				Если ТипЗнч(СтрокаДокумента.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					СтрокаЗамечания = НСтр("ru = 'Организация в договоре отличается от организации счета.'; uk = 'Організація в договорі відрізняється від організації рахунка.'");
					ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечания);
				КонецЕсли;
				
				ПараметрыВыделенияКолонок.ВыделитьКолонкуДоговор = Истина;
				СтрокаДокумента.ДоговорНеНайденКартинка = 0;
				
			КонецЕсли;
		КонецЕсли;
		// Если контрагент новый и будет создан новый, то не будем сообщать, что не найден договор и РС.
		Если СтрНайти(СтрокаДокумента.Договор, НСтр("ru = 'Не найден'; uk = 'Не знайдено'")) > 0 И ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка") Тогда
			ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru = 'Не найден договор контрагента.'; uk = 'Не знайдено договір контрагента'"));
			ПараметрыВыделенияКолонок.ВыделитьКолонкуДоговор = Истина;
			СтрокаДокумента.ДоговорНеНайденКартинка = 0;
		КонецЕсли;
		Если СтруктураДанныхПоискаДоговора.КоличествоДоговоров > 1 Тогда
			СтрокаЗамечания = НСтр("ru = 'У контрагента несколько договоров (%КоличествоДоговоров%).'; uk = 'У контрагента декілька договорів (%КоличествоДоговоров%).'");
			СтрокаЗамечания = СтрЗаменить(СтрокаЗамечания, "%КоличествоДоговоров%", СтруктураДанныхПоискаДоговора.КоличествоДоговоров);
			ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечания);
			ПараметрыВыделенияКолонок.ВыделитьКолонкуДоговор = Истина;
			СтрокаДокумента.ДоговорНеНайденКартинка = 0;
		КонецЕсли;
	КонецЕсли;
	
	// 9) Определим Статью ДДС по умолчанию.
	Если СтруктураЗначенийИзСоответствия.СоответствиеНайдено Тогда
		ЗаполнитьСтатьюДДСИСвязанныеЭлементыПоСтруктуреСоответствий(СтрокаДокумента, СтруктураЗначенийИзСоответствия);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
		
		Если ЭтоКомиссия Тогда
			СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
		ИначеЕсли СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги
			ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги
			ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными
			ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета
			ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных
			ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет Тогда
			
			СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
			
		ИначеЕсли Исходящий Тогда
			СтрокаДокумента.СтатьяДДС = Объект.СтатьяДДСИсходящий;
		Иначе
			СтрокаДокумента.СтатьяДДС = Объект.СтатьяДДСВходящий;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
			СтрокаДокумента.СтатьяДДС = ПолучитьСтатьюДДСПоВидуОперации(СтрокаДокумента.ВидОперации, СтрокаДокумента.СтатьяДДС);
		КонецЕсли;
		
	КонецЕсли;
	
	// 11) Определим очередность платежа.
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрокаДокумента.Очередность);
	Если Буфер <> "" И НЕ ЕстьНеЦифрыНаСервере(Буфер) Тогда
		СтрокаДокумента.ОчередностьПлатежа = Число(Буфер);
	Иначе
		СтрокаДокумента.ОчередностьПлатежа = 0;
	КонецЕсли;
	
	// 12) Определим ПоказательДатыДок (для Платежного поручения исходящего при перечислении налогов).
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСтрока(СтрокаДокумента.ПоказательДаты) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.ПоказательДатыДок, СтрокаДокумента.ПоказательДаты);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.ПоказательДатыДок = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// 13) ДатаСписано и ДатаПоступило, ДатаПроведения.
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаСписано) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Списано, СтрокаДокумента.ДатаСписано);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Списано = ПустаяДата;
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Списано = ПустаяДата;
	КонецЕсли;
	
	// Преобразуем в дату из строки, если не пустая.
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаПоступило) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Поступило, СтрокаДокумента.ДатаПоступило);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Поступило = ПустаяДата;
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Поступило = ПустаяДата;
	КонецЕсли;
	
	// Если НазначениеПлатежа пустое, формируем его из НазначениеПлатежа1...НазначениеПлатежа6.
	Если ПустаяСтрока(СтрокаДокумента.НазначениеПлатежа) Тогда
		СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа1;
		Для Сч = 2 По 6 Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента["НазначениеПлатежа" + Сч]) Тогда
				Прервать;
			КонецЕсли;
			СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа + Символы.ПС + СтрокаДокумента["НазначениеПлатежа" + Сч];
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураЗначенийИзСоответствия.СоответствиеНайдено Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Корреспонденция) Тогда
			СтрокаДокумента.Корреспонденция = СтруктураЗначенийИзСоответствия.Корреспонденция;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДокумента.КонтрагентИсходный = СтрокаДокумента.Контрагент;
	
	Если СтрокаДокумента.ВидОперации = ВидОперацииСписаниеНаличных ИЛИ СтрокаДокумента.ВидОперации = ВидОперацииВзносНаличных Тогда
		СтрокаДокумента.СчетКонтрагента = "";
	КонецЕсли;
	
	СтрокаДокумента.СчетКонтрагентаИсходный = СтрокаДокумента.СчетКонтрагента;
	
	// Способ зачета
	Если ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
		УстановитьСпособЗачетаПоДокументу(СтрокаДокумента);
	Иначе
		Если Объект.СпособЗачета = СпособЗачетаВручную Тогда
			СтрокаДокумента.СпособЗачетаТЧ = СпособЗачетаВручную;
		ИначеЕсли Объект.СпособЗачета = СпособЗачетаАвтоматически
			И ЭтоОперацияГдеВозможныАвтоРасчеты(СтрокаДокумента.ВидОперации) Тогда
			СтрокаДокумента.СпособЗачетаТЧ = СпособЗачетаАвтоматически;
			ОчиститьИнформациюОДокументахНаСервере(СтрокаДокумента);
		Иначе
			УстановитьСпособЗачетаПоУмолчанию(СтрокаДокумента);
		КонецЕсли;
	КонецЕсли;
	
	// Код вида дохода
	СтрокаДокумента.КодВидаДохода = СтрокаДокумента.КодНазПлатежа;
	
	// Удаление символа "Nul"
	СтрокаДокумента.НазначениеПлатежа = СтрЗаменить(СтрокаДокумента.НазначениеПлатежа, Символ(000), "");
	
КонецПроцедуры // РаспознатьДанныеВСтрокеДокумента()

Функция ПолучитьДанныеИзСоответствияНазначенияПлатежа(СтрокаДокумента, ИскатьВСправочникеСоответствий)
	
	СтруктураЗначенийИзСоответствия = Новый Структура("СоответствиеНайдено, ВидОперацииПоступленияНаСчет, ВидОперацииРасходаСоСчета, СтатьяДДС, Корреспонденция", Ложь);
	
	Если ИскатьВСправочникеСоответствий Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.ВидОперацииПоступленияНаСчет,
			|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.ВидОперацииРасходаСоСчета,
			|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.СтатьяДДС,
			|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.Корреспонденция,
			|	ВЫРАЗИТЬ(СоответствияНазначенийПлатежаИРеквизитовПлатежа.ФразаДляПоискаВНазначенииПлатежа КАК СТРОКА(1024)) КАК Фраза
			|ИЗ
			|	Справочник.СоответствияНазначенийПлатежаИРеквизитовПлатежа КАК СоответствияНазначенийПлатежаИРеквизитовПлатежа
			|ГДЕ
			|	НЕ СоответствияНазначенийПлатежаИРеквизитовПлатежа.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), ВРег(Выборка.Фраза)) > 0 Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураЗначенийИзСоответствия, Выборка);
				СтруктураЗначенийИзСоответствия.СоответствиеНайдено = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураЗначенийИзСоответствия;
	
КонецФункции

Функция ЕстьНеЦифрыНаСервере(Знач СтрокаПроверки)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Длина = СтрДлина(СтрокаПроверки);
	Для Сч = 1 По Длина Цикл
		Если СтрНайти("0123456789", Сред(СтрокаПроверки, Сч, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ЕстьНеЦифры()

Функция ПолучитьДатуИзСтроки(Приемник, Источник)
	
	Буфер = Источник;
	ПозицияТочки = СтрНайти(Буфер, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru = 'Неверный формат строки с датой'; uk = 'Невірний формат рядка з датою'");
	КонецЕсли;
	ЧислоДаты = Лев(Буфер, ПозицияТочки - 1);
	Буфер = Сред(Буфер, ПозицияТочки + 1);
	ПозицияТочки = СтрНайти(Буфер, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru = 'Неверный формат строки с датой'; uk = 'Невірний формат рядка з датою'");
	КонецЕсли;
	МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
	ГодДаты = Сред(Буфер, ПозицияТочки + 1);
	Если СтрДлина(ГодДаты) > 4 Тогда
		ГодДаты = Лев(ГодДаты, 4);
	КонецЕсли;
	Если СтрДлина(ГодДаты) = 2 Тогда
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты ;
		КонецЕсли;
	КонецЕсли;
	Час = 0 ;
	Минута = 0;
	Секунда = 0;
	Если СтрДлина(Источник) > 11 Тогда
		Буфер = Прав(Источник, 8);
		Час = Лев(Буфер, 2);
		Минута = Сред(Буфер, 4, 2);
		Секунда = Прав(Буфер, 2);
	КонецЕсли;
	Попытка
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты), Число(Час), Число(Минута), Число(Секунда));
	Исключение
		Возврат НСтр("ru = 'Не удалось преобразовать строку в дату'; uk = 'Не вдалося перетворити рядок на дату'");
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции

Функция ЭтоСчетКассыКредитнойОрганизации(БалансовыйСчет)
	
	Возврат БалансовыйСчет = "20202" // "Касса кредитных организаций"
		Или БалансовыйСчет = "20208"; // "Денежные средства в банкоматах и платежных терминалах"
	
КонецФункции

Функция БалансовыйСчет(НомерСчета)
	
	Возврат Лев(НомерСчета, 5);
	
КонецФункции

Функция ЭтоКомиссияБанка(Знач СтрокаДокумента, Знач Исходящий)
	
	СчетКонтрагентаДляПоиска = ?(Исходящий, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
	ВидОплаты = ВидОплатыЧислом(СтрокаДокумента.ВидОплаты);
	Операция  = ВРег(СтрЗаменить(СтрокаДокумента.Операция, " ", ""));
	ЭтоКомиссияБанка = СтрокаДокумента.ПолучательБИК = СтрокаДокумента.ПлательщикБИК
		И (Операция = "МЕМОРИАЛЬНЫЙОРДЕР" ИЛИ Операция = "БАНКОВСКИЙОРДЕР" ИЛИ Операция = "ВНУТРЕННИЙПЕРЕВОД")
		ИЛИ ВидОплаты > 1 И ВидОплаты <> 3;
	
	// последняя проверка по корр.счету
	Если НЕ ЭтоКомиссияБанка Тогда
		БалансовыйСчет = БалансовыйСчет(СчетКонтрагентаДляПоиска);
		Если БалансовыйСчет    = "70601" // доходы (банка)
			ИЛИ БалансовыйСчет = "61301" // Доходы (банка) будущих периодов по кредитным операциям
			ИЛИ БалансовыйСчет = "61304" // Доходы (банка) будущих периодов по другим операциям
		Тогда
			ЭтоКомиссияБанка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоКомиссияБанка;
	
КонецФункции

Функция ОрганизацияПлательщик(ВидДокумента)
	
	Если ВидДокумента = "ПоступлениеНаСчет" Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ОрганизацияПлательщик()

Функция ВидОплатыЧислом(Знач ВидОплатыИзФайла)
	
	Если ПустаяСтрока(ВидОплатыИзФайла) Тогда
		ВидОплаты = 1;
	Иначе
		Попытка
			ВидОплаты = Число(ВидОплатыИзФайла);
		Исключение
			ВидОплаты = 1;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ВидОплаты;
	
КонецФункции

Процедура УстановитьСпособЗачетаПоУмолчанию(СтрокаДокумента)
	
	Если ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
		УстановитьСпособЗачетаПоДокументу(СтрокаДокумента);
	Иначе
		ОбновитьСпособЗачетаНаСервере(СтрокаДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСпособЗачетаПоДокументу(СтрокаДокумента)
	
	СпособЗачетаВручную = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	
	Если СтрокаДокумента.Документ.РасшифровкаПлатежа.Количество() > 0 Тогда
		СтрокаДокумента.СпособЗачетаТЧ = СтрокаДокумента.Документ.РасшифровкаПлатежа[0].СпособЗачета;
		Если СтрокаДокумента.СпособЗачетаТЧ.Пустая() Тогда
			СтрокаДокумента.СпособЗачетаТЧ = СпособЗачетаВручную;
		КонецЕсли;
	Иначе
		ОбновитьСпособЗачетаНаСервере(СтрокаДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСпособЗачетаНаСервере(СтрокаДокумента)
	
	СпособЗачетаВручную = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	СпособРазнесенияОплатыПоУмолчанию = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособРазнесенияОплатыПоУмолчанию();
	
	Если ЭтоОперацияГдеВозможныАвтоРасчеты(СтрокаДокумента.ВидОперации) Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.ДокументРасчетов)
			Или ЗначениеЗаполнено(СтрокаДокумента.ПлатежноеПоручение)
			Или ЗначениеЗаполнено(СтрокаДокумента.СчетНаОплату)
			Или ЗначениеЗаполнено(СтрокаДокумента.Заказ) Тогда
			СтрокаДокумента.СпособЗачетаТЧ = СпособЗачетаВручную;
		ИначеЕсли ТипЗнч(СтрокаДокумента.Договор) = Тип("Строка")
			И ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтрокаДокумента.СпособЗачетаТЧ = РасчетыРаботаСФормамиВызовСервера.СпособРазнесенияОплатыДляДоговора(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), СтрокаДокумента.Контрагент);
		ИначеЕсли ТипЗнч(СтрокаДокумента.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			И ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтрокаДокумента.СпособЗачетаТЧ = РасчетыРаботаСФормамиВызовСервера.СпособРазнесенияОплатыДляДоговора(СтрокаДокумента.Договор, СтрокаДокумента.Контрагент);
		Иначе
			СтрокаДокумента.СпособЗачетаТЧ = СпособРазнесенияОплатыПоУмолчанию;
		КонецЕсли;
	Иначе
		СтрокаДокумента.СпособЗачетаТЧ = СпособЗачетаВручную;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОперацияГдеВозможныАвтоРасчеты(пВидОперации)
	
	Возврат (пВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПокупателя")
		Или пВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Поставщику"));
	
КонецФункции

Функция ОпределитьДокументРасчетовНаСервере(СтрокаДокумента, Объект, ДоговорВЗаказеСчете = Неопределено)
	
	Если (ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты")) 
		И ЗначениеЗаполнено(СтрокаДокумента.Контрагент)
		И СтрокаДокумента.Контрагент.ВестиРасчетыПоДокументам
		Тогда
		
		// Для сценария, когда заполнен заказ, в результат запроса не попадают те документы, в которых заказ заполнен и он не
		// равен заказу в параметре &Заказ.
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасчетыСПокупателямиОстатки.Документ КАК ДокументРасчетов,
			|	РасчетыСПокупателямиОстатки.СуммаОстаток,
			|	РасчетыСПокупателямиОстатки.СуммаВалОстаток,
			|	РасчетыСПокупателямиОстатки.Документ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
			|	РасчетыСПокупателямиОстатки.Документ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
			|	РасчетыСПокупателямиОстатки.Заказ,
			|	РасчетыСПокупателямиОстатки.Договор,
			|	РасчетыСПокупателямиОстатки.Документ.Номер КАК Номер,
			|	РасчетыСПокупателямиОстатки.Документ.Дата КАК Дата,
			|	ВЫБОР
			|		КОГДА &ЗаказЗаполнен
			|				И РасчетыСПокупателямиОстатки.Заказ = &Заказ
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК Приоритет
			|ИЗ
			|	РегистрНакопления.РасчетыСПокупателями.Остатки(
			|			,
			|			Организация = &Организация
			|				И Документ.Контрагент = &Контрагент) КАК РасчетыСПокупателямиОстатки
			|ГДЕ
			|	РасчетыСПокупателямиОстатки.СуммаВалОстаток = &Сумма
			|	И НЕ &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ РасчетыСПокупателямиОстатки.Договор = &ДоговорВЗаказеСчете)
			|	И (НЕ &ЗаказЗаполнен
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = &Заказ
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = NULL
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = НЕОПРЕДЕЛЕНО)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетыСПоставщикамиОстатки.Документ,
			|	РасчетыСПоставщикамиОстатки.СуммаОстаток,
			|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток,
			|	РасчетыСПоставщикамиОстатки.Документ.НомерВходящегоДокумента,
			|	РасчетыСПоставщикамиОстатки.Документ.ДатаВходящегоДокумента,
			|	РасчетыСПоставщикамиОстатки.Заказ,
			|	РасчетыСПоставщикамиОстатки.Договор,
			|	РасчетыСПоставщикамиОстатки.Документ.Номер,
			|	РасчетыСПоставщикамиОстатки.Документ.Дата,
			|	ВЫБОР
			|		КОГДА &ЗаказЗаполнен
			|				И РасчетыСПоставщикамиОстатки.Заказ = &Заказ
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
			|			,
			|			Организация = &Организация
			|				И Документ.Контрагент = &Контрагент) КАК РасчетыСПоставщикамиОстатки
			|ГДЕ
			|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток = &Сумма
			|	И &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ РасчетыСПоставщикамиОстатки.Договор = &ДоговорВЗаказеСчете)
			|	И (НЕ &ЗаказЗаполнен
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = &Заказ
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = NULL
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = НЕОПРЕДЕЛЕНО)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет,
			|	ДокументРасчетов УБЫВ
			|АВТОУПОРЯДОЧИВАНИЕ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РасчетыСПокупателямиОстатки.Документ КАК ДокументРасчетов,
			|	РасчетыСПокупателямиОстатки.СуммаОстаток,
			|	РасчетыСПокупателямиОстатки.СуммаВалОстаток,
			|	РасчетыСПокупателямиОстатки.Документ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
			|	РасчетыСПокупателямиОстатки.Документ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
			|	РасчетыСПокупателямиОстатки.Заказ,
			|	РасчетыСПокупателямиОстатки.Договор,
			|	РасчетыСПокупателямиОстатки.Документ.Номер КАК Номер,
			|	РасчетыСПокупателямиОстатки.Документ.Дата КАК Дата,
			|	ВЫБОР
			|		КОГДА &ЗаказЗаполнен
			|				И РасчетыСПокупателямиОстатки.Заказ = &Заказ
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК Приоритет
			|ИЗ
			|	РегистрНакопления.РасчетыСПокупателями.Остатки(
			|			,
			|			Организация = &Организация
			|				И Документ.Контрагент = &Контрагент) КАК РасчетыСПокупателямиОстатки
			|ГДЕ
			|	РасчетыСПокупателямиОстатки.СуммаВалОстаток > &Сумма
			|	И НЕ &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ РасчетыСПокупателямиОстатки.Договор = &ДоговорВЗаказеСчете)
			|	И (НЕ &ЗаказЗаполнен
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = &Заказ
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = NULL
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = НЕОПРЕДЕЛЕНО)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетыСПоставщикамиОстатки.Документ,
			|	РасчетыСПоставщикамиОстатки.СуммаОстаток,
			|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток,
			|	РасчетыСПоставщикамиОстатки.Документ.НомерВходящегоДокумента,
			|	РасчетыСПоставщикамиОстатки.Документ.ДатаВходящегоДокумента,
			|	РасчетыСПоставщикамиОстатки.Заказ,
			|	РасчетыСПоставщикамиОстатки.Договор,
			|	РасчетыСПоставщикамиОстатки.Документ.Номер,
			|	РасчетыСПоставщикамиОстатки.Документ.Дата,
			|	ВЫБОР
			|		КОГДА &ЗаказЗаполнен
			|				И РасчетыСПоставщикамиОстатки.Заказ = &Заказ
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
			|			,
			|			Организация = &Организация
			|				И Документ.Контрагент = &Контрагент) КАК РасчетыСПоставщикамиОстатки
			|ГДЕ
			|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток > &Сумма
			|	И &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ РасчетыСПоставщикамиОстатки.Договор = &ДоговорВЗаказеСчете)
			|	И (НЕ &ЗаказЗаполнен
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = &Заказ
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = NULL
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = НЕОПРЕДЕЛЕНО)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет,
			|	ДокументРасчетов УБЫВ
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Сумма", СтрокаДокумента.СуммаДокумента);
		Запрос.УстановитьПараметр("Исходящий", СтрокаДокумента.Исходящий);
		Запрос.УстановитьПараметр("Заказ", СтрокаДокумента.Заказ);
		Запрос.УстановитьПараметр("ЗаказЗаполнен", ЗначениеЗаполнено(СтрокаДокумента.Заказ));
		Запрос.УстановитьПараметр("ДоговорВЗаказеСчете", ДоговорВЗаказеСчете);
		Запрос.УстановитьПараметр("ОтборПоДоговору", ЗначениеЗаполнено(ДоговорВЗаказеСчете));
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		РезультатЗапроса = МассивРезультатов[0];
		Если Не РезультатЗапроса.Пустой() Тогда
		
			ВыборкаДокументовРасчетов = РезультатЗапроса.Выбрать();
			
			// Поищем номер в основании платежа.
			// Нужно учесть номер и год документа, а также вид документа и флаги учета взаиморасчетов, которые установлены в договоре.
			ДокументНайденныйПоНомеру = Неопределено;
			
			Пока ВыборкаДокументовРасчетов.Следующий() Цикл
				// Сценарий, когда дата документа > 2011.01.01.
				НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументовРасчетов.Номер, Истина, Истина);
				
				Если ЗначениеЗаполнено(ВыборкаДокументовРасчетов.НомерВходящегоДокумента) Тогда
					НомерДляПоиска = СокрЛП(ВыборкаДокументовРасчетов.НомерВходящегоДокумента);
				Иначе
					НомерДляПоиска = НомерНаПечать;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаДокументовРасчетов.ДатаВходящегоДокумента) Тогда
					ДатаДляПоиска = ВыборкаДокументовРасчетов.ДатаВходящегоДокумента;
				Иначе
					ДатаДляПоиска = ВыборкаДокументовРасчетов.Дата;
				КонецЕсли;
				
				Если СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерДляПоиска) > 0
					ИЛИ СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерДляПоиска) > 0
					ИЛИ (ЗначениеЗаполнено(СтрокаДокумента.Заказ) И ВыборкаДокументовРасчетов.Приоритет = 1) Тогда
					
					ДокументНайденныйПоНомеру = ВыборкаДокументовРасчетов.ДокументРасчетов;
					
					НомерГода = СтрЗаменить(Год(ДатаДляПоиска), Символы.НПП, "");
					
					Если СтрНайти(СтрокаДокумента.НазначениеПлатежа, НомерГода) > 0 Тогда // Поищем год.
						
						СтрокаДокумента.ДокументРасчетов = ВыборкаДокументовРасчетов.ДокументРасчетов;
						СтрокаДокумента.ПризнакАванса = Ложь;
						
						ДоговорВДокументе = ВыборкаДокументовРасчетов.Договор;
						
						Возврат ДоговорВДокументе;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ДокументНайденныйПоНомеру <> Неопределено Тогда
				СтрокаДокумента.ДокументРасчетов = ДокументНайденныйПоНомеру;
				СтрокаДокумента.ПризнакАванса = Ложь;
				
				ДоговорВДокументе = ВыборкаДокументовРасчетов.Договор;
				
				Возврат ДоговорВДокументе;
			КонецЕсли;
			
		КонецЕсли;
		
		// Во вторую очередь обработаем ситуацию, когда с клиентом оформлен только один не оплаченный заказ или счет.
		// Если сумма этого документа > суммы платежа, то выберем этот документ.
		// Документ будет выбран, если в назначении нет информации о заказе или счете.
		РезультатЗапроса = МассивРезультатов[1];
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаДокументовРасчетов = РезультатЗапроса.Выбрать();
			Если ВыборкаДокументовРасчетов.Количество() = 1 Тогда
				ВыборкаДокументовРасчетов.Следующий();
				
				НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументовРасчетов.Номер, Истина, Истина);
				Если ЗначениеЗаполнено(ВыборкаДокументовРасчетов.НомерВходящегоДокумента) Тогда
					НомерДляПоиска = СокрЛП(ВыборкаДокументовРасчетов.НомерВходящегоДокумента);
				Иначе
					НомерДляПоиска = НомерНаПечать;
				КонецЕсли;
				
				Если (СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерДляПоиска) > 0
					ИЛИ СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерДляПоиска) > 0)
					ИЛИ (ЗначениеЗаполнено(СтрокаДокумента.Заказ) И ВыборкаДокументовРасчетов.Приоритет = 1) Тогда
				
					СтрокаДокумента.ДокументРасчетов = ВыборкаДокументовРасчетов.ДокументРасчетов;
					СтрокаДокумента.ПризнакАванса = Ложь;
					
					ДоговорВДокументе = ВыборкаДокументовРасчетов.Договор;
					
					Возврат ДоговорВДокументе;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьСтатьюДДСПоВидуОперации(ВидОперации, СтатьяДДС)
	
	Если ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПоступлениеНаСчет") Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
		Иначе
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
		КонецЕсли;
	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
		Иначе
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьЗаказИСчетНаСервере(СтрокаДокумента, Объект)
	
	НашлиЗаказ = Ложь;
	НашлиСчет = Ложь;
	
	ДоговорЗаказа = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ДоговорСчета = ДоговорЗаказа;
	
	Если (ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты")) 
		И ЗначениеЗаполнено(СтрокаДокумента.Контрагент)
		Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату КАК Документ,
			|	ОплатаСчетовИЗаказовОбороты.СуммаОборот КАК СуммаДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК Оплачено,
			|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК НеОплачено,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Дата КАК Дата,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Номер КАК Номер,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Договор КАК Договор
			|ИЗ
			|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(
			|			,
			|			,
			|			,
			|			Организация = &Организация
			|				И СчетНаОплату.Контрагент = &Контрагент) КАК ОплатаСчетовИЗаказовОбороты
			|ГДЕ
			|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот = &Сумма
			|	И ВЫБОР
			|			КОГДА ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказовОбороты.СчетНаОплату) = ТИП(Документ.ЗаказПоставщику)
			|					ИЛИ ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказовОбороты.СчетНаОплату) = ТИП(Документ.СчетНаОплатуПоставщика)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ = &Исходящий
			|
			|УПОРЯДОЧИТЬ ПО
			|	Документ УБЫВ
			|АВТОУПОРЯДОЧИВАНИЕ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату КАК Документ,
			|	ОплатаСчетовИЗаказовОбороты.СуммаОборот КАК СуммаДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК Оплачено,
			|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК НеОплачено,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Дата КАК Дата,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Номер КАК Номер,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Договор КАК Договор
			|ИЗ
			|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(
			|			,
			|			,
			|			,
			|			Организация = &Организация
			|				И СчетНаОплату.Контрагент = &Контрагент) КАК ОплатаСчетовИЗаказовОбороты
			|ГДЕ
			|	ВЫБОР
			|			КОГДА ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказовОбороты.СчетНаОплату) = ТИП(Документ.ЗаказПоставщику)
			|					ИЛИ ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказовОбороты.СчетНаОплату) = ТИП(Документ.СчетНаОплатуПоставщика)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ = &Исходящий
			|	И ВЫБОР
			|			КОГДА ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Кратность, 0) = 0
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ (ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот) * ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Курс * &КратностьОплаты / ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Кратность * &КурсОплаты > &Сумма
			|		КОНЕЦ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаказПокупателя.Ссылка,
			|	ЗаказПокупателя.СуммаДокумента,
			|	ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот, 0) + ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот, 0),
			|	ЗаказПокупателя.СуммаДокумента - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот, 0) - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот, 0),
			|	ЗаказПокупателя.Дата,
			|	ЗаказПокупателя.Номер,
			|	"""",
			|	"""",
			|	ЗаказПокупателя.Договор
			|ИЗ
			|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(
			|				,
			|				,
			|				,
			|				Организация = &Организация
			|					И СчетНаОплату.Контрагент = &Контрагент) КАК ОплатаСчетовИЗаказовОбороты
			|		ПО (ОплатаСчетовИЗаказовОбороты.СчетНаОплату = ЗаказПокупателя.Ссылка)
			|			И (ОплатаСчетовИЗаказовОбороты.СуммаОборот = 0)
			|ГДЕ
			|	ЗаказПокупателя.Проведен
			|	И ЗаказПокупателя.Контрагент = &Контрагент
			|	И НЕ ЗаказПокупателя.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
			|	И НЕ &Исходящий
			|	И ВЫБОР
			|			КОГДА ЕСТЬNULL(ЗаказПокупателя.Кратность, 0) = 0
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ (ЗаказПокупателя.СуммаДокумента - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот, 0) - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот, 0)) * ЗаказПокупателя.Курс * &КратностьОплаты / (ЗаказПокупателя.Кратность * &КурсОплаты) > &Сумма
			|		КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Документ УБЫВ
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Сумма", СтрокаДокумента.СуммаДокумента);
		Запрос.УстановитьПараметр("Исходящий", СтрокаДокумента.Исходящий);
	
		СтруктураКурсВалюта = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(СтрокаДокумента.ДатаДок, Новый Структура("Валюта", Объект.БанковскийСчет.ВалютаДенежныхСредств));
		Запрос.УстановитьПараметр("КурсОплаты", ?(СтруктураКурсВалюта.Курс = 0, 1, СтруктураКурсВалюта.Курс));
		Запрос.УстановитьПараметр("КратностьОплаты", ?(СтруктураКурсВалюта.Кратность = 0, 1, СтруктураКурсВалюта.Кратность));
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Сначала обработаем документы, которые точно совпадают по сумме.
		РезультатЗапроса = МассивРезультатов[0];
		Если Не РезультатЗапроса.Пустой() Тогда
		
			ВыборкаЗаказовИСчетов = РезультатЗапроса.Выбрать();
			
			// Поищем номер в основании платежа.
			// Нужно учесть номер и год документа, а также вид документа и флаги учета взаиморасчетов, которые установлены в договоре.
			
			ДоговорЗаказаНайденныйПоНомеру = Неопределено;
			ДоговорСчетаНайденныйПоНомеру = Неопределено;
			ЗаказНайденныйПоНомеру = Неопределено;
			СчетНайденныйПоНомеру = Неопределено;
			
			Пока ВыборкаЗаказовИСчетов.Следующий() Цикл
				// Сценарий, когда дата документа > 2011.01.01.
				НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаЗаказовИСчетов.Номер, Истина, Истина);
				НомерСПрефиксом = СокрЛП(ВыборкаЗаказовИСчетов.Номер);
				
				Если ((ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику"))
					ИЛИ (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")))
					И ЗначениеЗаполнено(ВыборкаЗаказовИСчетов.НомерВходящегоДокумента) Тогда
					НомерДляПоиска = СокрЛП(ВыборкаЗаказовИСчетов.НомерВходящегоДокумента);
				Иначе
					НомерДляПоиска = НомерНаПечать;
				КонецЕсли;
				
				Если ((ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику"))
					ИЛИ (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")))
					И ЗначениеЗаполнено(ВыборкаЗаказовИСчетов.ДатаВходящегоДокумента) Тогда
					ДатаДляПоиска = ВыборкаЗаказовИСчетов.ДатаВходящегоДокумента;
				Иначе
					ДатаДляПоиска = ВыборкаЗаказовИСчетов.Дата;
				КонецЕсли;
				
				Если СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерСПрефиксом) > 0
					Или СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерСПрефиксом) > 0
					Или СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерДляПоиска) > 0
					Или СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерДляПоиска) > 0 Тогда
					
					НомерГода = СтрЗаменить(Год(ДатаДляПоиска), Символы.НПП, "");
					
					Если СтрНайти(СтрокаДокумента.НазначениеПлатежа, НомерГода) > 0 Тогда // Поищем год.
						// для заполнения информации об основании.
						Если Не НашлиЗаказ И (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПокупателя"))
							ИЛИ (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
							СтрокаДокумента.Заказ = ВыборкаЗаказовИСчетов.Документ;
							ДоговорЗаказа = ВыборкаЗаказовИСчетов.Договор;
							НашлиЗаказ = Истина;
						// будет нагляднее, если будем их выводить.
						ИначеЕсли Не НашлиСчет И (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплату"))
							ИЛИ (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")) Тогда
							СтрокаДокумента.СчетНаОплату = ВыборкаЗаказовИСчетов.Документ;
							ДоговорСчета = ВыборкаЗаказовИСчетов.Договор;
							НашлиСчет = Истина;
						КонецЕсли;
						Если НашлиЗаказ И НашлиСчет Тогда
							Прервать;
						КонецЕсли;
						
					Иначе
						
						Если (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПокупателя"))
							ИЛИ (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
							ЗаказНайденныйПоНомеру = ВыборкаЗаказовИСчетов.Документ;
							ДоговорЗаказаНайденныйПоНомеру = ВыборкаЗаказовИСчетов.Договор;
						ИначеЕсли (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплату"))
							ИЛИ (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")) Тогда
							СчетНайденныйПоНомеру = ВыборкаЗаказовИСчетов.Документ;
							ДоговорСчетаНайденныйПоНомеру = ВыборкаЗаказовИСчетов.Договор;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если Не НашлиЗаказ И Не НашлиСчет Тогда
				Если ЗаказНайденныйПоНомеру <> Неопределено Тогда
					СтрокаДокумента.Заказ = ЗаказНайденныйПоНомеру;
					ДоговорЗаказа = ДоговорЗаказаНайденныйПоНомеру;
					НашлиЗаказ = Истина;
				ИначеЕсли СчетНайденныйПоНомеру <> Неопределено Тогда
					СтрокаДокумента.СчетНаОплату = СчетНайденныйПоНомеру;
					ДоговорСчета = ДоговорСчетаНайденныйПоНомеру;
					НашлиСчет = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Во вторую очередь обработаем ситуацию, когда с клиентом оформлен только один не оплаченный заказ или счет.
		// Если сумма этого документа > суммы платежа, то выберем этот документ.
		// Документ будет выбран, если в назначении нет информации о заказе или счете.
		Если Не НашлиЗаказ И Не НашлиСчет Тогда
			
			РезультатЗапроса = МассивРезультатов[1];
			Если Не РезультатЗапроса.Пустой() Тогда
				
				ВыборкаЗаказовИСчетов = РезультатЗапроса.Выбрать();
				Если ВыборкаЗаказовИСчетов.Количество() = 1 Тогда
					ВыборкаЗаказовИСчетов.Следующий();
					
					НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаЗаказовИСчетов.Номер, Истина, Истина);
					Если ((ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику"))
						ИЛИ (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")))
						И ЗначениеЗаполнено(ВыборкаЗаказовИСчетов.НомерВходящегоДокумента) Тогда
						НомерДляПоиска = СокрЛП(ВыборкаЗаказовИСчетов.НомерВходящегоДокумента);
					Иначе
						НомерДляПоиска = НомерНаПечать;
					КонецЕсли;
					
					Если (СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерДляПоиска) > 0
						ИЛИ СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерДляПоиска) > 0) Тогда
						
						Если ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПокупателя")
							ИЛИ ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
							СтрокаДокумента.Заказ = ВыборкаЗаказовИСчетов.Документ;
							ДоговорЗаказа = ВыборкаЗаказовИСчетов.Договор;
							НашлиЗаказ = Истина;
						Иначе // Это счет на оплату или счет на оплату от поставщика.
							СтрокаДокумента.СчетНаОплату = ВыборкаЗаказовИСчетов.Документ;
							ДоговорСчета = ВыборкаЗаказовИСчетов.Договор;
							НашлиСчет = Истина;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НашлиСчет И НЕ НашлиЗаказ И НЕ ЗначениеЗаполнено(СтрокаДокумента.Заказ) Тогда
		
		Если (СтрокаДокумента.Исходящий И ТипЗнч(СтрокаДокумента.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
			И ТипЗнч(СтрокаДокумента.СчетНаОплату.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику"))
			ИЛИ (НЕ СтрокаДокумента.Исходящий И ТипЗнч(СтрокаДокумента.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплату")
			И ТипЗнч(СтрокаДокумента.СчетНаОплату.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")) Тогда
			
			СтрокаДокумента.Заказ = СтрокаДокумента.СчетНаОплату.ДокументОснование;
			
		КонецЕсли;
		
	ИначеЕсли НЕ НашлиСчет И НашлиЗаказ И НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетНаОплату) Тогда
		
		Если ТипЗнч(СтрокаДокумента.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетНаОплату.Ссылка КАК СчетНаОплату
			|ИЗ
			|	Документ.СчетНаОплату КАК СчетНаОплату
			|ГДЕ
			|	СчетНаОплату.ДокументОснование = &ДокументОснование
			|	И НЕ СчетНаОплату.ПометкаУдаления";
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетНаОплатуПоставщика.Ссылка КАК СчетНаОплату
			|ИЗ
			|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
			|ГДЕ
			|	СчетНаОплатуПоставщика.ДокументОснование = &ДокументОснование
			|	И НЕ СчетНаОплатуПоставщика.ПометкаУдаления";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДокументОснование", СтрокаДокумента.Заказ);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 1
			И Выборка.Следующий() Тогда
			
			СтрокаДокумента.СчетНаОплату = Выборка.СчетНаОплату;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НашлиЗаказ Тогда
		Возврат ДоговорЗаказа;
	ИначеЕсли НашлиСчет Тогда
		Возврат ДоговорСчета;
	Иначе
		Возврат ДоговорЗаказа;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьПлатежноеПоручение(СтрокаДокумента)
	
	НашлиПП = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение,
		|	ПлатежноеПоручение.Номер КАК Номер,
		|	ПлатежноеПоручение.Дата КАК Дата,
		|	ПлатежноеПоручение.ДокументОснование КАК ДокументОснование,
		|	ПлатежноеПоручение.ДокументОснование.Договор КАК Договор,
		|	ПлатежноеПоручение.ВидОперации КАК ВидОперации,
		|	ПлатежноеПоручение.Корреспонденция КАК Корреспонденция,
		|	ПлатежноеПоручение.Статья КАК СтатьяДДС
		|ИЗ
		|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|ГДЕ
		|	ПлатежноеПоручение.СуммаДокумента = &СуммаДокумента
		|	И ПлатежноеПоручение.Дата <= &ДатаОкончания
		|	И НЕ ПлатежноеПоручение.Оплачено
		|	И НЕ ПлатежноеПоручение.ПометкаУдаления
		|	И ПлатежноеПоручение.Контрагент = &Контрагент
		|	И ПлатежноеПоручение.Номер ПОДОБНО ""%"" + &НомерДок
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПлатежноеПоручение УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Сотрудники") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПлатежноеПоручение.Контрагент", "И ПлатежноеПоручение.Подотчетник");
	КонецЕсли;
	
	ДатаОкончания = КонецДня(СтрокаДокумента.ДатаДок);
	
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
	Запрос.УстановитьПараметр("СуммаДокумента", СтрокаДокумента.СуммаДокумента);
	Запрос.УстановитьПараметр("НомерДок", СтрокаДокумента.НомерДок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПП = РезультатЗапроса.Выбрать();
	
	ДокументНайденныйПоНомеру = Неопределено;
	ДокументОснованиеПП = Неопределено;
	ДоговорДокОснПП = Неопределено;
	ВидОперацииПП = Неопределено;
	СтатьяДДС_ПП = Неопределено;
	КорреспонденцияПП = Неопределено;
	
	Пока ВыборкаПП.Следующий() Цикл
		
		// Сценарий, когда дата документа > 2011.01.01.
		НомерВБазеБезНулей = УправлениеНебольшойФирмойКлиентСервер.НомерДокументаБезЛидирующихНулей(ВыборкаПП.Номер, Истина, Истина);
		НомерВФайлеБезНулей = УправлениеНебольшойФирмойКлиентСервер.НомерДокументаБезЛидирующихНулей(СтрокаДокумента.НомерДок, Истина, Истина);
		ДатаДляПоиска = ВыборкаПП.Дата;
		
		Если НомерВБазеБезНулей = НомерВФайлеБезНулей Тогда
			
			ДокументНайденныйПоНомеру = ВыборкаПП.ПлатежноеПоручение;
			ДокументОснованиеПП = ВыборкаПП.ДокументОснование;
			ДоговорДокОснПП = ВыборкаПП.Договор;
			ВидОперацииПП = ВыборкаПП.ВидОперации;
			СтатьяДДС_ПП = ВыборкаПП.СтатьяДДС;
			КорреспонденцияПП = ВыборкаПП.Корреспонденция;
			
			НомерГода = СтрЗаменить(Год(ДатаДляПоиска), Символы.НПП, "");
			
			Если Год(ДатаДляПоиска) = Год(СтрокаДокумента.ДатаДок) Тогда // Поищем год.
				
				СтрокаДокумента.ПлатежноеПоручение = ВыборкаПП.ПлатежноеПоручение;
				НашлиПП = Истина;
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не НашлиПП И ДокументНайденныйПоНомеру <> Неопределено Тогда
		СтрокаДокумента.ПлатежноеПоручение = ДокументНайденныйПоНомеру;
		НашлиПП = Истина;
	КонецЕсли;
	
	СтруктураВозврат = Новый Структура();
	СтруктураВозврат.Вставить("НашлиПП", НашлиПП);
	СтруктураВозврат.Вставить("ДокументОснованиеПП", ДокументОснованиеПП);
	СтруктураВозврат.Вставить("Договор", ДоговорДокОснПП);
	СтруктураВозврат.Вставить("ВидОперацииПП", ВидОперацииПП);
	СтруктураВозврат.Вставить("СтатьяДДС_ПП", СтатьяДДС_ПП);
	СтруктураВозврат.Вставить("КорреспонденцияПП", КорреспонденцияПП);
	
	Возврат СтруктураВозврат;
	
КонецФункции

Функция ЗаполнитьСтатьюДДСИСвязанныеЭлементыПоСтруктуреСоответствий(СтрокаДокумента, СтруктураЗначенийИзСоответствия)
		
	Если (СтрокаДокумента.Исходящий И Не СтруктураЗначенийИзСоответствия.ВидОперацииРасходаСоСчета.Пустая()) 
		ИЛИ (Не СтрокаДокумента.Исходящий И Не СтруктураЗначенийИзСоответствия.ВидОперацииПоступленияНаСчет.Пустая()) Тогда
		
		Если Не СтруктураЗначенийИзСоответствия.СтатьяДДС.Пустая() Тогда
			СтрокаДокумента.СтатьяДДС = СтруктураЗначенийИзСоответствия.СтатьяДДС;
		КонецЕсли;
		Если Не СтруктураЗначенийИзСоответствия.Корреспонденция.Пустая() Тогда
			СтрокаДокумента.Корреспонденция = СтруктураЗначенийИзСоответствия.Корреспонденция;
		КонецЕсли;
		
		СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
		
		Возврат ?(СтрокаДокумента.Исходящий, СтруктураЗначенийИзСоответствия.ВидОперацииРасходаСоСчета, СтруктураЗначенийИзСоответствия.ВидОперацииПоступленияНаСчет);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ПроверитьВидОперации(СтрокаДокумента, ПараметрыВыделенияКолонок, СтруктураЗначенийИзСоответствия)
	
	Если СтруктураЗначенийИзСоответствия.СоответствиеНайдено Тогда
		Результат = ЗаполнитьСтатьюДДСИСвязанныеЭлементыПоСтруктуреСоответствий(СтрокаДокумента, СтруктураЗначенийИзСоответствия);
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
		
	ЕстьКлючевоеСлово = СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'СЧЕТ'; uk = 'РАХУНОК'")) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'ЗАКАЗ'; uk = 'ЗАМОВЛЕННЯ'")) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'СЧЁТ'; uk = 'РАХУНОК'")) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'НАКЛ'; uk = 'НАКЛ'")) > 0;
		
	ЕстьСловаОРасчетномОбслуживании = СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'Р/О'; uk = 'Р/О'")) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), ВРег(НСтр("ru = 'Расчетное обслуживание'; uk = 'Розрахункове обслуговування'"))) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), ВРег(НСтр("ru = 'Расчетные услуги'; uk = 'Розрахункові послуги'"))) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), ВРег(НСтр("ru = 'Расчётные услуги'; uk = 'Розрахунково-касове обслуговування'"))) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), ВРег(НСтр("ru = 'Расчётные услуги'; uk = 'Комiсiя за виконання платежiв'"))) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'Р\О'; uk = 'Р\Р'")) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'Р\У'; uk = 'Р\У'")) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), ВРег(НСтр("ru = 'Расчётное обслуживание'; uk = 'Розрахункове обслуговування'"))) > 0;
		
	ЕслиСловоВозврат = СтрНайти(СтрокаДокумента.НазначениеПлатежа, НСтр("ru = 'Возврат'; uk = 'Повернення'")) > 0;
		
	Если НЕ ЕстьКлючевоеСлово ИЛИ ЕстьСловаОРасчетномОбслуживании ИЛИ ЕслиСловоВозврат Тогда
		
		СтрокаДокумента.ВидОперацииНеНайденКартинка = 0;
		СтрокаЗамечание = НСтр("ru = 'Проверьте операцию.'; uk = 'Перевірте операцію.'");
		ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
		ПараметрыВыделенияКолонок.ВыделитьКолонкуВидОперации = Истина;
		
	Иначе
		
		СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
		
	КонецЕсли;
	
	Если СтрокаДокумента.Исходящий Тогда
		Если ЕстьСловаОРасчетномОбслуживании Тогда
			Возврат Перечисления.ВидыОперацийРасходСоСчета.Прочее;
		Иначе	
			Возврат Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
		КонецЕсли;	
	Иначе
		Возврат Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя;
	КонецЕсли;
	
КонецФункции

Функция УдалитьДанныеИзОписанияОшибкиНаСервере(ТекстУдаления, Знач ОписаниеОшибок, ДанныеСтроки)

	НовоеОписаниеОшибок = "";
	
	СимволТекстаУдаления = СтрНайти(ОписаниеОшибок, ТекстУдаления);
	Если СимволТекстаУдаления = 0 Тогда
		НовоеОписаниеОшибок = ОписаниеОшибок;
	Иначе
		НовоеОписаниеОшибок = Лев(ОписаниеОшибок, СимволТекстаУдаления - 1);
		
		ДанныеСправаОтТекстаУдаления = Сред(ОписаниеОшибок, СимволТекстаУдаления + 1);
		СимволТочки = СтрНайти(ДанныеСправаОтТекстаУдаления, "!");
		Если СимволТочки = 0 Тогда
			СимволТочкиИСкобки = СтрНайти(ДанныеСправаОтТекстаУдаления, ").");
		КонецЕсли;
		Если СимволТочки = 0 Тогда
			СимволТочки = СтрНайти(ДанныеСправаОтТекстаУдаления, ".");
		КонецЕсли;
		Если СимволТочки <> 0 Тогда
			НовоеОписаниеОшибок = НовоеОписаниеОшибок + Сред(ДанныеСправаОтТекстаУдаления, СимволТочки + 1);
		Иначе
			СимволВосклицательногоЗнака = СтрНайти(ДанныеСправаОтТекстаУдаления, "!");
			Если СимволВосклицательногоЗнака <> 0 Тогда
				НовоеОписаниеОшибок = НовоеОписаниеОшибок + Сред(ДанныеСправаОтТекстаУдаления, СимволВосклицательногоЗнака + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НовоеОписаниеОшибок;

КонецФункции // УдалитьИзОписанияОшибки()

Процедура ВыполнитьАнализИсторииНаСервере(ДанныеСтроки, Объект, ДоговорВЗаказеСчете, ПараметрыВыделенияКолонок)

	СтруктураРеквизитов = ПолучитьСтатистикуПоКонтрагенту(1, ДанныеСтроки.Контрагент, ДанныеСтроки.СчетКонтрагента, Объект.БанковскийСчет, ДанныеСтроки.Исходящий, ДоговорВЗаказеСчете);
	
	Если СтруктураРеквизитов.Договор <> Неопределено Тогда
		ДанныеСтроки.Договор = СтруктураРеквизитов.Договор;
	КонецЕсли;
	Если СтруктураРеквизитов.ВидОперации <> Неопределено Тогда
		ДанныеСтроки.ВидОперации = СтруктураРеквизитов.ВидОперации;
	КонецЕсли;
	Если СтруктураРеквизитов.СтатьяДДС <> Неопределено Тогда
		ДанныеСтроки.СтатьяДДС = СтруктураРеквизитов.СтатьяДДС;
	КонецЕсли;
	Если СтруктураРеквизитов.Корреспонденция <> Неопределено Тогда
		ДанныеСтроки.Корреспонденция = СтруктураРеквизитов.Корреспонденция;
	КонецЕсли;

КонецПроцедуры

Процедура ОчиститьИнформациюОДокументахНаСервере(пСтрока)
	
	пСтрока.Заказ = Неопределено;
	пСтрока.СчетНаОплату = Неопределено;
	пСтрока.ПлатежноеПоручение = Неопределено;
	пСтрока.ДокументРасчетов = Неопределено;
	
КонецПроцедуры

Функция ПолучитьСтатистикуПоКонтрагенту(ВариантПоиска, Контрагент, БанковскийСчетКонтрагента, БанковскийСчетОрганизации, Исходящий, ДоговорВЗаказеСчете)

	// Реализованный вариант (по шагам):
	// 1. Найдем договор, который встречается не менее чем в 50% случаев.
	// 2. Найдем для этого договора вид операции, который встречается не менее чем в 50% случаев.
	// 3. Найдем для этого вида операции статью ДДС, которая встречается не менее чем в 50% случаев.
	// 4. Найдем для этой статьи ДДС корреспондирующий счет учета, который встречается не менее чем в 50% случаев.
	// Альтернативный вариант, это найти комбинацию Договор + ВидОперации + СтатьяДДС + Корреспонденция, которая
	// встречается не менее чем в 50% случаев.
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Договор", Неопределено);
	СтруктураРеквизитов.Вставить("ВидОперации", Неопределено);
	СтруктураРеквизитов.Вставить("СтатьяДДС", Неопределено);
	СтруктураРеквизитов.Вставить("Корреспонденция", Неопределено);
	
	Если ВариантПоиска = 1 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Документ КАК Документ,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Договор КАК Договор,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.ВидОперации КАК ВидОперации,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.СтатьяДДС КАК СтатьяДДС,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Корреспонденция КАК Корреспонденция,
			|	ИСТИНА КАК ДетальныеЗаписи,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.ДатаЗагрузкиЧислом КАК ДатаЗагрузкиЧислом
			|ИЗ
			|	РегистрСведений.ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка КАК ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка
			|ГДЕ
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Контрагент = &Контрагент
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.БанковскийСчетОрганизации = &БанковскийСчетОрганизации
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.БанковскийСчетКонтрагента = &БанковскийСчетКонтрагента
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Исходящий = &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Договор = &ДоговорВЗаказеСчете)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Документ УБЫВ,
			|	ДатаЗагрузкиЧислом УБЫВ
			|ИТОГИ
			|	КОЛИЧЕСТВО(Документ),
			|	МАКСИМУМ(ДатаЗагрузкиЧислом)
			|ПО
			|	ОБЩИЕ,
			|	Договор,
			|	ВидОперации,
			|	СтатьяДДС,
			|	Корреспонденция
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("БанковскийСчетКонтрагента", БанковскийСчетКонтрагента);
		Запрос.УстановитьПараметр("БанковскийСчетОрганизации", БанковскийСчетОрганизации);
		Запрос.УстановитьПараметр("Исходящий", Исходящий);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("ДоговорВЗаказеСчете", ДоговорВЗаказеСчете);
		Запрос.УстановитьПараметр("ОтборПоДоговору", ЗначениеЗаполнено(ДоговорВЗаказеСчете));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ВыборкаОбщийИтог.Следующий(); // Общий итог
			
			ВыборкаДоговор = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если ВыборкаДоговор.Следующий() Тогда
				
				ПриоритетВГруппе = ВыборкаДоговор.Документ / ВыборкаОбщийИтог.Документ * 100;
				Если ПриоритетВГруппе >= 50 Тогда
					
					СтруктураРеквизитов.Вставить("Договор", ВыборкаДоговор.Договор);
					
					ВыборкаВидОперации = ВыборкаДоговор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
					Если ВыборкаВидОперации.Следующий() Тогда
						
						ПриоритетВГруппе = ВыборкаВидОперации.Документ / ВыборкаДоговор.Документ * 100;
						Если ПриоритетВГруппе >= 50 Тогда
					
							СтруктураРеквизитов.Вставить("ВидОперации", ВыборкаВидОперации.ВидОперации);
							ВыборкаСтатьяДДС = ВыборкаВидОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
							Если ВыборкаСтатьяДДС.Следующий() Тогда
								
								ПриоритетВГруппе = ВыборкаСтатьяДДС.Документ / ВыборкаВидОперации.Документ * 100;
								Если ПриоритетВГруппе >= 50 Тогда
					
									СтруктураРеквизитов.Вставить("СтатьяДДС", ВыборкаСтатьяДДС.СтатьяДДС);
									ВыборкаКорреспонденция = ВыборкаСтатьяДДС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
									Если ВыборкаКорреспонденция.Следующий() Тогда
										
										ПриоритетВГруппе = ВыборкаКорреспонденция.Документ / ВыборкаСтатьяДДС.Документ * 100;
										Если ПриоритетВГруппе >= 50 Тогда
											СтруктураРеквизитов.Вставить("Корреспонденция", ВыборкаКорреспонденция.Корреспонденция);
										КонецЕсли;
										
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ВариантПоиска = 2 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Договор КАК Договор,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.ВидОперации КАК ВидОперации,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.СтатьяДДС КАК СтатьяДДС,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Корреспонденция КАК Корреспонденция,
			|	МАКСИМУМ(ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.ДатаЗагрузкиЧислом) КАК ДатаЗагрузкиЧислом,
			|	СУММА(1) КАК КоличествоЗаписей
			|ИЗ
			|	РегистрСведений.ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка КАК ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка
			|ГДЕ
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Контрагент = &Контрагент
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.БанковскийСчетОрганизации = &БанковскийСчетОрганизации
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.БанковскийСчетКонтрагента = &БанковскийСчетКонтрагента
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Исходящий = &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Договор = &ДоговорВЗаказеСчете)
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.ВидОперации,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.СтатьяДДС,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Договор,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Корреспонденция
			|
			|УПОРЯДОЧИТЬ ПО
			|	КоличествоЗаписей УБЫВ,
			|	ДатаЗагрузкиЧислом УБЫВ
			|ИТОГИ
			|	СУММА(КоличествоЗаписей)
			|ПО
			|	ОБЩИЕ
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("БанковскийСчетКонтрагента", БанковскийСчетКонтрагента);
		Запрос.УстановитьПараметр("БанковскийСчетОрганизации", БанковскийСчетОрганизации);
		Запрос.УстановитьПараметр("Исходящий", Исходящий);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("ДоговорВЗаказеСчете", ДоговорВЗаказеСчете);
		Запрос.УстановитьПараметр("ОтборПоДоговору", ЗначениеЗаполнено(ДоговорВЗаказеСчете));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ВыборкаОбщийИтог.Следующий();		// Общий итог
			
			// Вставить обработку выборки ВыборкаОбщийИтог
			
			ВыборкаДетальныеЗаписи = ВыборкаОбщийИтог.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ПриоритетВГруппе = ВыборкаДетальныеЗаписи.КоличествоЗаписей / ВыборкаОбщийИтог.КоличествоЗаписей * 100;
				Если ПриоритетВГруппе >= 50 Тогда
					ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ВыборкаДетальныеЗаписи);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции // ПолучитьСтатистикуПоКонтрагенту()

Функция НайтиДоговорВВидеСтруктуры(ВладелецДоговора, ОрганизацияДоговора = Неопределено, СписокВидовДоговора = Неопределено)
	
	СтруктураВозврат = Новый Структура("Договор, КоличествоДоговоров", НСтр("ru = 'Не найден договор по умолчанию'; uk = 'Не знайдено договір за замовчуванням'"), 0);
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА ОсновныеДоговорыКонтрагента.Контрагент ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО (ОсновныеДоговорыКонтрагента.Контрагент = ДоговорыКонтрагентов.Владелец)
	|			И ДоговорыКонтрагентов.Ссылка = ОсновныеДоговорыКонтрагента.Договор
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ТекстФильтра =
	"	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора"
  + ?(ОрганизацияДоговора <> Неопределено, "
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора", "") 
  +	"	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
  + ?(СписокВидовДоговора <> Неопределено, "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)", "");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		СтруктураВозврат.КоличествоДоговоров = Выборка.Количество();
		
		Выборка.Следующий();
		СтруктураВозврат.Договор = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат СтруктураВозврат;
	
КонецФункции // НайтиДоговор()

Функция ПолучитьТекстЗапросаПоЗаполнениюТабличнойЧастиВыгрузка(Сохранение = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.Номер КАК Номер,
	|	ПлатежноеПоручение.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ПлатежноеПоручение.ВидПлатежа КАК ВидПлатежа,
	|	ПлатежноеПоручение.Ссылка КАК Документ,
	|	ПлатежноеПоручение.ПоказательДаты КАК ПоказательДаты,
	|	ПлатежноеПоручение.ПоказательНомера КАК ПоказательНомера,
	|	ПлатежноеПоручение.ПоказательОснования КАК ПоказательОснования,
	|	ПлатежноеПоручение.ПоказательТипа КАК ПоказательТипа,
	|	ПлатежноеПоручение.ПоказательПериода КАК ПоказательПериода,
	|	ПлатежноеПоручение.СтатусСоставителя КАК СтатусСоставителя,
	|	ПлатежноеПоручение.СуммаДокумента КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ЛичныеСредстваПредпринимателя)
	|				ИЛИ ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет)
	|			ТОГДА ПлатежноеПоручение.Организация
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.Подотчетнику)
	|				ИЛИ ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику)
	|			ТОГДА ПлатежноеПоручение.Подотчетник
	|		ИНАЧЕ ПлатежноеПоручение.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ПлатежноеПоручение.ВидОперации КАК ВидОперации,
	|	ПлатежноеПоручение.ОчередностьПлатежа КАК ОчередностьПлатежа,
	|	ПлатежноеПоручение.ТекстПлательщика КАК ТекстПлательщика,
	|	ПлатежноеПоручение.ТекстПолучателя КАК ТекстПолучателя,
	|	ПлатежноеПоручение.ВидПеречисленияВБюджет КАК ВидПеречисленияВБюджет,
	|	ПлатежноеПоручение.ИННПлательщика КАК ИННПлательщика,
	|	ПлатежноеПоручение.КПППлательщика КАК КПППлательщика,
	|	ПлатежноеПоручение.ИННПолучателя КАК ИННПолучателя,
	|	ПлатежноеПоручение.КПППолучателя КАК КПППолучателя,
	|	ПлатежноеПоручение.КодБК КАК КодБК,
	|	ПлатежноеПоручение.КодОКАТО КАК КодОКАТО,
	|	ПлатежноеПоручение.Организация.НаименованиеПолное КАК Организация,
	|	ПлатежноеПоручение.Организация.НаименованиеПлательщикаПриПеречисленииНалогов КАК ОрганизацияПеречислениеНалога,
	|	ПлатежноеПоручение.Организация.ИНН КАК ОрганизацияИНН,
	|	ПлатежноеПоручение.Организация.КодПоЕДРПОУ КАК ОрганизацияКПП,
	|	ПлатежноеПоручение.БанковскийСчет КАК ОрганизацияСчет,
	|	ПлатежноеПоручение.БанковскийСчет.НомерСчета КАК ОрганизацияНомерСчета,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.Код КАК ОрганизацияБИКБанка,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.Наименование КАК ОрганизацияБанк,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.КоррСчет КАК ОрганизацияРасчСчет,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.Город КАК ОрганизацияГородБанка,
	|	ПлатежноеПоручение.БанковскийСчет.БанкРасчетов КАК ОрганизацияБанкДляРасчетов,
	|	ПлатежноеПоручение.БанковскийСчет.БанкРасчетов.Город КАК ОрганизацияГородРЦБанка,
	|	ПлатежноеПоручение.БанковскийСчет.БанкРасчетов.Код КАК ОрганизацияБИКРЦБанка,
	|	ПлатежноеПоручение.БанковскийСчет.БанкРасчетов.КоррСчет КАК ОрганизацияКоррСчетРЦБанка,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ЛичныеСредстваПредпринимателя)
	|				ИЛИ ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет)
	|			ТОГДА ПлатежноеПоручение.Организация.ИНН
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.Подотчетнику)
	|				ИЛИ ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику)
	|			ТОГДА ПлатежноеПоручение.Подотчетник.ФизЛицо.ИНН
	|		ИНАЧЕ ПлатежноеПоручение.Контрагент.ИНН
	|	КОНЕЦ КАК КонтрагентИНН,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ЛичныеСредстваПредпринимателя)
	|				ИЛИ ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет)
	|			ТОГДА ПлатежноеПоручение.Организация.КодПоЕДРПОУ
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.Подотчетнику)
	|				ИЛИ ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику)
	|			ТОГДА """"
	|		ИНАЧЕ ПлатежноеПоручение.Контрагент.КодПоЕДРПОУ
	|	КОНЕЦ КАК КонтрагентКПП,
	|	ПлатежноеПоручение.СчетКонтрагента КАК КонтрагентСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
	|	ПлатежноеПоручение.СчетКонтрагента.Наименование КАК КонтрагентПредставлениеСчета,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Наименование КАК КонтрагентБанк,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.КоррСчет КАК КонтрагентРасчСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Город КАК КонтрагентГородБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкРасчетов КАК КонтрагентБанкДляРасчетов,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкРасчетов.Город КАК КонтрагентГородРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Код КАК КонтрагентБИКБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкРасчетов.Код КАК КонтрагентБИКРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкРасчетов.КоррСчет КАК КонтрагентКоррСчетРЦБанка,
	|	ПлатежноеПоручение.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ЕСТЬNULL(СостоянияЭД.СостояниеВерсииЭД, ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПустаяСсылка)) КАК СостояниеЭД,
	|	""Платежное поручение"" КАК ВидДокумента,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(255)) КАК ОписаниеОшибок,
	|	0 КАК Готовность,
	|	-1 КАК НомерКартинки,
	|	0 КАК НомерКартинкиДляПодвала,
	|	0 КАК СуммаДокументаВыделено,
	|	ИСТИНА КАК Выгружать,
	|	ПлатежноеПоручение.Оплачено КАК Оплачено
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО ПлатежноеПоручение.Ссылка = СостоянияЭД.СсылкаНаОбъект";
	
	Если НЕ Сохранение Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	ПлатежноеПоручение.Организация = &Организация
		|	И ПлатежноеПоручение.БанковскийСчет = &БанковскийСчет
		|	И ПлатежноеПоручение.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И ПлатежноеПоручение.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПлатежноеПоручение.Дата,
		|	Документ";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	ПлатежноеПоручение.Ссылка В(&Ссылки)";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Проверяет строку на соответствие требованиям
//
// Параметры:
//  ПроверяемаяСтрока - Строка - проверяемый строка.
//
// Возвращаемое значение:
//  Булево - Истина, если ошибок нет.
//
Функция ТолькоСимволыВСтроке(Знач ПроверяемаяСтрока) Экспорт
	
	Если ПустаяСтрока(ПроверяемаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// приводим строку к нижнему регистру
	ПроверяемаяСтрока = НРег(СокрЛП(ПроверяемаяСтрока));
	
	// допустимые символы
	СпецСимволы = ".,;:$№#@&_-+*=?'/|\""%()[]{} ";
	
	// проверяем наличие спецсимволов в начале или конце строке
	Если ЕстьСимволыВНачалеСтроки(Лев(ПроверяемаяСтрока, 1), СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем допустимые символы
	Если НЕ СтрокаСодержитТолькоДопустимыеСимволы(ПроверяемаяСтрока, СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//СМП_РаботаСБанками
Функция СМП_ЕстьЗаписиВСправочникеСоответствий()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.Ссылка
	|ИЗ
	|	Справочник.СоответствияНазначенийПлатежаИРеквизитовПлатежа КАК СоответствияНазначенийПлатежаИРеквизитовПлатежа
	|ГДЕ
	|	НЕ СоответствияНазначенийПлатежаИРеквизитовПлатежа.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

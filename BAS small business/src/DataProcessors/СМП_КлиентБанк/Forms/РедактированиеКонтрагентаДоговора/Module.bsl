///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КонтрольПараметровФормы(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьФорму();
	
	// МобильныйКлиент
	НастроитьФормуМобильныйКлиент();
	// Конец МобильныйКлиент
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Очистить();
	
	// Контрагент.
	Если НЕ ПустаяСтрока(СоздаватьНового) Тогда
		ПроверяемыеРеквизиты.Добавить("КонтрагентНаименование");
	ИначеЕсли НЕ ПустаяСтрока(ИспользоватьСуществующего) Тогда
		ПроверяемыеРеквизиты.Добавить("КонтрагентСсылка");
	КонецЕсли;
	
	// Счет контрагента.
	Если НЕ ПустаяСтрока(ИспользоватьСуществущийСчетКонтрагента) Тогда
		ПроверяемыеРеквизиты.Добавить("СчетКонтрагентаСсылка");
	ИначеЕсли НЕ ПустаяСтрока(СоздаватьНовыйСчетКонтрагента) Тогда
		ПроверяемыеРеквизиты.Добавить("СчетКонтрагентаНомер");
	КонецЕсли;
	
	// Договор.
	Если НЕ ПустаяСтрока(ИспользоватьСуществущийДоговор) Тогда
		ПроверяемыеРеквизиты.Добавить("ДоговорСсылка");
	КонецЕсли;
	
	// Операция.
	Если Исходящий Тогда
		ПроверяемыеРеквизиты.Добавить("ВидОперацииИсходящие");
	Иначе
		ПроверяемыеРеквизиты.Добавить("ВидОперацииВходящие");
	КонецЕсли;
	
	// Сумма.
	Если Элементы.ДействияССуммой.Видимость
		И НЕ Элементы.СуммаДокумента.ТолькоПросмотр Тогда
		ПроверяемыеРеквизиты.Добавить("СуммаДокумента");
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаСервере
Процедура СоздаватьНовогоПриИзмененииНаСервере()
	
	УстановитьЗначенияЭлементов("Контрагент");
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьНовогоПриИзменении(Элемент)
	
	ИспользоватьСуществующего = "";
	СоздаватьНовогоПриЗагрузкеВыпискиВ1С = "";
	НеСоздавать = "";
	
	СоздаватьНовогоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьСуществущегоПриИзмененииНаСервере()
	
	УстановитьЗначенияЭлементов("Контрагент");
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСуществущегоПриИзменении(Элемент)
	
	СоздаватьНового = "";
	СоздаватьНовогоПриЗагрузкеВыпискиВ1С = "";
	НеСоздавать = "";
	
	ИспользоватьСуществущегоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентГруппаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(КонтрагентГруппа) Тогда
		КонтрагентГруппа = НСтр("ru='<<Авто выбор>>'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентГруппаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбораГруппы",,Элементы.КонтрагентГруппа);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентГруппаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьДанныеВыбора(
		Тип("СправочникСсылка.Контрагенты"),
		Новый Структура("СтрокаПоиска, ВыборГруппИЭлементов",
			Текст, ИспользованиеГруппИЭлементов.Группы));
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентГруппаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьДанныеВыбора(
		Тип("СправочникСсылка.Контрагенты"),
		Новый Структура("СтрокаПоиска, ВыборГруппИЭлементов",
			Текст, ИспользованиеГруппИЭлементов.Группы));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОК(Команда)
	
	Если НЕ ОбработатьОКНаСервере() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДаннхЗакрытия = Новый Структура();
	
	СтруктураДаннхЗакрытия.Вставить("КодВозврата", КодВозвратаДиалога.ОК);
	СтруктураДаннхЗакрытия.Вставить("Контрагент", КонтрагентСсылка);
	СтруктураДаннхЗакрытия.Вставить("Договор", ДоговорСсылка);
	СтруктураДаннхЗакрытия.Вставить("ПрименятьДляВсехСтрок", ПрименитьДляВсехСтрок);
	СтруктураДаннхЗакрытия.Вставить("ДействиеСКонтрагентом", ПолучитьДействиеНаКлиенте("Контрагент"));
	
	// Банковский счет и касса
	СтруктураДаннхЗакрытия.Вставить("Касса", Неопределено);
	СтруктураДаннхЗакрытия.Вставить("БанковскийСчетПоУмолчанию", Неопределено);
	Если ЭтоПеремещение Тогда
		Если ЭтоПеремещениеНуженВыборКассы Тогда
			СтруктураДаннхЗакрытия.Вставить("Касса", КассаОрганизации);
		Иначе
			СтруктураДаннхЗакрытия.Вставить("БанковскийСчетПоУмолчанию", СчетОрганизации);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ИспользоватьСуществущийСчетКонтрагента) Тогда
			СтруктураДаннхЗакрытия.Вставить("БанковскийСчетПоУмолчанию", СчетКонтрагентаСсылка);
		Иначе
			СтруктураДаннхЗакрытия.Вставить("БанковскийСчетПоУмолчанию", БанковскийСчетПоУмолчанию);
		КонецЕсли;
	КонецЕсли;
	// Конец Банковский счет и касса
	
	СтруктураДаннхЗакрытия.Вставить("ДействиеСоСчетомКонтрагента", ПолучитьДействиеНаКлиенте("РСчет"));
	СтруктураДаннхЗакрытия.Вставить("ДанныеДоговора", ПолучитьСтруктуруДанныхДоговора());
	СтруктураДаннхЗакрытия.Вставить("ДействиеСДоговором", ПолучитьДействиеНаКлиенте("Договор"));
	Если Исходящий Тогда
		СтруктураДаннхЗакрытия.Вставить("ВидОперации", ВидОперацииИсходящие);
	Иначе
		СтруктураДаннхЗакрытия.Вставить("ВидОперации", ВидОперацииВходящие);
	КонецЕсли;
	Если Элементы.ДействияССуммой.Видимость Тогда
		СтруктураДаннхЗакрытия.Вставить("СуммаДокумента", СуммаДокумента);
	КонецЕсли;
	СтруктураДаннхЗакрытия.Вставить("СтатьяДДС", СтатьяДДС);
	СтруктураДаннхЗакрытия.Вставить("Корреспонденция", Корреспонденция);
	СтруктураДаннхЗакрытия.Вставить("ОбновитьТаблицуКонтрагентовПослеЗакрытияФормы", ОбновитьТаблицуКонтрагентовПослеЗакрытияФормы);
	СтруктураДаннхЗакрытия.Вставить("ЭтоПеремещение", ЭтоПеремещение);
	СтруктураДаннхЗакрытия.Вставить("ЭтоПеремещениеНуженВыборКассы", ЭтоПеремещениеНуженВыборКассы);
	// Налоги
	СтруктураДаннхЗакрытия.Вставить("ВидНалога", ВидНалога);
	
	Закрыть(СтруктураДаннхЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруДанныхДоговора()
	
	СтруктураДанныхДоговора = Новый Структура;
	
	СтруктураДанныхДоговора.Вставить("ДоговорВалютаРасчетов", ДоговорВалютаРасчетов);
	СтруктураДанныхДоговора.Вставить("ДоговорДата", ДоговорДата);
	СтруктураДанныхДоговора.Вставить("ДоговорНаименование", ДоговорНаименование);
	СтруктураДанныхДоговора.Вставить("ДоговорНомер", ДоговорНомер);
	СтруктураДанныхДоговора.Вставить("ДоговорРасчетыВУсловныхЕдиницах", ДоговорРасчетыВУсловныхЕдиницах);
	СтруктураДанныхДоговора.Вставить("ДействиеСДоговором", ДействиеСДоговором);
	
	Возврат СтруктураДанныхДоговора;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДействиеНаКлиенте(ОбъектАнализа)
	
	Если ОбъектАнализа = "Контрагент" Тогда
		Если ЗначениеЗаполнено(СоздаватьНового) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоСейчас");
		ИначеЕсли ЗначениеЗаполнено(СоздаватьНовогоПриЗагрузкеВыпискиВ1С) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С");
		ИначеЕсли ЗначениеЗаполнено(ИспользоватьСуществующего) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.ИспользоватьСуществующего");
		ИначеЕсли ЗначениеЗаполнено(НеСоздавать) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента");
		КонецЕсли;
	ИначеЕсли ОбъектАнализа = "РСчет" Тогда
		Если ЗначениеЗаполнено(СоздаватьНовыйСчетКонтрагента) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоСейчас");
		ИначеЕсли ЗначениеЗаполнено(СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1С) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С");
		ИначеЕсли ЗначениеЗаполнено(ИспользоватьСуществущийСчетКонтрагента) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.ИспользоватьСуществующего");
		ИначеЕсли ЗначениеЗаполнено(НеСоздаватьСчетКонтрагента) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента");
		КонецЕсли;
	ИначеЕсли ОбъектАнализа = "Договор" Тогда
		Если ЗначениеЗаполнено(СоздаватьНовыйДоговор) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоСейчас");
		ИначеЕсли ЗначениеЗаполнено(СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С");
		ИначеЕсли ЗначениеЗаполнено(ИспользоватьСуществущийДоговор) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.ИспользоватьСуществующего");
		ИначеЕсли ЗначениеЗаполнено(НеСоздаватьДоговор) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьДействиеНаСервере(ОбъектАнализа)
	
	Если ОбъектАнализа = "Контрагент" Тогда
		Если ЗначениеЗаполнено(СоздаватьНового) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоСейчас");
		ИначеЕсли ЗначениеЗаполнено(СоздаватьНовогоПриЗагрузкеВыпискиВ1С) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С");
		ИначеЕсли ЗначениеЗаполнено(ИспользоватьСуществующего) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.ИспользоватьСуществующего");
		ИначеЕсли ЗначениеЗаполнено(НеСоздавать) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ОбъектАнализа = "РСчет" Тогда
		Если ЗначениеЗаполнено(СоздаватьНовыйСчетКонтрагента) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоСейчас");
		ИначеЕсли ЗначениеЗаполнено(СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1С) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С");
		ИначеЕсли ЗначениеЗаполнено(ИспользоватьСуществущийСчетКонтрагента) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.ИспользоватьСуществующего");
		ИначеЕсли ЗначениеЗаполнено(НеСоздаватьСчетКонтрагента) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ОбъектАнализа = "Договор" Тогда
		Если ЗначениеЗаполнено(СоздаватьНовыйДоговор) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоСейчас");
		ИначеЕсли ЗначениеЗаполнено(СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С");
		ИначеЕсли ЗначениеЗаполнено(ИспользоватьСуществущийДоговор) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.ИспользоватьСуществующего");
		ИначеЕсли ЗначениеЗаполнено(НеСоздаватьДоговор) Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура КомандаОтмена(Команда)
	Закрыть(КодВозвратаДиалога.Отмена);
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ И ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура КонтрольПараметровФормы(Отказ)
	
	ЗаполненаСсылка = (ТипЗнч(Параметры.Контрагент) = Тип("СправочникСсылка.Контрагенты")) И ЗначениеЗаполнено(Параметры.Контрагент);
	
	ЗаполненыРеквизиты = НЕ ПустаяСтрока(Параметры.Наименование);
	
	Если НЕ ЗаполненаСсылка И НЕ ЗаполненыРеквизиты Тогда
		
		Сообщить(НСтр("ru='Не заданы обязательные параметры формы.
						|Это программная ошибка и сведения о ней направлены администраторам'"));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка выписки банка.Форма выбора контрагента'"), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			НСтр("ru='Была попытка открытия формы заполнения контрагентов с полностью незаполненными параметрами'"));
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Подбирает слова под число
// Например:
//		ПодобратьСловоПодЧисло(21, "Дань", "Дня", "Дней") = День
//		ПодобратьСловоПодЧисло(35, "Дань", "Дня", "Дней") = Дней
//
Функция ПодобратьСловоПодЧисло(Число, СловоДляОдин, СловоДляДва, СловоДляПять) Экспорт
	
	Если Число > 4 И Число < 21 Тогда
		
		Возврат СловоДляПять;
		
	ИначеЕсли (Число % 10) = 1 Тогда
		
		Возврат СловоДляОдин;
		
	ИначеЕсли (Число % 10) <= 5 Тогда
		
		Возврат СловоДляДва;
		
	Иначе
		
		Возврат СловоДляПять;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьФорму()
	
	
	// Значения перечислений и предопределенные значения.
	ВидОперацииПрочееПоступление = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее;
	ВидОперацииПрочееСписание = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
	ВидОперацииНаРасходыСписание = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы;
	ВидОперацииНалоги = Перечисления.ВидыОперацийРасходСоСчета.Налоги;
	ВидОперацииВозвратНалогов = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги;
	
	Параметры.Свойство("МенятьЗаголовкиСтраниц", МенятьЗаголовкиСтраниц);
	
	Организация = Параметры.Организация;
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	
	СтатьяДДСВходящий = Параметры.СтатьяДДСВходящий;
	СтатьяДДСИсходящий = Параметры.СтатьяДДСИсходящий;
	
	// Действия.
	ДействиеСКонтрагентом = Параметры.ДействиеСКонтрагентом;
	ДействиеСоСчетомКонтрагента = Параметры.ДействиеСоСчетомКонтрагента;
	ДействиеСДоговором = Параметры.ДействиеСДоговором;
	
	ОбновитьТаблицуКонтрагентовПослеЗакрытияФормы = Ложь;
	
	// Картинки в заголовке страниц.
	ТаблицаИмяСтраницы = Новый ТаблицаЗначений;
	ТаблицаИмяСтраницы.Колонки.Добавить("ИмяСтраницы", Новый ОписаниеТипов("Строка"));
	ТаблицаИмяСтраницы.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	
	Если Параметры.ВидОперацииНеНайденКартинка = 0 Тогда
		Элементы.ДействияСВидомОперации.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника;
		// Добавим строку для определения текущей страницы.
		СтрокаТаблицыИмяСтраницы = ТаблицаИмяСтраницы.Добавить();
		СтрокаТаблицыИмяСтраницы.ИмяСтраницы = "ДействияСВидомОперации";
		СтрокаТаблицыИмяСтраницы.Приоритет = 4;
	КонецЕсли;
	Если Параметры.НеВерныйФорматСуммы И Параметры.НеВерныйФорматСуммыКартинка = 0 Тогда
		Элементы.ДействияССуммой.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника;
		// Добавим строку для определения текущей страницы.
		СтрокаТаблицыИмяСтраницы = ТаблицаИмяСтраницы.Добавить();
		СтрокаТаблицыИмяСтраницы.ИмяСтраницы = "ДействияССуммой";
		СтрокаТаблицыИмяСтраницы.Приоритет = 5;
	ИначеЕсли НЕ ЗначениеЗаполнено(Параметры.Сумма) Тогда // В выписке сумма не указана вовсе.
		Элементы.ДействияССуммой.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника;
		// Добавим строку для определения текущей страницы.
		СтрокаТаблицыИмяСтраницы = ТаблицаИмяСтраницы.Добавить();
		СтрокаТаблицыИмяСтраницы.ИмяСтраницы = "ДействияССуммой";
		СтрокаТаблицыИмяСтраницы.Приоритет = 5;
	КонецЕсли;
	Если Параметры.НесколькоДокументовКартинка = 0 Тогда
		Элементы.ДействияСоСпискомНайденныхДокументов.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника;
		// Добавим строку для определения текущей страницы.
		СтрокаТаблицыИмяСтраницы = ТаблицаИмяСтраницы.Добавить();
		СтрокаТаблицыИмяСтраницы.ИмяСтраницы = "ДействияСоСпискомНайденныхДокументов";
		СтрокаТаблицыИмяСтраницы.Приоритет = 6;
	КонецЕсли;
	Если Параметры.КонтрагентНеНайденКартинка = 0 Тогда
		Элементы.ДействияСКонтрагентом.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника;
		// Добавим строку для определения текущей страницы.
		СтрокаТаблицыИмяСтраницы = ТаблицаИмяСтраницы.Добавить();
		СтрокаТаблицыИмяСтраницы.ИмяСтраницы = "ДействияСКонтрагентом";
		СтрокаТаблицыИмяСтраницы.Приоритет = 1;
	КонецЕсли;
	Если Параметры.СчетКонтрагентаНеНайденКартинка = 0 Тогда
		Элементы.ДействияСоСчетомКонтрагента.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника;
		// Добавим строку для определения текущей страницы.
		СтрокаТаблицыИмяСтраницы = ТаблицаИмяСтраницы.Добавить();
		СтрокаТаблицыИмяСтраницы.ИмяСтраницы = "ДействияСоСчетомКонтрагента";
		СтрокаТаблицыИмяСтраницы.Приоритет = 2;
	КонецЕсли;
	Если Параметры.ДоговорНеНайденКартинка = 0 Тогда
		Элементы.ДействияСДоговором.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника;
		// Добавим строку для определения текущей страницы.
		СтрокаТаблицыИмяСтраницы = ТаблицаИмяСтраницы.Добавить();
		СтрокаТаблицыИмяСтраницы.ИмяСтраницы = "ДействияСДоговором";
		СтрокаТаблицыИмяСтраницы.Приоритет = 3;
	КонецЕсли;
	// Описание ошибок.
	Если Параметры.Свойство("ОписаниеОшибок", ОписаниеОшибок) Тогда
		// Добавим строку для определения текущей страницы.
		Если Параметры.Свойство("СтраницаОшибокТекущая") Тогда
			СтрокаТаблицыИмяСтраницы = ТаблицаИмяСтраницы.Добавить();
			СтрокаТаблицыИмяСтраницы.ИмяСтраницы = "СтраницаОписаниеОшибок";
			СтрокаТаблицыИмяСтраницы.Приоритет = 7;
		КонецЕсли;
	Иначе
		Элементы.СтраницаОписаниеОшибок.Видимость = Ложь;
	КонецЕсли;
	
	Если ТаблицаИмяСтраницы.Количество() > 0 Тогда
		ТаблицаИмяСтраницы.Сортировать("Приоритет");
		ИмяСтраницы = ТаблицаИмяСтраницы[0].ИмяСтраницы;
	Иначе
		ИмяСтраницы = "ДействияСКонтрагентом";
	КонецЕсли;
	
	// Контрагент.
	КонтрагентНаименование = Параметры.Наименование;
	КонтрагентНаименованиеПолное = Параметры.НаименованиеПолное;
	КонтрагентИНН          = Параметры.ИНН;
	
	КонтрагентВидКонтрагента = ?(СтрДлина(СокрЛП(КонтрагентИНН)) = 12, Перечисления.ВидыКонтрагентов.ФизическоеЛицо, Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
	
	КонтрагентКПП          = Параметры.КПП;
	КонтрагентСсылка       = Параметры.Контрагент;
	
	ДеньгиОтКонтрагентаПоступили = Параметры.ДеньгиОтКонтрагентаПоступили;
	КоличествоСтрокКонтрагента = Параметры.КоличествоСтрокКонтрагента;
	ПрименитьДляВсехСтрок = Ложь; //Истина;
	
	Если КонтрагентКПП = "0" Тогда
		КонтрагентКПП = "";
	КонецЕсли;
	
	ПредставлениеСклоненияСтрок = ПодобратьСловоПодЧисло(
		Параметры.КоличествоСтрокКонтрагента,
		НСтр("ru='строка'"),
		НСтр("ru='строки'"),
		НСтр("ru='строк'"));
	
	Если ПустаяСтрока(КонтрагентИНН) Тогда
		Элементы.ПрименитьДляВсехСтрок.Заголовок = НСтр("ru='Применить для всех строк без ИНН ('") + Параметры.КоличествоСтрокКонтрагента + " " + ПредставлениеСклоненияСтрок +")";
		ПрименитьДляВсехСтрок = Ложь;
	Иначе
		Элементы.ПрименитьДляВсехСтрок.Заголовок = НСтр("ru='Применить для всех строк с таким же ИНН и р/счетом ('") + Параметры.КоличествоСтрокКонтрагента + " " + ПредставлениеСклоненияСтрок +")";
		// Информация об ИНН и р/счете есть в подвале обработки.
	КонецЕсли;
	
	// Расчетный счет.
	АдресДанныхСчета = ПоместитьВоВременноеХранилище(Параметры.СтруктураДанныхРасчетногоСчета, УникальныйИдентификатор);
	ЗаполнитьИнформациюОРасчетномСчетеНаСервере(Параметры.СтруктураДанныхРасчетногоСчета);
	
	Если Параметры.ИмяЗакладкиНаФорме = "Определить" Тогда
		Элементы.ГруппаКонтрагентРасчетныйСчет.ТекущаяСтраница = Элементы[ИмяСтраницы];
	Иначе
		Элементы.ГруппаКонтрагентРасчетныйСчет.ТекущаяСтраница = Элементы[Параметры.ИмяЗакладкиНаФорме];
	КонецЕсли;
	
	// Договор.
	ЗаполнитьИнформациюОДоговореНаСервере(Параметры.Контрагент, Параметры.Договор, Параметры.СтруктураДанныхДоговора);
	
	// Вид операции.
	ВидОперацииВходящие   = Параметры.ВидОперации;
	ВидОперацииИсходящие  = Параметры.ВидОперации;
	НазначениеПлатежа     = Параметры.НазначениеПлатежа;
	Исходящий             = Параметры.Исходящий;
	Элементы.ВидОперацииВходящие.Видимость   = НЕ Параметры.Исходящий;
	Элементы.Декорация4.Видимость            = НЕ Параметры.Исходящий;
	Элементы.ВидОперацииИсходящие.Видимость  = Параметры.Исходящий;
	
	// Сумма документа.
	Если Параметры.НеВерныйФорматСуммы Тогда
		НадписьСуммаДокумента = НСтр("ru = 'Введите нужное число вместо строки ""%1"":'");
		Элементы.НадписьСуммаДокумента.Заголовок = СтрЗаменить(НадписьСуммаДокумента, "%1", Параметры.Сумма);
		СуммаДокумента = Параметры.СуммаДокумента;
		Элементы.ДействияССуммой.Видимость = Истина;
	Иначе
		Элементы.ДействияССуммой.Видимость = НЕ ЗначениеЗаполнено(Параметры.Сумма);
		Элементы.СуммаДокумента.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Параметры.Сумма);
		Элементы.НадписьСуммаДокумента.Заголовок = НСтр("ru = 'Сумма документа:'");
		СуммаДокумента = Параметры.СуммаДокумента;
	КонецЕсли;
	
	// Таблица документов.
	Если Параметры.ТаблицаДокументов <> Неопределено Тогда
		ТаблицаНайденныхДокументов.Загрузить(Параметры.ТаблицаДокументов.Выгрузить());
	КонецЕсли;
	Элементы.ДействияСоСпискомНайденныхДокументов.Видимость = Параметры.ЕстьНесколькоДокументов;
	
	// Статья ДДС и корреспонденция.
	Элементы.СтатьяДДС.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств");
	СтатьяДДС = Параметры.СтатьяДДС;
	Корреспонденция = Параметры.Корреспонденция;
	Если ВидОперацииВходящие = ВидОперацииПрочееПоступление Или
		ВидОперацииИсходящие = ВидОперацииПрочееСписание Или
		ВидОперацииИсходящие = ВидОперацииНаРасходыСписание Тогда
		Элементы.Корреспонденция.Видимость = Истина;
	Иначе
		Элементы.Корреспонденция.Видимость = Ложь;
	КонецЕсли;
	
	МассивСвязей = Новый Массив;
	
	Если Исходящий Тогда
		ПараметрыВыбора = Метаданные.Документы.РасходСоСчета.Реквизиты.Корреспонденция.ПараметрыВыбора;
	Иначе
		ПараметрыВыбора = Метаданные.Документы.ПоступлениеНаСчет.Реквизиты.Корреспонденция.ПараметрыВыбора;
	КонецЕсли;
	
	Для каждого ТекущийПараметрВыбора Из ПараметрыВыбора Цикл
		МассивСвязей.Добавить(ТекущийПараметрВыбора);
	КонецЦикла;
	
	НовыеПараметры = Новый ФиксированныйМассив(МассивСвязей);
	Элементы.Корреспонденция.ПараметрыВыбора = НовыеПараметры;
	
	// Налоги
	ДатаДок = Параметры.ДатаДок;
	ОпределитьВидимостьРеквизитовНалогов();
	
	// Установим значения переключателей.
	НазначитьПереключатели();
	
	// Список выбора видов овпераций.
	ЗаполинтьСпискиВыбораВидовОпераций();
	
	УстановитьСвзяиПараметровВыбораСчетаКонтрагентаНаСервере();
	
	// Перемещение
	УправлениеВидимостьюСтраницДляПеремещенияДенег();
	// Конец Перемещение
	
	//СМП_РаботаСБанками +++
	Элементы.КонтрагентКПП.Заголовок = "ЕДРПОУ";
	Элементы.КонтрагентСсылкаКПП.Заголовок = "ЕДРПОУ";
	//СМП_РаботаСБанками ---
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюСтраницДляПеремещенияДенег()
	
	Если (ВидОперацииИсходящие = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных
		ИЛИ ВидОперацииИсходящие = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет) Тогда
		
		ЭтоПеремещение = Истина;
		
		Если ВидОперацииИсходящие = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных Тогда
			Элементы.КассаОрганизации.Видимость = Истина;
			Элементы.СчетОрганизации.Видимость = Ложь;
		Иначе
			Элементы.КассаОрганизации.Видимость = Ложь;
			Элементы.СчетОрганизации.Видимость = Истина;
		КонецЕсли;
		ЭтоПеремещениеНуженВыборКассы = Элементы.КассаОрганизации.Видимость;
		
	ИначеЕсли ВидОперацииВходящие = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными
		ИЛИ ВидОперацииВходящие = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета Тогда
		
		ЭтоПеремещение = Истина;
		
		Если ВидОперацииВходящие = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными Тогда
			Элементы.КассаОрганизации.Видимость = Истина;
			Элементы.СчетОрганизации.Видимость = Ложь;
		Иначе
			Элементы.КассаОрганизации.Видимость = Ложь;
			Элементы.СчетОрганизации.Видимость = Истина;
		КонецЕсли;
		ЭтоПеремещениеНуженВыборКассы = Элементы.КассаОрганизации.Видимость;
		
	Иначе
		
		ЭтоПеремещение = Ложь;
		ЭтоПеремещениеНуженВыборКассы = Ложь;
		Элементы.КассаОрганизации.Видимость = Ложь;
		Элементы.СчетОрганизации.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ЭтоПеремещение Тогда
		//Если НЕ ЭтоПеремещениеНуженВыборКассы Тогда
			Элементы.ДействияСКонтрагентом.Видимость = Ложь;
			Элементы.ДействияСоСчетомКонтрагента.Видимость = Ложь;
			Элементы.ДействияСДоговором.Видимость = Ложь;
			Элементы.ГруппаИнформация.Видимость = Ложь;
		//Иначе
		//	Элементы.ДействияСКонтрагентом.Видимость = Истина;
		//	Элементы.ДействияСоСчетомКонтрагента.Видимость = Истина;
		//	Элементы.ДействияСДоговором.Видимость = Истина;
		//	Элементы.ГруппаИнформация.Видимость = Истина;
		//КонецЕсли;
		
		Если КассаОрганизации.Пустая() Тогда
			КассаОрганизации = Организация.КассаПоУмолчанию;
		КонецЕсли;
		Если СчетОрганизации.Пустая() Тогда
			Если (ВидОперацииВходящие = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета
				ИЛИ ВидОперацииИсходящие = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет)
				И НЕ СчетКонтрагентаСсылка.Пустая()
				Тогда
				СчетОрганизации = ?(ТипЗнч(СчетКонтрагентаСсылка.Владелец) = Тип("СправочникСсылка.Организации"), СчетКонтрагентаСсылка, Неопределено); //Организация.БанковскийСчетПоУмолчанию);
			Иначе
				СчетОрганизации = ?(ЗначениеЗаполнено(СчетКонтрагентаСсылка), СчетКонтрагентаСсылка, Неопределено); //Организация.БанковскийСчетПоУмолчанию);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элементы.ДействияСКонтрагентом.Видимость = Истина;
		Элементы.ДействияСоСчетомКонтрагента.Видимость = Истина;
		Элементы.ДействияСДоговором.Видимость = Истина;
		Элементы.ГруппаИнформация.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОРасчетномСчетеНаСервере(СтруктураДанныхРасчетногоСчета)
	
	СчетКонтрагентаСсылка = СтруктураДанныхРасчетногоСчета.СчетКонтрагента;
	
	// Заполним реквизиты счета (
	СчетКонтрагентаНомер = СтруктураДанныхРасчетногоСчета.Счет;
	СчетБанк = СтруктураДанныхРасчетногоСчета.Банк;
	СчетГородБанка = СтруктураДанныхРасчетногоСчета.Город;
	СчетКодБанка = СтруктураДанныхРасчетногоСчета.БИК;
	СчетКоррСчетБанка = СтруктураДанныхРасчетногоСчета.КоррСчет;
	Если Не СтруктураДанныхРасчетногоСчета.ПрямыеРасчеты Тогда
		НеПрямыеРасчеты = Истина;
		СчетБанкРасчетов = СтруктураДанныхРасчетногоСчета.БанкРасчетов;
		СчетГородБанкаРасчетов = СтруктураДанныхРасчетногоСчета.ГородРасчетов;
		СчетКодБанкаРасчетов = СтруктураДанныхРасчетногоСчета.БИКРасчетов;
		СчетКоррСчетБанкаРасчетов = СтруктураДанныхРасчетногоСчета.КоррСчетРасчетов;
	Иначе
		НеПрямыеРасчеты = Ложь;
	КонецЕсли;
	СчетБИК = СтруктураДанныхРасчетногоСчета.СчетБИК;
	Элементы.Группа7.Доступность = НеПрямыеРасчеты;
	// )
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМаксимальныйНомерДоговораКонтрагента(Контрагент)
	
	Если Контрагент.Пустая() Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
		|	1 КАК КолвоДоговоров
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Контрагент
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерДоговора УБЫВ
		|ИТОГИ
		|	СУММА(КолвоДоговоров)
		|ПО
		|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаИтоги.Следующий() Тогда
		КолвоДоговоров = ВыборкаИтоги.КолвоДоговоров;
		Выборка = РезультатЗапроса.Выбрать();
		
		Номер = 0;
		Пока Выборка.Следующий() Цикл
			Попытка
				ТекНомер = Число(Выборка.НомерДоговора);
			Исключение
				ТекНомер = 1;
			КонецПопытки;
			Номер = Макс(Номер, ТекНомер);
		КонецЦикла;
		
		Номер = Макс(Номер, КолвоДоговоров);
	Иначе
		Номер = 1;
	КонецЕсли;
	
	Возврат Номер;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИнформациюОДоговореНаСервере(Контрагент, Договор, ПараметрыДоговора)
	
	Если ПустаяСтрока(ПараметрыДоговора.ДоговорНомер) Тогда
		Если ТипЗнч(Контрагент) = Тип("Строка") Тогда // Контрагент еще не создан.
			ДоговорНомер = 1;
		Иначе
			ДоговорНомер = ПолучитьМаксимальныйНомерДоговораКонтрагента(Контрагент) + 1;
		КонецЕсли;
	Иначе
		ДоговорНомер = ПараметрыДоговора.ДоговорНомер;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыДоговора.ДоговорДата) Тогда
		ДоговорДата = ПараметрыДоговора.ДоговорДата;
	Иначе
		ДоговорДата = ПараметрыДоговора.ДатаДок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыДоговора.ДоговорВалютаРасчетов) Тогда
		ДоговорВалютаРасчетов = ПараметрыДоговора.ДоговорВалютаРасчетов;
	Иначе
		ДоговорВалютаРасчетов = Константы.НациональнаяВалюта.Получить();
	КонецЕсли;
	
	ДоговорРасчетыВУсловныхЕдиницах = ПараметрыДоговора.ДоговорРасчетыВУсловныхЕдиницах;
	
	ДоговорНаименованиеПраваяЧасть = НСтр("ru = '№ %НомерДоговора% от %ДатаДоговора% (%ВалютаРасчетов%)'");
	ДоговорНаименованиеПраваяЧасть = СтрЗаменить(ДоговорНаименованиеПраваяЧасть, "%НомерДоговора%", СокрЛП(ДоговорНомер));
	ДоговорНаименованиеПраваяЧасть = СтрЗаменить(ДоговорНаименованиеПраваяЧасть, "%ДатаДоговора%", ?(ЗначениеЗаполнено(ДоговорДата), СокрЛП(Строка(Формат(ДоговорДата, "ДФ=dd.MM.yyyy"))), ""));
	ДоговорНаименованиеПраваяЧасть = СтрЗаменить(ДоговорНаименованиеПраваяЧасть, "%ВалютаРасчетов%", СокрЛП(Строка(ДоговорВалютаРасчетов)));
	
	СНаименованиемОсновнойДоговор = Истина;
	
	Если ТипЗнч(Договор) = Тип("Строка") Тогда
		Если СтрНайти(Договор, НСтр("ru = 'Не найден'")) > 0 Тогда
			
			ДоговорНаименование = ДоговорНаименованиеПраваяЧасть;
			
		Иначе
			
			ДоговорНаименование = Договор;
			
		КонецЕсли;
	Иначе
		ДоговорНаименование = ДоговорНаименованиеПраваяЧасть;
		// Если контрагент уже создан и у него есть договор, то новый договор будем предлагать создать с номером и датой, а не
		// с наименованием "Основной договор".
		СНаименованиемОсновнойДоговор = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ДоговорСсылка = Параметры.Договор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИнформационныеНадписи()
	
	ДействиеСКонтрагентом = ПолучитьДействиеНаСервере("Контрагент");
	ДействиеСоСчетом = ПолучитьДействиеНаСервере("РСчет");
	ДействиеСДоговором = ПолучитьДействиеНаСервере("Договор");
	
	//СМП_РаботаСБанками +++
	СтранаУкраина = Истина;
	//СМП_РаботаСБанками ---

	ИНН_КПП = "";
	Если Не ПустаяСтрока(КонтрагентИНН) ИЛИ Не ПустаяСтрока(КонтрагентКПП) Тогда
		
		//СМП_РаботаСБанками +++
		//ИНН_КПП = " ("+?(Не ПустаяСтрока(КонтрагентИНН), НСтр("ru = 'ИНН '")+СокрЛП(КонтрагентИНН)+", ", "")+
			//?(Не ПустаяСтрока(КонтрагентКПП), НСтр("ru = 'КПП '")+СокрЛП(КонтрагентКПП)+", ", "")+")";
		
		Если СтранаУкраина Тогда
			ИНН_КПП = " ("+?(Не ПустаяСтрока(КонтрагентКПП), НСтр("ru = 'ЕДРПОУ '")+СокрЛП(КонтрагентКПП)+", ", "")+
			?(Не ПустаяСтрока(КонтрагентИНН), НСтр("ru = 'ИНН '")+СокрЛП(КонтрагентИНН)+", ", "")+")";
		Иначе
			ИНН_КПП = " ("+?(Не ПустаяСтрока(КонтрагентИНН), НСтр("ru = 'ИНН '")+СокрЛП(КонтрагентИНН)+", ", "")+
			?(Не ПустаяСтрока(КонтрагентКПП), НСтр("ru = 'КПП '")+СокрЛП(КонтрагентКПП)+", ", "")+")";
		КонецЕсли;
		//СМП_РаботаСБанками ---
		
	КонецЕсли;
	
	// Заполним информацию о контрагенте.
	Если ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С Или 
		(Не ЗначениеЗаполнено(КонтрагентСсылка) И ДействиеСКонтрагентом = Неопределено) Тогда
		
		ОКонтрагентеЦентр = НСтр("ru = 'Создать нового при загрузке в 1С'");
		ОКонтрагентеПраво = КонтрагентНаименование+ИНН_КПП;
		
	ИначеЕсли ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоСейчас Тогда
		
		ОКонтрагентеЦентр = НСтр("ru = 'Создать нового СЕЙЧАС'");
		ОКонтрагентеПраво = КонтрагентНаименование+ИНН_КПП;
		
	ИначеЕсли ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента Тогда
		
		ОКонтрагентеЦентр = НСтр("ru = 'НЕ создавать'");
		ОКонтрагентеПраво = КонтрагентНаименование+ИНН_КПП;
		
	ИначеЕсли ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.ИспользоватьСуществующего Тогда
		
		ИНН_КПП = "";
		//СМП_РаботаСБанками +++
		//Если Не ПустаяСтрока(КонтрагентСсылка.ИНН) ИЛИ Не ПустаяСтрока(КонтрагентСсылка.КПП) Тогда
		
		Если Не ПустаяСтрока(КонтрагентСсылка.ИНН) ИЛИ Не ПустаяСтрока(КонтрагентСсылка.КодПоЕДРПОУ) Тогда	
			//ИНН_КПП = " ("+?(Не ПустаяСтрока(КонтрагентСсылка.ИНН), НСтр("ru = 'ИНН '")+СокрЛП(КонтрагентСсылка.ИНН)+", ", "")+
			//	?(Не ПустаяСтрока(КонтрагентСсылка.КПП), НСтр("ru = 'КПП '")+СокрЛП(КонтрагентСсылка.КПП), "")+")";
				
				ИНН_КПП = " ("+?(Не ПустаяСтрока(КонтрагентСсылка.КодПоЕДРПОУ), НСтр("ru = 'ЕДРПОУ '")+СокрЛП(КонтрагентСсылка.КодПоЕДРПОУ)+", ", "")+
					?(Не ПустаяСтрока(КонтрагентСсылка.ИНН), НСтр("ru = 'ИНН '")+СокрЛП(КонтрагентСсылка.ИНН)+", ", "")+")";
			//СМП_РаботаСБанками ---
			
		КонецЕсли;
		
		ОКонтрагентеЦентр = НСтр("ru = 'Использовать существующего'");
		ОКонтрагентеПраво = КонтрагентСсылка.НаименованиеПолное+ИНН_КПП;
		
	КонецЕсли;
	
	// Заполним информацию о р/счете.
	Если ДействиеСоСчетом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С Тогда
		
		ОРасчетномСчетеЦентр = НСтр("ru = 'Создать новый при загрузке в 1С'");
		ОРасчетномСчетеПраво = СчетКонтрагентаНомер; //+?(ЗначениеЗаполнено(СчетБанк), ", банк - """+СокрЛП(СчетБанк)+"""", "");
		
	ИначеЕсли ДействиеСоСчетом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоСейчас Тогда
		
		ОРасчетномСчетеЦентр = НСтр("ru = 'Создать новый СЕЙЧАС'");
		ОРасчетномСчетеПраво = СчетКонтрагентаНомер; //+?(ЗначениеЗаполнено(СчетБанк), ", банк - """+СокрЛП(СчетБанк)+"""", "");
		
	ИначеЕсли ДействиеСоСчетом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента Тогда
		
		ОРасчетномСчетеЦентр = НСтр("ru = 'НЕ создавать'");
		ОРасчетномСчетеПраво = СчетКонтрагентаНомер; //+?(ЗначениеЗаполнено(СчетБанк), ", банк - """+СокрЛП(СчетБанк)+"""", "");
		
	ИначеЕсли ДействиеСоСчетом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.ИспользоватьСуществующего Тогда
		
		ОРасчетномСчетеЦентр = НСтр("ru = 'Использовать существующий'");
		ОРасчетномСчетеПраво = СчетКонтрагентаСсылка;
		
	КонецЕсли;
	
	// Заполним информацию о договоре.
	Если ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С Тогда
		
		ОДоговореЦентр = НСтр("ru = 'Создать новый при загрузке в 1С'");
		ОДоговореПраво = НСтр("ru = 'Основной договор'");
		
	ИначеЕсли ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоСейчас Тогда
		
		ОДоговореЦентр = НСтр("ru = 'Создать новый СЕЙЧАС'");
		Если СНаименованиемОсновнойДоговор Тогда
			ОДоговореПраво = НСтр("ru = 'Основной договор'");
		Иначе
			ОДоговореПраво = ДоговорНаименование;
		КонецЕсли;
		
	ИначеЕсли ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента Тогда
		
		ОДоговореЦентр = НСтр("ru = 'НЕ создавать'");
		ОДоговореПраво = "";
		
	ИначеЕсли ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.ИспользоватьСуществующего Тогда
		
		ОДоговореЦентр = НСтр("ru = 'Использовать существующий'");
		ОДоговореПраво = ДоговорСсылка.Наименование;
		
	КонецЕсли;
	
	// КонтрагентСсылка
	// Выделим цветом те данные о контрагенте, которые не совпадают с данными в выписке.
	КонтрагентСсылкаИНН = КонтрагентСсылка.ИНН;
	
	//СМП_РаботаСБанками +++
	//КонтрагентСсылкаКПП = КонтрагентСсылка.КПП;
	КонтрагентСсылкаКПП = КонтрагентСсылка.КодПоЕДРПОУ;
	//СМП_РаботаСБанками ---
	
	КонтрагентСсылкаНаименованиеПолное = КонтрагентСсылка.НаименованиеПолное;
	
	Если Не КонтрагентСсылка.Пустая() Тогда
		
		Если СокрЛП(КонтрагентИНН) <> СокрЛП(КонтрагентСсылкаИНН) Тогда
			Элементы.КонтрольИНН.ЦветФона = ЦветаСтиля.РабочееМестоКассираЦветДополнительнойПанели;
			Элементы.ГруппаИНН.ЦветФона = ЦветаСтиля.РабочееМестоКассираЦветДополнительнойПанели;
		Иначе
			Элементы.КонтрольИНН.ЦветФона = Новый Цвет;
			Элементы.ГруппаИНН.ЦветФона = Новый Цвет;
		КонецЕсли;
		
		Если СокрЛП(?(СокрЛП(КонтрагентКПП)="0", "", КонтрагентКПП)) <> СокрЛП(?(СокрЛП(КонтрагентСсылкаКПП)="0", "", КонтрагентСсылкаКПП)) Тогда
			Элементы.КонтрольКПП.ЦветФона = ЦветаСтиля.РабочееМестоКассираЦветДополнительнойПанели;
			Элементы.ГруппаКПП.ЦветФона = ЦветаСтиля.РабочееМестоКассираЦветДополнительнойПанели;
		Иначе
			Элементы.КонтрольКПП.ЦветФона = Новый Цвет;
			Элементы.ГруппаКПП.ЦветФона = Новый Цвет;
		КонецЕсли;
		
		Если СокрЛП(ВРег(КонтрагентНаименованиеПолное)) <> СокрЛП(ВРег(КонтрагентСсылкаНаименованиеПолное)) Тогда
			Элементы.ГруппаКонтрагентСсылка.ЦветФона = ЦветаСтиля.РабочееМестоКассираЦветДополнительнойПанели;
			Элементы.ГруппаНаименованиеПолное.ЦветФона = ЦветаСтиля.РабочееМестоКассираЦветДополнительнойПанели;
		Иначе
			Элементы.ГруппаКонтрагентСсылка.ЦветФона = Новый Цвет;
			Элементы.ГруппаНаименованиеПолное.ЦветФона = Новый Цвет;
		КонецЕсли;
		
	Иначе
		
		Элементы.КонтрольИНН.ЦветФона = Новый Цвет;
		Элементы.ГруппаИНН.ЦветФона = Новый Цвет;
		
		Элементы.КонтрольКПП.ЦветФона = Новый Цвет;
		Элементы.ГруппаКПП.ЦветФона = Новый Цвет;
		
		Элементы.ГруппаКонтрагентСсылка.ЦветФона = Новый Цвет;
		Элементы.ГруппаНаименованиеПолное.ЦветФона = Новый Цвет;
		
	КонецЕсли;
	
	// ДоговорСсылка.
	// Выделим цветом информацию об организации, если она не совпадает с организацией в РС.
	Если Не ДоговорСсылка.Пустая() И
		ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") И
		ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		
		Если ДоговорСсылка.Организация <> Организация Тогда
			Элементы.Группа17.ЦветФона = ЦветаСтиля.РабочееМестоКассираЦветДополнительнойПанели;
		Иначе
			Элементы.Группа17.ЦветФона = Новый Цвет;
		КонецЕсли;
		
		Элементы.ДоговорСсылкаОрганизация.Видимость = Истина;
		
	Иначе
		
		Элементы.Группа17.ЦветФона = Новый Цвет;
		Элементы.ДоговорСсылкаОрганизация.Видимость = Ложь;
		
	КонецЕсли;
	
	// Выделим цветом те данные о расчетном счете, которые не совпадают с данными в выписке.
	Если НЕ СчетКонтрагентаСсылка.Пустая() И СчетКонтрагентаСсылка.Банк.Код <> СчетБИК Тогда
		Элементы.ГруппаСчетКонтрагента.ЦветФона = ЦветаСтиля.РабочееМестоКассираЦветДополнительнойПанели;
		Элементы.ГруппаБИКБанка.ЦветФона = ЦветаСтиля.РабочееМестоКассираЦветДополнительнойПанели;
		Если НеПрямыеРасчеты Тогда
			Элементы.ГруппаБИКБанкаНеПрямые.ЦветФона = ЦветаСтиля.РабочееМестоКассираЦветДополнительнойПанели;
		КонецЕсли;
		Элементы.СчетКонтрагентаСсылкаБанкКод.Видимость = Истина;
		Элементы.СчетКонтрагентаСсылкаБанкРасчетовКод.Видимость = НеПрямыеРасчеты;
	Иначе
		Элементы.ГруппаСчетКонтрагента.ЦветФона = Новый Цвет;
		Элементы.ГруппаБИКБанка.ЦветФона = Новый Цвет;
		Если НеПрямыеРасчеты Тогда
			Элементы.ГруппаБИКБанкаНеПрямые.ЦветФона = Новый Цвет;
		КонецЕсли;
		Элементы.СчетКонтрагентаСсылкаБанкКод.Видимость = Ложь;
		Элементы.СчетКонтрагентаСсылкаБанкРасчетовКод.Видимость = Ложь;
	КонецЕсли;
	
	СформироватьЗаголовкиСтраницНаСервере();
	
КонецПроцедуры

Процедура СформироватьЗаголовкиСтраницНаСервере()
	
	Если МенятьЗаголовкиСтраниц Тогда
		
		// Заголовок страницы "Контрагент".
		Если ЗначениеЗаполнено(СоздаватьНового) Тогда
			Элементы.ДействияСКонтрагентом.Заголовок = "Контрагент (создать сейчас)";
		ИначеЕсли ЗначениеЗаполнено(СоздаватьНовогоПриЗагрузкеВыпискиВ1С) Тогда
			Элементы.ДействияСКонтрагентом.Заголовок = "Контрагент (создать при загрузке)";
		ИначеЕсли ЗначениеЗаполнено(ИспользоватьСуществующего) Тогда
			Элементы.ДействияСКонтрагентом.Заголовок = "Контрагент (использовать существующего)";
		ИначеЕсли ЗначениеЗаполнено(НеСоздавать) Тогда
			Элементы.ДействияСКонтрагентом.Заголовок = "Контрагент (НЕ создавать)";
		Иначе
			Элементы.ДействияСКонтрагентом.Заголовок = "Контрагент";
		КонецЕсли;
		
		// Заголовок страницы "Р/счет".
		Если ЗначениеЗаполнено(СоздаватьНовыйСчетКонтрагента) Тогда
			Элементы.ДействияСоСчетомКонтрагента.Заголовок = "Р/счет (создать сейчас)";
		ИначеЕсли ЗначениеЗаполнено(СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1С) Тогда
			Элементы.ДействияСоСчетомКонтрагента.Заголовок = "Р/счет (создать при загрузке)";
		ИначеЕсли ЗначениеЗаполнено(ИспользоватьСуществущийСчетКонтрагента) Тогда
			Элементы.ДействияСоСчетомКонтрагента.Заголовок = "Р/счет (использовать существующий)";
		ИначеЕсли ЗначениеЗаполнено(НеСоздаватьСчетКонтрагента) Тогда
			Элементы.ДействияСоСчетомКонтрагента.Заголовок = "Р/счет (НЕ создавать)";
		Иначе
			Элементы.ДействияСоСчетомКонтрагента.Заголовок = "Р/счет";
		КонецЕсли;
		
		// Заголовок страницы "Договор".
		Если ЗначениеЗаполнено(СоздаватьНовыйДоговор) Тогда
			Элементы.ДействияСДоговором.Заголовок = "Договор (создать сейчас)";
		ИначеЕсли ЗначениеЗаполнено(СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С) Тогда
			Элементы.ДействияСДоговором.Заголовок = "Договор (создать при загрузке)";
		ИначеЕсли ЗначениеЗаполнено(ИспользоватьСуществущийДоговор) Тогда
			Элементы.ДействияСДоговором.Заголовок = "Договор (использовать существующий)";
		ИначеЕсли ЗначениеЗаполнено(НеСоздаватьДоговор) Тогда
			Элементы.ДействияСДоговором.Заголовок = "Договор (НЕ создавать)";
		Иначе
			Элементы.ДействияСДоговором.Заголовок = "Договор";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НазначитьПереключатели()
	
	// Контрагент.
	Если ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента Тогда
		СоздаватьНового = "";
		ИспользоватьСуществующего = "";
		СоздаватьНовогоПриЗагрузкеВыпискиВ1С = "";
		НеСоздавать = "НеСоздавать";
	ИначеЕсли ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С Или Не ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С;
		СоздаватьНового = "";
		ИспользоватьСуществующего = "";
		СоздаватьНовогоПриЗагрузкеВыпискиВ1С = "СоздатьНовогоПриЗагрузке";
		НеСоздавать = "";
	ИначеЕсли ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		СоздаватьНового = "";
		СоздаватьНовогоПриЗагрузкеВыпискиВ1С = "";
		ИспользоватьСуществующего = "ИспользоватьСуществующего";
		НеСоздавать = "";
	КонецЕсли;
	
	// Счет контрагента.
	Если ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента Тогда
		СоздаватьНовыйСчетКонтрагента = "";
		ИспользоватьСуществущийСчетКонтрагента = "";
		СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1С = "";
		НеСоздаватьСчетКонтрагента = "НеСоздавать";
	ИначеЕсли ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С Или Не ЗначениеЗаполнено(СчетКонтрагентаСсылка) Тогда
		ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С;
		СоздаватьНовыйСчетКонтрагента = "";
		ИспользоватьСуществущийСчетКонтрагента = "";
		СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1С = "СоздатьНовогоПриЗагрузке";
		НеСоздаватьСчетКонтрагента = "";
	ИначеЕсли ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		СоздаватьНовыйСчетКонтрагента = "";
		ИспользоватьСуществущийСчетКонтрагента = "ИспользоватьСуществующего";
		СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1С = "";
		НеСоздаватьСчетКонтрагента = "";
	КонецЕсли;
	
	// Договор.
	Если ЗначениеЗаполнено(ИспользоватьСуществующего) И Не ЗначениеЗаполнено(ДоговорСсылка) Тогда
		СоздаватьНовыйДоговор = "СоздатьНового";
		ИспользоватьСуществущийДоговор = "";
		СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С = "";
		НеСоздаватьДоговор = "";
	ИначеЕсли ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента Тогда
		СоздаватьНовыйДоговор = "";
		ИспользоватьСуществущийДоговор = "";
		СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С = "";
		НеСоздаватьДоговор = "НеСоздавать";
	ИначеЕсли ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С Или Не ЗначениеЗаполнено(ДоговорСсылка) Тогда
		ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С;
		СоздаватьНовыйДоговор = "";
		ИспользоватьСуществущийДоговор = "";
		СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С = "СоздатьНовогоПриЗагрузке";
		НеСоздаватьДоговор = "";
	ИначеЕсли ЗначениеЗаполнено(ДоговорСсылка) Тогда
		СоздаватьНовыйДоговор = "";
		ИспользоватьСуществущийДоговор = "ИспользоватьСуществующего";
		СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С = "";
		НеСоздаватьДоговор = "";
	КонецЕсли;
	
	Если ДоговорВалютаРасчетов = НациональнаяВалюта Тогда
		Элементы.ДоговорРасчетыВУсловныхЕдиницах.Видимость = Ложь;
		ДоговорРасчетыВУсловныхЕдиницах = Ложь;
	Иначе
		Элементы.ДоговорРасчетыВУсловныхЕдиницах.Видимость = Истина;
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияЭлементов(ЗакладкаСтрока)
	
	Если ЗакладкаСтрока = "Контрагент" Тогда
		
		Если ЗначениеЗаполнено(СоздаватьНовогоПриЗагрузкеВыпискиВ1С) Тогда
			
			// Настройка закладки "Р/счет" (
			СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1С = "СоздатьНовогоПриЗагрузке";
			Элементы.СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1С.Доступность = Истина;
			
			СоздаватьНовыйСчетКонтрагента = "";
			ИспользоватьСуществущийСчетКонтрагента = "";
			НеСоздаватьСчетКонтрагента = "";
			// )
			
			// Настройка закладки "Договор" (
			СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С = "СоздатьНовогоПриЗагрузке";
			СоздаватьНовыйДоговор = "";
			ИспользоватьСуществущийДоговор = "";
			НеСоздаватьДоговор = "";
			// )
			
		ИначеЕсли ЗначениеЗаполнено(СоздаватьНового) Тогда
			
			// Настройка закладки "Р/счет" (
			СоздаватьНовыйСчетКонтрагента = "СоздатьНового";
			Элементы.СоздаватьНовыйСчетКонтрагента.Доступность = Истина;
			
			СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1С = "";
			ИспользоватьСуществущийСчетКонтрагента = "";
			НеСоздаватьСчетКонтрагента = "";
			// )
			
			// Настройка закладки "Договор" (
			СоздаватьНовыйДоговор = "СоздатьНового";
			СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С = "";
			ИспользоватьСуществущийДоговор = "";
			НеСоздаватьДоговор = "";
			// )
			
		ИначеЕсли ЗначениеЗаполнено(ИспользоватьСуществующего) Тогда
			
			// Настройка закладки "Р/счет" (
			//
			// )
			
			// Настройка закладки "Договор" (
			ИспользоватьСуществущийДоговор = "ИспользоватьСуществующего";
			СоздаватьНовыйДоговор = "";
			СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С = "";
			НеСоздаватьДоговор = "";
			// )
		
		Иначе // Не Создавать
			
			// Настройка закладки "Р/счет" (
			СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1С = "";
			СоздаватьНовыйСчетКонтрагента = "";
			ИспользоватьСуществущийСчетКонтрагента = "";
			НеСоздаватьСчетКонтрагента = "НеСоздавать";
			// )
			
			// Настройка закладки "Договор" (
			СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С = "";
			СоздаватьНовыйДоговор = "";
			ИспользоватьСуществущийДоговор = "";
			НеСоздаватьДоговор = "НеСоздавать";
			// )
			
		КонецЕсли;
		
	ИначеЕсли ЗакладкаСтрока = "РСчет" Тогда
		
		Если ЗначениеЗаполнено(СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1С) Тогда
		
			Если ЗначениеЗаполнено(НеСоздавать) Тогда
				СоздаватьНовогоПриЗагрузкеВыпискиВ1С = "СоздатьНовогоПриЗагрузке";
				СоздаватьНового = "";
				ИспользоватьСуществующего = "";
				НеСоздавать = "";
				
				СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С = "СоздатьНовогоПриЗагрузке";
				СоздаватьНовыйДоговор = "";
				ИспользоватьСуществущийДоговор = "";
				НеСоздаватьДоговор = "";
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СоздаватьНовыйСчетКонтрагента) Тогда
			
			Если ЗначениеЗаполнено(НеСоздавать) ИЛИ 
				ЗначениеЗаполнено(СоздаватьНовогоПриЗагрузкеВыпискиВ1С) Тогда
				
				СоздаватьНовогоПриЗагрузкеВыпискиВ1С = "";
				СоздаватьНового = "СоздатьНового";
				ИспользоватьСуществующего = "";
				НеСоздавать = "";
				
				СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С = "";
				СоздаватьНовыйДоговор = "СоздатьНового";
				ИспользоватьСуществущийДоговор = "";
				НеСоздаватьДоговор = "";
				
				УстановитьЗначенияЭлементов("Договор"); // Зацикливания не будет, т.к. настройка для контрагента уже установлена.
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ИспользоватьСуществущийСчетКонтрагента) Тогда
			
			Если Не ЗначениеЗаполнено(ИспользоватьСуществующего) Тогда
				
				СоздаватьНовогоПриЗагрузкеВыпискиВ1С = "";
				СоздаватьНового = "";
				ИспользоватьСуществующего = "ИспользоватьСуществующего";
				НеСоздавать = "";
				
				СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С = "";
				СоздаватьНовыйДоговор = "";
				ИспользоватьСуществущийДоговор = "ИспользоватьСуществующего";
				НеСоздаватьДоговор = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЗакладкаСтрока = "Договор" Тогда
		
		Если ЗначениеЗаполнено(СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С) Тогда
			
			// Настройка закладки "Контрагент" (
			Если НЕ ЗначениеЗаполнено(СоздаватьНовогоПриЗагрузкеВыпискиВ1С) Тогда
				СоздаватьНовогоПриЗагрузкеВыпискиВ1С = "СоздатьНовогоПриЗагрузке";
				СоздаватьНового = "";
				ИспользоватьСуществующего = "";
				НеСоздавать = "";
				
				УстановитьЗначенияЭлементов("Контрагент");
			КонецЕсли;
			// )
			
		ИначеЕсли ЗначениеЗаполнено(СоздаватьНовыйДоговор) Тогда
			
			// Настройка закладки "Контрагент" (
			Если ЗначениеЗаполнено(НеСоздавать) ИЛИ
				ЗначениеЗаполнено(СоздаватьНовогоПриЗагрузкеВыпискиВ1С) Тогда
				
				СоздаватьНовогоПриЗагрузкеВыпискиВ1С = "";
				СоздаватьНового = "СоздатьНового";
				ИспользоватьСуществующего = "";
				НеСоздавать = "";
				
				УстановитьЗначенияЭлементов("Контрагент");
				
			КонецЕсли;
			// )
			
		ИначеЕсли ЗначениеЗаполнено(ИспользоватьСуществущийДоговор) Тогда
			
			// Настройка закладки "Контрагент" (
			Если НЕ ЗначениеЗаполнено(ИспользоватьСуществующего) Тогда
				СоздаватьНовогоПриЗагрузкеВыпискиВ1С = "";
				СоздаватьНового = "";
				ИспользоватьСуществующего = "ИспользоватьСуществующего";
				НеСоздавать = "";
				
				УстановитьЗначенияЭлементов("Контрагент");
			КонецЕсли;
			// )
			
		Иначе // Не Создавать
			
			// Настройка закладки "Контрагент" (
			СоздаватьНовогоПриЗагрузкеВыпискиВ1С = "";
			СоздаватьНового = "";
			ИспользоватьСуществующего = "";
			НеСоздавать = "НеСоздавать";
			
			УстановитьЗначенияЭлементов("Контрагент");
			// )
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьЭлементов()
	
	Элементы.ГруппаСуществующего1.Доступность = Не ПустаяСтрока(ИспользоватьСуществующего);
	Элементы.ГруппаНового1.Доступность = Не ПустаяСтрока(СоздаватьНового);
	
	Если НЕ ЗначениеЗаполнено(КонтрагентГруппа) Тогда
		КонтрагентГруппа = НСтр("ru='<<Авто выбор>>'");
	КонецЕсли;
	
	Элементы.КонтрагентКПП.Видимость = НЕ (СтрДлина(СокрЛП(КонтрагентИНН)) = 12);
	Элементы.КонтрагентИНН.Видимость = НЕ ПустаяСтрока(СокрЛП(КонтрагентИНН));
	
	Элементы.ПрименитьДляВсехСтрок.Видимость = (КоличествоСтрокКонтрагента > 1);
	
	// Контрагент.
	Если НЕ ПустаяСтрока(СоздаватьНового) Тогда
		Элементы.КонтрагентСсылка.АвтоОтметкаНезаполненного = Ложь;
		Элементы.КонтрагентСсылка.ОтметкаНезаполненного = Ложь;
	ИначеЕсли НЕ ПустаяСтрока(СоздаватьНовогоПриЗагрузкеВыпискиВ1С) Или НЕ ПустаяСтрока(НеСоздавать) Тогда
		Элементы.КонтрагентСсылка.АвтоОтметкаНезаполненного = Ложь;
		Элементы.КонтрагентСсылка.ОтметкаНезаполненного = Ложь;
	ИначеЕсли НЕ ПустаяСтрока(ИспользоватьСуществующего) Тогда
		Элементы.КонтрагентСсылка.АвтоОтметкаНезаполненного = Истина;
		Элементы.КонтрагентСсылка.ОтметкаНезаполненного = Истина;
	Иначе
		Элементы.КонтрагентСсылка.АвтоОтметкаНезаполненного = Ложь;
		Элементы.КонтрагентСсылка.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	// Расчетный счет.
	Если ЗначениеЗаполнено(СоздаватьНовыйСчетКонтрагента) Тогда
		Элементы.Группа4.Доступность = Истина;
		
		Элементы.СчетКонтрагентаСсылка.АвтоОтметкаНезаполненного = Ложь;
		Элементы.СчетКонтрагентаСсылка.ОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.Группа4.Доступность = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИспользоватьСуществущийСчетКонтрагента) Тогда
		Элементы.СчетКонтрагентаСсылка.АвтоОтметкаНезаполненного = Истина;
		Элементы.СчетКонтрагентаСсылка.ОтметкаНезаполненного = Истина;
		Элементы.СчетКонтрагентаСсылка.Доступность = Истина;
	Иначе
		Элементы.СчетКонтрагентаСсылка.Доступность = Ложь;
	КонецЕсли;
	
	// Договор.
	Если ЗначениеЗаполнено(СоздаватьНовыйДоговор) Тогда
		Элементы.Группа13.Доступность = Истина;
		Элементы.Группа19.Доступность = Не СНаименованиемОсновнойДоговор;
		Элементы.НадписьСНаименованиемОсновнойДоговор.Доступность = Ложь;
		Элементы.ДоговорСсылка.Доступность = Ложь;
	ИначеЕсли ЗначениеЗаполнено(СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С) Тогда
		Элементы.Группа13.Доступность = Ложь;
		Элементы.НадписьСНаименованиемОсновнойДоговор.Доступность = Истина;
		Элементы.ДоговорСсылка.Доступность = Ложь;
	ИначеЕсли ЗначениеЗаполнено(ИспользоватьСуществущийДоговор) Тогда
		Элементы.ДоговорСсылка.Доступность = Истина;
		Элементы.Группа13.Доступность = Ложь;
		Элементы.НадписьСНаименованиемОсновнойДоговор.Доступность = Ложь;
	Иначе
		Элементы.ДоговорСсылка.Доступность = Ложь;
		Элементы.Группа13.Доступность = Ложь;
		Элементы.НадписьСНаименованиемОсновнойДоговор.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИспользоватьСуществущийДоговор) Тогда
		Элементы.ДоговорСсылка.АвтоОтметкаНезаполненного = Истина;
		Элементы.ДоговорСсылка.ОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	// Вид операции.
	Если Исходящий Тогда
		Элементы.ГруппаНастройкиИсходящих.Видимость = Истина;
		Элементы.ГруппаНастройкиВходящих.Видимость = Ложь;
	Иначе
		Элементы.ГруппаНастройкиИсходящих.Видимость = Ложь;
		Элементы.ГруппаНастройкиВходящих.Видимость = Истина;
	КонецЕсли;
	
	Элементы.Корреспонденция.Видимость = (ВидОперацииВходящие = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее Или ВидОперацииИсходящие = Перечисления.ВидыОперацийРасходСоСчета.Прочее);
	ОпределитьВидимостьРеквизитовНалогов();
	
	СформироватьИнформационныеНадписи();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьРеквизитовНалогов()
	
	Элементы.ВидНалога.Видимость = (ВидОперацииИсходящие = ВидОперацииНалоги Или ВидОперацииВходящие = ВидОперацииВозвратНалогов);
	Элементы.СрокУплаты.Видимость = Ложь;
	Элементы.ДатаДок.Видимость = (ВидОперацииИсходящие = ВидОперацииНалоги);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруДаннымиДоговора(СтруктураДанных)
	
	СтруктураДанных.Вставить("ДействиеСДоговором", ПолучитьДействиеНаСервере("Договор"));
	СтруктураДанных.Вставить("ДоговорНаименование", ДоговорНаименование);
	СтруктураДанных.Вставить("ДоговорВалютаРасчетов", ДоговорВалютаРасчетов);
	СтруктураДанных.Вставить("ДоговорДата", ДоговорДата);
	СтруктураДанных.Вставить("ДоговорНомер", ДоговорНомер);
	СтруктураДанных.Вставить("ДоговорРасчетыВУсловныхЕдиницах", ДоговорРасчетыВУсловныхЕдиницах);
	СтруктураДанных.Вставить("ЗаполнятьДоговор", Не СНаименованиемОсновнойДоговор);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьОКНаСервере()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СоздаватьНового) Тогда
		
		Попытка
			
			Если ТипЗнч(КонтрагентГруппа) = Тип("Строка") Тогда // авто
				Родитель = Обработки.СМП_КлиентБанк.ОпределитьАвтоГруппуКонтрагента(ДеньгиОтКонтрагентаПоступили);
			Иначе
				Родитель = КонтрагентГруппа;
			КонецЕсли;
			Если ЗначениеЗаполнено(КонтрагентВидКонтрагента) Тогда
				ВидКонтрагента = КонтрагентВидКонтрагента;
			Иначе
				ВидКонтрагента = ?(СтрДлина(СокрЛП(КонтрагентИНН)) = 12, Перечисления.ВидыКонтрагентов.ФизическоеЛицо, Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
			КонецЕсли;
			
			// Заполним структуру с данными для создания контрагента, р/счета и договора (
			Если ПустаяСтрока(СоздаватьНовыйСчетКонтрагента) Тогда
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("СоздаватьРСчет", Ложь);
			Иначе
				СтруктураДанных = ПолучитьИзВременногоХранилища(АдресДанныхСчета);
				СтруктураДанных.Вставить("СоздаватьРСчет", Истина);
			КонецЕсли;
			
			ДополнитьСтруктуруДаннымиДоговора(СтруктураДанных);
			
			СтруктураДанных.Вставить("Наименование", СокрЛП(КонтрагентНаименование));
			СтруктураДанных.Вставить("НаименованиеПолное", СокрЛП(КонтрагентНаименованиеПолное));
			СтруктураДанных.Вставить("ИНН", КонтрагентИНН);
			СтруктураДанных.Вставить("КПП", КонтрагентКПП);
			СтруктураДанных.Вставить("ВидКонтрагента", ВидКонтрагента);
			СтруктураДанных.Вставить("Родитель", Родитель);
			СтруктураДанных.Вставить("Организация", Организация);
			
			ВидОперации = ?(Исходящий, ВидОперацииИсходящие, ВидОперацииВходящие);
			Обработки.СМП_КлиентБанк.ДобавитьИнформациюОбОтношенияхСКонтрагентомПоВидуОперации(СтруктураДанных, ВидОперации);
			// ) Заполнили структуру данных.
			
			// Создадим контрагента по структуре данных
			КонтрагентСоздан = Обработки.СМП_КлиентБанк.СоздатьКонтрагентаПоСтруктуреДанных(СтруктураДанных);
			ОбновитьТаблицуКонтрагентовПослеЗакрытияФормы = КонтрагентСоздан;
			
			Если КонтрагентСоздан Тогда
				КонтрагентСсылка = СтруктураДанных.Контрагент;
				ДоговорСсылка = СтруктураДанных.Договор;
				БанковскийСчетПоУмолчанию = СтруктураДанных.БанковскийСчетПоУмолчанию;
			КонецЕсли;
			
			Возврат КонтрагентСоздан;
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Попытка записи Контрагента не удалась по причине: %1'"),
					ОписаниеОшибки()));
			Возврат Ложь;
		КонецПопытки;
		
	ИначеЕсли Не ПустаяСтрока(ИспользоватьСуществующего) Тогда
		
		Если Не ПустаяСтрока(СоздаватьНовыйСчетКонтрагента) Или Не ПустаяСтрока(СоздаватьНовыйДоговор) Тогда
			
			Если Не КонтрагентСсылка.Пустая() Тогда
				
				Если Не ПустаяСтрока(СоздаватьНовыйСчетКонтрагента) Тогда
					СтруктураДанных = ПолучитьИзВременногоХранилища(АдресДанныхСчета);
					СтруктураДанных.Вставить("Контрагент", КонтрагентСсылка);
					
					БанковскийСчетПоУмолчанию = Обработки.СМП_КлиентБанк.СоздатьРасчетныйСчетПоСтуктуреДанных(СтруктураДанных);
					ОбновитьТаблицуКонтрагентовПослеЗакрытияФормы = ЗначениеЗаполнено(БанковскийСчетПоУмолчанию);
				КонецЕсли;
				
				Если Не ПустаяСтрока(СоздаватьНовыйДоговор) Тогда
					СтруктураДанных = Новый Структура;
					СтруктураДанных.Вставить("Контрагент", КонтрагентСсылка);
					ДополнитьСтруктуруДаннымиДоговора(СтруктураДанных);
					СтруктураДанных.Вставить("ЗаполнятьДоговорПоУмолчанию", СНаименованиемОсновнойДоговор);
					СтруктураДанных.Вставить("Организация", Организация);
					
					ДоговорСсылка = Обработки.СМП_КлиентБанк.СоздатьДоговорПоСтруктуреДанных(СтруктураДанных);
				КонецЕсли;
				
			Иначе
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Вначале укажите контрагента на закладке ""Контрагент""'"));
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СоздаватьНовогоПриЗагрузкеВыпискиВ1СПриИзмененииНаСервере()
	
	УстановитьЗначенияЭлементов("Контрагент");
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьНовогоПриЗагрузкеВыпискиВ1СПриИзменении(Элемент)
	
	СоздаватьНового = "";
	ИспользоватьСуществующего = "";
	НеСоздавать = "";
	
	СоздаватьНовогоПриЗагрузкеВыпискиВ1СПриИзмененииНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура КонтрагентСсылкаПриИзменении(Элемент)
	
	КонтрагентСсылкаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентСсылкаПриИзмененииНаСервере()
	
	МаксНомер = 0;
	ДоговорСсылка = НайтиДоговор(КонтрагентСсылка, Организация,, МаксНомер);
	Если ДоговорСсылка.Пустая() Тогда
		ДоговорСсылка = НайтиДоговор(КонтрагентСсылка,,, МаксНомер);
	КонецЕсли;
	
	Если Не КонтрагентСсылка.Пустая() Тогда
		ДоговорНомер = МаксНомер + 1;
		ЗаполнитьНаименованиеДоговора();
	КонецЕсли;
	
	НужноУстановитьВидимостьИДоступность = Ложь;
	Если Не ДоговорСсылка.Пустая() Тогда
		ИспользоватьСуществущийДоговор = "ИспользоватьСуществующего";
		СоздаватьНовыйДоговор = "";
		СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С = "";
		НеСоздаватьДоговор = "";
		НужноУстановитьВидимостьИДоступность = Истина;
	КонецЕсли;
	
	// Возможна следующая ситуация. Был найден счет контрагента и подставлен контрагент. В базе есть несколько контрагентов
	// с одинаковым счетом (бюджетные организации). В этом случае при изменении контрагента нужно обновлять информацию о
	// расчетном счете!!!
	СчетКонтрагентаСсылка = НайтиСчетКонтрагента(КонтрагентСсылка, СчетКонтрагентаНомер);
	
	Если Не СчетКонтрагентаСсылка.Пустая() Тогда
		ИспользоватьСуществущийСчетКонтрагента = "ИспользоватьСуществующего";
		СоздаватьНовыйСчетКонтрагента = "";
		СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1С = "";
		НеСоздаватьСчетКонтрагента = "";
		НужноУстановитьВидимостьИДоступность = Истина;
	КонецЕсли;
	
	Если НужноУстановитьВидимостьИДоступность Тогда
		УстановитьВидимостьИДоступностьЭлементов();
	Иначе
		СформироватьИнформационныеНадписи();
	КонецЕсли;
	
	УстановитьСвзяиПараметровВыбораСчетаКонтрагентаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентСсылкаОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьСвзяиПараметровВыбораСчетаКонтрагентаНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиДоговор(ВладелецДоговора, ОрганизацияДоговора = Неопределено, СписокВидовДоговора = Неопределено, МаксНомер = Неопределено)
	
	Если МаксНомер <> Неопределено Тогда
		МаксНомер = ПолучитьМаксимальныйНомерДоговораКонтрагента(ВладелецДоговора);
	КонецЕсли;
	
	Возврат Обработки.СМП_КлиентБанк.НайтиДоговор(ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора);
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСчетКонтрагента(ВладелецСчета, НомерСчета)
	
	Возврат Обработки.СМП_КлиентБанк.НайтиСчетКонтрагента(ВладелецСчета, НомерСчета);
	
КонецФункции

&НаСервере
Процедура НеСоздаватьПриИзмененииНаСервере()
	
	УстановитьЗначенияЭлементов("Контрагент");
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура НеСоздаватьПриИзменении(Элемент)
	
	СоздаватьНового = "";
	ИспользоватьСуществующего = "";
	СоздаватьНовогоПриЗагрузкеВыпискиВ1С = "";
	
	НеСоздаватьПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НеПрямыеРасчетыПриИзменении(Элемент)
	
	Элементы.Группа7.Доступность = НеПрямыеРасчеты;
	
КонецПроцедуры

&НаСервере
Процедура СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1СПриИзмененииНаСервере()
	
	УстановитьЗначенияЭлементов("РСчет");
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1СПриИзменении(Элемент)
	
	СоздаватьНовыйСчетКонтрагента = "";
	ИспользоватьСуществущийСчетКонтрагента = "";
	НеСоздаватьСчетКонтрагента = "";
	
	СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1СПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоздаватьНовыйСчетКонтрагентаПриИзмененииНаСервере()
	
	УстановитьЗначенияЭлементов("РСчет");
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьНовыйСчетКонтрагентаПриИзменении(Элемент)
	
	ИспользоватьСуществущийСчетКонтрагента = "";
	СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1С = "";
	НеСоздаватьСчетКонтрагента = "";
	
	СоздаватьНовыйСчетКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьСуществущийСчетКонтрагентаПриИзмененииНаСервере()
	
	УстановитьЗначенияЭлементов("РСчет");
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСуществущийСчетКонтрагентаПриИзменении(Элемент)
	
	СоздаватьНовыйСчетКонтрагента = "";
	СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1С = "";
	НеСоздаватьСчетКонтрагента = "";
	
	ИспользоватьСуществущийСчетКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НеСоздаватьСчетКонтрагентаПриИзмененииНаСервере()
	
	УстановитьЗначенияЭлементов("РСчет");
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура НеСоздаватьСчетКонтрагентаПриИзменении(Элемент)
	
	СоздаватьНовыйСчетКонтрагента = "";
	ИспользоватьСуществущийСчетКонтрагента = "";
	СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1С = "";
	
	НеСоздаватьСчетКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорВалютаРасчетовПриИзменении(Элемент)
	
	Если ДоговорВалютаРасчетов = НациональнаяВалюта Тогда
		Элементы.ДоговорРасчетыВУсловныхЕдиницах.Видимость = Ложь;
		ДоговорРасчетыВУсловныхЕдиницах = Ложь;
	Иначе
		Элементы.ДоговорРасчетыВУсловныхЕдиницах.Видимость = Истина;
	КонецЕсли;
	
	ЗаполнитьНаименованиеДоговора();
	
КонецПроцедуры

&НаСервере
Процедура СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1СПриИзмененииНаСервере()
	
	УстановитьЗначенияЭлементов("Договор");
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1СПриИзменении(Элемент)
	
	СоздаватьНовыйДоговор = "";
	ИспользоватьСуществущийДоговор = "";
	НеСоздаватьДоговор = "";
	
	СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1СПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоздаватьНовыйДоговорПриИзмененииНаСервере()
	
	УстановитьЗначенияЭлементов("Договор");
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьНовыйДоговорПриИзменении(Элемент)
	
	ИспользоватьСуществущийДоговор = "";
	СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С = "";
	НеСоздаватьДоговор = "";
	
	СоздаватьНовыйДоговорПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьСуществущийДоговорПриИзмененииНаСервере()
	
	УстановитьЗначенияЭлементов("Договор");
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСуществущийДоговорПриИзменении(Элемент)
	
	СоздаватьНовыйДоговор = "";
	СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С = "";
	НеСоздаватьДоговор = "";
	
	ИспользоватьСуществущийДоговорПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НеСоздаватьДоговорПриИзмененииНаСервере()
	
	УстановитьЗначенияЭлементов("Договор");
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура НеСоздаватьДоговорПриИзменении(Элемент)
	
	СоздаватьНовыйДоговор = "";
	ИспользоватьСуществущийДоговор = "";
	СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С = "";
	
	НеСоздаватьДоговорПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьНаименованиеДоговора()
	
	ДоговорНаименованиеПраваяЧастьПред = ДоговорНаименованиеПраваяЧасть;
	
	ДоговорНаименованиеПраваяЧасть = НСтр("ru = '№ %НомерДоговора% от %ДатаДоговора% (%ВалютаРасчетов%)'");
	ДоговорНаименованиеПраваяЧасть = СтрЗаменить(ДоговорНаименованиеПраваяЧасть, "%НомерДоговора%", СокрЛП(ДоговорНомер));
	ДоговорНаименованиеПраваяЧасть = СтрЗаменить(ДоговорНаименованиеПраваяЧасть, "%ДатаДоговора%", ?(ЗначениеЗаполнено(ДоговорДата), СокрЛП(Строка(Формат(ДоговорДата, "ДФ=dd.MM.yyyy"))), ""));
	ДоговорНаименованиеПраваяЧасть = СтрЗаменить(ДоговорНаименованиеПраваяЧасть, "%ВалютаРасчетов%", СокрЛП(Строка(ДоговорВалютаРасчетов)));
	
	Если СтрНайти(ДоговорНаименование, ДоговорНаименованиеПраваяЧастьПред) > 0 Тогда
		ДоговорНаименование = СтрЗаменить(ДоговорНаименование, ДоговорНаименованиеПраваяЧастьПред, ДоговорНаименованиеПраваяЧасть);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаполнитьНаименованиеДоговораНаСервере()
	
	ДоговорНаименованиеПраваяЧастьПред = ДоговорНаименованиеПраваяЧасть;
	
	ДоговорНаименованиеПраваяЧасть = НСтр("ru = '№ %НомерДоговора% от %ДатаДоговора% (%ВалютаРасчетов%)'");
	ДоговорНаименованиеПраваяЧасть = СтрЗаменить(ДоговорНаименованиеПраваяЧасть, "%НомерДоговора%", СокрЛП(ДоговорНомер));
	ДоговорНаименованиеПраваяЧасть = СтрЗаменить(ДоговорНаименованиеПраваяЧасть, "%ДатаДоговора%", ?(ЗначениеЗаполнено(ДоговорДата), СокрЛП(Строка(Формат(ДоговорДата, "ДФ=dd.MM.yyyy"))), ""));
	ДоговорНаименованиеПраваяЧасть = СтрЗаменить(ДоговорНаименованиеПраваяЧасть, "%ВалютаРасчетов%", СокрЛП(Строка(ДоговорВалютаРасчетов)));
	
	Если СтрНайти(ДоговорНаименование, ДоговорНаименованиеПраваяЧастьПред) > 0 Тогда
		ДоговорНаименование = СтрЗаменить(ДоговорНаименование, ДоговорНаименованиеПраваяЧастьПред, ДоговорНаименованиеПраваяЧасть);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СНаименованиемОсновнойДоговорПриИзменении(Элемент)
	
	Элементы.Группа19.Доступность = Не СНаименованиемОсновнойДоговор;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНомерПриИзменении(Элемент)
	
	ЗаполнитьНаименованиеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорДатаПриИзменении(Элемент)
	
	ЗаполнитьНаименованиеДоговора();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвзяиПараметровВыбораДоговораНаСервере(ФиксМассив)
	
	Элементы.ДоговорСсылка.СвязиПараметровВыбора = ФиксМассив;
	Если ФиксМассив.Количество() = 0 Тогда
		Элементы.ДоговорСсылка.ФормаВыбора = "Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбораСКонтрагентом";
	Иначе
		Элементы.ДоговорСсылка.ФормаВыбора = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСсылкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если КонтрагентСсылка.Пустая() И Элементы.ДоговорСсылка.СвязиПараметровВыбора.Количество() > 0 Тогда
		НовыйМассив = Новый Массив();
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		УстановитьСвзяиПараметровВыбораДоговораНаСервере(НовыеСвязи);
	ИначеЕсли НЕ КонтрагентСсылка.Пустая() И Элементы.ДоговорСсылка.СвязиПараметровВыбора.Количество() = 0 Тогда
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "КонтрагентСсылка", РежимИзмененияСвязанногоЗначения.Очищать);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		УстановитьСвзяиПараметровВыбораДоговораНаСервере(НовыеСвязи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвзяиПараметровВыбораСчетаКонтрагентаНаСервере()
	
	НовыеСвязи = Неопределено;
	Если КонтрагентСсылка.Пустая() И Элементы.СчетКонтрагентаСсылка.СвязиПараметровВыбора.Количество() > 0 Тогда
		НовыйМассив = Новый Массив();
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	ИначеЕсли НЕ КонтрагентСсылка.Пустая() И Элементы.СчетКонтрагентаСсылка.СвязиПараметровВыбора.Количество() = 0 Тогда
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "КонтрагентСсылка", РежимИзмененияСвязанногоЗначения.Очищать);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	КонецЕсли;
	
	Если НовыеСвязи <> Неопределено Тогда
		Элементы.СчетКонтрагентаСсылка.СвязиПараметровВыбора = НовыеСвязи;
		Если НовыеСвязи.Количество() = 0 Тогда
			Элементы.СчетКонтрагентаСсылка.ФормаВыбора = "Справочник.БанковскиеСчета.Форма.ФормаВыбора";
		Иначе
			Элементы.СчетКонтрагентаСсылка.ФормаВыбора = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДоговорСсылкаПриИзменении(Элемент)
	
	ДоговорСсылкаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорСсылкаПриИзмененииНаСервере()
	
	Если НЕ ДоговорСсылка.Пустая() И КонтрагентСсылка.Пустая() И
		ДоговорСсылка.Владелец <> КонтрагентСсылка Тогда
		
		КонтрагентСсылка = ДоговорСсылка.Владелец;
		
		СчетКонтрагентаСсылка = НайтиСчетКонтрагента(КонтрагентСсылка, СчетКонтрагентаНомер);
	
		Если Не СчетКонтрагентаСсылка.Пустая() Тогда
			ИспользоватьСуществущийСчетКонтрагента = "ИспользоватьСуществующего";
			СоздаватьНовыйСчетКонтрагента = "";
			СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1С = "";
			НеСоздаватьСчетКонтрагента = "";
			НужноУстановитьВидимостьИДоступность = Истина;
		КонецЕсли;
		
		УстановитьВидимостьИДоступностьЭлементов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаСсылкаПриИзменении(Элемент)
	
	СчетКонтрагентаСсылкаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СчетКонтрагентаСсылкаПриИзмененииНаСервере()
	
	Если НЕ СчетКонтрагентаСсылка.Пустая() И КонтрагентСсылка.Пустая() И
		СчетКонтрагентаСсылка.Владелец <> КонтрагентСсылка Тогда
		
		КонтрагентСсылка = СчетКонтрагентаСсылка.Владелец;
		
		МаксНомер = 0;
		ДоговорСсылка = НайтиДоговор(КонтрагентСсылка, Организация,, МаксНомер);
		Если ДоговорСсылка.Пустая() Тогда
			ДоговорСсылка = НайтиДоговор(КонтрагентСсылка,,, МаксНомер);
		КонецЕсли;
		
		Если Не КонтрагентСсылка.Пустая() Тогда
			ДоговорНомер = МаксНомер + 1;
			ЗаполнитьНаименованиеДоговораНаСервере();
		КонецЕсли;
		
		УстановитьВидимостьИДоступностьЭлементов();
		// Если выбран счёт конкретного контрагента, то дальнейший выбор будет происходить только среди его счетов.
		УстановитьСвзяиПараметровВыбораСчетаКонтрагентаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииВходящиеПриИзменении(Элемент)
	
	ВидОперацииВходящиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииИсходящиеПриИзменении(Элемент)
	
	ВидОперацииИсходящиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииВходящиеПриИзмененииНаСервере()
	
	Элементы.Корреспонденция.Видимость = (ВидОперацииВходящие = ВидОперацииПрочееПоступление);
	СтатьяДДС = ДвиженияДенежныхСредствВызовСервера.ПолучитьНовоеЗначениеСтатьиДДСПоступления(ВидОперацииВходящие, СтатьяДДС, СтатьяДДСВходящий, СтатьяДДСИсходящий);
	ОпределитьВидимостьРеквизитовНалогов();
	
	// Перемещение денег
	НастроитьФормуЕслиВыбранаОперацияПеремещенияДенег(ВидОперацииВходящие);
	
	УправлениеВидимостьюСтраницДляПеремещенияДенег();
	
КонецПроцедуры // ВидОперацииПриИзмененииНаСервере()


#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Область Налоги


&НаКлиенте
Процедура ВидНалогаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДвиженияДенежныхСредствВызовСервера.ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНалогаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДвиженияДенежныхСредствВызовСервера.ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПеремещениеДенег

&НаСервере
Процедура НастроитьФормуЕслиВыбранаОперацияПеремещенияДенег(ВидОперации)
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет ИЛИ
		ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных ИЛИ
		ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными ИЛИ
		ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета Тогда
		
		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура обработки изменения поля Вид операции на сервере.
//
&НаСервере
Процедура ВидОперацииИсходящиеПриИзмененииНаСервере()
	
	Элементы.Корреспонденция.Видимость = (ВидОперацииИсходящие = ВидОперацииПрочееСписание Или ВидОперацииИсходящие = ВидОперацииНаРасходыСписание);
	ОпределитьВидимостьРеквизитовНалогов();
	
	СтатьяДДС = ДвиженияДенежныхСредствВызовСервера.ПолучитьНовоеЗначениеСтатьиДДССписания(ВидОперацииИсходящие, СтатьяДДС, СтатьяДДСВходящий, СтатьяДДСИсходящий);
	
	УправлениеВидимостьюСтраницДляПеремещенияДенег();
	
КонецПроцедуры // ВидОперацииПриИзмененииНаСервере()

&НаКлиенте
Процедура ЗаполнитьИННиКППИзВыписки(Команда)
	
	Если КонтрагентСсылка.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Предварительно необходимо выбрать контрагента';uk='Необхідно попередньо вибрати контрагента'"));
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(КонтрагентИНН) <> СокрЛП(Элементы.КонтрагентСсылкаИНН.ТекстРедактирования) ИЛИ
		СокрЛП(КонтрагентКПП) <> СокрЛП(Элементы.КонтрагентСсылкаКПП.ТекстРедактирования) ИЛИ
		СокрЛП(КонтрагентНаименованиеПолное) <> СокрЛП(КонтрагентСсылкаНаименованиеПолное) Тогда
		
		СписокВыбора = Новый СписокЗначений;
		
		// ИНН.
		Если СокрЛП(КонтрагентИНН) <> СокрЛП(Элементы.КонтрагентСсылкаИНН.ТекстРедактирования) Тогда
			Если ЗначениеЗаполнено(КонтрагентИНН) Тогда
				СписокВыбора.Добавить("ИНН", НСтр("ru = 'Обновить ИНН из выписки ';uk='Оновити ІПН з виписки '")+"("+КонтрагентИНН+")");
			КонецЕсли;
		Иначе
			СписокВыбора.Добавить("Пропустить", НСтр("ru = 'ИНН менять не требуется ';uk='Зміна ІПН не потрібна '"));
		КонецЕсли;
		
		// КПП.
		Если СокрЛП(КонтрагентКПП) <> СокрЛП(Элементы.КонтрагентСсылкаКПП.ТекстРедактирования) Тогда
			Если ЗначениеЗаполнено(КонтрагентКПП) Тогда
				СписокВыбора.Добавить("КПП", НСтр("ru = 'Обновить КПП из виписки ';uk='Оновити ЄДРПОУ з виписки '")+"("+КонтрагентКПП+")");
			КонецЕсли;
		Иначе
			СписокВыбора.Добавить("Пропустить", НСтр("ru = 'КПП менять не требуется ';uk='Зміна ЄДРПОУ не потрібна '"));
		КонецЕсли;
		
		// Юридическое название.
		Если СокрЛП(КонтрагентНаименованиеПолное) <> СокрЛП(КонтрагентСсылкаНаименованиеПолное) Тогда
			НаименованиеДляПодменю = ?(СтрДлина(КонтрагентНаименованиеПолное) > 50, Лев(СокрЛП(КонтрагентНаименованиеПолное), 50)+"...", КонтрагентНаименованиеПолное);
			СписокВыбора.Добавить("НаименованиеПолное", НСтр("ru = 'Обновить юр. название из выписки ';uk='Оновити юр.назву з виписки '")+"("+НаименованиеДляПодменю+")");
		Иначе
			СписокВыбора.Добавить("Пропустить", НСтр("ru = 'Юр. название менять не требуется ';uk='Юр. назву не потрібно змінювати'"));
		КонецЕсли;
		
		
		// ИНН + КПП.
		Если СокрЛП(КонтрагентИНН) <> СокрЛП(Элементы.КонтрагентСсылкаИНН.ТекстРедактирования)
			И СокрЛП(КонтрагентКПП) <> СокрЛП(Элементы.КонтрагентСсылкаКПП.ТекстРедактирования)
			И ЗначениеЗаполнено(КонтрагентКПП) И ЗначениеЗаполнено(КонтрагентИНН) Тогда
			СписокВыбора.Добавить("ИННКПП", НСтр("ru = 'Обновить ИНН и КПП из выписки';uk='Оновити ІПН та ЄДРПОУ з виписки'"));
		КонецЕсли;
		
		// Все поля.
		СписокВыбора.Добавить("ВСЕ", НСтр("ru = 'Обновить все реквизиты';uk='Оновити всі реквізити'"));
		
		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ЗаполнитьИННиКППИзВыпискиЗавершение", ЭтотОбъект), СписокВыбора, Элементы.ЗаполнитьИННиКППИзВыписки);
		
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'ИНН, КПП и юридическое название контрагента и в выписке совпадают, заполнение не требуется';uk='ІПН, ЄДРПОУ та юридична назва контрагента й у виписці співпадають, заповнення не потрібно'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИННиКППИзВыпискиЗавершение(РезультатЗавершения, ПараметрыЗавершения) Экспорт
	
	Если РезультатЗавершения <> Неопределено Тогда
		ПерезаписатьРеквизитыКонтрагента(РезультатЗавершения.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаписатьРеквизитыКонтрагента(РезультатЗавершения)
	
	КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
	Перезаписывать = Ложь;
	Если (РезультатЗавершения = "ИНН" ИЛИ РезультатЗавершения = "ИННКПП" ИЛИ РезультатЗавершения = "ВСЕ")
		И ЗначениеЗаполнено(КонтрагентИНН) Тогда
		КонтрагентОбъект.ИНН = КонтрагентИНН;
		Перезаписывать = Истина;
	КонецЕсли;
	Если (РезультатЗавершения = "КПП" ИЛИ РезультатЗавершения = "ИННКПП" ИЛИ РезультатЗавершения = "ВСЕ")
		И ЗначениеЗаполнено(КонтрагентКПП) Тогда
		КонтрагентОбъект.КодПоЕДРПОУ = КонтрагентКПП;
		Перезаписывать = Истина;
	КонецЕсли;
	Если (РезультатЗавершения = "НаименованиеПолное" ИЛИ РезультатЗавершения = "ВСЕ")
		И ЗначениеЗаполнено(КонтрагентНаименованиеПолное) Тогда
		КонтрагентОбъект.НаименованиеПолное = КонтрагентНаименованиеПолное;
		Перезаписывать = Истина;
	КонецЕсли;
	
	Если Перезаписывать Тогда
		Попытка
			КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
			КонтрагентОбъект.Записать();
			КонтрагентСсылкаИНН = КонтрагентСсылка.ИНН;
			КонтрагентСсылкаКПП = КонтрагентСсылка.КодПоЕДРПОУ;
			Элементы.КонтрагентСсылка.ОбновитьТекстРедактирования();
			СформироватьИнформационныеНадписи();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Попытка записи Контрагента не удалась по причине: %1';uk='Спроба перезапису контрагента була невдала. Причина: %1'"),
					ОписаниеОшибки()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаНомерПриИзменении(Элемент)
	
	СформироватьИнформационныеНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНаименованиеПриИзменении(Элемент)
	
	СформироватьИнформационныеНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНайденныхДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если (Поле.Имя = "ТаблицаНайденныхДокументовДокумент") И
		ЗначениеЗаполнено(Элементы.ТаблицаНайденныхДокументов.ТекущиеДанные.Ссылка) Тогда
		
		ДанныеСтроки = Элементы.ТаблицаНайденныхДокументов.ТекущиеДанные;
		Если ДанныеСтроки.ВидДокумента = "Поступление на счет" Тогда
			ВидДокумента = "ПоступлениеНаСчет";
		Иначе
			ВидДокумента = "РасходСоСчета";
		КонецЕсли;
		ОткрытьФорму("Документ." + ВидДокумента + ".ФормаОбъекта",
				Новый Структура("Ключ", ДанныеСтроки.Ссылка),
				ДанныеСтроки.Ссылка
			);
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция НайтиИнформациюОДоговоре(ПараметрНазначениеПлатежа, СтрокаПоиска)
	
	// Примеры.
	// Оплата по договору № АЛ 11111/01 Ирк от 08.10.13.
	// По договору N1\15 от 01.01.2015.
	// За расчетные услуги банка за 02/03/2012 по договору банковского счета N1111 от 01/01/2010. НДС не предусмотрен.
	// Оплата за продукты питания по Договору N100/1011 от 14/10/2011г Включая НДС 100.00р.
	
	СтрокаПоиска = ВРег(НСтр("ru = 'по договору банковского счета №'"));
	ТекС = СтрНайти(ВРег(ПараметрНазначениеПлатежа), СтрокаПоиска);
	Если ТекС = 0 Тогда
		СтрокаПоиска = ВРег(НСтр("ru = 'по дог. банковского счета №'"));
		ТекС = СтрНайти(ВРег(ПараметрНазначениеПлатежа), СтрокаПоиска);
	КонецЕсли;
	Если ТекС = 0 Тогда
		СтрокаПоиска = ВРег(НСтр("ru = 'по договору банковского счета N'"));
		ТекС = СтрНайти(ВРег(ПараметрНазначениеПлатежа), СтрокаПоиска);
	КонецЕсли;
	Если ТекС = 0 Тогда
		СтрокаПоиска = ВРег(НСтр("ru = 'по дог. банковского счета N'"));
		ТекС = СтрНайти(ВРег(ПараметрНазначениеПлатежа), СтрокаПоиска);
	КонецЕсли;
	Если ТекС = 0 Тогда
		СтрокаПоиска = ВРег(НСтр("ru = 'по договору №'"));
		ТекС = СтрНайти(ВРег(ПараметрНазначениеПлатежа), СтрокаПоиска);
	КонецЕсли;
	Если ТекС = 0 Тогда
		СтрокаПоиска = ВРег(НСтр("ru = 'по дог. №'"));
		ТекС = СтрНайти(ВРег(ПараметрНазначениеПлатежа), СтрокаПоиска);
	КонецЕсли;
	Если ТекС = 0 Тогда
		СтрокаПоиска = ВРег(НСтр("ru = 'по договору N'"));
		ТекС = СтрНайти(ВРег(ПараметрНазначениеПлатежа), СтрокаПоиска);
	КонецЕсли;
	Если ТекС = 0 Тогда
		СтрокаПоиска = ВРег(НСтр("ru = 'по дог. N'"));
		ТекС = СтрНайти(ВРег(ПараметрНазначениеПлатежа), СтрокаПоиска);
	КонецЕсли;
	Если ТекС = 0 Тогда
		СтрокаПоиска = ВРег(НСтр("ru = 'по договору'"));
		ТекС = СтрНайти(ВРег(ПараметрНазначениеПлатежа), СтрокаПоиска);
	КонецЕсли;
	Если ТекС = 0 Тогда
		СтрокаПоиска = ВРег(НСтр("ru = 'по дог.'"));
		ТекС = СтрНайти(ВРег(ПараметрНазначениеПлатежа), СтрокаПоиска);
	КонецЕсли;
	
	Возврат ТекС;
	
КонецФункции

&НаКлиенте
Функция ВсеСимволыКромеЦифрЗаменитьТочкой(Строка)
	
	СтрокаДляОбработки = СокрЛП(Строка);
	СтрокаДляВозврата = "";
	СимволЗамены = ".";
	СтрокаСЦифрами = "0123456789";
	
	Пока СтрокаДляОбработки <> "" Цикл
		ТекущийСимвол = Лев(СтрокаДляОбработки, 1);
		СтрокаДляОбработки = Сред(СтрокаДляОбработки, 2);
		Если СтрНайти(СтрокаСЦифрами, ТекущийСимвол) > 0 Тогда
			СтрокаДляВозврата = СтрокаДляВозврата + ТекущийСимвол;
		Иначе
			СтрокаДляВозврата = СтрокаДляВозврата + СимволЗамены;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаДляВозврата;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДоговорПоДаннымНазначенияПлатежа(Команда)
	
	// Ищем все вхождения символа "№" (берем справа от него по 2 слова).
	
	СтрокаПоиска = "";
	ТекС = НайтиИнформациюОДоговоре(НазначениеПлатежа, СтрокаПоиска);
	
	СписокНомеровИДатДоговора = Новый СписокЗначений;
	
	Если ТекС > 0 Тогда
		
		КолвоЦиклов = 0;
		
		СтрокаДляОбработки = НазначениеПлатежа;
		ТекСНомер = ТекС;
		Пока ТекСНомер > 0 И КолвоЦиклов <= 5 Цикл
			КолвоЦиклов = КолвоЦиклов + 1;
			
			СтрокаДляОбработки = СокрЛП(Сред(СтрокаДляОбработки, ТекСНомер+СтрДлина(СтрокаПоиска)));
			ТекСПробел = СтрНайти(СтрокаДляОбработки, " ");
			Если ТекСПробел > 0 Тогда
				ПервоеСлово = Лев(СтрокаДляОбработки, ТекСПробел - 1);
				СписокНомеровИДатДоговора.Добавить(ПервоеСлово, ПервоеСлово);
				СтрокаДляОбработки = СокрЛП(Сред(СтрокаДляОбработки, ТекСПробел + 1));
				
				ТекСПробелПервогоСлова = ТекСПробел;
				ТекСПробел = СтрНайти(СтрокаДляОбработки, " ");
				Если ТекСПробел > 0 Тогда
					ВтороеСлово = Лев(СтрокаДляОбработки, ТекСПробел - 1);
					Если СокрЛП(ВтороеСлово) <> НСтр("ru = 'от'") Тогда
						СписокНомеровИДатДоговора.Добавить(ВтороеСлово, ВтороеСлово);
						ПолноеСлово = СокрЛП(ПервоеСлово)+" "+СокрЛП(ВтороеСлово);
						СписокНомеровИДатДоговора.Добавить(ПолноеСлово, ПолноеСлово);
						СтрокаДляОбработки = СокрЛП(Сред(СтрокаДляОбработки, ТекСПробел + 1));
					Иначе
						СтрокаДляОбработки = СокрЛП(Сред(СтрокаДляОбработки, ТекСПробелПервогоСлова + 1));
					КонецЕсли;
				Иначе
					СписокНомеровИДатДоговора.Добавить(СтрокаДляОбработки, СтрокаДляОбработки);
				КонецЕсли;
			Иначе
				СписокНомеровИДатДоговора.Добавить(СтрокаДляОбработки, СтрокаДляОбработки);
			КонецЕсли;
			
			ТекСНомер = НайтиИнформациюОДоговоре(СтрокаДляОбработки, СтрокаПоиска);
		КонецЦикла;
		
	КонецЕсли;
	
	// Ищем все даты, которые есть в назначении платежа.
	КолвоЦиклов = 0;
	
	СтрокаДляОбработки = НазначениеПлатежа;
	ТекСПробел = СтрНайти(СтрокаДляОбработки, " ");
	Пока ТекСПробел > 0 И КолвоЦиклов <= 150 Цикл
		КолвоЦиклов = КолвоЦиклов + 1;
		
		ТекущееСлово = Лев(СтрокаДляОбработки, ТекСПробел - 1);
		СтрокаДляОбработки = Сред(СтрокаДляОбработки, ТекСПробел + 1);
		
		ТекущееСлово = СтрЗаменить(ТекущееСлово, " ", "");
		ТекущееСловоТолькоЦифрыИТочки = ВсеСимволыКромеЦифрЗаменитьТочкой(ТекущееСлово);
		
		Попытка
			ТекущаяДата = Дата(ТекущееСловоТолькоЦифрыИТочки + " 00:00:00");
			Если ТекущаяДата <> '00010101' Тогда
				СписокНомеровИДатДоговора.Добавить(ТекущаяДата, ТекущееСлово);
			КонецЕсли;
		Исключение
			//
		КонецПопытки;
		
		ТекСПробел = СтрНайти(СтрокаДляОбработки, " ");
	КонецЦикла;
		
	// Выбор из списка.
	Если СписокНомеровИДатДоговора.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В назначении платежа не найдена информация о договоре. Установите номер и дату вручную.'"));
	Иначе
		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ЗаполнитьДоговорПоДаннымНазначенияПлатежаЗавершение", ЭтотОбъект), СписокНомеровИДатДоговора, Элементы.ЗаполнитьДоговорПоДаннымНазначенияПлатежа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоговорПоДаннымНазначенияПлатежаЗавершение(РезультатЗавершения, ПараметрыЗавершения) Экспорт
	
	Если РезультатЗавершения <> Неопределено Тогда
		Если ТипЗнч(РезультатЗавершения.Значение) = Тип("Дата") Тогда
			ДоговорДата = РезультатЗавершения.Значение;
		Иначе
			ДоговорНомер = СокрЛП(РезультатЗавершения.Значение);
		КонецЕсли;
		ЗаполнитьНаименованиеДоговора();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполинтьСпискиВыбораВидовОпераций()
	
	ДвиженияДенежныхСредствВызовСервера.ЗаполнитьСписокВыбораВидовОпераций("ПоступлениеНаСчет", Элементы.ВидОперацииВходящие.СписокВыбора);
	ДвиженияДенежныхСредствВызовСервера.ЗаполнитьСписокВыбораВидовОпераций("РасходСоСчета", Элементы.ВидОперацииИсходящие.СписокВыбора);
	
КонецПроцедуры // ЗаполинтьСпискиВыбораВидовОпераций()

// Процедура выполняет настройку элементов формы для корректного отображения в мобильном клиенте
//
&НаСервере
Процедура НастроитьФормуМобильныйКлиент()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	АвтоШрифт = Новый Шрифт;
	
	Для каждого Элемент Из Элементы Цикл
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент,"Шрифт") И Элемент.Шрифт <> АвтоШрифт Тогда
			Элемент.Шрифт = АвтоШрифт;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент, "ШрифтЗаголовка") И Элемент.ШрифтЗаголовка <> АвтоШрифт Тогда
			Элемент.ШрифтЗаголовка = АвтоШрифт;
		КонецЕсли;
		
	КонецЦикла; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация9", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация14", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтступ1", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация4", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация5", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтступ2", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация6", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация10", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация11", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтступ3", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтступ4", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация12", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтступ5", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация13", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация19", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтступ8", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация22", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтступ6", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация18", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтступ7", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация20", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация1", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация3", "Видимость", Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИнформация", "Заголовок", "Информация");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИнформация", "ОтображатьЗаголовок", Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИнформацияЦентр", "Ширина", 0);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидОперацииВходящие", "ВидПереключателя", ВидПереключателя.Переключатель);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидОперацииИсходящие", "ВидПереключателя", ВидПереключателя.Переключатель);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НазначениеПлатежа", "КнопкаОткрытия", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтрагентНаименованиеПолное", "КнопкаОткрытия", Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздаватьНовогоПриЗагрузкеВыпискиВ1С",  "ВидПереключателя", ВидПереключателя.Тумблер);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздаватьНового",  "ВидПереключателя", ВидПереключателя.Тумблер);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИспользоватьСуществующего",  "ВидПереключателя", ВидПереключателя.Тумблер);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НеСоздавать",  "ВидПереключателя", ВидПереключателя.Тумблер);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздаватьНовыйСчетКонтрагентаПриЗагрузкеВыпискиВ1С",  "ВидПереключателя", ВидПереключателя.Тумблер);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздаватьНовыйСчетКонтрагента",  "ВидПереключателя", ВидПереключателя.Тумблер);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИспользоватьСуществущийСчетКонтрагента",  "ВидПереключателя", ВидПереключателя.Тумблер);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НеСоздаватьСчетКонтрагента",  "ВидПереключателя", ВидПереключателя.Тумблер);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздаватьНовыйДоговорПриЗагрузкеВыпискиВ1С",  "ВидПереключателя", ВидПереключателя.Тумблер);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздаватьНовыйДоговор",  "ВидПереключателя", ВидПереключателя.Тумблер);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИспользоватьСуществущийДоговор",  "ВидПереключателя", ВидПереключателя.Тумблер);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НеСоздаватьДоговор",  "ВидПереключателя", ВидПереключателя.Тумблер);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтрагентНаименованиеПолное", "Высота", 1);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНового1", "Отображение", ОтображениеОбычнойГруппы.Нет);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Группа4", "Отображение", ОтображениеОбычнойГруппы.Нет);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Группа13", "Отображение", ОтображениеОбычнойГруппы.Нет);
	
КонецПроцедуры
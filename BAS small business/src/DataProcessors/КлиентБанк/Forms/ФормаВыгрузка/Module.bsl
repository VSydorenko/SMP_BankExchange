
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Организация") Тогда
		Объект.Организация = Параметры.Организация;
	КонецЕсли;
	
	Если Параметры.Свойство("БанковскийСчетОрганизации")
	   И ЗначениеЗаполнено(Параметры.БанковскийСчетОрганизации) Тогда
		Объект.БанковскийСчет = Параметры.БанковскийСчетОрганизации;
		ЭтаФорма.Заголовок = "Выгрузка платежных поручений из 1С в банк"; //: " + Параметры.БанковскийСчетОрганизации.Наименование;
	Иначе
		Элементы.ГруппаБанковскийСчетВыгрузка.Видимость = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ФайлВыгрузки") Тогда
		Объект.ФайлВыгрузки = Параметры.ФайлВыгрузки;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ФайлВыгрузки) Тогда
		Объект.ФайлВыгрузки = "1c_to_kl.txt";
	КонецЕсли;
	
	Если Параметры.Свойство("Программа") Тогда
		Объект.Программа = Параметры.Программа;
	КонецЕсли;
	
	Если Параметры.Свойство("Кодировка") Тогда
		Объект.Кодировка = Параметры.Кодировка;
	КонецЕсли;
	
	Если Параметры.Свойство("ВерсияФормата") Тогда
		Объект.ВерсияФормата = Параметры.ВерсияФормата;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Объект.Организация = ЗначениеНастройки;
		Иначе
			Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Если Не Объект.Организация.БанковскийСчетПоУмолчанию.Пустая() Тогда
			Объект.БанковскийСчет = Объект.Организация.БанковскийСчетПоУмолчанию;
		Иначе
			Объект.БанковскийСчет = ПолучитьСчетОрганизацииДляОбработкиВыгрузки(Параметры.Свойство("БанковскийСчетОрганизацииИзДокумента"));
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("НачПериода") И ЗначениеЗаполнено(Параметры.НачПериода) Тогда
		Объект.НачПериода = Параметры.НачПериода;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.НачПериода) Тогда
		Объект.НачПериода = ТекущаяДата();
	КонецЕсли;
	
	Если Параметры.Свойство("КонПериода") И ЗначениеЗаполнено(Параметры.НачПериода) Тогда
		Объект.КонПериода = Параметры.КонПериода;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.КонПериода) Тогда
		Объект.КонПериода = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Кодировка) Тогда
		Объект.Кодировка = "Windows";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВерсияФормата) Тогда
		Объект.ВерсияФормата = "1.02";
	КонецЕсли;
	
	Если Параметры.Свойство("СоглашениеПрямогоОбменаСБанками") Тогда
		СоглашениеПрямогоОбменаСБанками = Параметры.СоглашениеПрямогоОбменаСБанками;
	КонецЕсли;
	
	Если Параметры.Свойство("ГруппаДоступа") И ЗначениеЗаполнено(Параметры.ГруппаДоступа) Тогда
		Объект.ГруппаДоступа = Параметры.ГруппаДоступа;
	Иначе
		Объект.ГруппаДоступа = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяГруппаДоступаКонтрагентов");
	КонецЕсли;
	
	Если Параметры.Свойство("КонтролироватьБезопасностьОбменаСБанком") Тогда
		Объект.КонтролироватьБезопасностьОбменаСБанком = Параметры.КонтролироватьБезопасностьОбменаСБанком;
	Иначе
		Объект.КонтролироватьБезопасностьОбменаСБанком = Истина;
	КонецЕсли;
	
	ЗаполнитьВыгрузка();
	ЗагрузитьНастройкиФормы();
	
	УправлениеФормойНаСервере();
	
	ОстатокНач = ДвиженияДенежныхСредствВызовСервера.ПолучитьОстатокНаСчете(Объект.БанковскийСчет, Объект.Организация);
	ОстатокКон = ОстатокНач - Объект.Выгрузка.Итог("СуммаДокументаВыделено");
	
	// МобильныйКлиент
	НастроитьФормуМобильныйКлиент();
	// Конец МобильныйКлиент
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, Новый Структура("РеквизитФормы", "ФайлЗагрузки"));
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	Если НЕ ЗначениеЗаполнено(Объект.ФайлВыгрузки) Тогда
		Объект.ФайлВыгрузки = "1c_to_kl.txt";
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма.РасширениеРаботыСФайламиПодключено = Подключено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды Выгрузить.
//
&НаКлиенте
Процедура ВыгрузитьВыполнить(Команда)
	
	Модифицированность = Ложь;
	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнениеРеквизитовФормы() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.Выгрузка.Количество() > 0 Тогда
		
		ЕстьОтмеченныеСтроки = Ложь;
		Для Каждого ТекущаяСтрока Из Объект.Выгрузка Цикл
			Если ТекущаяСтрока.Выгружать Тогда
				ЕстьОтмеченныеСтроки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьОтмеченныеСтроки Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не отмечено ни одной строки! Платежные поручения не будут выгружены. Нужно установить отметку в выгружаемых строках и нажать кнопку еще раз.'");
			Сообщение.Поле = "Объект.Выгрузка[0].Выгружать";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		АдресТекстаНаСервере = "";
		// ПотокВыгрузки - это адрес двоичных данных временного файла во временном хранилище.
		ПотокВыгрузки = ВыгрузитьДанныеВФайл(АдресТекстаНаСервере);
		СохранитьФайлВыгрузки(ПотокВыгрузки);
		ПодготовитьПротоколИСохранитьРезультаты(АдресТекстаНаСервере);
		
	Иначе
		
		ПоказатьПредупреждение(Неопределено,
			НСтр("ru = 'Список документов для выгрузки пуст.
				 |Проверьте правильность указанного банковского счета и периода выгрузки.'")
		);
		
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьВыполнить()

&НаКлиенте
Процедура ОтправитьВБанк(Команда)
	
	ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ОтправитьВБанкВопросЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещенияВопрос, НСтр("ru = 'Данные будут выгружены в банк, продолжить?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВБанкВопросЗавершение(ОтветНаВопрос, ДопПараметры) Экспорт
	
	Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПрямойОбменСБанками = ЗначениеЗаполнено(СоглашениеПрямогоОбменаСБанками);
	Если НЕ ПроверитьЗаполнениеРеквизитовФормы(ПрямойОбменСБанками) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.Выгрузка.Количество() > 0 Тогда
		
		МассивДокументов = Новый Массив;
		
		ЕстьОтмеченныеСтроки = Ложь;
		Для каждого Строка Из Объект.Выгрузка Цикл
			Если Строка.Выгружать Тогда
				ЕстьОтмеченныеСтроки = Истина;
				МассивДокументов.Добавить(Строка.Документ);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьОтмеченныеСтроки Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не отмечено ни одной строки! Платежные поручения не будут выгружены. Нужно установить отметку в выгружаемых строках и нажать кнопку еще раз.'");
			Сообщение.Поле = "Объект.Выгрузка[0].Выгружать";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВБанкЗавершение", ЭтотОбъект);
		ЭлектронноеВзаимодействиеКлиентПереопределяемый.ВыполнитьПроверкуПроведенияДокументов(
			МассивДокументов, ОписаниеОповещения, ЭтотОбъект);
		
	Иначе
		
		ПоказатьПредупреждение(Неопределено,
			НСтр("ru = 'Список документов для выгрузки пуст.
				 |Проверьте правильность указанного банковского счета и периода выгрузки.'")
		);
		
	КонецЕсли;
	
КонецПроцедуры // ОтправитьВБанк()

&НаКлиенте
Процедура ОтправитьВБанкЗавершение(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	ОбменСБанкамиКлиент.СформироватьПодписатьОтправитьЭД(МассивДокументов);
	
	АдресТекстаНаСервере = "";
	ВыгрузитьДанныеВФайл(АдресТекстаНаСервере);
	ПодготовитьПротоколИСохранитьРезультаты(АдресТекстаНаСервере);
	
КонецПроцедуры

// Процедура - обработчик команды ВыгрузкаОбновить.
//
&НаКлиенте
Процедура ВыгрузкаОбновитьВыполнить(Команда)
	
	Если Элементы.ВыгрузкаБанковскийСчет.Видимость И Объект.БанковскийСчет.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выберите банковский счет вашей организации'");
		Сообщение.Поле = "Объект.БанковскийСчет";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВыгрузка();
	
	Если Объект.Выгрузка.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='По выбранному счету нет платежных поручений за указанный период'"));
	КонецЕсли;
	
КонецПроцедуры // ВыгрузкаОбновитьВыполнить()

// Процедура - обработчик команды ВыгрузкаОтметитьВсе.
//
&НаКлиенте
Процедура ВыгрузкаОтметитьВсеВыполнить(Команда)
	
	УстановитьФлаги(Объект.Выгрузка, "Выгружать", Истина);
	КоличествоОтмеченныхСтрок = Объект.Выгрузка.Количество();
	УстановитьСтраницуПодвалаНаКлиенте();
	
КонецПроцедуры // ВыгрузкаОтметитьВсеВыполнить()

// Процедура - обработчик команды ВыгрузкаСнятьОтметкуУВсех.
//
&НаКлиенте
Процедура ВыгрузкаСнятьОтметкуУВсехВыполнить(Команда)
	
	УстановитьФлаги(Объект.Выгрузка, "Выгружать", Ложь);
	КоличествоОтмеченныхСтрок = 0;
	УстановитьСтраницуПодвалаНаКлиенте();
	
КонецПроцедуры // ВыгрузкаСнятьОтметкуУВсехВыполнить()

&НаКлиенте
Процедура ИсторияЗагрузкиИВыгрузки(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура("ОтборТолькоЗагрузкаВ1С, ОтборТолькоВыгрузкаИз1С", Ложь, Истина);
	ОткрытьФорму("РегистрСведений.ИсторияРаботыСКлиентомБанка.ФормаСписка", ПараметрыОткрытияФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Процедура - обработчик события Открытие поля ввода БанковскийСчет.
//
&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	ЗаполнитьВыгрузка();
	ЗагрузитьНастройкиФормы();
	УправлениеФормойНаСервере();
	
КонецПроцедуры // БанковскийСчетПриИзменении()

// Процедура - обработчик события Открытие поля ввода НачПериода.
//
&НаКлиенте
Процедура НачПериодаПриИзменении(Элемент)
	
	ЗаполнитьВыгрузка();
	
КонецПроцедуры // НачПериодаПриИзменении()

// Процедура - обработчик события Открытие поля ввода КонПериода.
//
&НаКлиенте
Процедура КонПериодаПриИзменении(Элемент)
	
	ЗаполнитьВыгрузка();
	
КонецПроцедуры // КонПериодаПриИзменении()

&НаКлиенте
Процедура ЗагрузкаНомерКартинкиДляПодвалаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Элементы.Выгрузка.ТекущиеДанные.ОписаниеОшибок) Тогда
		ТекстПредупреждения = Элементы.Выгрузка.ТекущиеДанные.ОписаниеОшибок + 
			Символы.ПС + Символы.ПС + НСтр("ru = 'После устранения замечаний нажмите кнопку ""Обновить""'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Документ готов к выгрузке!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация3Нажатие(Элемент)
	
	ИсторияЗагрузкиИВыгрузки(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВыгрузка

// Процедура - обработчик события Выбор табличной части Выгрузка.
//
&НаКлиенте
Процедура ВыгрузкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "ВыгрузкаВыгружать" Тогда
		Элементы.Выгрузка.ТекущиеДанные.Выгружать = НЕ (Элементы.Выгрузка.ТекущиеДанные.Выгружать);
		КоличествоОтмеченныхСтрок = КоличествоОтмеченныхСтрок + ?(Элементы.Выгрузка.ТекущиеДанные.Выгружать, 1, -1);
	ИначеЕсли Поле.Имя = "ВыгрузкаНомерКартинки" Тогда 
		Если ЗначениеЗаполнено(Элементы.Выгрузка.ТекущиеДанные.ОписаниеОшибок) Тогда
			ТекстПредупреждения = Элементы.Выгрузка.ТекущиеДанные.ОписаниеОшибок + 
				Символы.ПС + Символы.ПС + НСтр("ru = 'После устранения замечаний нажмите кнопку ""Обновить""'");
			ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Иначе
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Документ готов к выгрузке!'"));
		КонецЕсли;
	ИначеЕсли Поле.Имя = "ВыгрузкаНазначениеПлатежа" Тогда
		ПоказатьПредупреждение(Неопределено,Элементы.Выгрузка.ТекущиеДанные.НазначениеПлатежа);
	Иначе
		ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта",
			Новый Структура("Ключ", Элементы.Выгрузка.ТекущиеДанные.Документ),
			Элементы.Выгрузка.ТекущиеДанные.Документ
		);
	КонецЕсли;
	
КонецПроцедуры // ВыгрузкаВыбор()

// Процедура - обработчик команды Настройка.
//
&НаКлиенте
Процедура Настройка(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура(
			"Кодировка, Программа, ВерсияФормата, СоглашениеПрямогоОбменаСБанками, УникальныйИдентификатор, ФормаВыгрузка, ВыборНазванияПрограммы, ФайлВыгрузки, КонтролироватьБезопасностьОбменаСБанком",
			Объект.Кодировка, Объект.Программа, Объект.ВерсияФормата, СоглашениеПрямогоОбменаСБанками, УникальныйИдентификатор, Истина, Истина, Объект.ФайлВыгрузки, Объект.КонтролироватьБезопасностьОбменаСБанком
		);
	ПараметрыОткрытияФормы.Вставить("ЗагруженыНастройкиСчета", ЗагруженыНастройкиСчета);
	ПараметрыОткрытияФормы.Вставить("БанковскийСчетНомер", БанковскийСчетНомер);
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаНастройка", ПараметрыОткрытияФормы);
	
КонецПроцедуры // Настройка()

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеНастроек" + УникальныйИдентификатор Тогда
		Объект.Кодировка = Параметр.Кодировка;
		Объект.Программа = Параметр.Программа;
		Объект.ВерсияФормата = Параметр.ВерсияФормата;
		Если ЗначениеЗаполнено(Параметр.ФайлВыгрузки) Тогда
			Объект.ФайлВыгрузки = Параметр.ФайлВыгрузки;
		Иначе
			Объект.ФайлВыгрузки = "1c_to_kl.txt";
		КонецЕсли;
		Объект.КонтролироватьБезопасностьОбменаСБанком = Параметр.КонтролироватьБезопасностьОбменаСБанком;
		
		СохранитьНастройкиФормы();
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ЗаполнитьВыгрузка();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

// Процедура сохраняет настройки формы.
//
&НаСервере
Процедура СохранитьНастройкиФормы()
	
	Настройки = Новый Соответствие;
	Настройки.Вставить("ФайлЗагрузки", Объект.ФайлЗагрузки);
	Настройки.Вставить("ФайлВыгрузки", Объект.ФайлВыгрузки);
	Настройки.Вставить("Программа", Объект.Программа);
	Настройки.Вставить("СтатьяДДСИсходящий", Объект.СтатьяДДСИсходящий);
	Настройки.Вставить("СтатьяДДСВходящий", Объект.СтатьяДДСВходящий);
	Настройки.Вставить("ПроводитьЗагружаемые", Объект.ПроводитьЗагружаемые);
	Настройки.Вставить("ЗаполнятьДолгиАвтоматически", Объект.ЗаполнятьДолгиАвтоматически);
	Настройки.Вставить("Кодировка", Объект.Кодировка);
	Настройки.Вставить("ВерсияФормата", Объект.ВерсияФормата);
	Настройки.Вставить("АвтоматическиПодставлятьДокументы", Объект.АвтоматическиПодставлятьДокументы);
	Настройки.Вставить("НеУдалятьДокументыКоторыхНетВВыписке", Объект.НеУдалятьДокументыКоторыхНетВВыписке);
	Настройки.Вставить("АнализироватьИсториюВыбораЗначенийРеквизитов", Объект.АнализироватьИсториюВыбораЗначенийРеквизитов);
	Настройки.Вставить("ГруппаДоступа", Объект.ГруппаДоступа);
	Настройки.Вставить("КонтролироватьБезопасностьОбменаСБанком", Объект.КонтролироватьБезопасностьОбменаСБанком);
	
	ХранилищеСистемныхНастроек.Сохранить("Обработка.КлиентБанк.Форма.ОсновнаяФорма/" + ?(ЗначениеЗаполнено(Объект.БанковскийСчет), ПолучитьНавигационнуюСсылку(Объект.БанковскийСчет), "БанковскийСчетНеУказан"), "ВыгрузкаВСбербанк", Настройки);
	
КонецПроцедуры // СохранитьНастройкиФормы()

// Заполнение суммы отмеченныых.
//
&НаКлиенте
Процедура ЗаполнитьСуммыВыделеныхНаКлиенте(ТекСтрока)
	
	ТекСтрока.СуммаДокументаВыделено = ?(ТекСтрока.Выгружать, ТекСтрока.СуммаДокумента, 0);
	ОстатокКон = ОстатокНач - Объект.Выгрузка.Итог("СуммаДокументаВыделено");
	
КонецПроцедуры

// Заполнение суммы отмеченныых.
//
&НаСервере
Процедура ЗаполнитьСуммыВыделеныхНаСервере(ТекСтрока)
	
	ТекСтрока.СуммаДокументаВыделено = ?(ТекСтрока.Выгружать, ТекСтрока.СуммаДокумента, 0);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля Выгружать списка Выгрузка.
//
&НаКлиенте
Процедура ВыгрузкаВыгружатьПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Выгрузка.ТекущиеДанные;
	ЗаполнитьСуммыВыделеныхНаКлиенте(ТекСтрока);
	КоличествоОтмеченныхСтрок = КоличествоОтмеченныхСтрок + ?(ТекСтрока.Выгружать, 1, -1);
	УстановитьСтраницуПодвалаНаКлиенте();
	
КонецПроцедуры // ВыгрузкаВыгружатьПриИзменении()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьСчетОрганизацииДляОбработкиВыгрузки(БанковскийСчетУказанВПараметрах)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	НЕ БанковскиеСчета.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	ИначеЕсли БанковскийСчетУказанВПараметрах Тогда
		Возврат Параметры.БанковскийСчетОрганизацииИзДокумента;
	КонецЕсли;
	
КонецФункции

// Загружает настройки формы.
// Если загрузка настроек осуществляется при изменении реквизита формы,
// например, для новой организации, то обязательно проверить подлючено ли 
// расширение для работы с файлами.
//
// Признаком отсутствия подключения будит информация в реквизитах объекта обработки:
// ФайлВыгрузки, ФайлЗагрузки
//
&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	
	Настройки = ХранилищеСистемныхНастроек.Загрузить("Обработка.КлиентБанк.Форма.ОсновнаяФорма/" + ПолучитьНавигационнуюСсылку(Объект.БанковскийСчет), "ВыгрузкаВСбербанк");
	Если Настройки = Неопределено Тогда
		Настройки = ХранилищеСистемныхНастроек.Загрузить("Обработка.КлиентБанк.Форма.ОсновнаяФорма/БанковскийСчетНеУказан", "ВыгрузкаВСбербанк");
		БанковскийСчетНомер = "";
		ЗагруженыНастройкиСчета = Ложь;
	Иначе
		БанковскийСчетНомер = Объект.БанковскийСчет.НомерСчета;
		ЗагруженыНастройкиСчета = Истина;
	КонецЕсли;
	
	Если Настройки <> Неопределено Тогда
		
		Объект.Программа = Настройки.Получить("Программа");
		Объект.Кодировка = Настройки.Получить("Кодировка");
		Объект.ВерсияФормата = Настройки.Получить("ВерсияФормата");
		Объект.ФайлВыгрузки = Настройки.Получить("ФайлВыгрузки");
		Если НЕ ЗначениеЗаполнено(Объект.ФайлВыгрузки) Тогда
			Объект.ФайлВыгрузки = "1c_to_kl.txt";
		КонецЕсли;
		Объект.ФайлЗагрузки = Настройки.Получить("ФайлЗагрузки");
		Объект.СтатьяДДСИсходящий = Настройки.Получить("СтатьяДДСИсходящий");
		Объект.СтатьяДДСВходящий = Настройки.Получить("СтатьяДДСВходящий");
		Объект.ПроводитьЗагружаемые = Настройки.Получить("ПроводитьЗагружаемые");
		Если Настройки.Получить("ЗаполнятьДолгиАвтоматически") = Неопределено Тогда
			Объект.ЗаполнятьДолгиАвтоматически = Истина;
		Иначе
			Объект.ЗаполнятьДолгиАвтоматически = Настройки.Получить("ЗаполнятьДолгиАвтоматически");
		КонецЕсли;
		Объект.Кодировка = Настройки.Получить("Кодировка");
		Если НЕ ЗначениеЗаполнено(Объект.Кодировка) Тогда
			Объект.Кодировка = "Windows";
		КонецЕсли;
		Объект.ВерсияФормата = Настройки.Получить("ВерсияФормата");
		Если НЕ ЗначениеЗаполнено(Объект.ВерсияФормата) Тогда
			Объект.ВерсияФормата = "1.02";
		КонецЕсли;
		Если Настройки.Получить("АвтоматическиПодставлятьДокументы") = Неопределено Тогда
			Объект.АвтоматическиПодставлятьДокументы = Истина;
		Иначе
			Объект.АвтоматическиПодставлятьДокументы = Настройки.Получить("АвтоматическиПодставлятьДокументы");
		КонецЕсли;
		Если Настройки.Получить("НеУдалятьДокументыКоторыхНетВВыписке") = Неопределено Тогда
			Объект.НеУдалятьДокументыКоторыхНетВВыписке = Ложь;
		Иначе
			Объект.НеУдалятьДокументыКоторыхНетВВыписке = Настройки.Получить("НеУдалятьДокументыКоторыхНетВВыписке");
		КонецЕсли;
		Если Настройки.Получить("АнализироватьИсториюВыбораЗначенийРеквизитов") = Неопределено Тогда
			Объект.АнализироватьИсториюВыбораЗначенийРеквизитов = Истина;
		Иначе
			Объект.АнализироватьИсториюВыбораЗначенийРеквизитов = Настройки.Получить("АнализироватьИсториюВыбораЗначенийРеквизитов");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Настройки.Получить("ГруппаДоступа")) Тогда
			Объект.ГруппаДоступа = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяГруппаДоступаКонтрагентов");
		Иначе
			Объект.ГруппаДоступа = Настройки.Получить("ГруппаДоступа");
		КонецЕсли;
		Если Настройки.Получить("КонтролироватьБезопасностьОбменаСБанком") = Неопределено Тогда
			Объект.КонтролироватьБезопасностьОбменаСБанком = Истина;
		Иначе
			Объект.КонтролироватьБезопасностьОбменаСБанком = Настройки.Получить("КонтролироватьБезопасностьОбменаСБанком");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьНастройкиФормы()

// Функция проверяет правильность заполнения реквизитов формы.
//
&НаКлиенте
Функция ПроверитьЗаполнениеРеквизитовФормы(ПрямойОбменСБанками = Ложь)
	
	Отказ = Ложь;
	ОткрытьФормуНастройки = Ложь;
	
	// Проверка заполненности реквизитов.
	Если Не ЗначениеЗаполнено(Объект.НачПериода) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен начальный период'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.НачПериода", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.КонПериода) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен конечный период'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.КонПериода", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен банковский счет'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.БанковскийСчет", , Отказ);
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена организация.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	
	Если Не ПрямойОбменСБанками Тогда
		Если Не ЗначениеЗаполнено(Объект.Кодировка) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена кодировка'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Кодировка", , Отказ);
			ОткрытьФормуНастройки = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ВерсияФормата) Тогда
			ТекстСообщения = НСтр("ru = 'Не указана версия формата обмена'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.ВерсияФормата", , Отказ);
			ОткрытьФормуНастройки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Устраните замечания и нажмите кнопку еще раз'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если ОткрытьФормуНастройки Тогда
		Настройка(Неопределено);
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции // ПроверитьЗаполнениеРеквизитовФормы()

// Процедура заполняет таблицу для выгрузки.
//
&НаСервере
Процедура ЗаполнитьВыгрузка()
	
	Объект.Организация = Объект.БанковскийСчет.Владелец;
	
	Запрос = Новый Запрос;
	Запрос.Текст = Обработки.КлиентБанк.ПолучитьТекстЗапросаПоЗаполнениюТабличнойЧастиВыгрузка();
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("БанковскийСчет", Объект.БанковскийСчет);
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(Объект.НачПериода));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(Объект.КонПериода));
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Выгрузка.Колонки.Добавить("ОписаниеОшибокПодТЧ", Новый ОписаниеТипов("Строка"));
	
	КоличествоОтмеченныхСтрок = 0;
	Для каждого СтрокаДокумента Из Выгрузка Цикл
		Обработки.КлиентБанк.ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента, ЭтотОбъект);
		СтрокаДокумента.Выгружать = ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок) И НЕ (СтрокаДокумента.Оплачено);
		СтрокаДокумента.НазначениеПлатежа = СокрЛП(СтрокаДокумента.НазначениеПлатежа);
		СтрокаДокумента.НомерКартинки = ?(ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок), -1, 1);
		УстановитьНомерКартинкиДляПодвалаНаСервере(СтрокаДокумента);
		ЗаполнитьСуммыВыделеныхНаСервере(СтрокаДокумента);
		КоличествоОтмеченныхСтрок = КоличествоОтмеченныхСтрок + ?(СтрокаДокумента.Выгружать, 1, 0);
		Если ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок) Тогда
			СтрокаДокумента.ОписаниеОшибокПодТЧ = НСтр("ru = 'Текущий документ готов к выгрузке! Проверьте значения в других строках, где есть предупреждающий знак.'");
		Иначе
			СтрокаДокумента.ОписаниеОшибокПодТЧ = СтрокаДокумента.ОписаниеОшибок;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Выгрузка.Загрузить(Выгрузка);
	ОстатокКон = ОстатокНач - Объект.Выгрузка.Итог("СуммаДокументаВыделено");
	
	СоглашениеПрямогоОбменаСБанками = Неопределено;
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками") Тогда
			
			Запрос = Новый Запрос();
			Запрос.Параметры.Вставить("БанковскийСчет", Объект.БанковскийСчет);
			Запрос.Параметры.Вставить("Организация", Объект.Организация);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкиОбменСБанками.Ссылка КАК НастройкиОбменСБанками,
			|	НастройкиОбменСБанками.Банк,
			|	БанковскиеСчета.Ссылка,
			|	НастройкиОбменСБанками.Организация
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
			|		ПО БанковскиеСчета.Банк = НастройкиОбменСБанками.Банк
			|			И БанковскиеСчета.Владелец = НастройкиОбменСБанками.Организация
			|ГДЕ
			|	БанковскиеСчета.Ссылка = &БанковскийСчет
			|	И НЕ БанковскиеСчета.ПометкаУдаления
			|	И НастройкиОбменСБанками.Организация = &Организация
			|	И НЕ НастройкиОбменСБанками.ПометкаУдаления
			|	И НастройкиОбменСБанками.Недействительна = ЛОЖЬ";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СоглашениеПрямогоОбменаСБанками = Выборка.НастройкиОбменСБанками;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Выгрузка.Количество() = 0 Тогда
		Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаСписокДляВыгрузкиПуст;
	Иначе
		УстановитьСтраницуПодвалаНаСервере(Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВыгрузка()

// Процедура выгружает данные в файл.
//
&НаСервере
Функция ВыгрузитьДанныеВФайл(АдресТекстаНаСервере = "")
	
	ПотокВыгрузки = РеквизитФормыВЗначение("Объект").Выгрузить(РасширениеРаботыСФайламиПодключено,
		УникальныйИдентификатор, АдресТекстаНаСервере);
	
	Возврат ПотокВыгрузки;
	
КонецФункции // ВыгрузитьДанныеВФайл()

&НаКлиенте
Процедура СохранитьФайлВыгрузкиЗавершение(Результат, ПараметрыЗавершения) Экспорт
	
	// Отметим те документы которые успешно выгрузились.
	Если Результат <> Неопределено Тогда
		Если Результат.Количество() > 0 Тогда
			Для каждого СтрокаСекции Из Объект.Выгрузка Цикл
				Если СтрокаСекции.Готовность = -2 Тогда
					СтрокаСекции.Готовность = -1;
				КонецЕсли;
			КонецЦикла;
			Если ПараметрыЗавершения.ВыгружатьИнтерактивно Тогда
				ТекстСообщения = НСтр("ru = 'Данные успешно выгружены в файл.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Данные успешно выгружены в файл '") + Объект.ФайлВыгрузки + ".";
			КонецЕсли;
			Если Результат.Количество() > 1 Тогда
				ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выгружено более одного файла!!!'"));
			ИначеЕсли ПараметрыЗавершения.ВыгружатьИнтерактивно Тогда
				// Если файл один, то откроем каталог с файлом.
				ПолноеИмя = Результат[0].ПолноеИмя;
				ФайловаяСистемаКлиент.ОткрытьПроводник(ПолноеИмя);
			КонецЕсли;
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Операция отменена'");
		КонецЕсли;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Операция отменена'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиенте(ИмяФайла, АдресВоВременномХранилище)
	
	ДополнительныеПараметры = Новый Структура("ИмяФайла, АдресВоВременномХранилище", ИмяФайла,
		АдресВоВременномХранилище);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеСозданиеФайла", ЭтотОбъект,
		ДополнительныеПараметры);
	
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеСозданиеФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеПроверкаСуществования", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеПроверкаСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	ДополнительныеПараметры.Вставить("ФайлСуществует", Существует);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеПроверкаНаКаталог", ЭтотОбъект, ДополнительныеПараметры);
	Если Существует Тогда
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеПроверкаНаКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Прав(СокрЛП(ДополнительныеПараметры.ИмяФайла), 1) = "\"
		ИЛИ Прав(СокрЛП(ДополнительныеПараметры.ИмяФайла), 1) = "/"
		ИЛИ ЭтоКаталог Тогда
		
		ТекстСообщения = НСтр("ru = 'В настройках указан некорректный путь к файлу для выгрузки документов в банк - выбран ""каталог"" или указан неправильный путь к файлу.
				|Выберите файл выгрузки. Для перехода к настройкам нажмите кнопку в правом верхнем углу формы.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения
			,, "Объект.ФайлВыгрузки");
		
		Возврат;
		
	ИначеЕсли Объект.КонтролироватьБезопасностьОбменаСБанком И СтрНайти(ДополнительныеПараметры.ИмяФайла, "/") = 0
		И СтрНайти(ДополнительныеПараметры.ИмяФайла, "\") = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'В настройках указан некорректный путь к файлу для выгрузки документов в банк.
				|Выберите файл выгрузки. Для перехода к настройкам нажмите кнопку в правом верхнем углу формы.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения
			,, "Объект.ФайлВыгрузки");
		
		Возврат;
		
	КонецЕсли;
	
	ПередаваемыеФайлы = Новый Массив;
	
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.ИмяФайла, ДополнительныеПараметры.АдресВоВременномХранилище);
	ПередаваемыеФайлы.Добавить(ОписаниеФайла);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПолучениеФайлов(ОписаниеОповещения, ПередаваемыеФайлы, ДополнительныеПараметры.ИмяФайла, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Данные успешно выгружены в файл'");
	
	#Если НЕ ВебКлиент И НЕ МобильныйКлиент Тогда
	ПоказатьОповещениеПользователя(
		ТекстЗаголовка, "file:///" + СтрЗаменить(СокрЛП(ДополнительныеПараметры.ИмяФайла), "\", "/"),
		ДополнительныеПараметры.ИмяФайла, Элементы.Выгрузить.Картинка);
	#Иначе
	ПоказатьОповещениеПользователя(
		ТекстЗаголовка,,
		ДополнительныеПараметры.ИмяФайла, Элементы.Выгрузить.Картинка);
	#КонецЕсли
	
	ПоказатьФормуКонтроляБезопасности(ДополнительныеПараметры.ИмяФайла, ДополнительныеПараметры.АдресВоВременномХранилище);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуКонтроляБезопасности(ИмяФайла, АдресВоВременномХранилище)
	
	// МобильныйКлиент
	#Если МобильныйКлиент Тогда
		
		Возврат;
		
	#КонецЕсли
	// Конец МобильныйКлиент
	
	Если Объект.КонтролироватьБезопасностьОбменаСБанком
		И Не ПрямойОбменСБанками Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресИсходныхДанных", АдресВоВременномХранилище);
		ПараметрыФормы.Вставить("ПутьКФайлу", ИмяФайла);
		ПараметрыФормы.Вставить("Кодировка", Объект.Кодировка);
		ОткрытьФорму("Обработка.КлиентБанк.Форма.КонтрольБезопасностиОбменаСБанком", ПараметрыФормы, , , , , );
	КонецЕсли;
	
КонецПроцедуры

#Область РегламентноеЗадание

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурнал(ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'КлиентБанк.СохранитьФайлВыгрузки'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

// Функция сохраняет файл выгрузки.
//
&НаКлиенте
Процедура СохранитьФайлВыгрузки(АдресФайлаВоВременномХранилище)
	
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#Иначе
		ЭтоВебКлиент = Ложь;
	#КонецЕсли
	
	// МобильныйКлиент
	#Если МобильныйКлиент Тогда
		
		РасширениеРаботыСФайламиПодключено = Ложь;
		
	#КонецЕсли
	// Конец МобильныйКлиент
	
	Попытка
		
		КаталогФайлаВыгрузки = Объект.ФайлВыгрузки;
		ИмяФайлаВыгрузки = Объект.ФайлВыгрузки;
		НомерСимволаСлеш = СтрНайти(ИмяФайлаВыгрузки, "\", НаправлениеПоиска.СКонца);
		Если НомерСимволаСлеш > 0 Тогда
			ИмяФайлаВыгрузки = Сред(ИмяФайлаВыгрузки, НомерСимволаСлеш+1);
			КаталогФайлаВыгрузки = Лев(КаталогФайлаВыгрузки, НомерСимволаСлеш-1);
		КонецЕсли;
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.Каталог = КаталогФайлаВыгрузки;
		ДиалогВыбораФайла.Заголовок = "Сохранение файла";
		ДиалогВыбораФайла.Расширение = "txt";
		Фильтр = НСтр("ru = 'Текстовый файл'; en = 'Text file'")
			+ " (*.txt)|*.txt";
		ДиалогВыбораФайла.Фильтр = Фильтр;
		
		ВыгружатьИнтерактивно = (ВРег(Объект.ФайлВыгрузки) = ВРег("1c_to_kl.txt"))
				ИЛИ (СтрНайти(Объект.ФайлВыгрузки, "\", НаправлениеПоиска.СКонца) = 0 И СтрНайти(Объект.ФайлВыгрузки, "/", НаправлениеПоиска.СКонца) = 0);
				
		Если Объект.КонтролироватьБезопасностьОбменаСБанком Тогда
			
			Если РасширениеРаботыСФайламиПодключено Тогда
			
				// Вариант для установленного расширения для работы с файлами
				Если НЕ ВыгружатьИнтерактивно Тогда
					
					Если Не ЗначениеЗаполнено(Объект.ФайлВыгрузки) Тогда
						ОбщегоНазначенияКлиент.СообщитьПользователю(
							НСтр(
							"ru = 'В настройках не указан файл данных для выгрузки документов в банк. Для перехода к настройкам нажмите кнопку в правом верхнем углу формы.'"),
							, "Объект.ФайлВыгрузки");
						Возврат;
					КонецЕсли;
					
					ВыгрузитьФайлНаКлиенте(Объект.ФайлВыгрузки, АдресФайлаВоВременномХранилище);
					
				Иначе
					
					ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ИмяФайлаВыгрузки, АдресФайлаВоВременномХранилище);
					ПолучаемыеФайлы = Новый Массив;
					ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
					
					ПараметрыЗавершения = Новый Структура("ВыгружатьИнтерактивно, АдресФайлаВоВременномХранилище",
						Истина, АдресФайлаВоВременномХранилище);
					
					НачатьПолучениеФайлов(Новый ОписаниеОповещения("СохранитьФайлВыгрузкиЗавершение", ЭтотОбъект,
						ПараметрыЗавершения), ПолучаемыеФайлы, ДиалогВыбораФайла, Истина);
						
				КонецЕсли;
				
			Иначе
				// Веб клиент без расширения для работы с файлами
				Попытка
					ВремПуть = ?(ПустаяСтрока(Объект.ФайлВыгрузки), "1c_to_kl.txt", СокрЛП(Объект.ФайлВыгрузки));
					ПолучитьФайл(АдресФайлаВоВременномХранилище, ВремПуть, Истина);
					
					ПоказатьФормуКонтроляБезопасности("", АдресФайлаВоВременномХранилище);
					
				Исключение
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					
					ТекстОшибки = СтрШаблон(НСтр("ru = 'При записи файла возникла ошибка
						|%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
					
					ЗаписатьОшибкуВЖурнал(ТекстОшибки);
					
				КонецПопытки;
				
			КонецЕсли;
			
		Иначе
			
			ВыгружатьИнтерактивно = ВыгружатьИнтерактивно ИЛИ ЭтоВебКлиент;
			
			Если НЕ ЭтоВебКлиент ИЛИ РасширениеРаботыСФайламиПодключено Тогда
				
				ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ИмяФайлаВыгрузки, АдресФайлаВоВременномХранилище);
				ПолучаемыеФайлы = Новый Массив;
				ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
				
				ПараметрыЗавершения = Новый Структура("ВыгружатьИнтерактивно, АдресФайлаВоВременномХранилище", Истина,
					АдресФайлаВоВременномХранилище);

				НачатьПолучениеФайлов(Новый ОписаниеОповещения("СохранитьФайлВыгрузкиЗавершение", ЭтотОбъект,
					ПараметрыЗавершения), ПолучаемыеФайлы, ДиалогВыбораФайла, Истина);
				
			Иначе
				
				ТекущийФайлВыгрузки = Объект.ФайлВыгрузки;
				Результат = ПолучитьФайл(АдресФайлаВоВременномХранилище, ТекущийФайлВыгрузки, ВыгружатьИнтерактивно);
				
				// Отметим те документы которые успешно выгрузились.
				Если Результат <> Неопределено Тогда
					Если Результат Тогда
						Для каждого СтрокаСекции Из Объект.Выгрузка Цикл
							Если СтрокаСекции.Готовность = - 2 Тогда
								СтрокаСекции.Готовность = - 1;
							КонецЕсли;
						КонецЦикла;
						Если ВыгружатьИнтерактивно Тогда
							ТекстСообщения = НСтр("ru = 'Данные успешно выгружены в файл.'");
						Иначе
							ТекстСообщения = НСтр("ru = 'Данные успешно выгружены в файл '") + Объект.ФайлВыгрузки + ".";
						КонецЕсли;
					Иначе
						ТекстСообщения = НСтр("ru = 'Операция отменена'");
					КонецЕсли;
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось записать данные в файл. Возможно, диск защищен от записи.'");
		Сообщить(ОписаниеОшибки());
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
		
	КонецПопытки
	
КонецПроцедуры // СохранитьФайлВыгрузки()

// Процедура устанавливает флаги.
//
&НаКлиенте
Процедура УстановитьФлаги(Таблица, Поле, ЗначениеФлага)
	
	Для каждого Строка Из Таблица Цикл
		Строка[Поле] = ЗначениеФлага;
		ЗаполнитьСуммыВыделеныхНаКлиенте(Строка)
	КонецЦикла;
	
КонецПроцедуры // УстановитьФлаги()

// Функция возвращает найденный элемент дерева.
//
&НаСервере
Функция НайтиЭлементДерева(ЭлементыДерева, ИмяКолонки, ИскомоеЗначение)
	
	Для Ном = 0 По ЭлементыДерева.Количество() - 1 Цикл
		
		ЭлементДерева = ЭлементыДерева.Получить(Ном);
		
		Если ЭлементДерева[ИмяКолонки] = ИскомоеЗначение Тогда
			Возврат ЭлементДерева;
		КонецЕсли;
		
		Если ЭлементДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			
			РезультатПоиска = НайтиЭлементДерева(ЭлементДерева.ПолучитьЭлементы(), ИмяКолонки, ИскомоеЗначение);
			
			Если НЕ РезультатПоиска = Неопределено Тогда
				Возврат РезультатПоиска;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиЭлементДерева()

&НаСервере
Процедура УправлениеФормойНаСервере()

	ПрямойОбменСБанками = ЗначениеЗаполнено(СоглашениеПрямогоОбменаСБанками);
	
	Элементы.ГруппаВыгрузкаВыписки.ТекущаяСтраница = ?(ПрямойОбменСБанками, Элементы.ГруппаВыгрузкиВыпискиЧерезЭД, Элементы.ГруппаВыгрузкаВыпискиВФайл);
	
	Элементы.Выгрузить.Видимость = НЕ ПрямойОбменСБанками;
	Элементы.Выгрузить.КнопкаПоУмолчанию = НЕ ПрямойОбменСБанками;
	Элементы.ОтправитьВБанк.Видимость = ПрямойОбменСБанками;
	Элементы.ОтправитьВБанк.КнопкаПоУмолчанию = ПрямойОбменСБанками;
	Элементы.ГруппаОписаниеВыгрузкиВыпискиЧерезЭД.Видимость = ПрямойОбменСБанками;
	Элементы.ВыгрузкаСостояниеЭД.Видимость = ПрямойОбменСБанками;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками")
		И ЗначениеЗаполнено(СоглашениеПрямогоОбменаСБанками) Тогда
		
		ТекстШаблона = НСтр("ru = 'С %1 действует соглашение о прямом обмене: платежные поручения будут отправлены в банк из 1С:Управление нашей фирмой'");
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеПрямогоОбменаСБанками, "Банк"));
		СообщениеПрямогоОбмена = ТекстНадписи;
	КонецЕсли;
	
	ВалютаДенежныхСредств = Объект.БанковскийСчет.ВалютаДенежныхСредств;
	Если ПустаяСтрока(ВалютаДенежныхСредств.СимвольноеПредставление) Тогда
		ПредставлениеВалютыДС = Лев(СокрЛП(Объект.БанковскийСчет.ВалютаДенежныхСредств), 3);
	Иначе
		ПредставлениеВалютыДС = СокрЛП(ВалютаДенежныхСредств.СимвольноеПредставление);
	КонецЕсли;
	Элементы.ВыгрузкаСуммаДокумента.Заголовок = "Сумма, " + ПредставлениеВалютыДС;
	
	// Для профиля "Только просмотр" нужно сделать кнопки "Выгрузить" и "ОтправитьВБанк" недоступными.
	Если НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ИсторияРаботыСКлиентомБанка) Тогда
		Элементы.Выгрузить.Доступность = Ложь;
		Элементы.ОтправитьВБанк.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УправлениеФормойНаСервере()

&НаСервере
Функция ВывестиПротокол()
	
	// вывод в макет
	
	СтруктураПараметров = Новый Структура(
		"НазваниеОрганизации, ОписаниеПериода, ДатаСеанса",
		Объект.Организация,
		ПредставлениеПериода(Объект.НачПериода, КонецДня(Объект.КонПериода)),
		ТекущаяДатаСеанса());
	
	Протокол.Очистить();
	
	Макет = Обработки.КлиентБанк.ПолучитьМакет("ПротоколСохранения");
	
	ОбластьЗаголовка = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовка.Параметры.Заполнить(СтруктураПараметров);
	
	Протокол.Вывести(ОбластьЗаголовка);
	
	Область = Макет.ПолучитьОбласть("Строка");
	НомерПП = 1;
	
	НайденныеСтроки = Объект.Выгрузка.НайтиСтроки(Новый Структура("Выгружать", Истина));
	
	Для Каждого СтрокаПротокола Из НайденныеСтроки Цикл
		
		Область.Параметры.Заполнить(СтрокаПротокола);
		Область.Параметры.Сумма = СтрокаПротокола.СуммаДокумента;
		Область.Параметры["НомерПП"] = НомерПП;
		Протокол.Вывести(Область);
		НомерПП = НомерПП + 1;
			
	КонецЦикла;
	
	Возврат НайденныеСтроки.Количество();
	
КонецФункции

&НаСервере
Процедура ПодготовитьПротоколИСохранитьРезультаты(АдресТекстаНаСервере)
	
	КоличествоВыведенныхДокументов = ВывестиПротокол();
	
	// Сохраняем историю
	Запись = РегистрыСведений.ИсторияРаботыСКлиентомБанка.СоздатьМенеджерЗаписи();
	Запись.Период = ТекущаяДатаСеанса();
	Запись.Организация = Объект.Организация;
	Запись.БанковскийСчет = Объект.БанковскийСчет;
	Запись.Загрузка = Ложь;
	
	Запись.КоличествоДокументовВВыписке = КоличествоВыведенныхДокументов;
	Запись.Кодировка = Объект.Кодировка;
	
	Запись.ИсходныйФайл = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресТекстаНаСервере),
		Новый СжатиеДанных(5));
		
	Запись.ПротоколЗагрузки = Новый ХранилищеЗначения(Протокол, Новый СжатиеДанных(5));
		
	Запись.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНомерКартинкиДляПодвалаНаСервере(ДанныеСтроки)
	
	ДанныеСтроки.НомерКартинкиДляПодвала = ?(ДанныеСтроки.НомерКартинки = -1, 0, ДанныеСтроки.НомерКартинки);
	
КонецПроцедуры

&НаКлиенте
Функция НужноПоказатьСтраницуВсеДанныеГотовыКЗагрузкеНаКлиенте()
	
	Для каждого ТекущаяСтрока Из Объект.Выгрузка Цикл
		Если ТекущаяСтрока.НомерКартинки = 1 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция НужноПоказатьСтраницуВсеДанныеГотовыКЗагрузкеНаСерврере()
	
	Для каждого ТекущаяСтрока Из Объект.Выгрузка Цикл
		Если ТекущаяСтрока.НомерКартинки = 1 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтраницуПодвалаНаКлиенте()
	
	ЕстьОтмеченные = (КоличествоОтмеченныхСтрок > 0);
	
	Если Не ЕстьОтмеченные Тогда
		Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаНетОтмеченныхСтрок;
	Иначе
		Если Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница <> Элементы.СтраницаВсеДанныеГотовыКЗагрузке Тогда
			Если НужноПоказатьСтраницуВсеДанныеГотовыКЗагрузкеНаКлиенте() Тогда
				Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаВсеДанныеГотовыКЗагрузке;
			Иначе
				Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаПредупреждающееСообщение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницуПодвалаНаСервере(ПолноеОбновлениеСтраницыПодвала = Ложь)
	
	ЕстьОтмеченные = (КоличествоОтмеченныхСтрок > 0);
	
	Если Не ЕстьОтмеченные Тогда
		Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаНетОтмеченныхСтрок;
	Иначе
		Если Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаПредупреждающееСообщение ИЛИ
			Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаНетОтмеченныхСтрок ИЛИ
			ПолноеОбновлениеСтраницыПодвала Тогда
			Если НужноПоказатьСтраницуВсеДанныеГотовыКЗагрузкеНаСерврере() Тогда
				Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаВсеДанныеГотовыКЗагрузке;
			Иначе
				Элементы.Выгрузка.ТекущаяСтрока = 0;
				Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаПредупреждающееСообщение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет настройку элементов формы для корректного отображения в мобильном клиенте
//
&НаСервере
Процедура НастроитьФормуМобильныйКлиент()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыгрузкаОписаниеОшибокПодТЧ", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация9", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация11", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация12", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КВыгрузке", "ШрифтЗаголовка", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КВыгрузке", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОстатокКон", "ШрифтЗаголовка", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОстатокКон", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КоличествоОтмеченныхСтрок", "ШрифтЗаголовка", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КоличествоОтмеченныхСтрок", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КВыгрузке", "ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Лево);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОстатокКон", "ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Лево);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КоличествоОтмеченныхСтрок", "ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Лево);
	Элементы.Переместить(Элементы.КВыгрузке, Элементы.Сумма);
	Элементы.Переместить(Элементы.ОстатокКон, Элементы.Сумма);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КВыгрузке", "ЦветРамки", Новый Цвет());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОстатокКон", "ЦветРамки", Новый Цвет());
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Выгрузить", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация7", "Видимость", Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаНастройка1", "Видимость", Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Сумма", "Группировка", ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КоманднаяПанель", "Группировка", ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	
	// Табличная часть
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыгрузкаНомерСтроки", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыгрузкаНомер", "ШрифтЗаголовка", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыгрузкаДата", "ШрифтЗаголовка", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыгрузкаНомер", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыгрузкаДата", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыгрузкаДата", "ГоризонтальноеПоложение", ГоризонтальноеПоложениеЭлемента.Лево);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыгрузкаДата", "ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Лево);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыгрузкаДата", "Ширина", 7);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомерИДата", "Группировка", ГруппировкаКолонок.Горизонтальная);
	
	Элементы.Переместить(Элементы.ВыгрузкаНомер, Элементы.Выгрузка, Элементы.Сумма);
	Элементы.Переместить(Элементы.ВыгрузкаДата, Элементы.Выгрузка, Элементы.Сумма);
	
КонецПроцедуры

#КонецОбласти
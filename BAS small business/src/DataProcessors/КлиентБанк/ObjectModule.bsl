
&Вместо("Выгрузить")
Функция СМП_Выгрузить(РасширениеРаботыСФайламиПодключено, КлючУникальности, АдресТекстаНаСервере = "", ТаблицаЗначенийДляВыгрузкиВФайл = Неопределено) Экспорт
	
	Если ТаблицаЗначенийДляВыгрузкиВФайл = Неопределено Тогда
		ДокументыНаЭкспорт = Выгрузка.Выгрузить();
	Иначе
		ДокументыНаЭкспорт = ТаблицаЗначенийДляВыгрузкиВФайл.Выгрузить();
	КонецЕсли;
	
	ПотокВыгрузки = Новый ТекстовыйДокумент();
	
	Если Кодировка = "DOS" Тогда
		ПотокВыгрузки.УстановитьТипФайла("cp866");
	Иначе
		ПотокВыгрузки.УстановитьТипФайла("windows-1251");
	КонецЕсли;
	
	// Формируем заголовок.
	ПотокВыгрузки.ДобавитьСтроку("1CClientBankExchange");
	ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=" + ВерсияФормата); // Поддерживаются версии "1.01" и "1.02"
	ПотокВыгрузки.ДобавитьСтроку("Кодировка=" + Кодировка);
	ПотокВыгрузки.ДобавитьСтроку("Отправитель=" + Метаданные.Синоним);
	ПотокВыгрузки.ДобавитьСтроку("Получатель=" + Программа);
	ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания=" + Формат(ТекущаяДата(), "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания=" + Формат(ТекущаяДата(), "ДЛФ=В"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаНачала=" + Формат(НачПериода, "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаКонца=" + Формат(КонПериода, "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + БанковскийСчет.НомерСчета);
	ПотокВыгрузки.ДобавитьСтроку("Документ=Платежное поручение");
	
	// Выводим отмеченные секции документов.
	Для каждого СтрокаСекции Из ДокументыНаЭкспорт Цикл
		Если НЕ(СтрокаСекции.Выгружать)Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнятьПоказательТипа = СтрокаСекции.Дата < '2016-03-28';
		Буфер = ПолучитьСекциюДокумент(СтрокаСекции, ДокументыНаЭкспорт.Колонки, ЗаполнятьПоказательТипа);
		КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
		Для Сч = 1 По КоличествоСрокСекции Цикл
			ПотокВыгрузки.ДобавитьСтроку(СтрПолучитьСтроку(Буфер, Сч));
		КонецЦикла;
		СтрокаСекции.Готовность = - 2;
	КонецЦикла;
	
	ПотокВыгрузки.ДобавитьСтроку("КонецФайла");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	Если Кодировка = "DOS" Тогда
		ПотокВыгрузки.Записать(ИмяВременногоФайла, "cp866");
	Иначе
		ПотокВыгрузки.Записать(ИмяВременногоФайла, "windows-1251");
	КонецЕсли;
	
	АдресТекстаНаСервере = ПоместитьВоВременноеХранилище(ПотокВыгрузки.ПолучитьТекст(), КлючУникальности);
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), КлючУникальности);
	УдалитьФайлы(ИмяВременногоФайла); // Удалим временный файл, после его обработки.
	
	Возврат Адрес;
	
	Результат = ПродолжитьВызов();
	Возврат Результат;
	
КонецФункции

&Вместо("ПолучитьСекциюДокумент")
Функция СМП_ПолучитьСекциюДокумент(СтруктураДокумента, КоллекцияРеквизитов, ЗаполнятьПоказательТипа)
	
	Буфер = "";
	Реквизит = "";
	СтруктураДляЗаписи = СформироватьСтруктуруЭкспорта();
	ЗаполнитьЗначениеЭкспорта(СтруктураДляЗаписи, СтруктураДокумента);
	ДобавитьВСтроку(Буфер, "СекцияДокумент=" + СтруктураДокумента.ВидДокумента);
	Для каждого ВыгружаемыйРеквизит Из СтруктураДляЗаписи Цикл
		Значение = ПривестиЗначение(ВыгружаемыйРеквизит.Значение);
		Если НЕ ПустаяСтрока(Значение) Тогда
			Если НЕ ЗаполнятьПоказательТипа И ВыгружаемыйРеквизит.Ключ = "ПоказательТипа" Тогда
				ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Ключ + "="); // Секция должна выгружаться пустой, потому что в банках может остаться ПО, которое ожидает такой ключ.
			Иначе
				ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Ключ + "=" + Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ДобавитьВСтроку(Буфер, "КонецДокумента");
	
	Возврат Буфер;
	
	Результат = ПродолжитьВызов(СтруктураДокумента, КоллекцияРеквизитов);
	Возврат Результат;
	
КонецФункции

&Вместо("ПривестиЗначение")
Функция СМП_ПривестиЗначение(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат СокрЛП(Значение);		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Формат(Значение, "ДФ=dd.MM.yyyy");
	Иначе
		Возврат "";
	КонецЕсли;
	
	Результат = ПродолжитьВызов(Значение);
	Возврат Результат;
	
КонецФункции

&Вместо("СоздатьКонтрагента")
Функция СМП_СоздатьКонтрагента(СтрокаКонтрагент)
	
	СообщатьОСозданномКонтрагенте	  = Ложь;
	СообщатьОСозданномБанковскомСчете = Ложь;
	
	// Эти элементы есть у всех справочников.
	Если НЕ ТипЗнч(СтрокаКонтрагент.Реквизит) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
		
		НовыйЭлемент.Заполнить(Неопределено);
		
		НовыйЭлемент.Наименование = СтрокаКонтрагент.Представление;
		НовыйЭлемент.НаименованиеПолное = СтрокаКонтрагент.Представление;
		НовыйЭлемент.ИНН = СтрокаКонтрагент.ПолучитьЭлементы()[1].Значение;
		НовыйЭлемент.КПП = СтрокаКонтрагент.ПолучитьЭлементы()[2].Значение;
		
		Если СтрДлина(НовыйЭлемент.ИНН) = 12 Тогда
			НовыйЭлемент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
		Иначе
			НовыйЭлемент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
		КонецЕсли;
		
		НовыйЭлемент.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
		НовыйЭлемент.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
		НовыйЭлемент.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
		НовыйЭлемент.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
		
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, РасчетыРаботаСФормамиВызовСервера.ПолучитьЗначенияРеквизитовПоУмолчаниюДляНовогоКонтрагента());
		
		Если Константы.ОграничиватьДоступНаУровнеЗаписей.Получить() Тогда
			НовыйЭлемент.ГруппаДоступа = ГруппаДоступа;
		КонецЕсли;
		
		СтуркутураОтношений = Новый Структура();
		Обработки.КлиентБанк.ДобавитьИнформациюОбОтношенияхСКонтрагентомПоВидуОперации(СтуркутураОтношений, СтрокаКонтрагент.ВидОперации);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтуркутураОтношений);
		
		НовыйЭлемент.ВестиУчетОплатыПоСчетам = Истина;
		
		НовыйЭлемент.Записать();
		
		СообщатьОСозданномКонтрагенте = Истина;
		
	Иначе
		НовыйЭлемент = СтрокаКонтрагент.Реквизит.ПолучитьОбъект();
	КонецЕсли;
	
	Если СообщатьОСозданномКонтрагенте Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Контрагент (%1) создан.'"), СтрокаКонтрагент.Представление);
		
		Сообщение.Сообщить();
		
		ПредставлениеКонтрагента = "" + Символы.Таб + "- ";
		
	Иначе
		
		ПредставлениеКонтрагента = "Контрагенту (" + СтрокаКонтрагент.Представление + ")";
		
	КонецЕсли;
	
	Для каждого Строка Из СтрокаКонтрагент.ПолучитьЭлементы() Цикл
		
		СообщатьОСозданномБанковскомСчете = Ложь;
		
		Если Строка.Представление = "Р/счет" Тогда
			
			Попытка
				
				НомерСчета = Строка.Значение;
				
				НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				
				НовыйСчет.НомерСчета = НомерСчета;
				НовыйСчет.Владелец   = НовыйЭлемент.Ссылка;
				
				РССчет = Строка.ПолучитьЭлементы();
				
				Если НЕ НайтиЭлементДерева(РССчет, "Представление", "РЦ банка") = Неопределено Тогда
					
					// Банк контрагента.
					Если НЕ ПустаяСтрока(РССчет[0].Значение) Тогда
						
						НовыйБанк = НайтиБанкПоБикИКоррСчету("", РССчет[2].Значение);
						
						Если НовыйБанк = Справочники.Банки.ПустаяСсылка() Тогда
							НовыйБанк = Обработки.КлиентБанк.НайтиБанкПоМФОИСоздать(РССчет[2].Значение);
							Если НовыйБанк = Справочники.Банки.ПустаяСсылка() Тогда
								
								Сообщение = Новый СообщениеПользователю;
								
								Сообщение.Текст = НСтр("ru='Не найден банк в классификаторе с МФО '" + РССчет[2].Значение);
								
								Сообщение.Сообщить();
								
								ОбщегоНазначения.СообщитьПользователю(
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Попытка записи Контрагента не удалась по причине: %1'"),
								"Не найден банк в классификаторе с МФО " + РССчет[2].Значение));
								Возврат Неопределено;
								
							КонецЕсли;
							
						КонецЕсли;
						
						НовыйСчет.Банк = НовыйБанк.Ссылка;
						
					КонецЕсли;
					
					// РЦ банка контрагента.
					Если НЕ ПустаяСтрока(РССчет[3].Значение) Тогда
						
						НовыйБанкКорр = НайтиБанкПоБикИКоррСчету(РССчет[5].Значение, РССчет[6].Значение);
						
						Если НовыйБанкКорр = Справочники.Банки.ПустаяСсылка() Тогда
							
							НовыйБанкКорр = Обработки.КлиентБанк.НайтиБанкПоМФОИСоздать(РССчет[5].Значение);
							Если НовыйБанкКорр = Справочники.Банки.ПустаяСсылка() Тогда
								
								Сообщение = Новый СообщениеПользователю;
								
								Сообщение.Текст = НСтр("ru='Не найден банк в классификаторе с МФО '" + РССчет[5].Значение);
								
								Сообщение.Сообщить();
								
								ОбщегоНазначения.СообщитьПользователю(
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Попытка записи Контрагента не удалась по причине: %1'"),
								"Не найден банк в классификаторе с МФО " + РССчет[5].Значение));
								Возврат Неопределено;
								
							КонецЕсли;
							
						КонецЕсли;
						
						НовыйСчет.БанкРасчетов = НовыйБанкКорр.Ссылка;
						
					КонецЕсли;
					
				Иначе
					
					// Банк контрагента.
					НовыйБанк = НайтиБанкПоБикИКоррСчету(РССчет[2].Значение, РССчет[3].Значение);
					
					Если НовыйБанк = Справочники.Банки.ПустаяСсылка() Тогда
						НовыйБанк = Обработки.КлиентБанк.НайтиБанкПоМФОИСоздать(РССчет[2].Значение);
						Если НовыйБанк = Справочники.Банки.ПустаяСсылка() Тогда
							
							Сообщение = Новый СообщениеПользователю;
							
							Сообщение.Текст = НСтр("ru='Не найден банк в классификаторе с МФО '" + РССчет[2].Значение);
							
							Сообщение.Сообщить();
							
							ОбщегоНазначения.СообщитьПользователю(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Попытка записи Контрагента не удалась по причине: %1'"),
							"Не найден банк в классификаторе с МФО " + РССчет[2].Значение));
							Возврат Неопределено;
							
						КонецЕсли;
						
					КонецЕсли;
					
					НовыйСчет.Банк = НовыйБанк.Ссылка;
					
				КонецЕсли;
				
				НовыйСчет.ВидСчета = "Расчетный";
				НовыйСчет.ВалютаДенежныхСредств = БанковскийСчет.ВалютаДенежныхСредств;
				СтрокаНаименования = СокрЛП(НовыйСчет.НомерСчета) + ?(ЗначениеЗаполнено(НовыйСчет.Банк), ", в " + Строка(НовыйСчет.Банк), "");
				СтрокаНаименования = Лев(СтрокаНаименования, 100);
				НовыйСчет.Наименование = СтрокаНаименования;
				
				НовыйСчет.Записать();
				
				СообщатьОСозданномБанковскомСчете = Истина;
				
				НовыйЭлемент.БанковскийСчетПоУмолчанию = НовыйСчет.Ссылка;
				НовыйЭлемент.Записать();
				
			Исключение
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = НСтр("ru='Не удалось создать банковский счет контрагента!'");
				
				Сообщение.Сообщить();
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если СообщатьОСозданномБанковскомСчете Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 добавлен банковский счет (%2).'"), ПредставлениеКонтрагента, НомерСчета);
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
	Результат = ПродолжитьВызов(СтрокаКонтрагент);
	Возврат Результат;
	
КонецФункции

&Вместо("СформироватьСтруктуруЭкспорта")
Функция СМП_СформироватьСтруктуруЭкспорта()
	
	СтруктураЭкспорта = Новый структура;
	СтруктураЭкспорта.Вставить( "Выгружать",             ""); // "_",
	СтруктураЭкспорта.Вставить( "Готовность",            ""); // "Готовность",
	СтруктураЭкспорта.Вставить( "НомерДок",              ""); // "№ Документа",
	СтруктураЭкспорта.Вставить( "Номер",                 ""); // "Номер",
	СтруктураЭкспорта.Вставить( "Дата",                  ""); // "Дата",
	СтруктураЭкспорта.Вставить( "Операция",              ""); // "Операция",
	СтруктураЭкспорта.Вставить( "БанковскийСчет",        ""); // "Эл. Р/с организации",
	СтруктураЭкспорта.Вставить( "НомерСчетаОрганизации", ""); // "Р/с организации",
	СтруктураЭкспорта.Вставить( "Сумма",                 ""); // "Сумма",
	СтруктураЭкспорта.Вставить( "Контрагент",            ""); // "Контрагент",
	СтруктураЭкспорта.Вставить( "СчетКонтрагента",       ""); // "Р/с контрагента",
	СтруктураЭкспорта.Вставить( "НомерСчетаКонтрагента", ""); // "Эл. Р/с контрагента",
	СтруктураЭкспорта.Вставить( "КвитанцияДата",         ""); // "Дата форм. квитанции",
	СтруктураЭкспорта.Вставить( "КвитанцияВремя",        ""); // "Время форм. квитанции",
	СтруктураЭкспорта.Вставить( "КвитанцияСодержание",   ""); // "Содержание квитанции",
	СтруктураЭкспорта.Вставить( "ПлательщикСчет",        ""); // "Расчетный счет плательщика",
	СтруктураЭкспорта.Вставить( "Плательщик",            ""); // "Плательщик",
	СтруктураЭкспорта.Вставить( "ПлательщикИНН",         ""); // "ИНН плательщика",
	СтруктураЭкспорта.Вставить( "Плательщик1",           ""); // "Наименование плательщика",
	СтруктураЭкспорта.Вставить( "Плательщик2",           ""); // "Расчетный счет плательщика",
	СтруктураЭкспорта.Вставить( "Плательщик3",           ""); // "Банк плательщика",
	СтруктураЭкспорта.Вставить( "Плательщик4",           ""); // "Город банка плательщика",
	СтруктураЭкспорта.Вставить( "ПлательщикРасчСчет",    ""); // "Корсчет банка плательщика",
	СтруктураЭкспорта.Вставить( "ПлательщикБанк1",       ""); // "РЦ банка плательщика",
	СтруктураЭкспорта.Вставить( "ПлательщикБанк2",       ""); // "Город РЦ банка плательщика",
	СтруктураЭкспорта.Вставить( "ПлательщикБИК",         ""); // "БИК РЦ банка плательщика",
	СтруктураЭкспорта.Вставить( "ПлательщикКорсчет",     ""); // "Корсчет РЦ банка плат.",
	СтруктураЭкспорта.Вставить( "ПолучательСчет",        ""); // "Расчетный счет получателя",
	СтруктураЭкспорта.Вставить( "Получатель",            ""); // "Получатель",
	СтруктураЭкспорта.Вставить( "ПолучательИНН",         ""); // "ИНН получателя",
	СтруктураЭкспорта.Вставить( "Получатель1",           ""); // "Наименование получателя",
	СтруктураЭкспорта.Вставить( "Получатель2",           ""); // "Расчетный счет получателя",
	СтруктураЭкспорта.Вставить( "Получатель3",           ""); // "Банк получателя",
	СтруктураЭкспорта.Вставить( "Получатель4",           ""); // "Город банка получателя",
	СтруктураЭкспорта.Вставить( "ПолучательРасчСчет",    ""); // "Корсчет банка получателя",
	СтруктураЭкспорта.Вставить( "ПолучательБанк1",       ""); // "РЦ банка получателя",
	СтруктураЭкспорта.Вставить( "ПолучательБанк2",       ""); // "Город РЦ банка получателя",
	СтруктураЭкспорта.Вставить( "ПолучательБИК",         ""); // "БИК РЦ банка получателя",
	СтруктураЭкспорта.Вставить( "ПолучательКорсчет",     ""); // "Корсчет РЦ банка пол.",
	СтруктураЭкспорта.Вставить( "ВидПлатежа",            ""); // "Вид платежа",
	СтруктураЭкспорта.Вставить( "ВидОплаты",             ""); // "Вид оплаты",
	СтруктураЭкспорта.Вставить( "СтатусСоставителя",     ""); // "Статус составителя",
	СтруктураЭкспорта.Вставить( "ПлательщикКПП",         ""); // "КПП плательщика",
	СтруктураЭкспорта.Вставить( "ПолучательКПП",         ""); // "КПП получателя",
	СтруктураЭкспорта.Вставить( "ПоказательКБК",         ""); // "Показатель КБК",
	СтруктураЭкспорта.Вставить( "ОКАТО",                 ""); // "ОКАТО",
	СтруктураЭкспорта.Вставить( "ПоказательОснования",   ""); // "Показатель основания",
	СтруктураЭкспорта.Вставить( "ПоказательПериода",     ""); // "Показатель нал. периода",
	СтруктураЭкспорта.Вставить( "ПоказательНомера",      ""); // "Показатель номера док.",
	СтруктураЭкспорта.Вставить( "ПоказательДаты",        ""); // "Показатель даты док.",
	
	Если ВерсияФормата < "1.03" Тогда // С 01.01.2015 не используется
		СтруктураЭкспорта.Вставить("ПоказательТипа",     ""); // "Пок. типа платежа"
	КонецЕсли;
	
	СтруктураЭкспорта.Вставить( "Очередность",           ""); // "Очередность платежа",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа",     ""); // "Назначение платежа",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа1",    ""); // "Назначение платежа, стр. 1",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа2",    ""); // "Назначение платежа, стр. 2",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа3",    ""); // "Назначение платежа, стр. 3",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа4",    ""); // "Назначение платежа, стр. 4",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа5",    ""); // "Назначение платежа, стр. 5",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа6",    ""); // "Назначение платежа, стр. 6",
	СтруктураЭкспорта.Вставить( "Документ",              ""); // "Источник",
	СтруктураЭкспорта.Вставить( "СекцияДокумент",        ""); // "Выгрузка",
	СтруктураЭкспорта.Вставить( "ОписаниеОшибок",        ""); // "Замечания",
	СтруктураЭкспорта.Вставить( "ТипДокумента",          ""); // "Тип пл. документа"
	
	Если ВерсияФормата >= "1.02" Тогда
		СтруктураЭкспорта.Вставить("Код", ""); // "Уникальный идентификатор платежа"
	КонецЕсли;
	
	Возврат СтруктураЭкспорта;
	
	Результат = ПродолжитьВызов();
	Возврат Результат;
	
КонецФункции

&Вместо("ЗаписатьОбъект")
Процедура СМП_ЗаписатьОбъект(ОбъектДляЗаписи, СтрокаСекции, ЭтоНовыйДокумент, ТаблицаРезультата, ЕстьПредупреждения, ВыдаватьСообщения, СтрокаИзмененныхРеквизитов)
	
	
	ТипДокумента = ОбъектДляЗаписи.Метаданные().Имя;
	Если ТипДокумента = "РасходСоСчета" Тогда
		Если ЗаполнятьДолгиАвтоматически И СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
			И СтрокаСекции.СпособЗачетаТЧ <> Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
			КлиентБанкСервер.ЗаполнитьРасшифровкуПлатежаРасход(ОбъектДляЗаписи,,,,, СтрокаСекции.Договор);
		КонецЕсли;
	ИначеЕсли ТипДокумента = "ПоступлениеНаСчет" Тогда
		Если ЗаполнятьДолгиАвтоматически И СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя
			И СтрокаСекции.СпособЗачетаТЧ <> Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
			КлиентБанкСервер.ЗаполнитьРасшифровкуПлатежаПриход(ОбъектДляЗаписи,,,,, СтрокаСекции.Договор);
		КонецЕсли;
	КонецЕсли;
	УстановитьСвойство(
		ОбъектДляЗаписи,
		"НазначениеПлатежа",
		СтрокаСекции.НазначениеПлатежа,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	УстановитьСвойство(
		ОбъектДляЗаписи,
		"Автор",
		Пользователи.ТекущийПользователь(),
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен = ОбъектДляЗаписи.Проведен;
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);
	
	Если ОбъектМодифицирован Тогда
		Попытка
			Если ОбъектПроведен Тогда
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
				// Очистим дополнительные свойства самого документа и всех наборов записей.
				ОбъектДляЗаписи.ДополнительныеСвойства.Очистить();
				Для Каждого НаборЗаписей Из ОбъектДляЗаписи.Движения Цикл
					НаборЗаписей.ДополнительныеСвойства.Очистить();
				КонецЦикла;
			Иначе
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			Если ЭтоНовыйДокумент Тогда
				СтрокаСекции.Документ = ОбъектДляЗаписи.Ссылка;
			КонецЕсли;
			
			ТекстСообщения = НСтр("ru = '%Статус%%НазваниеОбъекта%.'; uk = '%Статус%%НазваниеОбъекта%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%" , ?(ЭтоНовыйДокумент, НСтр("ru = 'Создан '; uk = 'Створений '"), НСтр("ru = 'Перезаписан '; uk = 'Перезаписаний '")));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъекта%", НазваниеОбъекта);
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru = 'Комментарий'; uk = 'Коментар'"), ЭтоНовыйДокумент, Истина, 
				?(ЭтоНовыйДокумент, НСтр("ru = '• Создан новый документ'; uk = '• Створений новий документ'"), НСтр("ru = '• Перезаписан документ'; uk = '• Перезаписаний документ'")), "",,, 
				?(ЭтоНовыйДокумент, "", СтрокаИзмененныхРеквизитов));
			
			// Запись истории выбранных значений для последующей автоматической подстановки.
			// Сохраняем информацию о выборе пользователя, если его выбор отличается от значения по умолчанию.
			Если ТипЗнч(СтрокаСекции.Контрагент) = Тип("СправочникСсылка.Контрагенты") И
				(
				СтрокаСекции.Договор <> СтрокаСекции.ДоговорИсходноеЗначение ИЛИ
				СтрокаСекции.Корреспонденция <> СтрокаСекции.КорреспонденцияИсходноеЗначение ИЛИ
				СтрокаСекции.ВидОперации <> СтрокаСекции.ВидОперацииИсходноеЗначение ИЛИ
				СтрокаСекции.СтатьяДДС <> СтрокаСекции.СтатьяДДСИсходноеЗначение
				)Тогда
				
				НаборЗаписейИстории = РегистрыСведений.ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.СоздатьНаборЗаписей();
				
				НаборЗаписейИстории.Отбор.Контрагент.Установить(СтрокаСекции.Контрагент);
				НаборЗаписейИстории.Отбор.БанковскийСчетКонтрагента.Установить(СтрокаСекции.СчетКонтрагента);
				НаборЗаписейИстории.Отбор.БанковскийСчетОрганизации.Установить(БанковскийСчет);
				НаборЗаписейИстории.Отбор.Документ.Установить(ОбъектДляЗаписи.Ссылка);
				НаборЗаписейИстории.Отбор.Исходящий.Установить(СтрокаСекции.Исходящий);
				
				ЗаписьИстории = НаборЗаписейИстории.Добавить();
				// Измерения.
				ЗаписьИстории.Контрагент = СтрокаСекции.Контрагент;
				ЗаписьИстории.БанковскийСчетКонтрагента = СтрокаСекции.СчетКонтрагента;
				ЗаписьИстории.БанковскийСчетОрганизации = БанковскийСчет;
				ЗаписьИстории.Документ = ОбъектДляЗаписи.Ссылка;
				ЗаписьИстории.Исходящий = СтрокаСекции.Исходящий;
				// Ресурсы.
				ЗаписьИстории.Договор = СтрокаСекции.Договор;
				ЗаписьИстории.ВидОперации = СтрокаСекции.ВидОперации;
				ЗаписьИстории.СтатьяДДС = СтрокаСекции.СтатьяДДС;
				ЗаписьИстории.Корреспонденция = СтрокаСекции.Корреспонденция;
				ЗаписьИстории.ДатаЗагрузкиЧислом = Год(ТекущаяДатаСеанса())*10000 + Месяц(ТекущаяДатаСеанса())*100 + День(ТекущаяДатаСеанса());
				
				НаборЗаписейИстории.Записать(Истина);
				
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред% %Статус%! Произошли ошибки при записи!'; uk = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред% %Статус%! Відбулись помилки при запису!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", ?(ОбъектДляЗаписи.ЭтоНовый(), НСтр("ru = ' не создан'; uk = ' не створений'"), НСтр("ru = ' не записан'; uk = ' не записаний'")));
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
			КонецЕсли;
			ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru = 'Ошибка при загрузке'; uk = 'Помилка при завантаженні'"), ЭтоНовыйДокумент, Ложь, ТекстСообщения, ОписаниеОшибки());
			ЕстьПредупреждения = Истина;
			Возврат;
		КонецПопытки;
	Иначе
		ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред% не перезаписан, т.к. данные в нем не менялись. Возможно загрузка производилась ранее.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
		Если ВыдаватьСообщения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru='Комментарий'"), ЭтоНовыйДокумент, Ложь, "• Не перезаписан", ТекстСообщения);
		ЕстьПредупреждения = Истина;
	КонецЕсли;
	
	Если ПроводитьЗагружаемые И (ОбъектМодифицирован ИЛИ НЕ ОбъектПроведен) 
		Тогда
		
		Попытка
			ОшибкиНеОбнаружены = ОбъектДляЗаписи.ПроверитьЗаполнение();
			Если ОшибкиНеОбнаружены Тогда
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
				ТекстСообщения = НСтр("ru = '%Статус%%НазваниеОбъекта%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", ?(ОбъектПроведен, НСтр("ru = 'Перепроведен '"), НСтр("ru = 'Проведен '")));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъекта%", НазваниеОбъекта);
				Если ВыдаватьСообщения Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
				ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru='Комментарий'"), ЭтоНовыйДокумент, Истина, 
					?(ОбъектПроведен, НСтр("ru = '• Перепроведен '"), НСтр("ru = '• Проведен '")), ТекстСообщения);
			Иначе
				ТекстСообщения = НСтр("ru = '%Статус% %НазваниеОбъекта% %Статус%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", НСтр("ru = 'Не проведен '"));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъекта%", НазваниеОбъекта);
				ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Заполнены не все реквизиты'");
				Если ВыдаватьСообщения Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
				ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru='Комментарий'"),
					ЭтоНовыйДокумент, Истина, НСтр(
					"ru = '• Произошли ошибки при проведении (заполнены не все реквизиты).'"), ТекстСообщения, , 1);
				ЕстьПредупреждения = Истина;
			КонецЕсли;
		Исключение
			// Поищем сообщения об ошибках.
			ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред% не проведен. Произошли ошибки при проведении.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru='Ошибка при загрузке'"), ЭтоНовыйДокумент, Ложь, 
				НСтр("ru = '• Произошли ошибки при проведении!'"), ТекстСообщения,, 1);
			ЕстьПредупреждения = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	ПродолжитьВызов(ОбъектДляЗаписи, СтрокаСекции, ЭтоНовыйДокумент);
	
КонецПроцедуры

&Вместо("ЗаполнитьЗначениеЭкспорта")
Процедура СМП_ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта)
	
	Плательщик = "Организация";
	Получатель = "Контрагент";
	
	СтрокаЭкспорта.Номер = УправлениеНебольшойФирмойКлиентСервер.НомерДокументаБезЛидирующихНулей(ВыборкаДляЭкспорта.Номер, Истина, Истина);
	
	СтрокаЭкспорта.Дата = ВыборкаДляЭкспорта.Дата;
	СтрокаЭкспорта.Сумма = Формат(ВыборкаДляЭкспорта.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
	СтрокаЭкспорта.ПлательщикСчет = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
	СтрокаЭкспорта.ПолучательСчет = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
	СтрокаЭкспорта.ВидПлатежа = ВыборкаДляЭкспорта.ВидПлатежа;
	НепрямыеРасчетыУПлательщика = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"]);
	НепрямыеРасчетыУПолучателя  = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"]);
	
	// ВидОплаты.
	СтрокаЭкспорта.ВидОплаты = "01";
	
	// Плательщик1.
	ТекстПлательщика = "";
	Если НепрямыеРасчетыУПлательщика Тогда
		ПозицияРС = СтрНайти(ВыборкаДляЭкспорта["ТекстПлательщика"], "р/с"); 
		Если ПозицияРС = 0 Тогда
			ТекстПлательщика = ВыборкаДляЭкспорта["ТекстПлательщика"];
		Иначе
			ТекстПлательщика = СокрЛП((Лев(ВыборкаДляЭкспорта["ТекстПлательщика"], ПозицияРС - 1)));
		КонецЕсли;
	Иначе
		ТекстПлательщика = ВыборкаДляЭкспорта["ТекстПлательщика"];
	КонецЕсли;
	СтрокаЭкспорта.Плательщик1 = ТекстПлательщика;
	
	// Плательщик, ПлательщикИНН.
	Значение = ВыборкаДляЭкспорта.ИННПлательщика;
	Если ПустаяСтрока(Значение) Тогда
		Значение = ВыборкаДляЭкспорта[Плательщик + "ИНН"];
	КонецЕсли;
	СтрокаЭкспорта.ПлательщикИНН = Значение;
	СтрокаЭкспорта.Плательщик = "ИНН " + Значение + " " + СтрокаЭкспорта.Плательщик1;
	
	// ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК,
	// ПлательщикКорсчет, Плательщик2, Плательщик3, Плательщик4.
	Если НепрямыеРасчетыУПлательщика Тогда
		СтрокаЭкспорта.Плательщик2 		  = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
		СтрокаЭкспорта.Плательщик3 		  = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.Плательщик4 		  = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.Плательщик 		  = СтрокаЭкспорта.Плательщик + " р/с " + СтрокаЭкспорта.Плательщик2 + " в " + СтрокаЭкспорта.Плательщик3 + " " + СтрокаЭкспорта.Плательщик4;
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородРЦБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКРЦБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
	КонецЕсли;
	
	// Получатель1.
	ТекстПолучателя = "";
	Если НепрямыеРасчетыУПолучателя Тогда
		ПозицияРС = СтрНайти(ВыборкаДляЭкспорта["ТекстПолучателя"], "р/с");
		Если ПозицияРС = 0 Тогда
			ТекстПолучателя = ВыборкаДляЭкспорта["ТекстПолучателя"];
		Иначе
			ТекстПолучателя = СокрЛП((Лев(ВыборкаДляЭкспорта["ТекстПолучателя"], ПозицияРС-1)));
		КонецЕсли;
	Иначе
		ТекстПолучателя = ВыборкаДляЭкспорта["ТекстПолучателя"];
	КонецЕсли;
	СтрокаЭкспорта.Получатель1 = ТекстПолучателя;
	
	// Получатель, ПолучательИНН.
	Значение = ВыборкаДляЭкспорта.ИННПолучателя;
	Если ПустаяСтрока(Значение) Тогда
		Значение = ВыборкаДляЭкспорта[Получатель + "ИНН"];
	КонецЕсли;
	СтрокаЭкспорта.ПолучательИНН = Значение;
	СтрокаЭкспорта.Получатель = "ИНН " + Значение + " " + СтрокаЭкспорта.Получатель1;
	
	// ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК,
	// ПолучательКорсчет, Получатель2, Получатель3, Получатель4.
	Если НепрямыеРасчетыУПолучателя Тогда
		СтрокаЭкспорта.Получатель2 		  = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
		СтрокаЭкспорта.Получатель3 		  = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.Получатель4 		  = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.Получатель 		  = СтрокаЭкспорта.Получатель	  + " р/с " + СтрокаЭкспорта.Получатель2 + " в " + СтрокаЭкспорта.Получатель3 + " " + СтрокаЭкспорта.Получатель4;
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
		СтрокаЭкспорта.ПолучательБанк1    = ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородРЦБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКРЦБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
		СтрокаЭкспорта.ПолучательБанк1    = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
	КонецЕсли;
	
	// ПлательщикКПП.
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
		СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
	КонецЕсли;
	
	// ПолучательКПП.
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
		СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
	КонецЕсли;
	
	// СтатусСоставителя, ПлательщикКПП, ПолучательКПП, ПоказательКБК, ОКАТО
	// ПоказательОснования, ПоказательПериода, ПоказательНомера, ПоказательДаты,
	// ПоказательТипа.
	Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога Тогда
		СтрокаЭкспорта.СтатусСоставителя = ВыборкаДляЭкспорта.СтатусСоставителя;
		Если ПустаяСтрока(СтрокаЭкспорта.СтатусСоставителя) Тогда
			СтрокаЭкспорта.СтатусСоставителя = "0";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = "0";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = "0";
		КонецЕсли;
		СтрокаЭкспорта.ПоказательКБК = ВыборкаДляЭкспорта.КодБК;
		СтрокаЭкспорта.ОКАТО         = ВыборкаДляЭкспорта.КодОКАТО;
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательОснования) Тогда
			СтрокаЭкспорта.ПоказательОснования = "0";
		Иначе
			СтрокаЭкспорта.ПоказательОснования = ВыборкаДляЭкспорта.ПоказательОснования;
		КонецЕсли;
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательПериода) ИЛИ (ВыборкаДляЭкспорта.ПоказательПериода = "  .  .    ") Тогда
			СтрокаЭкспорта.ПоказательПериода = "0";
		Иначе
			СтрокаЭкспорта.ПоказательПериода = ВыборкаДляЭкспорта.ПоказательПериода;
		КонецЕсли;
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательНомера) Тогда
			СтрокаЭкспорта.ПоказательНомера = "0";
		Иначе
			СтрокаЭкспорта.ПоказательНомера = ВыборкаДляЭкспорта.ПоказательНомера;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаДляЭкспорта.ПоказательДаты) Тогда
			СтрокаЭкспорта.ПоказательДаты = "0";
		Иначе
			СтрокаЭкспорта.ПоказательДаты = Формат(ВыборкаДляЭкспорта.ПоказательДаты,"ДЛФ=Д");
		КонецЕсли;
		ПоказательТипаПредусмотренСтандартамиОбмена = СтрокаЭкспорта.Свойство("ПоказательТипа");
		ПоказательТипаНеВыгружается = ВыборкаДляЭкспорта.Дата >= '20150101'; // Приказ Минфина №126н от 30.10.2014.
		Если ПоказательТипаПредусмотренСтандартамиОбмена Тогда
			Если ПоказательТипаНеВыгружается ИЛИ ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательТипа) Тогда
				СтрокаЭкспорта.ПоказательТипа = "0";
			Иначе
				СтрокаЭкспорта.ПоказательТипа = ВыборкаДляЭкспорта.ПоказательТипа;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КодПредусмотренСтандартамиОбмена = СтрокаЭкспорта.Свойство("Код");
	КодВыгружаетсяВОтдельномПоле = (ВыборкаДляЭкспорта.Дата >= '20140331');
	Если КодВыгружаетсяВОтдельномПоле И КодПредусмотренСтандартамиОбмена Тогда
		
		Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога
			И ПустаяСтрока(ВыборкаДляЭкспорта.ИдентификаторПлатежа) Тогда
			СтрокаЭкспорта.Код = "0"; // требования 107н
		Иначе
			СтрокаЭкспорта.Код = ВыборкаДляЭкспорта.ИдентификаторПлатежа; // только требования 383-П
		КонецЕсли;
		
	КонецЕсли;
	
	// Очередность.
	СтрокаЭкспорта.Очередность = "" + ВыборкаДляЭкспорта.ОчередностьПлатежа;
	
	// НазначениеПлатежа, НазначениеПлатежа1, НазначениеПлатежа2, НазначениеПлатежа3,
	// НазначениеПлатежа4, НазначениеПлатежа5, НазначениеПлатежа6.
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(
		СтрЗаменить(
			СтрЗаменить(
				ВыборкаДляЭкспорта.НазначениеПлатежа,
				Символы.ПС,
				" "),
			Символы.ВК,
			""),
		Символы.ПФ,
		""
	);
	КоличествоСтрокНП = СтрЧислоСтрок(ВыборкаДляЭкспорта.НазначениеПлатежа);
	Если КоличествоСтрокНП > 6 Тогда
		КоличествоСтрокНП = 6;
	КонецЕсли;
	Для Сч = 1 По КоличествоСтрокНП Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = СтрПолучитьСтроку(ВыборкаДляЭкспорта.НазначениеПлатежа, Сч);
	КонецЦикла;
	Для Сч = (КоличествоСтрокНП + 1) По 6 Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = "";
	КонецЦикла;
	
	ПродолжитьВызов(СтрокаЭкспорта, ВыборкаДляЭкспорта);
	
КонецПроцедуры

&Вместо("ЗаполнитьРеквизитыПоступлениеНаСчет")
Процедура СМП_ЗаполнитьРеквизитыПоступлениеНаСчет(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов)
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Дата",
		?(НачалоДня(ИсходныеДанные.ДатаДок) = НачалоДня(ТекущаяДатаСеанса()), ТекущаяДатаСеанса(), КонецДня(ИсходныеДанные.ДатаДок)),
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ВидОперации",
		ИсходныеДанные.ВидОперации,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Организация",
		Организация,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"БанковскийСчет",
		ИсходныеДанные.БанковскийСчет,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	// Перемещение денег
	УстановитьСвойство(
		ОбъектДокумента,
		"Касса",
		ИсходныеДанные.Касса,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	// Конец Перемещение денег
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ВалютаДенежныхСредств",
		ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Статья",
		ИсходныеДанные.СтатьяДДС,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"СуммаДокумента",
		ИсходныеДанные.СуммаДокумента,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"НомерВходящегоДокумента",
		ИсходныеДанные.НомерДок,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ДатаВходящегоДокумента",
		ИсходныеДанные.ДатаДок,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	Если ЭтоНовыйДокумент Тогда
		ОбъектДокумента.УстановитьНовыйНомер();
		ОбъектДокумента.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , ИсходныеДанные.ДатаДок);
	КонецЕсли;
	
	// Заполнение табличной части документа.
	Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя
	 ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика
	 ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты
	Тогда
	 
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		Иначе
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
		
		УстановитьСвойство(
			СтрокаРасшифровки,
			"Договор",
			?(ИсходныеДанные.Договор = "Не найден", Неопределено, ИсходныеДанные.Договор),
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ЭтоНовыйДокумент ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.Документ) Тогда
			УстановитьСвойство(
				СтрокаРасшифровки,
				"ПризнакАванса",
				ИсходныеДанные.ПризнакАванса,
				Истина,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		СтрокаРасшифровки.Документ = Неопределено;
		
		// Заполнение табличной части документа.
		Если ЭтоНовыйДокумент
		 ИЛИ ОднаСтрокаВРасшифровкеПлатежа
		   И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
			
			СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
			ДатаЗаполнения = ОбъектДокумента.Дата;
			ВалютаРасчетов = СтрокаРасшифровки.Договор.ВалютаРасчетов;
			
			РассчитатьКурсИСуммуРасчетов(
				СтрокаРасшифровки,
				ВалютаРасчетов,
				ДатаЗаполнения,
				ОбъектДокумента,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
			
			Если СтрокаРасшифровки.Курс = 0 Тогда
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"Курс",
					1,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов
				);
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"Кратность",
					1,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов
				);
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"СуммаРасчетов",
					СтрокаРасшифровки.СуммаПлатежа,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов
				);
				
			КонецЕсли;
			
			Если ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
				
				СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(ОбъектДокумента.Организация.ВидСтавкиНДСПоУмолчанию);
				
				// Поищем ставку НДС в назначении платежа.
				Если СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС 18%") > 0 ИЛИ
					СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС(18%)") > 0 ИЛИ
					СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС (18%)") > 0 Тогда
					СтавкаНДСВНазначенииПлатежа = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(18);
					ЗначениеСтавкиНДС = 18;
				ИначеЕсли СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС 10%") > 0 ИЛИ
					СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС(10%)") > 0 ИЛИ
					СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС (10%)") > 0 Тогда
					СтавкаНДСВНазначенииПлатежа = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(10);
					ЗначениеСтавкиНДС = 10;
				Иначе
					СтавкаНДСВНазначенииПлатежа = Неопределено;
					ЗначениеСтавкиНДС = 0;
				КонецЕсли;
				
				Если ЗначениеСтавкиНДС = 0 ИЛИ СтавкаНДСВНазначенииПлатежа = Неопределено Тогда
					ЗначениеСтавкиНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
				Иначе
					СтавкаНДСПоУмолчанию = СтавкаНДСВНазначенииПлатежа;
				КонецЕсли;
				
				СтрокаРасшифровки.СтавкаНДС = СтавкаНДСПоУмолчанию;
				СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа
					- (СтрокаРасшифровки.СуммаПлатежа)
					/ ((ЗначениеСтавкиНДС + 100) / 100);
				
			Иначе
				
				Если ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
				Иначе
					СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
				КонецЕсли;
				
				СтрокаРасшифровки.СтавкаНДС = СтавкаНДСПоУмолчанию;
				СтрокаРасшифровки.СуммаНДС = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Способ зачета
		Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
			УстановитьСвойство(
				СтрокаРасшифровки,
				"СпособЗачета",
				ИсходныеДанные.СпособЗачетаТЧ,
				Истина,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		// Заполним информацию о заказе, счете и расчетном документе.
		Если ИсходныеДанные.СпособЗачетаТЧ <> ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто")
			И (ЭтоНовыйДокумент ИЛИ ОднаСтрокаВРасшифровкеПлатежа) Тогда
			ЗаполнитьИнформациюОЗаказеСчетеДокументеРасчетов(ЭтоНовыйДокумент, ОбъектДокумента, ИсходныеДанные, СтрокаРасшифровки, Истина, СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
		// Корреспонденция
		Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"Корреспонденция",
				ИсходныеДанные.Корреспонденция,
				Истина,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее Тогда
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Корреспонденция",
			ИсходныеДанные.Корреспонденция,
			Истина,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты Тогда
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Корреспонденция",
			ИсходныеДанные.Корреспонденция,
			Истина,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		Иначе
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		
		УстановитьСвойство(
			СтрокаРасшифровки,
			"Договор",
			?(ИсходныеДанные.Договор = "Не найден", Неопределено, ИсходныеДанные.Договор),
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета Тогда
		
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам Тогда
		
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ОбъектДокумента.ЭквайринговыйТерминал.Пустая() Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"ЭквайринговыйТерминал",
				Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчаниюДляОперацииЭквайринга(
					ОбъектДокумента.БанковскийСчет, ОбъектДокумента.Организация, ОбъектДокумента.Контрагент),
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
	КонецЕсли;
	
	ПродолжитьВызов(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент);
	
КонецПроцедуры

&Вместо("ЗаполнитьРеквизитыРасходСоСчета")
Процедура СМП_ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов)
	
	ТекущийДокументПланирования = Неопределено;
	
	// Платежное поручение укажем в качестве основания.
	Если ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение) Тогда
		
		ОбъектДокумента.Заполнить(ИсходныеДанные.ПлатежноеПоручение);
		
		УстановитьСвойство(
			ОбъектДокумента,
			"ДокументОснование",
			ИсходныеДанные.ПлатежноеПоручение,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ИсходныеДанные.ПлатежноеПоручение.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение.РасшифровкаПлатежа[0].ДокументПланирования) Тогда
				ТекущийДокументПланирования = ИсходныеДанные.ПлатежноеПоручение.РасшифровкаПлатежа[0].ДокументПланирования;
			ИначеЕсли ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение.ДокументОснование) И
				ТипЗнч(ИсходныеДанные.ПлатежноеПоручение.ДокументОснование) = Тип("ДокументСсылка.РасходДСПлан") Тогда
				ТекущийДокументПланирования = ИсходныеДанные.ПлатежноеПоручение.ДокументОснование
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение шапки документа.
	УстановитьСвойство(
		ОбъектДокумента,
		"Дата",
		?(НачалоДня(ИсходныеДанные.ДатаДок) = НачалоДня(ТекущаяДатаСеанса()), ТекущаяДатаСеанса(), КонецДня(ИсходныеДанные.ДатаДок)),
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ВидОперации",
		ИсходныеДанные.ВидОперации,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Организация",
		Организация,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"БанковскийСчет",
		ИсходныеДанные.БанковскийСчет,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	// Перемещение денег
	УстановитьСвойство(
		ОбъектДокумента,
		"Касса",
		ИсходныеДанные.Касса,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	// Конец Перемещение денег
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ВалютаДенежныхСредств",
		ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Статья",
		ИсходныеДанные.СтатьяДДС,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"СуммаДокумента",
		ИсходныеДанные.СуммаДокумента,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"НомерВходящегоДокумента",
		ИсходныеДанные.НомерДок,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ДатаВходящегоДокумента",
		ИсходныеДанные.ДатаДок,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	Если ЭтоНовыйДокумент Тогда
		ОбъектДокумента.УстановитьНовыйНомер();
		
		// Поищем вид налогообложения в назначении платежа.
		Если СтрНайти(ВРег(ИсходныеДанные.НазначениеПлатежа), ВРег(НСтр("ru = 'НДС не облагается'; uk = 'ПДВ не обкладається'"))) > 0 ИЛИ 
			СтрНайти(ВРег(ИсходныеДанные.НазначениеПлатежа), ВРег(НСтр("ru = 'Без НДС'; uk = 'Без ПДВ'"))) > 0 ИЛИ
			СтрНайти(ВРег(ИсходныеДанные.НазначениеПлатежа), ВРег(НСтр("ru = 'Без налога (НДС)'; uk = 'Без податку (ПДВ)'"))) > 0 ИЛИ
			СтрНайти(ВРег(ИсходныеДанные.НазначениеПлатежа), ВРег(НСтр("ru = 'НДС не предусмотрен'; uk = 'ПДВ не передбачений'"))) > 0
		Тогда
			ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
		// Иначе установим налогообложение по умолчанию.
		Иначе
			ОбъектДокумента.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , ИсходныеДанные.ДатаДок);
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение табличной части документа.
	Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
	 ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю
	 ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
		Тогда
		
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		Иначе
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
		
		УстановитьСвойство(
			СтрокаРасшифровки,
			"Договор",
			?(ИсходныеДанные.Договор = "Не найден", Неопределено, ИсходныеДанные.Договор),
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ЭтоНовыйДокумент ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.Документ) Тогда
			УстановитьСвойство(
				СтрокаРасшифровки,
				"ПризнакАванса",
				ИсходныеДанные.ПризнакАванса,
				Истина,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		СтрокаРасшифровки.Документ = Неопределено;
	
		Если ЭтоНовыйДокумент
		 ИЛИ ОднаСтрокаВРасшифровкеПлатежа
		   И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
			СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
			ДатаЗаполнения = ОбъектДокумента.Дата;
			ВалютаРасчетов = СтрокаРасшифровки.Договор.ВалютаРасчетов;
			
			РассчитатьКурсИСуммуРасчетов(
				СтрокаРасшифровки,
				ВалютаРасчетов,
				ДатаЗаполнения,
				ОбъектДокумента,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
			
			Если СтрокаРасшифровки.Курс = 0 Тогда
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"Курс",
					1,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов
				);
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"Кратность",
					1,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов
				);
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"СуммаРасчетов",
					СтрокаРасшифровки.СуммаПлатежа,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов
				);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение) Тогда
				СтрокаРасшифровки.СтавкаНДС = ИсходныеДанные.ПлатежноеПоручение.СтавкаНДС;
				
				Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
					ЗначениеСтавкиНДС = 0;
					ОпределитьСтавкуНДСПоНазначениюПлатежа(ИсходныеДанные, СтрокаРасшифровки.СтавкаНДС, ЗначениеСтавкиНДС);
				Иначе
					ЗначениеСтавкиНДС = ИсходныеДанные.ПлатежноеПоручение.СтавкаНДС.Ставка;
				КонецЕсли;
				
				СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа
					- (СтрокаРасшифровки.СуммаПлатежа)
					/ ((ЗначениеСтавкиНДС + 100) / 100);
			Иначе
				Если ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					
					СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(ОбъектДокумента.Организация.ВидСтавкиНДСПоУмолчанию);
					
					Если ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
						// Поищем ставку НДС в назначении платежа.
						СтавкаНДСВНазначенииПлатежа = Неопределено;
						ЗначениеСтавкиНДС = 0;
						ОпределитьСтавкуНДСПоНазначениюПлатежа(ИсходныеДанные, СтавкаНДСВНазначенииПлатежа, ЗначениеСтавкиНДС);
					Иначе
						СтавкаНДСВНазначенииПлатежа = Неопределено;
						ЗначениеСтавкиНДС = 0;
					КонецЕсли;
					
					Если ЗначениеСтавкиНДС = 0 ИЛИ СтавкаНДСВНазначенииПлатежа = Неопределено Тогда
						ЗначениеСтавкиНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
					Иначе
						СтавкаНДСПоУмолчанию = СтавкаНДСВНазначенииПлатежа;
					КонецЕсли;
					
					СтрокаРасшифровки.СтавкаНДС = СтавкаНДСПоУмолчанию;
					СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа
						- (СтрокаРасшифровки.СуммаПлатежа)
						/ ((ЗначениеСтавкиНДС + 100) / 100);
					
				Иначе
					
					Если ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
						СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
					Иначе
						СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
					КонецЕсли;
					
					СтрокаРасшифровки.СтавкаНДС = СтавкаНДСПоУмолчанию;
					СтрокаРасшифровки.СуммаНДС = 0;
					
				КонецЕсли;
				
			КонецЕсли; // Если ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение) Тогда
			
		КонецЕсли;
		
		// Способ зачета
		Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
			УстановитьСвойство(
				СтрокаРасшифровки,
				"СпособЗачета",
				ИсходныеДанные.СпособЗачетаТЧ,
				Истина,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		// Заполним информацию о заказе, счете и расчетном документе.
		Если ИсходныеДанные.СпособЗачетаТЧ <> ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто")
			И (ЭтоНовыйДокумент ИЛИ ОднаСтрокаВРасшифровкеПлатежа) Тогда
			ЗаполнитьИнформациюОЗаказеСчетеДокументеРасчетов(ЭтоНовыйДокумент, ОбъектДокумента, ИсходныеДанные, СтрокаРасшифровки, Истина, СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
		Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"Корреспонденция",
				ИсходныеДанные.Корреспонденция,
				Истина,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее
		ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы Тогда
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Корреспонденция",
			ИсходныеДанные.Корреспонденция,
			Истина,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет Тогда
		
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда
		
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
		
		Если ОбъектДокумента.ЭквайринговыйТерминал.Пустая() Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"ЭквайринговыйТерминал",
				Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчаниюДляОперацииЭквайринга(
					ОбъектДокумента.БанковскийСчет, ОбъектДокумента.Организация, ОбъектДокумента.Контрагент),
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя Тогда
		УстановитьСвойство(
			ОбъектДокумента,
			"Корреспонденция",
			ПланыСчетов.Управленческий.НераспределеннаяПрибыль,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов
		);
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги Тогда
		Если ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение) Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"ВидНалога",
				УправлениеНебольшойФирмойСервер.ЗначениеРеквизитаОбъекта(ИсходныеДанные.ПлатежноеПоручение, "Налог"),
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
		КонецЕсли;
	КонецЕсли;
		
	Если ТекущийДокументПланирования <> Неопределено Тогда
		Для Каждого ТекущаяСтрокаРасшифровки Из ОбъектДокумента.РасшифровкаПлатежа Цикл
			ТекущаяСтрокаРасшифровки.ДокументПланирования = ТекущийДокументПланирования;
		КонецЦикла;
	КонецЕсли;
	
	ПродолжитьВызов(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент);
	
КонецПроцедуры

&Вместо("РассчитатьКурсИСуммуРасчетов")
Процедура СМП_РассчитатьКурсИСуммуРасчетов(СтрокаПлатеж, ВалютаРасчетов, ДатаКурса, ОбъектДокумента, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов)
	
	СтруктураКурсаРасчетов = ПолучитьКурсВалюты(ВалютаРасчетов, ДатаКурса);
	СтруктураКурсаРасчетов.Курс = ?(СтруктураКурсаРасчетов.Курс = 0, 1, СтруктураКурсаРасчетов.Курс);
	СтруктураКурсаРасчетов.Кратность = ?(СтруктураКурсаРасчетов.Кратность = 0, 1, СтруктураКурсаРасчетов.Кратность);
	
	УстановитьСвойство(
		СтрокаПлатеж,
		"Курс",
		СтруктураКурсаРасчетов.Курс,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	УстановитьСвойство(
		СтрокаПлатеж,
		"Кратность",
		СтруктураКурсаРасчетов.Кратность,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ОбъектДокумента.ВалютаДенежныхСредств, ДатаКурса);
	
	СуммаРасчетов = ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		СтруктураКурсаДокумента.Курс,
		СтруктураКурсаРасчетов.Курс,
		СтруктураКурсаДокумента.Кратность,
		СтруктураКурсаРасчетов.Кратность
	);
	
	УстановитьСвойство(
		СтрокаПлатеж,
		"СуммаРасчетов",
		СуммаРасчетов,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов
	);
	
	ПродолжитьВызов(СтрокаПлатеж, ВалютаРасчетов, ДатаКурса, ОбъектДокумента, ЭтоНовыйДокумент);
	
КонецПроцедуры

&Вместо("СинхронизироватьДокументыПоСчетам")
Процедура СМП_СинхронизироватьДокументыПоСчетам(ДокументыКИмпорту, ВидДокументовИсходящих, ВидДокументовВходящих, ДатыЗагрузкиСписок, ИмпортРасчетныеСчета, ТаблицаРезультата, ТаблицаПомеченныхНаУдалениеКакДубль)
	
	// Возможна следующая ситуация. Из клиент-банка выгружается определенный период, но не все выписки, а только некоторые.
	// Потом за тот же период выгружается еще одна порция, уже другие выписки.
	// Если искать документы для удаления используя период, то все документы из первой порции будут помечены на удаление, т.к. их нет в загружаемых данных.
	// В этом случае пользователь будет ожидать, что добавятся новые выписки и старые сохранятся, но этого не происходит,
	// старые удаляются.
	// Чтобы учесть этот сценарий, будем анализировать документы за список дат, а не за период.
	
	// Составляем список счетов.
	СписокСчетов = Новый СписокЗначений;
	Для каждого СтрокаСчета Из ИмпортРасчетныеСчета Цикл
		СписокСчетов.Добавить(СокрЛП(СтрокаСчета.РасчСчет));
	КонецЦикла;
	
	ДокументыНаУдаление = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	" + ВидДокументовИсходящих + ".Ссылка,
	|	" + ВидДокументовИсходящих + ".Дата КАК Дата,
	|	" + ВидДокументовИсходящих + ".СуммаДокумента КАК Сумма,
	|	" + ВидДокументовИсходящих + ".ВидОперации,
	|	" + ВидДокументовИсходящих + ".БанковскийСчет.НомерСчета КАК НомерСчета
	|ИЗ
	|	Документ." + ВидДокументовИсходящих + " КАК " + ВидДокументовИсходящих + "
	|ГДЕ
	// Контроль остатка ДС на счете пользователь сможет выполнить в форме обработки.
	|		НачалоПериода(" + ВидДокументовИсходящих + ".ДатаВходящегоДокумента, День) В (&ДатыЗагрузкиСписок)
	| И НЕ " + ВидДокументовИсходящих + ".ПометкаУдаления
	| И " + ВидДокументовИсходящих + ".БанковскийСчет.НомерСчета В(&НомераСчетов)");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатыЗагрузкиСписок", ДатыЗагрузкиСписок);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов", СписокСчетов);
	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ДатаГраницыОбработки) Тогда
						ТекстСообщения = НСтр("ru = 'Платежный документ ""%ОбъектДокументаКУдаление%"" не помечен на удаление, так как имеет дату равной или меньшей границы обработки!'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектДокументаКУдаление%", ОбъектДокументаКУдаление);
						УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ОперацияВыполнена = ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
			
			// Добавим информацию о помеченных на удаление документа в отдельную таблицу, 
			// которую потом выведем в протокол.
			НоваяСтрока = ТаблицаПомеченныхНаУдалениеКакДубль.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДокументов);
			НоваяСтрока.ДокументСсылка = ВыборкаДокументов.Ссылка;
			НоваяСтрока.ОперацияВыполнена = ОперацияВыполнена;
		КонецЕсли;
	КонецЦикла;
	
	// Поступления на счет, отсутствующие в списке загруженным помечаем
	// на удаление.
	ДокументыНаУдаление = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	" + ВидДокументовВходящих + ".Ссылка,
	|	" + ВидДокументовВходящих + ".ДатаВходящегоДокумента КАК Дата,
	|	" + ВидДокументовВходящих + ".СуммаДокумента КАК Сумма,
	|	" + ВидДокументовВходящих + ".ВидОперации,
	|	" + ВидДокументовВходящих + ".БанковскийСчет.НомерСчета КАК НомерСчета
	|ИЗ
	|	Документ." + ВидДокументовВходящих + " КАК " + ВидДокументовВходящих + "
	|ГДЕ
	|		НачалоПериода(" + ВидДокументовВходящих + ".ДатаВходящегоДокумента, День) В (&ДатыЗагрузкиСписок)
	| И НЕ " + ВидДокументовВходящих + ".ПометкаУдаления
	| И " + ВидДокументовВходящих + ".БанковскийСчет.НомерСчета В(&НомераСчетов)");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатыЗагрузкиСписок", ДатыЗагрузкиСписок);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов", СписокСчетов);
	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ДатаГраницыОбработки) Тогда
						ТекстСообщения = НСтр("ru = 'Платежный документ ""%ОбъектДокументаКУдаление%"" не помечен на удаление, так как имеет дату равной или меньшей границы обработки!'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектДокументаКУдаление%", ОбъектДокументаКУдаление);
						УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ОперацияВыполнена = ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
			
			// Добавим информацию о помеченных на удаление документа в отдельную таблицу, 
			// которую потом выведем в протокол.
			НоваяСтрока = ТаблицаПомеченныхНаУдалениеКакДубль.Добавить();
			НоваяСтрока.ДокументСсылка = ВыборкаДокументов.Ссылка;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДокументов);
			НоваяСтрока.ДокументСсылка = ВыборкаДокументов.Ссылка;
			НоваяСтрока.ОперацияВыполнена = ОперацияВыполнена;
		КонецЕсли;
	КонецЦикла;
	
	ПродолжитьВызов(ДокументыКИмпорту, ВидДокументовИсходящих, ВидДокументовВходящих, НачалоИнтервалаЗагрузки, КонецИнтервалаЗагрузки, ИмпортРасчетныеСчета);
	
КонецПроцедуры

&Вместо("УстановитьСвойство")
Процедура СМП_УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства, ОбязательнаяЗаменаСтарогоЗначения = Ложь, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов)
	
	Если ЗначениеСвойства <> Неопределено
		И Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		
		Если ЭтоНовыйДокумент
		 ИЛИ (НЕ ЗначениеЗаполнено(Объект[ИмяСвойства])
		 ИЛИ ОбязательнаяЗаменаСтарогоЗначения)
		 ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Булево")
		 ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Дата") 
		Тогда
		
			ПредЗнач = "" + Объект[ИмяСвойства];
			Объект[ИмяСвойства] = ЗначениеСвойства;
			
			Если Не ЭтоНовыйДокумент Тогда
				ИмяСвойстваДляПротокола = ПолучитьИмяСвойстваДляПротокола(ИмяСвойства, Объект);
				
				СтрокаИзмененныхРеквизитов = СтрокаИзмененныхРеквизитов + ?(СтрокаИзмененныхРеквизитов = "", "", Символы.ПС) + 
					ИмяСвойстваДляПротокола + ?(ЗначениеЗаполнено(ПредЗнач), НСтр("ru = ' (с '; uk = ' (з '") + ПредЗнач + НСтр("ru = ' на '; uk = ' на '"), НСтр("ru = ' ('; uk = ' ('")) + ЗначениеСвойства + ")";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПродолжитьВызов(Объект, ИмяСвойства, ЗначениеСвойства, ОбязательнаяЗаменаСтарогоЗначения, ЭтоНовыйДокумент);
	
КонецПроцедуры

///////////////////////////////////
#Область Загрузка

// Процедура загружает банковские выписки.
//
Функция Загрузить(ИмпортЗаголовок, ТаблицаРезультата, ТаблицаПомеченныхНаУдалениеКакДубль) Экспорт
	
	// Будем сохранять информацию о созданных во время загрузки контрагентах в отдельной таблице
	// и использовать ее, чтобы не создавать контрагентов повторно.
	ТаблицаОбъектовСозданныхПриЗагрузке = СоздатьСтруктуруТаблицыОбъектовСозданныхПриЗагрузке();
	
	ДокументыКИмпорту = Загрузка.Выгрузить();
	
	ДатыЗагрузкиСписок = Новый СписокЗначений;
	
	ЕстьПредупржедения = Ложь;
	
	НачалоИнтервалаЗагрузки = Дата("00010101");
	КонецИнтервалаЗагрузки  = Дата("00010101");
	ДокументыКИмпорту.Индексы.Добавить("Документ");
	//Результат = ПолучитьДатуИзСтроки(НачалоИнтервалаЗагрузки, ИмпортЗаголовок.ДатаНачала);
	//Если НЕ ЗначениеЗаполнено(Результат) Тогда
	//	ТекстСообщения  = НСтр("ru = 'В заголовке файла загрузки неверно указана дата начала интервала! Файл не может быть загружен!'");
	//	УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения);
	//	Возврат Новый Структура("ЕстьПредупржедения, ОбработаноСтрок, ВсегоСтрок", ЕстьПредупржедения, 0, ДокументыКИмпорту.Количество());
	//КонецЕсли;
	//Результат = ПолучитьДатуИзСтроки(КонецИнтервалаЗагрузки, ИмпортЗаголовок.ДатаКонца);
	//Если НЕ ЗначениеЗаполнено(Результат) Тогда
	//	ТекстСообщения = НСтр("ru = 'В заголовке файла импорта неверно указана дата окончания интервала!'");
	//	УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения);
	//КонецЕсли;
	
	// Загружаем отмеченные секции документов.
	ОбработаноСтрок = 0;
	Для каждого СтрокаСекции Из ДокументыКИмпорту Цикл
		Если СтрокаСекции.Загружать Тогда
			ЗагрузитьСтроку(ЕстьПредупржедения, СтрокаСекции, ТаблицаРезультата, ТаблицаОбъектовСозданныхПриЗагрузке, Ложь);
			ОбработаноСтрок = ОбработаноСтрок + 1;
		Иначе
			ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru='Пропущен, не загружается'"), Ложь, Ложь, НСтр("ru='• Пропущен, не загружается'"), "");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСекции.Дата) Тогда
			ДатыЗагрузкиСписок.Добавить(НачалоДня(СтрокаСекции.ДатаДок));
		КонецЕсли;
	КонецЦикла;
	
	// Платежные поручения исходящие, отсутствующие в списке загруженным помечаем
	// на удаление.
	Если НЕ НеУдалятьДокументыКоторыхНетВВыписке Тогда
		СинхронизироватьДокументыПоСчетам(
			ДокументыКИмпорту,
			"РасходСоСчета",
			"ПоступлениеНаСчет",
			ДатыЗагрузкиСписок,
			ИмпортРасчетныеСчета,
			ТаблицаРезультата,
			ТаблицаПомеченныхНаУдалениеКакДубль
		);
	КонецЕсли;
	
	Возврат Новый Структура("ЕстьПредупржедения, ОбработаноСтрок, ВсегоСтрок, СообщенияПользователю", ЕстьПредупржедения, ОбработаноСтрок, ДокументыКИмпорту.Количество(), ПолучитьСообщенияПользователю());
	
КонецФункции // Загрузить()

// Процедура задает пометку на удаление.
//
Функция ЗадатьПометкуНаУдаление(ОбъектДляПометки, Пометка, ТаблицаРезультата = Неопределено, СтрокаСекции = Неопределено, ТаблицаПомеченныхНаУдалениеКакДубль = Неопределено)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляПометки);
	НазваниеДействия = ?(Пометка, НСтр("ru = ' помечен на удаление'; uk = ' відмічений на видалення'"), НСтр("ru = ' отменена пометка на удаление'; uk = ' знята помітка на видалення'"));
	НазваниеДействияДляПротокола = ?(Пометка, НСтр("ru = '• Помечен на удаление'; uk = '• Відмічений на видалення'"), НСтр("ru = '• Отменена пометка на удаление'; uk = '• Знята відмітна на видалення'"));
	
	Попытка
		
		ОбъектДляПометки.Записать(РежимЗаписиДокумента.Запись);
		ОбъектДляПометки.УстановитьПометкуУдаления(Пометка);
		ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред%: %НазваниеДействия%.'; uk = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред%: %НазваниеДействия%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеДействия%", НазваниеДействия);
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения);
		Если ТаблицаРезультата <> Неопределено Тогда
			ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НазваниеДействияДляПротокола, Ложь, Ложь, НазваниеДействияДляПротокола, "");
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред%: не %НазваниеДействия%! Произошли ошибки при записи!'; uk = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред%: не %НазваниеДействия%! Відбулись помилки при запису!'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеДействия%", НазваниеДействия);
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения);
		Если ТаблицаРезультата <> Неопределено Тогда
			ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НазваниеДействияДляПротокола, Ложь, Ложь, НСтр("ru = '• Произошли ошибки при записи!'; uk = '• Відбулись помилки при запису!'"), ОписаниеОшибки());
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки
	
КонецФункции // ЗадатьПометкуНаУдаление()

// Функция ищет банк по БИК или корр. счету и возвращает найденное значение.
//
Функция НайтиБанкПоБикИКоррСчету(БИК, КоррСчет)
	
	НайденныйБанк = Справочники.Банки.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(БИК) Тогда
		НайденныйБанк = Справочники.Банки.НайтиПоКоду(БИК);
	КонецЕсли;
	
	Если НайденныйБанк = Справочники.Банки.ПустаяСсылка() Тогда
		НайденныйБанк = Справочники.Банки.НайтиПоРеквизиту("КоррСчет", КоррСчет);
	КонецЕсли;

	Возврат НайденныйБанк;

КонецФункции // НайтиБанкПоБикИКоррСчету()

// Функция возвращает имя свойства (синоним реквизита), который был изменен в документе.
//
Функция ПолучитьИмяСвойстваДляПротокола(ИмяСвойства, Объект)
	
	// Реквизиты документа.
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеНаСчет") Тогда
		РеквизитМетаданных = Метаданные.Документы.ПоступлениеНаСчет.Реквизиты.Найти(ИмяСвойства);
		Если РеквизитМетаданных = Неопределено Тогда
			Возврат Метаданные.Документы.ПоступлениеНаСчет.СтандартныеРеквизиты[ИмяСвойства].Синоним;
		Иначе
			Возврат Метаданные.Документы.ПоступлениеНаСчет.Реквизиты[ИмяСвойства].Синоним;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РасходСоСчета") Тогда
		РеквизитМетаданных = Метаданные.Документы.РасходСоСчета.Реквизиты.Найти(ИмяСвойства);
		Если РеквизитМетаданных = Неопределено Тогда
			Возврат Метаданные.Документы.РасходСоСчета.СтандартныеРеквизиты[ИмяСвойства].Синоним;
		Иначе
			Возврат Метаданные.Документы.РасходСоСчета.Реквизиты[ИмяСвойства].Синоним;
		КонецЕсли;
	// Реквизиты табличной части.
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументТабличнаяЧастьСтрока.ПоступлениеНаСчет.РасшифровкаПлатежа") Тогда
		Возврат Метаданные.Документы.ПоступлениеНаСчет.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты[ИмяСвойства].Синоним;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументТабличнаяЧастьСтрока.РасходСоСчета.РасшифровкаПлатежа") Тогда
		Возврат Метаданные.Документы.РасходСоСчета.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты[ИмяСвойства].Синоним;
	// Имя свойства как оно есть.
	Иначе
		Возврат ИмяСвойства;
	КонецЕсли;
	
КонецФункции // ПолучитьИмяСвойстваДляПротокола()

// Функция возвращает реквизиты банковского счета с учетом того, являются расчеты прямиыми или нет.
//
Функция ПолучитьСтруктуруДанныхРасчетногоСчета(СтрокаДокумента)
	
	СтруктураДанныхСтроки = Новый Структура;
	
	ТипКонтрагента = ?(СтрокаДокумента.ПлательщикСчет = СокрЛП(БанковскийСчет.НомерСчета), "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
	
	СтруктураДанныхСтроки.Вставить("СЧЕТ", СтрокаДокумента[ТипКонтрагента + "СЧЕТ"]);
	
	ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ТипКонтрагента + "2"]);
	СтруктураДанныхСтроки.Вставить("ПрямыеРасчеты", ПрямыеРасчеты);
	
	Если ПрямыеРасчеты Тогда
		
		СтруктураДанныхСтроки.Вставить("Банк", СтрокаДокумента[ТипКонтрагента + "БАНК1"]);
		СтруктураДанныхСтроки.Вставить("Город", СтрокаДокумента[ТипКонтрагента + "БАНК2"]);
		СтруктураДанныхСтроки.Вставить("БИК", СтрокаДокумента[ТипКонтрагента + "БИК"]);
		СтруктураДанныхСтроки.Вставить("КоррСчет", СтрокаДокумента[ТипКонтрагента + "КОРСЧЕТ"]);
		
	Иначе
		
		СтруктураДанныхСтроки.Вставить("Банк", СтрокаДокумента[ТипКонтрагента + "3"]);
		СтруктураДанныхСтроки.Вставить("Город", СтрокаДокумента[ТипКонтрагента + "4"]);
		СтруктураДанныхСтроки.Вставить("БИК", ""); // В менеджере будем банк искать по корр. счету.
		СтруктураДанныхСтроки.Вставить("КоррСчет", СтрокаДокумента[ТипКонтрагента + "РАСЧСЧЕТ"]);
		
		СтруктураДанныхСтроки.Вставить("БанкРасчетов", СтрокаДокумента[ТипКонтрагента + "БАНК1"]);
		СтруктураДанныхСтроки.Вставить("ГородРасчетов", СтрокаДокумента[ТипКонтрагента + "БАНК2"]);
		СтруктураДанныхСтроки.Вставить("БИКРасчетов",  СтрокаДокумента[ТипКонтрагента + "БИК"]);
		СтруктураДанныхСтроки.Вставить("КоррСчетРасчетов", СтрокаДокумента[ТипКонтрагента + "КОРСЧЕТ"]);
		
	КонецЕсли;
	
	СтруктураДанныхСтроки.Вставить("БанковскийСчет", БанковскийСчет);
	
	Возврат СтруктураДанныхСтроки;
	
КонецФункции

// Создает и возвращает счет контрагента.
//
Функция СоздатьНовогоКонтрагентаПриЗагрузке(ТаблицаОбъектовСозданныхПриЗагрузке, ДанныеСтроки)
	
	ИНН = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательИНН, ДанныеСтроки.ПлательщикИНН);
	КПП = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательКПП, ДанныеСтроки.ПлательщикКПП);
	Если ДанныеСтроки.Исходящий Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.Получатель1) Тогда
			Наименование = ДанныеСтроки.Получатель1;
		Иначе
			Наименование = ДанныеСтроки.Получатель;
		КОнецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДанныеСтроки.Плательщик1) Тогда
			Наименование = ДанныеСтроки.Плательщик1;
		Иначе
			Наименование = ДанныеСтроки.Плательщик;
		КОнецЕсли;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ТипСтроки, ИНН, КПП, Наименование", 1, ИНН, КПП, Наименование);
	МассивСтрок = ТаблицаОбъектовСозданныхПриЗагрузке.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		
		НайденнаяСтрока = МассивСтрок[0];
		
		СтруктураВозвращаемоеЗначение = Новый Структура;
		СтруктураВозвращаемоеЗначение.Вставить("Контрагент", НайденнаяСтрока.КонтрагентСсылка);
		СтруктураВозвращаемоеЗначение.Вставить("Договор", НайденнаяСтрока.ДоговорСсылка);
		СтруктураВозвращаемоеЗначение.Вставить("СчетКонтрагента", НайденнаяСтрока.СчетКонтрагентаСсылка);
		
		Возврат СтруктураВозвращаемоеЗначение;
		
	Иначе
	
		СтруктураДанных = Новый Структура;
		
		ВидКонтрагента = ?(СтрДлина(СокрЛП(ИНН)) = 12, Перечисления.ВидыКонтрагентов.ФизическоеЛицо, Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
		
		СтруктураДанных = ПолучитьСтруктуруДанныхРасчетногоСчета(ДанныеСтроки);
		ДополнитьСтруктуруДаннымиДоговора(СтруктураДанных);
		
		СтруктураДанных.Вставить("СоздаватьРСчет", Истина);
		СтруктураДанных.Вставить("НаименованиеПолное", СокрЛП(Наименование));
		СтруктураДанных.Вставить("Наименование", ПолучитьНаименованиеКонтрагентаПоПолномуНаименованию(СокрЛП(Наименование)));
		СтруктураДанных.Вставить("ИНН", ИНН);
		СтруктураДанных.Вставить("КодПоЕДРПОУ", КПП);
		СтруктураДанных.Вставить("ВидКонтрагента", ВидКонтрагента);
		СтруктураДанных.Вставить("Родитель", ""); //Родитель);
		СтруктураДанных.Вставить("Организация", Организация);
		Если Константы.ОграничиватьДоступНаУровнеЗаписей.Получить() Тогда
			СтруктураДанных.Вставить("ГруппаДоступа", ГруппаДоступа);
		КонецЕсли;
		
		ВидОперации = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ВидОперацииСписание, ДанныеСтроки.ВидОперацииПоступление);
		Обработки.КлиентБанк.ДобавитьИнформациюОбОтношенияхСКонтрагентомПоВидуОперации(СтруктураДанных, ВидОперации);
		
		КонтрагентСоздан = Обработки.КлиентБанк.СоздатьКонтрагентаПоСтруктуреДанных(СтруктураДанных);
		
		Если КонтрагентСоздан Тогда
			СтруктураВозвращаемоеЗначение = Новый Структура;
			СтруктураВозвращаемоеЗначение.Вставить("Контрагент", СтруктураДанных.Контрагент);
			СтруктураВозвращаемоеЗначение.Вставить("Договор", СтруктураДанных.Договор);
			СтруктураВозвращаемоеЗначение.Вставить("СчетКонтрагента", СтруктураДанных.БанковскийСчетПоУмолчанию);
			
			НоваяСтрока = ТаблицаОбъектовСозданныхПриЗагрузке.Добавить();
			
			НоваяСтрока.ТипСтроки = 1;
			НоваяСтрока.Наименование = Наименование;
			НоваяСтрока.ИНН = ИНН;
			НоваяСтрока.КПП = КПП;
			НоваяСтрока.КонтрагентСсылка = СтруктураДанных.Контрагент;
			НоваяСтрока.ДоговорСсылка = СтруктураДанных.Договор;
			НоваяСтрока.СчетКонтрагентаСсылка = СтруктураДанных.БанковскийСчетПоУмолчанию;
			НоваяСтрока.СчетКонтрагента = СтруктураДанных.Счет;
			НоваяСтрока.Договор = СтруктураДанных.Договор;
			
			Возврат СтруктураВозвращаемоеЗначение;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Функция создает и возвращает таблицу значений для хранения объектов, которые созданы в процессе загрукзи. Таблица используется, чтобы избежать дублей.
//
Функция СоздатьСтруктуруТаблицыОбъектовСозданныхПриЗагрузке()
	
	ТаблицаОбъектовСозданныхПриЗагрузке = Новый ТаблицаЗначений;
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("ТипСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("СчетКонтрагента", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("Договор", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("СчетКонтрагентаСсылка", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("КонтрагентСсылка", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаОбъектовСозданныхПриЗагрузке.Колонки.Добавить("ДоговорСсылка", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	Возврат ТаблицаОбъектовСозданныхПриЗагрузке;
	
КонецФункции

// Процедура добавляет строку в таблицу протокола.
//
Процедура ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаТаблицы, Состояние, ЭтоНовый, Загружен, СписокДействий, 
	Комментарий, Документ = Неопределено, Важность = 0, СтрокаИзмененныхРеквизитов = "")
	
	Если ТаблицаРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ложь Тогда ТаблицаРезультата = Новый ТаблицаЗначений КонецЕсли; // УДАЛИТЬ СТРОКУ!!!
	
	ДокументСтрока = СтрокаТаблицы.ИмяДокумента + НСтр("ru=' №'") + СтрокаТаблицы.Номер + НСтр("ru=' от '") + СтрокаТаблицы.Дата;
	
	МаксВажность = Важность;
	
	// Обработаем комментарии (
	// Строк с комментариями может быть несколько.
	МассивСтрок = ТаблицаРезультата.НайтиСтроки(Новый Структура("Документ, Состояние, Важность", ДокументСтрока, Состояние, Важность));
	ИтоговыйКомментарий = "";
	Если МассивСтрок.Количество() > 0 Тогда
		Для Каждого ЭлементМассива Из МассивСтрок Цикл
			МаксВажность = Макс(МаксВажность, ЭлементМассива.Важность);
			Если ИтоговыйКомментарий = "" Тогда
				ИтоговыйКомментарий = ЭлементМассива.Комментарий;
			Иначе
				ИтоговыйКомментарий = ИтоговыйКомментарий + Символы.ПС + ЭлементМассива.Комментарий;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИтоговыйКомментарий = "" Тогда
		ИтоговыйКомментарий = Комментарий;
	Иначе
		ИтоговыйКомментарий = ИтоговыйКомментарий + Символы.ПС + Комментарий;
	КонецЕсли;
	
	Если СтрокаИзмененныхРеквизитов <> "" Тогда
		Если ИтоговыйКомментарий = "" Тогда
			ИтоговыйКомментарий = СтрокаИзмененныхРеквизитов;
		Иначе
			ИтоговыйКомментарий = ИтоговыйКомментарий + Символы.ПС + СтрокаИзмененныхРеквизитов;
		КонецЕсли;
	КонецЕсли;
	// ) Обработаем комментарии
	
	СтрокаРезультата = ТаблицаРезультата.Добавить();
	
	СтрокаРезультата.СтрокаИзмененныхРеквизитов = СтрокаИзмененныхРеквизитов;
	СтрокаРезультата.Важность = МаксВажность;
	СтрокаРезультата.Комментарий = ИтоговыйКомментарий;
	СтрокаРезультата.Состояние = Состояние;
	СтрокаРезультата.Документ = ДокументСтрока;
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
		СтрокаРезультата.Сумма = СтрокаТаблицы.СуммаДокумента;
	Иначе
		СтрокаРезультата.ДокументСсылка = СтрокаТаблицы.Документ;
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.Документ, "ВидОперации, СуммаДокумента");
		СтрокаРезультата.ВидОперации = ДанныеДокумента.ВидОперации;
		СтрокаРезультата.Сумма = ДанныеДокумента.СуммаДокумента;
	КонецЕсли;
	
	СтрокаРезультата.Записывался = Загружен;
	СтрокаРезультата.СозданНовый = ЭтоНовый;
	
	Если ЭтоНовый И Не ЗначениеЗаполнено(СписокДействий) Тогда
		
		СтрокаРезультата.Действия = НСтр("ru='• Создан новый документ'");
		
	Иначе
		Если ТипЗнч(СписокДействий) = Тип("Массив") Тогда
			ПерваяСтрока = Истина;
			Для Каждого Действие Из СписокДействий Цикл
				
				СтрокаРезультата.Действия = СтрокаРезультата.Действия + ?(ПерваяСтрока, "",Символы.ПС) + "• " + Действие;
				ПерваяСтрока = Ложь;
				
			КонецЦикла;
		Иначе
			СтрокаРезультата.Действия = СписокДействий;
		КонецЕсли;
	КонецЕсли;
	
	СчКолвоСтрок = МассивСтрок.Количество() - 1;
	Пока СчКолвоСтрок >= 0 Цикл
		ЭлементМассива = МассивСтрок[СчКолвоСтрок];
		ТаблицаРезультата.Удалить(ЭлементМассива);
		СчКолвоСтрок = СчКолвоСтрок - 1;
	КонецЦикла;
	
КонецПроцедуры

// Процедура вставляет в структуту показатели необходимости заполнения договора данными по умолчанию.
// Используется при создании нового контрагента и договора.
//
Процедура ДополнитьСтруктуруДаннымиДоговора(СтруктураДанных)
	
	СтруктураДанных.Вставить("ЗаполнятьДоговор", Ложь);
	СтруктураДанных.Вставить("ЗаполнятьДоговорПоУмолчанию", Истина);
	
КонецПроцедуры

// Процедура загружает банковские выписки.
//
Процедура ЗагрузитьОднуСтроку(ИмпортЗаголовок, ИндексСтроки, ТаблицаРезультата = Неопределено, ТаблицаОбъектовСозданныхПриЗагрузке = Неопределено) Экспорт
	
	ТаблицаОбъектовСозданныхПриЗагрузке = СоздатьСтруктуруТаблицыОбъектовСозданныхПриЗагрузке();
	
	СтрокаСекции = Загрузка.Получить(ИндексСтроки);
	НачалоИнтервалаЗагрузки = Дата("00010101");
	КонецИнтервалаЗагрузки  = Дата("00010101");
	Результат = ПолучитьДатуИзСтроки(НачалоИнтервалаЗагрузки, ИмпортЗаголовок.ДатаНачала);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		ТекстСообщения  = НСтр("ru = 'В заголовке файла загрузки неверно указана дата начала интервала.
		|Файл не может быть загружен.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	Результат = ПолучитьДатуИзСтроки(КонецИнтервалаЗагрузки, ИмпортЗаголовок.ДатаКонца);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		ТекстСообщения = НСтр("ru = 'В заголовке файла импорта неверно указана дата окончания интервала.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ЕстьПредупреждения = Ложь;
	ЗагрузитьСтроку(ЕстьПредупреждения, СтрокаСекции, ТаблицаРезультата, ТаблицаОбъектовСозданныхПриЗагрузке, Истина);
	
КонецПроцедуры // Загрузить()

// Процедура загружает банковские выписки.
//
Процедура ЗагрузитьСтроку(ЕстьПредупреждения, СтрокаСекции, ТаблицаРезультата = Неопределено, ТаблицаОбъектовСозданныхПриЗагрузке = Неопределено, ВыдаватьСообщения = Истина)
	
	// Загружаем отмеченные секции документов.
	РезультатПроверки = ПроверитьДокументДляЗагрузки(СтрокаСекции);
	Если НЕ ПустаяСтрока(РезультатПроверки) Тогда
		ТекстСообщения = НСтр(
			"ru = 'По документу ""%Операция%"" №%Номер% от %Дата% есть предупреждения:
			|%РезультатПроверки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Операция%", СтрокаСекции.Операция);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаСекции.Номер);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Дата%", СтрокаСекции.Дата);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатПроверки%", РезультатПроверки);
		Если ВыдаватьСообщения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru='Комментарий'"), Ложь, Ложь, "", ТекстСообщения, , 1);
		ЕстьПредупреждения = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
		
		// В ИБ не найден документ, необходимо создать новый.
		ОбъектДокумента = Документы[СтрокаСекции.ВидДокумента].СоздатьДокумент();
		ЭтоНовыйДокумент = Истина;
		
	Иначе
		
		// В ИБ найден документ, необходимо получить его объект.
		ОбъектДокумента = СтрокаСекции.Документ.ПолучитьОбъект();
		ЭтоНовыйДокумент = Ложь;
		
	КонецЕсли;
	
	// Заполняем все реквизиты документа.
	Если НЕ (СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета
			ИЛИ СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет
			ИЛИ СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными
			ИЛИ СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных
			)
		Тогда
		
		// Создадим контрагента, р/счет и договор, если это необходимо.
		Если (ТипЗнч(СтрокаСекции.Контрагент) = Тип("Строка")) И 
			((СтрокаСекции.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаСекции.ДействиеСКонтрагентом)) Тогда
			
			СтруктураКонтрагентИРСчет = СоздатьНовогоКонтрагентаПриЗагрузке(ТаблицаОбъектовСозданныхПриЗагрузке, СтрокаСекции);
			Если ЗначениеЗаполнено(СтруктураКонтрагентИРСчет) И ЗначениеЗаполнено(СтруктураКонтрагентИРСчет.Контрагент) Тогда
				СтрокаСекции.Контрагент = СтруктураКонтрагентИРСчет.Контрагент;
				СтрокаСекции.Договор = СтруктураКонтрагентИРСчет.Договор;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если контрагент известен, то создадим расчетный счет и договор, если это необходимо.
		Если ТипЗнч(СтрокаСекции.Контрагент) = Тип("СправочникСсылка.Контрагенты") И НЕ СтрокаСекции.Контрагент.Пустая() Тогда
			
			// Создадим р/счет.
			Если //ТипЗнч(СтрокаСекции.СчетКонтрагента) = Тип("Строка") И
				(СтрокаСекции.ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С 
				ИЛИ (НЕ ЗначениеЗаполнено(СтрокаСекции.ДействиеСоСчетомКонтрагента) И ТипЗнч(СтрокаСекции.СчетКонтрагента) = Тип("Строка"))) Тогда
				
				СтруктураДанных = ПолучитьСтруктуруДанныхРасчетногоСчета(СтрокаСекции);
				
				СтруктураПоиска = Новый Структура("КонтрагентСсылка, СчетКонтрагента", СтрокаСекции.Контрагент, СтруктураДанных.Счет);
				МассивСтрок = ТаблицаОбъектовСозданныхПриЗагрузке.НайтиСтроки(СтруктураПоиска);
				
				Если МассивСтрок.Количество() > 0 Тогда // Нашли ранее созданный счет контрагента.
					
					Для каждого СтрокаМассива Из МассивСтрок Цикл
						Если НЕ СтрокаМассива.ДоговорСсылка.Пустая() Тогда
							СтрокаСекции.СчетКонтрагента = СтруктураКонтрагентИРСчет.СчетКонтрагента;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					
					СтруктураДанных.Вставить("СоздаватьРСчет", Истина);
					СтруктураДанных.Вставить("Контрагент", СтрокаСекции.Контрагент);
					
					СчетКонтрагента = Обработки.КлиентБанк.СоздатьРасчетныйСчетПоСтуктуреДанных(СтруктураДанных);
					Если ЗначениеЗаполнено(СчетКонтрагента) Тогда
						СтрокаСекции.СчетКонтрагента = СчетКонтрагента;
						
						НоваяСтрока = ТаблицаОбъектовСозданныхПриЗагрузке.Добавить();
						НоваяСтрока.КонтрагентСсылка = СтрокаСекции.Контрагент;
						НоваяСтрока.СчетКонтрагентаСсылка = СчетКонтрагента;
						НоваяСтрока.СчетКонтрагента = СтруктураДанных.Счет;
						НоваяСтрока.ТипСтроки = 3;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			// Создадим договор.
			// Договор нужно будет создавать только в случае, когда у контрагента нет не помеченного на удаление основного договора.
			// Созданный договор нужно будет сохранить в таблице созданных элементов и искать его в будущем.
			Если (СтрокаСекции.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаСекции.ДействиеСДоговором))
				И ТипЗнч(СтрокаСекции.Договор) = Тип("Строка") Тогда
				
				СтруктураПоиска = Новый Структура("КонтрагентСсылка, Договор", СтрокаСекции.Контрагент, СтрокаСекции.Договор);
				МассивСтрок = ТаблицаОбъектовСозданныхПриЗагрузке.НайтиСтроки(СтруктураПоиска);
				
				Если МассивСтрок.Количество() > 0 Тогда // Нашли ранее созданный договор по умолчанию.
					
					Для каждого СтрокаМассива Из МассивСтрок Цикл
						Если НЕ СтрокаМассива.ДоговорСсылка.Пустая() Тогда
							СтрокаСекции.Договор = СтрокаМассива.ДоговорСсылка;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
				
					СтруктураДанных = Новый Структура;
					СтруктураДанных.Вставить("Контрагент", СтрокаСекции.Контрагент);
					ДополнитьСтруктуруДаннымиДоговора(СтруктураДанных);
					
					Договор = Обработки.КлиентБанк.СоздатьДоговорПоСтруктуреДанных(СтруктураДанных);
					Если ЗначениеЗаполнено(Договор) Тогда
						СтрокаСекции.Договор = Договор;
						
						НоваяСтрока = ТаблицаОбъектовСозданныхПриЗагрузке.Добавить();
						НоваяСтрока.КонтрагентСсылка = СтрокаСекции.Контрагент;
						НоваяСтрока.ДоговорСсылка = Договор;
						НоваяСтрока.ТипСтроки = 2;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Заполним реквизиты документа в соответствии с его видом.
	СтрокаИзмененныхРеквизитов = "";
	ТипДокумента = ОбъектДокумента.Метаданные().Имя;
	Если ТипДокумента = "РасходСоСчета" Тогда
		ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов);
	ИначеЕсли ТипДокумента = "ПоступлениеНаСчет" Тогда
		ЗаполнитьРеквизитыПоступлениеНаСчет(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов);
	КонецЕсли;
	ОбъектДокумента.БанковскаяОперация = СтрокаСекции.Операция;
	
	// Зададим пометку на удаление.
	Если ОбъектДокумента.ПометкаУдаления Тогда
		ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь, ТаблицаРезультата, СтрокаСекции);
	КонецЕсли;
	
	// Заполним комментарий.
	Если СтрокаСекции.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента Тогда
		Если Не ПустаяСтрока(ОбъектДокумента.Комментарий) Тогда
			ОбъектДокумента.Комментарий = ОбъектДокумента.Комментарий + Символы.ПС;
		КонецЕсли;
		ОбъектДокумента.Комментарий = ОбъектДокумента.Комментарий + СтрокаСекции.ТекстДокумента;
	КонецЕсли;
	
	// Запишем объект.
	ЗаписатьОбъект(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, ТаблицаРезультата, ЕстьПредупреждения, ВыдаватьСообщения, СтрокаИзмененныхРеквизитов);
	
	// Обновим информацию о документе в таблице импорта.
	Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
			СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
			Если СтрокаСекции.ВидДокумента = "РасходСоСчета" Тогда
				РеквизитНомера = "Номер";
			Иначе
				РеквизитНомера = "НомерВходящегоДокумента";
			КонецЕсли;
			СтрокаСекции.НомерДок = ОбъектДокумента[РеквизитНомера];
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры // Загрузить()

Процедура ЗаполнитьИнформациюОЗаказеСчетеДокументеРасчетов(ЭтоНовыйДокумент, ОбъектДокумента, ИсходныеДанные, СтрокаРасшифровки, Исходящий, СтрокаИзмененныхРеквизитов)
	
	// Заполним заказ.
	Если ОбъектДокумента.Контрагент.ВестиРасчетыПоЗаказам И ЗначениеЗаполнено(ИсходныеДанные.Заказ) Тогда
		УстановитьСвойство(
				СтрокаРасшифровки,
				"Заказ",
				ИсходныеДанные.Заказ,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
	КонецЕсли;
	
	// Заполним счет на оплату.
	Если ОбъектДокумента.Контрагент.ВестиУчетОплатыПоСчетам И ЗначениеЗаполнено(ИсходныеДанные.СчетНаОплату) Тогда
		УстановитьСвойство(
				СтрокаРасшифровки,
				"СчетНаОплату",
				ИсходныеДанные.СчетНаОплату,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
	КонецЕсли;
	
	// Заполним документ расчетов.
	Если Не ИсходныеДанные.ПризнакАванса И ОбъектДокумента.Контрагент.ВестиРасчетыПоДокументам И ЗначениеЗаполнено(ИсходныеДанные.ДокументРасчетов) Тогда
		УстановитьСвойство(
				СтрокаРасшифровки,
				"Документ",
				ИсходныеДанные.ДокументРасчетов,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов
			);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьСтавкуНДСПоНазначениюПлатежа(ИсходныеДанные, СтавкаНДСВНазначенииПлатежа, ЗначениеСтавкиНДС)
	
	Если СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС 18%") > 0 ИЛИ
		СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС(18%)") > 0 ИЛИ
		СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС (18%)") > 0 Тогда
		СтавкаНДСВНазначенииПлатежа = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(18);
		ЗначениеСтавкиНДС = 18;
	ИначеЕсли СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС 10%") > 0 ИЛИ
		СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС(10%)") > 0 ИЛИ
		СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС (10%)") > 0 Тогда
		СтавкаНДСВНазначенииПлатежа = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(10);
		ЗначениеСтавкиНДС = 10;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция переставляет форму собственности в конец и убирает кавычки
Функция ПолучитьНаименованиеКонтрагентаПоПолномуНаименованию(пНаименованиеПолное)
	Возврат пНаименованиеПолное;
КонецФункции

#КонецОбласти
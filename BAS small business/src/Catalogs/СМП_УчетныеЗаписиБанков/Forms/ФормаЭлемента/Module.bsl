
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Задание = РегламентныеЗаданияСервер.Задание(Объект.ИдентификаторРегламентногоЗадания);
	
	Если Не Задание = Неопределено Тогда
		
		Если ТипЗнч(Задание.Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
			РасписаниеРегламентногоЗаданияОбмена = Задание.Расписание;
		ИначеЕсли ТипЗнч(Задание.Расписание) = Тип("ХранилищеЗначения") Тогда
			РасписаниеРегламентногоЗаданияОбмена = Задание.Расписание.Получить();
		Иначе
			РасписаниеРегламентногоЗаданияОбмена = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СМП_УчетныеЗаписиБанков.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СМП_УчетныеЗаписиБанков КАК СМП_УчетныеЗаписиБанков
	|ГДЕ
	|	СМП_УчетныеЗаписиБанков.Ссылка <> &Ссылка
	|	И СМП_УчетныеЗаписиБанков.БанковскийСчет = &БанковскийСчет";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("БанковскийСчет", Объект.БанковскийСчет);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Отказ = Истина;
		Сообщить(НСтр("ru='Настройка для данного счета уже существует!';uk='Налаштування для даного рахунку вже існує!'"));
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ТекущийОбъект.ИспользоватьРегламентныеЗадания И РасписаниеРегламентногоЗаданияОбмена = Неопределено Тогда
			ТекущийОбъект.ИспользоватьРегламентныеЗадания = Ложь;
		КонецЕсли;
		
		Задание = РегламентныеЗаданияСервер.Задание(ТекущийОбъект.ИдентификаторРегламентногоЗадания);
		Если ТекущийОбъект.ИспользоватьРегламентныеЗадания Тогда
			
			Если Задание = Неопределено Тогда
				ИдентификаторЗадания = СоздатьНовоеЗадание(ТекущийОбъект.Код, ТекущийОбъект.Наименование, РасписаниеРегламентногоЗаданияОбмена);
				ТекущийОбъект.ИдентификаторРегламентногоЗадания = ИдентификаторЗадания;
			Иначе
				УстановитьПараметрыЗадания(Задание, Истина, ТекущийОбъект.Код, ТекущийОбъект.Наименование, РасписаниеРегламентногоЗаданияОбмена);
			КонецЕсли;
			
		Иначе
			
			Если Задание <> Неопределено Тогда
				РегламентныеЗаданияСервер.УдалитьЗадание(Задание);
			КонецЕсли;
			ТекущийОбъект.ИдентификаторРегламентногоЗадания = Неопределено;
			
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура БанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ Объект.Банк.Пустая() И ВыбранноеЗначение <> Объект.Банк Тогда
		Объект.ПодключаемаяОбработка = Неопределено;
		Объект.ИД = "";
		Объект.Токен = "";
		Объект.АдресДляWebHook = "";
		Объект.СоздатьНовогоКонтрагентаПриЗагрузкеВыписки = Ложь;
		Объект.ГруппаДоступаДляНовыхКонтрагентов = Неопределено;
		Объект.ИспользоватьРегламентныеЗадания = Ложь;
		Объект.ИдентификаторРегламентногоЗадания = Неопределено;
		РасписаниеРегламентногоЗаданияОбмена = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентныеЗаданияПриИзменении(Элемент)
	
	ПриИзмененииИспользоватьРегламентныеЗадания();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовогоКонтрагентаПриЗагрузкеВыпискиПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПолучитьТокенМоноНажатие(Элемент)

	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://api.monobank.ua/");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

 &НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	Если Параметры.Ключ.Пустая() ИЛИ Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Сначала нужно записать изменения.';" 
		+ " uk='Спочатку потрібно записати зміни.'"));
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = НачатьВыполнениеНаСервереОбмена();
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультат", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеОбмена(Команда)
	
	НастроитьРасписание(РасписаниеРегламентногоЗаданияОбмена, Элементы.НастроитьРасписание, "РасписаниеРегламентногоЗаданияОбмена");
	
КонецПроцедуры

&НаКлиенте
Процедура МоноУстановитьВебХук(Команда)
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(, 
		нСтр("ru='Сохраните изменения элемента справочника перед установкой webhook!'; uk='Збережіть зміни елемента довідника перед встановленням Webhook!'"),,
		нСтр("ru='Форма изменена!'; uk='Форма змінена!'"))
	ИначеЕсли ПустаяСтрока(Объект.Токен) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(нСтр("ru='Не заполнен токен для доступа!'; uk='Не заповнений токен для доступу!'"),,
		"Токен", "Объект");
		Возврат;
	ИначеЕсли ПустаяСтрока(Объект.АдресДляWebHook) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(нСтр("ru='Не заполнен адрес для WebHook.'; uk='Не заповнена адреса для WebHook.'"),,
		"АдресДляWebHook", "Объект");
		Возврат;
	ИначеЕсли НЕ ПроверитьАдресWebHookНаСервере(Объект.АдресДляWebHook) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(нСтр("ru='Адрес для WebHook заполнен некорректно.'; uk='Адреса для WebHook заповнена некоректно.'"),,
		"АдресДляWebHook", "Объект");
		Возврат;	
	Иначе
		Результат = УстановитьАдресWebHookНаСервере(Объект.Токен, Объект.АдресДляWebHook);
		Если Результат = Истина Тогда
			ПоказатьПредупреждение(, нСтр("ru='WebHook установлен успешно.'; uk='WebHook встановлений успішно.'"));
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(нСтр("ru='Ошибка при установке Webhook - %1.'; uk='Помилка при встановленні Webhook - %1'"), Результат));
		Возврат;		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
 
&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ЭтоПриватБанкAPI = СМП_РаботаСБанкамиСервер.ФункционалБанкаПодключен(Объект.Банк, "ПриватБанк");
	ЭтоМоноБанкAPI = СМП_РаботаСБанкамиСервер.ФункционалБанкаПодключен(Объект.Банк, "МОНОБанк");
	ЭтоПумбБанкAPI = СМП_РаботаСБанкамиСервер.ФункционалБанкаПодключен(Объект.Банк, "ПУМБ");
	ЭтоФайловаяВыписка = СМП_РаботаСБанкамиСервер.ФункционалБанкаПодключен(Объект.Банк, "ПодключаемаяОбработка");
	
	Элементы.ПодключаемаяОбработка.Видимость = ЭтоФайловаяВыписка;
	Элементы.ДекорацияРаботаСБанкамиПриватБанкАРІ.Видимость = ЭтоПриватБанкAPI;
	Элементы.ДекорацияРаботаСБанкамиМОНОБанкАРІ.Видимость = ЭтоМоноБанкAPI;
	Элементы.ГруппаБанкПумб.Видимость = ЭтоПумбБанкAPI;
	Элементы.ГруппаБанкПриват.Видимость = ЭтоПриватБанкAPI;
	Элементы.ГруппаБанкМоно.Видимость = ЭтоМоноБанкAPI;
	Элементы.ГруппаРегламентноеЗадание.Видимость = ЭтоПриватБанкAPI ИЛИ ЭтоМоноБанкAPI ИЛИ ЭтоПумбБанкAPI;
	
КонецПроцедуры

 &НаСервере
Функция НачатьВыполнениеНаСервереОбмена()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = Ложь;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = "Обмен с банком (" + Объект.Ссылка + ")";
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, "СМП_РаботаСБанкамиСервер.ОбменСБанкамиAPI", Объект.Код);
	
КонецФункции

// Обработчик оповещения после выполнения регламентного задания по загрузке данных с банка.
//
// Параметры:
//   Результат - Структура - результат выполнения фонового задания.
//   ДополнительныеПараметры - Произвольный - доп. параметры указанные при создании объекта "ОписаниеОповещения".
//
&НаКлиенте
Процедура ОбработатьРезультат(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		Сообщить(Результат.КраткоеПредставлениеОшибки);
	Иначе
		
		//РезультатРаботы = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		//Если ЗначениеЗаполнено(РезультатРаботы.Ошибка) Тогда
		//	Сообщить(РезультатРаботы.Ошибка);
		//Иначе
		//	ЭтотОбъект.Прочитать();
		//	Элементы.Товары.Обновить();
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

// Возвращает "Истина" если введен корректный адрес публикации http-сервиса.
//
// Параметры:
//   АдресWebHook - Строка - Адрес публикации http-сервиса информационной базы для установки WebHook.
//
// Возвращаемое значение:
//   Булево - результат проверки адреса.
//
&НаСервереБезКонтекста
Функция ПроверитьАдресWebHookНаСервере(АдресWebHook) 

	Результат = Истина;

	СтруктураURL = КоннекторHTTP_BankExchange.РазобратьURL(АдресWebHook);
	Если СтруктураURL.Путь = "/" ИЛИ СтрНайти(СтруктураURL.Путь, "/hs/") = 0 Тогда //Адрес базы введен некоретно
		Результат = Ложь;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // ПроверитьАдресWebHookНаСервере

// Возврашает результат установки адреса для Webhook.
//
// Параметры:
//	 Токен - Строка - токен доступа к API монобанка.
//   АдресWebHook - Строка - Адрес публикации http-сервиса информационной базы для установки WebHook.
//
// Возвращаемое значение:
//   Булево, Строка - Истина - если успешно, Строка - если возникла ошибка.
//
&НаСервереБезКонтекста
Функция УстановитьАдресWebHookНаСервере(Токен, АдресWebHook) 
	
	Результат = Истина;
	АдресСервераМонобанк = "https://api.monobank.ua/personal/webhook";
	
	ТелоСтруктура = Новый Структура("webHookUrl", АдресWebHook);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-Token", Токен);
	
	ДопПараметры = Новый Структура("JSON, Заголовки", ТелоСтруктура, Заголовки);
	ДанныеОтвета = КоннекторHTTP_BankExchange.Post(АдресСервераМонобанк,, ДопПараметры);
	
	Если ДанныеОтвета.КодСостояния <> 200 Тогда
		сОтвет = КоннекторHTTP_BankExchange.КакJson(ДанныеОтвета);
		
		СтрокаРезультат = "";
		Для Каждого КлючИЗначение Из сОтвет Цикл
			
			СтрокаРезультат	= КлючИЗначение.Ключ + ": " + КлючИЗначение.Значение; 
			Прервать;
			
		КонецЦикла;
		Результат = СтрокаРезультат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // УстановитьАдресWebHookНаСервере 

#Область РегламентноеЗадание

&НаКлиенте
Процедура НастроитьРасписание(Расписание, Элемент, СтрокаРасписания)
	
	ВыполнитьНастройкуРасписания(Расписание, Элемент, СтрокаРасписания);
	Элемент.Заголовок = УстановитьНадписьРасписания(Расписание, СтрокаРасписания);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписания(РасписаниеЗадания, Элемент, СтрокаРасписания)
	
	Если РасписаниеЗадания = Неопределено Тогда
		РасписаниеЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьНастройкуРасписанияЗавершение", ЭтотОбъект, Новый Структура("ЭлементФормы, СтрокаРасписания, Расписание", Элемент, СтрокаРасписания, РасписаниеЗадания));
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписанияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание = Неопределено Тогда
		Расписание = РасписаниеРегламентногоЗаданияОбмена;
	КонецЕсли;
	
	ЭтотОбъект[ДополнительныеПараметры.СтрокаРасписания] = Расписание;
	ДополнительныеПараметры.ЭлементФормы.Заголовок = УстановитьНадписьРасписания(Расписание, ЭтотОбъект[ДополнительныеПараметры.СтрокаРасписания]);
	РасписаниеРегламентногоЗаданияОбмена = Расписание;
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьНадписьРасписания(Расписание, СтрокаРасписания)
	
	Если Расписание = Неопределено Тогда
		ТекстЗаголовка = НСтр("ru = 'Настроить расписание обмена'; uk = 'Налаштувати розклад обміну'");
	Иначе
		ТекстЗаголовка = Расписание;
	КонецЕсли;
	
	Возврат ТекстЗаголовка;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииИспользоватьРегламентныеЗадания()
	
	УстановитьДоступностьРасписанияОбмена();
	
	Если Объект.ИспользоватьРегламентныеЗадания Тогда
		
		ВыполнитьНастройкуРасписания(РасписаниеРегламентногоЗаданияОбмена, Элементы.НастроитьРасписание, "ИнтервалОбменаССайтом");
		Элементы.НастроитьРасписание.Заголовок = УстановитьНадписьРасписания(РасписаниеРегламентногоЗаданияОбмена, "ИнтервалОбменаССайтом");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРасписанияОбмена()
	Элементы.НастроитьРасписание.Доступность = Объект.ИспользоватьРегламентныеЗадания;
КонецПроцедуры

&НаСервере
// Создает новое задание очереди заданий.
//
// Возвращаемое значение: УникальныйИдентификатор.
//
Функция СоздатьНовоеЗадание(КодНастройки, НаименованиеНастройки, Расписание, ПолныйПарсинг = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(КодНастройки);
	
	ИдентификаторРегламентногоЗадания = Неопределено;
	Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание("СМП_ОбменСБанкамиAPI");
	Задание.Использование = Истина;
	Задание.Ключ = Строка(Новый УникальныйИдентификатор);
	Задание.Наименование = НаименованиеНастройки;
	Задание.Параметры = ПараметрыЗадания;
	Задание.Расписание = Расписание;
	Задание.Записать();
	
	ИдентификаторРегламентногоЗадания = Задание.УникальныйИдентификатор;
	
	Возврат ИдентификаторРегламентногоЗадания;
	
КонецФункции

&НаСервере
// Устанавливает параметры регламентного задания или задания очереди заданий.
//
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийОбластейДанных,
//  Использование - булево, флаг использования регламентного задания,
//  КодУзла - Строка - Код узла плана обмена
//  НаименованиеУзла - Строка - Наименование узла плана обмена
//  Расписание - РасписаниеРегламентногоЗадания.
//
Процедура УстановитьПараметрыЗадания(Задание, Использование, КодНастройки, НаименованиеНастройки, Расписание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(КодНастройки);
	
	Задание.Использование = Истина;
	Задание.Ключ = Строка(Новый УникальныйИдентификатор);
	Задание.Наименование = НаименованиеНастройки;
	Задание.Параметры = ПараметрыЗадания;
	Задание.Расписание = Расписание;
	Задание.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСтандартныхПодсистем

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	
КонецПроцедуры // Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта()

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

#КонецОбласти

#КонецОбласти
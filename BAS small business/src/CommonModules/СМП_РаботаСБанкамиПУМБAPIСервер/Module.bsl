
#Область РаботаСАпиБанка

Процедура ПолучитьДанныеССервисаБанкаПоСчету(ДанныеДляПоиска, ДанныеАвторизации, ТаблицаПлатежей)
	
	ТокенДоступа = ПолучитьТокенДоступа(ДанныеАвторизации);
	НомерСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляПоиска.БанковскийСчет, "НомерСчета");
	
	//Если Не УправлениеДенежнымиСредствами.НомерБанковскогоСчетаСоответствуетСтандартуIBAN(НомерСчета) Тогда
	//	
	//	ВызватьИсключение("Номер рахунку " + НомерСчета + "не відповідає стандарту IBAN");
	//	
	//КонецЕсли;
	
	СоединениеССервисом = ПолучитьСоединениеССервисомБанка();
	ЗапросПоискаДокумента = ПолучитьЗапросSearcher(
		ТокенДоступа, ДанныеДляПоиска.БанковскийСчет, ДанныеДляПоиска.ДатаНачала, ДанныеДляПоиска.ДатаОкончания, СоединениеССервисом);
	
	Результат = СоединениеССервисом.ОтправитьДляОбработки(ЗапросПоискаДокумента);
	
	Если Результат.КодСостояния <> 200 Тогда
		ВызватьИсключение(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
	КонецЕсли;
	
	МассивДокументов = ПолучитьСответствиеИзОтветаСервера(Результат.ПолучитьТелоКакСтроку());
	ЗаполнитьТаблицуПлатежей(ТаблицаПлатежей, МассивДокументов, НомерСчета);
	
	//// МЕХАНИЗМ ПОЛУЧЕНИЯ ДАНННЫХ ЧЕРЕЗ ВЫПИСКУ
	//Для каждого Строка Из МассивДокументов Цикл
	//	
	//	МассивВыписки = ПолучитьВыпискуПоИдентификатору(ТокенДоступа, СоединениеССервисом, Строка.Получить("hostId"), Строка.Получить("docId")); 
	//	
	//	СуммаДебит  = ПолучитьЧислоИзСтроки(МассивВыписки.Vegadoc.docbody.dt_turn);
	//	
	//	СуммаКредит = ПолучитьЧислоИзСтроки(МассивВыписки.Vegadoc.docbody.cr_turn);
	//	
	//	Если СуммаДебит = 0 И  СуммаКредит = 0  Тогда
	//		
	//		Продолжить;
	//		
	//	КонецЕсли;
	//	
	//	Если ТипЗнч(МассивВыписки.vegadoc.docbody.tran) = Тип("СписокXDTO") Тогда 	
	//		
	//		Для каждого Объект Из МассивВыписки.vegadoc.docbody.tran Цикл
	//			
	//			ОбработатьТранзакцию(Объект, НомерСчета, ТаблицаПлатежей); 
	//			
	//		КонецЦикла;
	//		
	//	ИначеЕсли ТипЗнч(МассивВыписки.vegadoc.docbody.tran) = Тип("ОбъектXDTO") Тогда 	
	//		
	//		ОбработатьТранзакцию(МассивВыписки.vegadoc.docbody.tran, НомерСчета, ТаблицаПлатежей);
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;	
	
КонецПроцедуры // ПолучитьДанныеССервисаБанкаПоСчету()

Функция ПолучитьТокенДоступа(ДанныеАвторизации)Экспорт
	
	ПараметрыPOST = ПолучитьСтрокуПараметровПост(ДанныеАвторизации);
	
	Соединение = Новый HTTPСоединение("auth.fuib.com",,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	
	ЗапросHTTP = Новый HTTPЗапрос("/auth/realms/VegaNet/protocol/openid-connect/token");
	ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	ЗапросHTTP.УстановитьТелоИзСтроки(ПараметрыPOST);
	
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP);
	
	Если Ответ.КодСостояния = 200 Тогда
		
		СоответсвиеОтвета = ПолучитьСответствиеИзОтветаСервера(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		
		ТокенДоступа = СоответсвиеОтвета.Получить("access_token");
		
		Возврат ТокенДоступа;
		
	Иначе 
		
		ВызватьИсключение(НСтр("ru='Ошибка при получении токена.'; uk='Помилка отримання токена доступу'"));
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗапросSearcher(ТокенДоступа, БанковскийСчет, ДатаНачала, ДатаОкончания, СоединениеССервисом)
	
	СтрокаЗапроса = "/war_veganet_api/document/searcher";
	
	ИдентификаторСчета = ПолучитьИдентификаторСчета(ТокенДоступа, СоединениеССервисом, БанковскийСчет);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторСчета) Тогда
		ВызватьИсключение(НСтр("ru='В ответе банка не найден счет.'; uk='У відповіді банка не знайдений рахунок'"));
	КонецЕсли;
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ИдентификаторСчета);
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("fromDate", Формат(ДатаНачала, "ДФ='dd.MM.yyyy HH:mm:ss'"));
	СтруктураЗапроса.Вставить("toDate", Формат(ДатаОкончания, "ДФ='dd.MM.yyyy HH:mm:ss'"));
	
	мСтатусы = Новый Массив;
	мСтатусы.Добавить("PROCESSED");
	СтруктураЗапроса.Вставить("documentState", мСтатусы);
	
	мТипы = Новый Массив;
	//мТипы.Добавить("STM"); // Выписка за день
	мТипы.Добавить("UAH"); // конкретные транзакции
	СтруктураЗапроса.Вставить("documentType" ,мТипы);
	СтруктураЗапроса.Вставить("documentAccounts", МассивСчетов);
	
	Заголовки = ПолучитьЗаголовкиЗапроса(ТокенДоступа);
	ТелоЗапроса = СформироватьJSON(СтруктураЗапроса);
	ЗапросHTTP = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
	ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8);
	
	Возврат ЗапросHTTP

КонецФункции // ПолучитьЗапрос()

Функция ПолучитьВыпискуПоИдентификатору(ТокенДоступа,СоединениеССервисом,ХостАйди,АйдиВыписки)

	СтрокаЗапроса = "/war_veganet_api/document/body/"+ХостАйди+"/"+Формат(АйдиВыписки,"ЧГ=");

	Заголовки = ПолучитьЗаголовкиЗапроса(ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
		
	Результат = СоединениеССервисом.Получить(ЗапросHTTP);
	
	Если Результат.КодСостояния <> 200 Тогда
		
		ВызватьИсключение(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		 
	КонецЕсли;
	
	Данные = ПрочитатьСтрокуОтветаИзТекста(Результат.ПолучитьТелоКакСтроку());
	
	Возврат Данные
	
КонецФункции 

Функция ПолучитьИдентификаторСчета(ТокенДоступа, СоединениеССервисом, БанковскийСчет)Экспорт

	сДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет,"НомерСчета, ВалютаДенежныхСредств.Наименование");
	
	Если СтрНайти(НРег(сДанные.ВалютаДенежныхСредствНаименование), "грн") > 0 Тогда
		КодВалютыСчета = "UAH";
	Иначе
		КодВалютыСчета = сДанные.ВалютаДенежныхСредствНаименование;
	КонецЕсли;
	
	СтрокаЗапроса = "/war_veganet_api/account";
	Заголовки = ПолучитьЗаголовкиЗапроса(ТокенДоступа);
	ЗапросHTTP = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
	Результат = СоединениеССервисом.Получить(ЗапросHTTP);
	
	Если Результат.КодСостояния <> 200 Тогда
		
		ВызватьИсключение(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		
	КонецЕсли;

	МассивСчетов = ПолучитьСответствиеИзОтветаСервера(Результат.ПолучитьТелоКакСтроку());
	
	ИдентификаторСчета = "";
	
	Для каждого Счет Из МассивСчетов Цикл
	
		Если Счет.Получить("iban") = сДанные.НомерСчета
			И Счет.Получить("currency") = КодВалютыСчета Тогда
		
			ИдентификаторСчета = Формат(Счет.Получить("accountId"),"ЧГ=");
			Прервать;
		
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторСчета

КонецФункции // ПолучитьИдентификаторСчета()

#КонецОбласти

#Область ПрочиеВспомогательныеМетоды

Функция ПолучитьСтрокуПараметровПост(ДанныеАвторизации)

	ШаблонСтроки = "grant_type=password&client_id=%1&username=%2&password=%3&client_secret=%4";
	СтрокаЗапроса = СтрШаблон(ШаблонСтроки, ДанныеАвторизации.ИД, ДанныеАвторизации.Логин, ДанныеАвторизации.Пароль, ДанныеАвторизации.Токен);
	
	Возврат СтрокаЗапроса

КонецФункции // ()

Функция ПрочитатьСтрокуОтветаИзТекста(строкаОтвета)
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(строкаОтвета);
	ФабрикаХДТО = Новый ФабрикаXDTO;
	
	Возврат ФабрикаХДТО.ПрочитатьXML(ЧтениеХМЛ);

КонецФункции 

Функция ПолучитьСответствиеИзОтветаСервера(СтрокаJson) 
	
	Чтениеjson = new ЧтениеJSON;
	Чтениеjson.УстановитьСтроку(СтрокаJson); 	
	СооответствиеЧтения = ПрочитатьJSON(Чтениеjson,Истина);
		
	Возврат СооответствиеЧтения

КонецФункции

Функция СформироватьJSON(Структура, ФормироватьСПереносами = Ложь)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	Если ФормироватьСПереносами Тогда
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(,Символы.Таб));
	Иначе
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,Символы.Таб));
	КонецЕсли; 
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;

	ЗаписатьJSON(ЗаписьJSON, Структура, НастройкиСериализацииJSON);
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

Функция ПолучитьСоединениеССервисомБанка()
	
	Сервер = "service.fuib.com";
	Порт = 4103;
	Логин = "";
	Пароль = "";
	Ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Прокси = Новый ИнтернетПрокси(Ложь);
	СоединениеHTTP = Новый HTTPСоединение(Сервер, Порт, Логин, Пароль, Прокси, , Ssl);
	
	Возврат СоединениеHTTP
	
КонецФункции // ПолучитьСоединениеССервисомБанка()

Функция ПолучитьЗаголовкиЗапроса(ТокенДоступа)

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type","application/json");
	Заголовки.Вставить("Authorization","Bearer " +ТокенДоступа); 
	Заголовки.Вставить("X-App-Channel","pure-api");
	Заголовки.Вставить("X-Flow-ID","5:6:EX");

	Возврат Заголовки

КонецФункции // ПолучитьЗаголовкиЗапроса()

Функция ПолучитьЧислоИзСтроки(ЧислоСтрокой)

	Попытка
	
		ЧислоИзСтроки = Число(ЧислоСтрокой);
	
	Исключение
		
		ЧислоИзСтроки = 0;
		
	КонецПопытки; 
	
	Возврат ЧислоИзСтроки

КонецФункции 

Функция ПолучитьТаблицуПлатежей()

	ТаблицаПлатежей = Новый ТаблицаЗначений;
		
	ТаблицаПлатежей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
	ТаблицаПлатежей.Колонки.Добавить("НомерДок",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("Номер",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	//ТаблицаПлатежей.Колонки.Добавить("ДатаДок", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаПлатежей.Колонки.Добавить("Списано", Новый ОписаниеТипов("Дата"));
	ТаблицаПлатежей.Колонки.Добавить("Поступило", Новый ОписаниеТипов("Дата"));
	ТаблицаПлатежей.Колонки.Добавить("ДатаПоступило",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("ДатаСписано",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("СчетОрганизации",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("Плательщик",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("Получатель",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("ПолучательСчет",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("ПлательщикСчет",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("НазначениеПлатежа",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("СуммаДокумента", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаПлатежей.Колонки.Добавить("СуммаСписано", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаПлатежей.Колонки.Добавить("СуммаПоступило", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаПлатежей.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаПлатежей.Колонки.Добавить("ПлательщикОКПО",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("ПолучательОКПО",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("ПлательщикМФО", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ТаблицаПлатежей.Колонки.Добавить("ПолучательМФО", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ТаблицаПлатежей.Колонки.Добавить("ПлательщикБанк", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	ТаблицаПлатежей.Колонки.Добавить("ПолучательБанк", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	
	Возврат ТаблицаПлатежей
	
КонецФункции // ПолучитьТаблицуПлатежей()

Функция ПолучитьСтруктуруОтбора(БанковскийСчет, НачалоПериода, КонецПериода, ЭтоРеглЗадание)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ДатаНачала", ?(ЭтоРеглЗадание, НачалоДня(НачалоПериода) - 86400, НачалоДня(НачалоПериода)));
	СтруктураОтбора.Вставить("ДатаОкончания", ?(ЭтоРеглЗадание, КонецДня(КонецПериода) - 86400, КонецДня(КонецПериода)));
	СтруктураОтбора.Вставить("БанковскийСчет", БанковскийСчет);
	
	Возврат СтруктураОтбора
	
КонецФункции

// Заполнение таблицы платежей данными транзакций.
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ЗаполнитьТаблицуПлатежей(ТаблицаПлатежей, МассивДокументов, НомерСчета) 
	
	//НомерСтроки = 1;
	
	Для Каждого сДокумент Из МассивДокументов Цикл
		
		СтрокаПлатеж = ТаблицаПлатежей.Добавить();
		
		СтрокаПлатеж.НомерДок = Формат(?(сДокумент["id"] = Неопределено, сДокумент["docId"], сДокумент["id"]), "ЧГ=0"); 
		СтрокаПлатеж.Номер = СтрокаПлатеж.НомерДок;
		СтрокаПлатеж.Сумма = Формат(сДокумент["amount"], "ЧРД=.; ЧГ=0");
		//СтрокаПлатеж.СуммаДокумента = сДокумент["amount"];
		СтрокаПлатеж.ПолучательСчет = сДокумент["correspondentIBAN"];
		СтрокаПлатеж.Получатель = сДокумент["correspondentName"];
		СтрокаПлатеж.ПолучательКПП =  сДокумент["correspondentTaxId"];
		СтрокаПлатеж.ПолучательБИК = сДокумент["correspondentBankMfo"];
		СтрокаПлатеж.ПолучательБанк1 = сДокумент["correspondentBankName"];
		
		СтрокаПлатеж.ПлательщикСчет = сДокумент["senderIBAN"];
		СтрокаПлатеж.ПлательщикКПП =  сДокумент["senderTaxId"];
		СтрокаПлатеж.Плательщик = сДокумент["senderName"];
		СтрокаПлатеж.ПлательщикБИК = сДокумент["senderBankMfo"];
		СтрокаПлатеж.ПлательщикБанк1 = сДокумент["senderBankName"];
		
		СтрокаПлатеж.НазначениеПлатежа = сДокумент["description"];
		СтрокаПлатеж.ДокументИД = сДокумент["docId"];
		
		//СтрокаПлатеж.ДатаДок = сДокумент["operationDate"];
		//СтрокаПлатеж.ДатаПоступило = сДокумент["operationDate"];
		//СтрокаПлатеж.ДатаСписано = сДокумент["operationDate"];
		//СтрокаПлатеж.СчетОрганизации = НомерСчета;
		
		Если сДокумент["type"] = "UAH" Тогда
			СтрокаПлатеж.КодВалюты = "980";
		КонецЕсли;
		
		СтрокаПлатеж.Дата = Дата(сДокумент["operationDate"]);
		СтрокаПлатеж.СуммаДокумента = Число(сДокумент["amount"]);
		
		Если НомерСчета = сДокумент["senderIBAN"] Тогда
			
			СтрокаПлатеж.Операция = "ПлатежноеПоручение";
			СтрокаПлатеж.СуммаСписано = СтрокаПлатеж.СуммаДокумента;
			СтрокаПлатеж.ДатаСписано = Дата(СтрокаПлатеж.Дата);
			СтрокаПлатеж.Списано = Дата(сДокумент["operationDate"]);
			
		Иначе
			
			СтрокаПлатеж.Операция = "ПлатежноеТребование";
			СтрокаПлатеж.СуммаПоступило = СтрокаПлатеж.СуммаДокумента;
			СтрокаПлатеж.ДатаПоступило = Дата(сДокумент["operationDate"]);
			СтрокаПлатеж.Поступило = Дата(сДокумент["operationDate"]);
			
		КонецЕсли;
		
		//НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры //Заполнение таблицы платежей данными транзакций

#КонецОбласти 

#Область ЗаполнениеДанных 

Процедура ОбработатьТранзакцию(Транзакция, НомерСчета, ТаблицаПлатежей)
	
	НоваяСтрока = ТаблицаПлатежей.Добавить();
	НоваяСтрока.НомерСтроки 		= ТаблицаПлатежей.Количество()+1;
	НоваяСтрока.НомерДок    		= Транзакция.ref_id;
	НоваяСтрока.Номер       		= Транзакция.ref_id;
	НоваяСтрока.ДатаДок     		= Транзакция.td;
	НоваяСтрока.Дата        		= Дата(Транзакция.td);
	НоваяСтрока.НазначениеПлатежа   = Транзакция.dscr;
	НоваяСтрока.СуммаСписано        = ПолучитьЧислоИзСтроки(Транзакция.dt);
	НоваяСтрока.СуммаПоступило      = ПолучитьЧислоИзСтроки(Транзакция.cr);
	
	Если НоваяСтрока.СуммаСписано > 0 Тогда 
		
		НоваяСтрока.СуммаДокумента      = НоваяСтрока.СуммаСписано;
		НоваяСтрока.Сумма               = НоваяСтрока.СуммаСписано;
		НоваяСтрока.ПолучательОКПО      = Транзакция.okpo;
		НоваяСтрока.Получатель          = Транзакция.name;
		НоваяСтрока.ПолучательСчет      = Транзакция.corr_iban;
		НоваяСтрока.ДатаСписано         = Транзакция.td;
		НоваяСтрока.Списано     		= Дата(Транзакция.td);
		НоваяСтрока.ПолучательМФО = Транзакция.mfo;
		
		НоваяСтрока.ПлательщикСчет = НомерСчета;
		
	Иначе
		
		НоваяСтрока.СуммаДокумента      = НоваяСтрока.СуммаПоступило;
		НоваяСтрока.Сумма               = НоваяСтрока.СуммаПоступило;
		НоваяСтрока.ПлательщикОКПО      = Транзакция.okpo;
		НоваяСтрока.Плательщик          = Транзакция.name;
		НоваяСтрока.ПлательщикСчет      = Транзакция.corr_iban;
		НоваяСтрока.Поступило   		= Дата(Транзакция.td);
		НоваяСтрока.ДатаПоступило       = Транзакция.td;
		НоваяСтрока.ПлательщикМФО = Транзакция.mfo;
		
		НоваяСтрока.ПолучательСчет = НомерСчета;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Прочитать(ФормаЗагрузкиКлиентБанка, пУчетнаяЗапись, пПараметрыДоступа, ТаблицаТаблицДокументов, ТаблицаКонтрагентов, пЭтоРеглЗадание = Ложь)Экспорт 
	
	ФормаЗагрузкиКлиентБанка.ТаблицаКонтрагентов.ПолучитьЭлементы().Очистить();
	// Подготавливаем структуры обработки данных.
	ДокументыКИмпорту = ФормаЗагрузкиКлиентБанка.Объект.Загрузка.Выгрузить();
	ДокументыКИмпорту.Колонки.Добавить("КодНазПлатежа", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1)));

	ИмпортЗагружаемые = Обработки.СМП_КлиентБанк.СформироватьСоответствиеЗагружаемых();
	ИмпортНеПустые = Неопределено;
	ИмпортНеПустыеПлатежноеПоручение = Неопределено;
	ИмпортНеПустыеПлатежноеПоручениеБюджет = Неопределено;
	РасчетныеСчетаКИмпорту = ФормаЗагрузкиКлиентБанка.Объект.ИмпортРасчетныеСчета.Выгрузить();
	
	Обработки.СМП_КлиентБанк.СформироватьСоответствияНеПустыхПриИмпорте(
	ИмпортНеПустые,
	ИмпортНеПустыеПлатежноеПоручение,
	ИмпортНеПустыеПлатежноеПоручениеБюджет
	);
	ТегиРасчетногоСчета = Обработки.СМП_КлиентБанк.СоздатьСоответствиеИзСтроки(
	ВРег("ДатаНачала,ДатаКонца,РасчСчетОрг,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток,КонецРасчСчет")
	);
	ТегиЗаголовка = Обработки.СМП_КлиентБанк.СоздатьСоответствиеИзСтроки(
	ВРег("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца")
	);
	СтруктураЗаголовок = Новый Структура(
	ВРег("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца")
	);
	ФормаЗагрузкиКлиентБанка.ИмпортЗаголовок = СтруктураЗаголовок;
	ИмпортПризнакОбмена = Ложь;
	НайденКонецФайла = Ложь;
	ИмпортВидыДокументов = Новый Массив;
	РасчетныеСчетаКИмпорту.Очистить();
	ДокументыКИмпорту.Очистить();
		
	КонтекстФормы = Новый Структура;
	КонтекстФормы.Вставить("ИмпортТекстДляРазбора", "");
	КонтекстФормы.Вставить("ПослеЗагрузкиВыписокВ1С", ФормаЗагрузкиКлиентБанка.ПослеЗагрузкиВыписокВ1С);
	КонтекстФормы.Вставить("ИскатьВСправочникеСоответствий", ФормаЗагрузкиКлиентБанка.ИскатьВСправочникеСоответствий);
	КонтекстФормы.Вставить("ТаблицаКонтрагентов", ТаблицаКонтрагентов);
	КонтекстФормы.Вставить("РасчетныеСчетаКИмпорту", РасчетныеСчетаКИмпорту);
	КонтекстФормы.Вставить("ДокументыКИмпорту", ДокументыКИмпорту);
	КонтекстФормы.Вставить("ТаблицаТаблицДокументов", ТаблицаТаблицДокументов);
	Если ФормаЗагрузкиКлиентБанка.ПослеЗагрузкиВыписокВ1С Тогда
		КонтекстФормы.Вставить("СтруктураДанныхЗагрузки", ФормаЗагрузкиКлиентБанка.СтруктураДанныхЗагрузки);
	КонецЕсли;
	
	ВременнаяСтрока = ФормаЗагрузкиКлиентБанка.ТаблицаТаблицДокументов.Добавить();
	КонтекстФормы.Вставить("ТаблицаНайденныхДокументов", ВременнаяСтрока.ТаблицаНайденныхДокументов.Выгрузить());
	ФормаЗагрузкиКлиентБанка.ТаблицаТаблицДокументов.Удалить(0);
	
	КонтекстФормы.Вставить("ЕстьОтборПоБанковскомуСчету", ФормаЗагрузкиКлиентБанка.ЕстьОтборПоБанковскомуСчету);
	КонтекстФормы.Вставить("ВыдаватьСообщенияОНеверныхРеквизитахИСекциях", ФормаЗагрузкиКлиентБанка.ВыдаватьСообщенияОНеверныхРеквизитахИСекциях);
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Организация", ФормаЗагрузкиКлиентБанка.Объект.Организация);
	СтруктураОбъекта.Вставить("БанковскийСчет", ФормаЗагрузкиКлиентБанка.Объект.БанковскийСчет);
	СтруктураОбъекта.Вставить("АвтоматическиПодставлятьДокументы", ФормаЗагрузкиКлиентБанка.Объект.АвтоматическиПодставлятьДокументы);
	СтруктураОбъекта.Вставить("АнализироватьИсториюВыбораЗначенийРеквизитов", ФормаЗагрузкиКлиентБанка.Объект.АнализироватьИсториюВыбораЗначенийРеквизитов);
	СтруктураОбъекта.Вставить("СтатьяДДСИсходящий", ФормаЗагрузкиКлиентБанка.Объект.СтатьяДДСИсходящий);
	СтруктураОбъекта.Вставить("СтатьяДДСВходящий", ФормаЗагрузкиКлиентБанка.Объект.СтатьяДДСВходящий);
	СтруктураОбъекта.Вставить("СпособЗачета", ФормаЗагрузкиКлиентБанка.Объект.СпособЗачета);
	
	КонтекстФормы.Вставить("Объект", СтруктураОбъекта);

	СтруктураОтбора = ПолучитьСтруктуруОтбора(ФормаЗагрузкиКлиентБанка.Объект.БанковскийСчет, 
		ФормаЗагрузкиКлиентБанка.Объект.НачПериода, КонецДня(ФормаЗагрузкиКлиентБанка.Объект.КонПериода), пЭтоРеглЗадание);
	ПолучитьДанныеССервисаБанкаПоСчету(СтруктураОтбора, пПараметрыДоступа, ДокументыКИмпорту);
	
	НомерСтроки = 0;
	
	КоличествоНеНайденныхКонтрагентов = 0;
	КоличествоНеНайденныхРСчетов = 0;
	
	ПараметрыВыделенияКолонок = Новый Структура("ВыделитьКолонкуДокумент, ВыделитьКолонкуСуммаСписано, ВыделитьКолонкуСуммаПоступило, 
	|ВыделитьКолонкуКонтрагент, ВыделитьКолонкуДоговор, ВыделитьКолонкуРСКонтрагента, ВыделитьКолонкуВидОперации", 
	Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь);
	
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		Если (СтрокаДокумента.ПлательщикСчет = ФормаЗагрузкиКлиентБанка.Объект.БанковскийСчет.НомерСчета
			ИЛИ СтрокаДокумента.ПолучательСчет  = ФормаЗагрузкиКлиентБанка.Объект.БанковскийСчет.НомерСчета) 
			И ЗначениеЗаполнено(ФормаЗагрузкиКлиентБанка.Объект.БанковскийСчет.ВалютаДенежныхСредств)
			Тогда
			
			ФормаЗагрузкиКлиентБанка.БанковскийСчетНомер = ФормаЗагрузкиКлиентБанка.Объект.БанковскийСчет.НомерСчета;
			ФормаЗагрузкиКлиентБанка.БанковскийСчетВалюта = ФормаЗагрузкиКлиентБанка.Объект.БанковскийСчет.ВалютаДенежныхСредств;
			
			Обработки.СМП_КлиентБанк.РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, Неопределено, ПараметрыВыделенияКолонок, 
				ФормаЗагрузкиКлиентБанка.Объект, ТаблицаТаблицДокументов, КонтекстФормы, ФормаЗагрузкиКлиентБанка.ПослеЗагрузкиВыписокВ1С);
			НомерСтроки = НомерСтроки + 1;
			СтрокаДокумента.НомерСтроки = НомерСтроки;
			
			Для каждого КолонкаИмпорта из ДокументыКИмпорту.Колонки Цикл
				Обработки.СМП_КлиентБанк.ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, КолонкаИмпорта.Имя, КолонкаИмпорта.Заголовок, ИмпортНеПустые);
			КонецЦикла;
			
			Если ТипЗнч(СтрокаДокумента.Контрагент)=Тип("Строка") ИЛИ
				ТипЗнч(СтрокаДокумента.СчетКонтрагента)=Тип("Строка") ИЛИ
				ТипЗнч(СтрокаДокумента.Договор)=Тип("Строка") Тогда
				
				Обработки.СМП_КлиентБанк.СписокНенайденных(СтрокаДокумента, ФормаЗагрузкиКлиентБанка.Объект.БанковскийСчет, 
					ТаблицаКонтрагентов, КоличествоНеНайденныхКонтрагентов, КоличествоНеНайденныхРСчетов);
			КонецЕсли;
		Иначе
			//остальные помечаем для последующего удаления
			СтрокаДокумента.НомерСтроки = 0;
		КонецЕсли;
	КонецЦикла;
	
	//Удалим не нужные строки из таблицы
	Количество = ДокументыКИмпорту.количество()-1;
	Для й=0 по Количество Цикл
		Если ДокументыКИмпорту[Количество-й].НомерСтроки = 0 Тогда
			ДокументыКИмпорту.Удалить(Количество-й);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		СтрокаДокумента.НазначениеПлатежа = СокрЛП(СтрокаДокумента.НазначениеПлатежа);
		СтрокаДокумента.НомерКартинки = ?(ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок), 0, 1);
	КонецЦикла;
	
	ФормаЗагрузкиКлиентБанка.Объект.Загрузка.Очистить();
	ФормаЗагрузкиКлиентБанка.Объект.Загрузка.Загрузить(ДокументыКИмпорту);
	
	ФормаЗагрузкиКлиентБанка.Объект.ИмпортРасчетныеСчета.Очистить();
	ФормаЗагрузкиКлиентБанка.Объект.ИмпортРасчетныеСчета.Загрузить(РасчетныеСчетаКИмпорту);
	
КонецПроцедуры // Прочитать()

// Для загрузки выписок через регламентное задание:
//
// Параметры:
//   пОбработкаКлиентБанк - ОбработкаОбъкет.СМП_КлиентБанк
//   пУчетнаяЗапись - СправочникСсылка.СМП_УчетныеЗаписиБанков - настройки.
//
Процедура ВыполнитьРегламент(пОбработка, пУчетнаяЗапись) Экспорт
	
	сПараметрыДоступа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(пУчетнаяЗапись, "ИД, Токен, Логин, Пароль");
	
	ТаблицаТаблицДокументов = Новый ТаблицаЗначений;
	ТаблицаТаблицДокументов.Колонки.Добавить("ТаблицаНайденныхДокументов", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТаблицДокументов.Колонки.Добавить("НомерСтрокиВТаблицеИмпорта", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	
	ДокументыКИмпорту = пОбработка.Загрузка.Выгрузить();
	ДобавитьКолонкиДокументыКИмпорту(ДокументыКИмпорту);
	РасчетныеСчетаКИмпорту = пОбработка.ИмпортРасчетныеСчета.Выгрузить();
	РасчетныеСчетаКИмпорту.Очистить();
	ДокументыКИмпорту.Очистить();
	
	СтруктураОтбора = ПолучитьСтруктуруОтбора(пОбработка.БанковскийСчет, 
		пОбработка.НачПериода, КонецДня(пОбработка.КонПериода), Истина);
	ПолучитьДанныеССервисаБанкаПоСчету(СтруктураОтбора, сПараметрыДоступа, ДокументыКИмпорту);
	
	КоличествоНеНайденныхКонтрагентов = 0;
	КоличествоНеНайденныхРСчетов = 0;
	
	ПараметрыВыделенияКолонок = Новый Структура("ВыделитьКолонкуДокумент, ВыделитьКолонкуСуммаСписано, ВыделитьКолонкуСуммаПоступило, 
	|ВыделитьКолонкуКонтрагент, ВыделитьКолонкуДоговор, ВыделитьКолонкуРСКонтрагента, ВыделитьКолонкуВидОперации", 
	Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь);
	
	КонтекстФормы = Новый Структура;
	КонтекстФормы.Вставить("ТаблицаНайденныхДокументов", ИнициализироватьТаблицуНайденныхДокументов());
	
	НомерСтроки = 0;
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		Если ((СтрокаДокумента.ПлательщикСчет = пОбработка.БанковскийСчет.НомерСчета 
			ИЛИ СтрокаДокумента.ПолучательСчет  = пОбработка.БанковскийСчет.НомерСчета) 
			ИЛИ (СтрокаДокумента.ПлательщикСчет = пОбработка.БанковскийСчет.НомерСчетаУстаревший 
			ИЛИ СтрокаДокумента.ПолучательСчет  = пОбработка.БанковскийСчет.НомерСчетаУстаревший))
			И (Не ЗначениеЗаполнено(пОбработка.БанковскийСчет.ВалютаДенежныхСредств) 
			ИЛИ пОбработка.БанковскийСчет.ВалютаДенежныхСредств.Код = СтрокаДокумента.КодВалюты) Тогда
			
			//РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, ПараметрыВыделенияКолонок,, пОбработка);
			Обработки.СМП_КлиентБанк.РаспознатьДанныеВСтрокеДокумента(
				СтрокаДокумента, 
				Неопределено, 
				ПараметрыВыделенияКолонок, 
				пОбработка, 
				ТаблицаТаблицДокументов, 
				КонтекстФормы, 
				Ложь);
				
			НомерСтроки = НомерСтроки + 1;
			СтрокаДокумента.НомерСтроки = НомерСтроки;
			
		Иначе
			//остальные помечаем для последующего удаления
			СтрокаДокумента.НомерСтроки = 0;
		КонецЕсли;
	КонецЦикла;
	
	//Удалим не нужные строки из таблицы
	Количество = ДокументыКИмпорту.количество()-1;
	Для й=0 по Количество Цикл
		Если ДокументыКИмпорту[Количество-й].НомерСтроки = 0 Тогда
			ДокументыКИмпорту.Удалить(Количество-й);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		
		Если Не СтрокаДокумента.Проведен тогда
			СтрокаДокумента.Загружать = Истина;
		КонецЕсли;
		СтрокаДокумента.НазначениеПлатежа = СокрЛП(СтрокаДокумента.НазначениеПлатежа);
		СтрокаДокумента.НомерКартинки = ?(ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок), 0, 1);
		
		//Доработать учет галочки в справочнике СМП_УчетныеЗаписиБанков
		//СтрокаДокумента.
		//Если Настройки.СоздатьНовогоКонтрагентаПриЗагрузкеВыписки тогда
		//	Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) и ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка") Тогда
		//		
		//		СтрокаДокумента.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.ИспользоватьСуществующего;
		//		
		//		Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) тогда
		//			СтрокаДокумента.ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.ИспользоватьСуществующего;
		//		Иначе
		//			СтрокаДокумента.ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С;
		//		КонецЕсли;
		//		
		//		Если ЗначениеЗаполнено(СтрокаДокумента.Договор) тогда
		//			СтрокаДокумента.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.ИспользоватьСуществующего;
		//		Иначе
		//			СтрокаДокумента.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С;
		//		КонецЕсли;
		//		
		//	Иначе	
		//		СтрокаДокумента.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С;
		//		СтрокаДокумента.ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С;
		//		СтрокаДокумента.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С;
		//	КонецЕсли;
		//Иначе
		//	СтрокаДокумента.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
		//	СтрокаДокумента.ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
		//	СтрокаДокумента.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
		//КонецЕсли;
		
	КонецЦикла;
	
	//Если ДокументыКИмпорту.Количество() > 0 тогда
	//	ЗаписатьЗначениеСведения(Объект.БанковскийСчет, ДокументыКИмпорту[ДокументыКИмпорту.Количество()-1].ДокументИД, ДокументыКИмпорту[ДокументыКИмпорту.Количество()-1].Дата );
	//КонецЕсли;
	
	пОбработка.Загрузка.Очистить();
	пОбработка.Загрузка.Загрузить(ДокументыКИмпорту);
	
	пОбработка.ИмпортРасчетныеСчета.Очистить();
	пОбработка.ИмпортРасчетныеСчета.Загрузить(РасчетныеСчетаКИмпорту);
	
КонецПроцедуры //ВыполнитьРегламент

// Реквизит формы "ФормаЗагрузка".
//
// Параметры:
//   Нет
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ИнициализироватьТаблицуНайденныхДокументов() 
	
	ТаблицаНайденныхДокументов = Новый ТаблицаЗначений;
	ТаблицаНайденныхДокументов.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаНайденныхДокументов.Колонки.Добавить("Номер", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаНайденныхДокументов.Колонки.Добавить("ВидОперации", 
		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийРасходСоСчета, ПеречислениеСсылка.ВидыОперацийПоступлениеНаСчет"));
	ТаблицаНайденныхДокументов.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаНайденныхДокументов.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаНайденныхДокументов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ПоступлениеНаСчет, ДокументСсылка.РасходСоСчета"));
	ТаблицаНайденныхДокументов.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
	ТаблицаНайденныхДокументов.Колонки.Добавить("Корреспонденция", Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий"));
	ТаблицаНайденныхДокументов.Колонки.Добавить("Статья", Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
	ТаблицаНайденныхДокументов.Колонки.Добавить("СчетКонтрагента", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаНайденныхДокументов.Колонки.Добавить("ВидДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаНайденныхДокументов.Колонки.Добавить("БудетОбрабатыватьсяПриЗагрузке", Новый ОписаниеТипов("Булево"));
	ТаблицаНайденныхДокументов.Колонки.Добавить("ДатаДок", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Возврат ТаблицаНайденныхДокументов;
	
КонецФункции // ИнициализироватьТаблицуТаблицДокументов

// .
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьКолонкиДокументыКИмпорту(пДокументыКИмпорту) 
	
	//пДокументыКИмпорту.Колонки.Добавить("", Новый ОписаниеТипов());
	пДокументыКИмпорту.Колонки.Добавить("ДокументНеЗагружен", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	пДокументыКИмпорту.Колонки.Добавить("ОписаниеОшибокПодТЧ", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	пДокументыКИмпорту.Колонки.Добавить("КонтрагентНеНайденКартинка", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	пДокументыКИмпорту.Колонки.Добавить("КонтрагентНайден", Новый ОписаниеТипов("Булево"));
	пДокументыКИмпорту.Колонки.Добавить("СчетКонтрагентаНеНайденКартинка", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	пДокументыКИмпорту.Колонки.Добавить("ДоговорНеНайденКартинка", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	пДокументыКИмпорту.Колонки.Добавить("СуммаСписаноСМинусом", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	пДокументыКИмпорту.Колонки.Добавить("ДокументНайден", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	пДокументыКИмпорту.Колонки.Добавить("ВидОперацииНеНайденКартинка", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	пДокументыКИмпорту.Колонки.Добавить("НеВерныйФорматСуммыКартинка", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	пДокументыКИмпорту.Колонки.Добавить("НесколькоДокументовКартинка", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	пДокументыКИмпорту.Колонки.Добавить("СчетКонтрагентаИсходный", 
		Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета, Строка", , Новый КвалификаторыСтроки(100)));
	пДокументыКИмпорту.Колонки.Добавить("КодНазПлатежа", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1)));
	
КонецПроцедуры //ДобавитьКолонкиДокументыКИмпорту

#КонецОбласти
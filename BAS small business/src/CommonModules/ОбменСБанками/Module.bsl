////////////////////////////////////////////////////////////////////////////////
// ОбменСБанками: механизм обмена электронными документами с банками.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПолучениеПараметровОбменаСБанком

// Определяет, используется ли сервис 1C:ДиректБанк
// 
// Возвращаемое значение:
//  Булево - значение функциональной опции.
//
Функция ИспользуетсяСервисДиректБанк() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками");

КонецФункции

// Определяет, возможен ли прямой обмен с банком
//
// Параметры:
//  БИК - Строка - БИК банка
//  Проект - Число, Неопределено - Признак проекта, которые поддерживает банк.
//     * 1 - Платежные документы.
//     * 2 - Зарплатные документы.
//     * Неопределено - любой из проектов.
//  Рекомендуется - Булево - (возвращаемый параметр) - признак, что в банке поддержано
//                                                     автоматическое получение настроек обмена.
//
// Возвращаемое значение:
//  Булево - Если Истина, то возможен прямой обмен с банком, иначе Ложь.
//
Функция ВозможенПрямойОбменСБанком(БИК, Проект = Неопределено, Рекомендуется = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Ложь;
	
	Макет = ОбменСБанкамиСлужебныйПовтИсп.СписокБанков();
	
	КоличествоЗаписей = Макет.ВысотаТаблицы;
	
	Для Индекс = 1 По КоличествоЗаписей Цикл
		БИКБанка = Макет.Область(Индекс, 2).Текст;
		Если БИК <> БИКБанка Тогда
			Продолжить;
		КонецЕсли;
		Рекомендуется = Макет.Область(Индекс, 6).Текст = "1";
		
		Если Проект = Неопределено Тогда
			ВозвращаемоеЗначение = Истина;
			Прервать;
		КонецЕсли;
		
		ПроектыВФайлеСтрокой = Макет.Область(Индекс, 8).Текст;
		Если ЗначениеЗаполнено(ПроектыВФайлеСтрокой) Тогда
			МассивПроектовВФайле = СтрРазделить(ПроектыВФайлеСтрокой, ",", Ложь);
			ВозвращаемоеЗначение = МассивПроектовВФайле.Найти(Строка(Проект)) <> Неопределено;
		Иначе
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		Прервать;
	КонецЦикла;

	Возврат ВозвращаемоеЗначение;

КонецФункции

// Формирует табличный документ на основании данных электронного документа
//
// Параметры:
//    СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена с банком.
//
// Возвращаемое значение:
//    ТабличныйДокумент, Неопределено - сформированная форма просмотра электронного документа или Неопределено.
//
Функция ФормаПросмотраЭД(СообщениеОбмена) Экспорт
	
	Возврат Документы.СообщениеОбменСБанками.ФайлДанныхЭД(СообщениеОбмена);
	
КонецФункции

// Определяет готовые к отправке платежные документы
//
// Параметры:
//  МассивДокументов - Массив из ОпределяемыйТип.ВладелецОбменСБанками - исходный массив документов,
//                     которые предполагается отправить в банк.
// 
// Возвращаемое значение:
//   Массив из ОпределяемыйТип.ВладелецОбменСБанками - массив документов, которые можно отправить в банк.
//
Функция ГотовыеКОтправкеДокументы(МассивДокументов) Экспорт

	ОписаниеТипов = Метаданные.РегистрыСведений.СостоянияОбменСБанками.Измерения.СсылкаНаОбъект.Тип;

	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("СсылкаНаДокумент", ОписаниеТипов);
	Для Каждого ЭлементМассива Из МассивДокументов Цикл
		ТаблицаДокументов.Добавить().СсылкаНаДокумент = ЭлементМассива;
	КонецЦикла;
	
	СостоянияГотовыхКОтправкеДокументов = Новый Массив;
	СостоянияГотовыхКОтправкеДокументов.Добавить(Перечисления.СостоянияОбменСБанками.НеСформирован);
	СостоянияГотовыхКОтправкеДокументов.Добавить(Перечисления.СостоянияОбменСБанками.НаПодписи);
	СостоянияГотовыхКОтправкеДокументов.Добавить(Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка);
	СостоянияГотовыхКОтправкеДокументов.Добавить(Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждение);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.УстановитьПараметр("СостоянияГотовыхКОтправкеДокументов", СостоянияГотовыхКОтправкеДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.СсылкаНаДокумент КАК СсылкаНаДокумент
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументы.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	СостоянияОбменСБанками.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТСостоянияОбменов
	|ИЗ
	|	ВТДокументы КАК ВТДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	|		ПО ВТДокументы.СсылкаНаДокумент = СостоянияОбменСБанками.СсылкаНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСостоянияОбменов.СсылкаНаДокумент КАК СсылкаНаДокумент
	|ИЗ
	|	ВТСостоянияОбменов КАК ВТСостоянияОбменов
	|ГДЕ
	|	ВТСостоянияОбменов.Состояние В (&СостоянияГотовыхКОтправкеДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТСостоянияОбменов.СсылкаНаДокумент
	|ИЗ
	|	ВТСостоянияОбменов КАК ВТСостоянияОбменов
	|ГДЕ
	|	ВТСостоянияОбменов.Состояние ЕСТЬ NULL";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНаДокумент");
	
КонецФункции

// Производит поиск настройки обмена с банком. Возвращает первую найденную настройку обмена.
//
// Параметры:
//   Организация - ОпределяемыйТип.Организация - организация, указанная в настройке;
//   Банк - ОпределяемыйТип.БанкОбменСБанками - банк, указанный в настройке;
//   ТолькоДействительная - Булево - Истина - поиск только действующей настройки, Ложь - поиск любой настройки.
//
// Возвращаемое значение:
//   СправочникСсылка.НастройкиОбменСБанками, Неопределено - найденная настройка обмена с банком.
//
Функция НастройкаОбмена(Организация, Банк = Неопределено, ТолькоДействительная = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	НастройкиОбменСБанками.Ссылка
	               |ИЗ
	               |	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	               |ГДЕ
	               |	НастройкиОбменСБанками.Организация = &Организация
	               |	И &УсловиеПоБанку
	               |	И НЕ НастройкиОбменСБанками.Недействительна
	               |	И НЕ НастройкиОбменСБанками.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	НастройкиОбменСБанками.Ссылка
	               |ИЗ
	               |	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	               |ГДЕ
	               |	НастройкиОбменСБанками.Организация = &Организация
	               |	И &УсловиеПоБанку";
	
	Если ЗначениеЗаполнено(Банк) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоБанку", "НастройкиОбменСБанками.Банк = &Банк");
		Запрос.УстановитьПараметр("Банк", Банк);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоБанку", "Истина");
	КонецЕсли;

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Результат = МассивРезультатов[0].Выбрать();

	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	
	Если НЕ ТолькоДействительная Тогда
		Результат = МассивРезультатов[1].Выбрать();
		Если Результат.Следующий() Тогда
			Возврат Результат.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получает текущие статусы документов.
//
// Параметры:
//  МассивОбъектов - Массив - документы, для которых требуется получить статусы
//    * ДокументСсылка - ссылка на документ информационной базы
//  МассивСтатусов - Массив - статусы документов из первого параметра
//    * ПеречислениеСсылка.СтатусыОбменСБанками - текущий статус электронного документа,
//    * Неопределено - нет актуального электронного документа для документа информационной базы.
//
Процедура ПолучитьСтатусыДокументов(МассивОбъектов, МассивСтатусов) Экспорт
	
	ОписаниеТипов = Метаданные.РегистрыСведений.СостоянияОбменСБанками.Измерения.СсылкаНаОбъект.Тип;

	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Документ", ОписаниеТипов);
	Для Каждого ЭлементМассива Из МассивОбъектов Цикл
		ТаблицаДокументов.Добавить().Документ = ЭлементМассива;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СсылкиНаДокументы.Документ
	               |ПОМЕСТИТЬ Документы
	               |ИЗ
	               |	&СсылкиНаДокументы КАК СсылкиНаДокументы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Документы.Документ,
	               |	СостоянияОбменСБанками.СообщениеОбмена.Статус КАК Статус
	               |ИЗ
	               |	Документы КАК Документы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	               |		ПО Документы.Документ = СостоянияОбменСБанками.СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкиНаДокументы", ТаблицаДокументов);
	МассивСтатусов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Статус");
	
КонецПроцедуры

// Формирование текстового представления рекламы 1С:ДиректБанк.
//
// Параметры:
//  ДополнительнаяИнформация - Структура - с полями:
//   * Картинка - Картинка - картинка из библиотеки картинок;
//   * Текст - Строка - форматированный текст надписи с навигационными ссылками.
//  МассивСсылок - Массив - список ссылок на объекты.
Процедура ПриВыводеНавигационнойСсылкиВФормеОбъектаИБ(ДополнительнаяИнформация, МассивСсылок) Экспорт
	
	ДанныеБанковскогоСчета = ОбменСБанкамиСлужебныйВызовСервера.ПолучитьДанныеБанковскогоСчетаИзДокумента(МассивСсылок[0]);
	
	Если ДанныеБанковскогоСчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Организация, Банк");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ДанныеБанковскогоСчета);
	
	БанкиДляОбмена = ОбменСБанкамиСлужебный.БанкиДляНастройкиОбменаЧерезДиректБанк(ПараметрыОтбора);
	
	Если НЕ ЗначениеЗаполнено(БанкиДляОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНавигационнойСсылки = НСтр("ru = 'В банк %1 можно отправлять платежные документы в электронном виде'; uk = 'У банк %1 можна надсилати платіжні документи в електронному вигляді'");
	ТекстНавигационнойСсылки = СтрШаблон(ТекстНавигационнойСсылки, Строка(БанкиДляОбмена[0].Банк)); 
	
	ШаблонНавигационнойСсылки = НСтр("ru = '<a href = ""Реклама1СДиректБанк"">%1</a>'; uk = '<a href = ""Реклама1СДиректБанк"">%1</a>'");
	ДополнительнаяИнформация.Текст    = СтрШаблон(ШаблонНавигационнойСсылки, ТекстНавигационнойСсылки);
	ДополнительнаяИнформация.Картинка = БиблиотекаКартинок.DirectBank16;
	
КонецПроцедуры

// Получает параметры обмена с банком
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - ссылка на организацию.
//  Банк - ОпределяемыйТип.БанкОбменСБанками - ссылка на банк.
// 
// Возвращаемое значение:
//  Неопределено - отсутствует настройка обмена с банком через сервис 1С:ДиректБанк.
//  Структура - текущие параметры обмена с банком. Содержит поля:
//     * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена с банком.
//     * Недействительна - Булево - признак отключенной настройки или помеченной на удаление.
//     * ДоступноАвтоматическоеПолучениеВыписки - Булево - по текущей настройке обмена возможно получение выписки в автоматическом режиме.
//     * ПринимаемыеВидыЭД - Массив - виды электронных документов, принимаемых банком. В элементах массива ПеречислениеСсылка.ВидыЭДОбменСБанками.
//     * ДатаПоследнегоПолученияВыписки - Дата - дата последнего получения выписки банка.
//     * ТекстОшибки - Строка - текст ошибки, которая произошла при последнем получении выписки.
//     * ВключеноАвтоматическоеПолучениеВыписки - Булево - по текущей настройке обмена запущено автоматическое получение выписки банка.
//     * ДатаПоследнейСинхронизации - Дата - дата последнего запуска синхронизации с банком.
//
Функция ПараметрыОбмена(Организация, Банк) Экспорт
	
	СтруктураВозврата = Новый Структура;
	НастройкаОбмена = ОбменСБанкамиСлужебный.НастройкаОбмена(Организация, Банк, Ложь);
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	СтруктураВозврата.Вставить("НастройкаОбмена", НастройкаОбмена);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменСБанками.ПометкаУдаления КАК ПометкаУдаления,
	|	НастройкиОбменСБанками.Недействительна КАК Недействительна,
	|	НастройкиОбменСБанками.ДоступноАвтоматическоеПолучениеВыписки КАК ДоступноАвтоматическоеПолучениеВыписки
	|ИЗ
	|	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|ГДЕ
	|	НастройкиОбменСБанками.Ссылка = &НастройкаОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент КАК ИсходящийДокумент
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанкамиИсходящиеДокументы
	|ГДЕ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка = &НастройкаОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыОбменСБанками.ДатаПолученияВыписки КАК ДатаПолученияВыписки,
	|	ПараметрыОбменСБанками.ТекстОшибки КАК ТекстОшибки,
	|	ПараметрыОбменСБанками.АвтоматическоеПолучениеВыписки КАК АвтоматическоеПолучениеВыписки,
	|	ПараметрыОбменСБанками.ДатаСинхронизации КАК ДатаСинхронизации
	|ИЗ
	|	РегистрСведений.ПараметрыОбменСБанками КАК ПараметрыОбменСБанками
	|ГДЕ
	|	ПараметрыОбменСБанками.НастройкаОбмена = &НастройкаОбмена";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаОсновная = Результат[0].Выбрать();
	ВыборкаОсновная.Следующий();
	
	СтруктураВозврата.Вставить("Недействительна", ВыборкаОсновная.ПометкаУдаления ИЛИ  ВыборкаОсновная.Недействительна);
	СтруктураВозврата.Вставить(
		"ДоступноАвтоматическоеПолучениеВыписки", ВыборкаОсновная.ДоступноАвтоматическоеПолучениеВыписки);
	
	ВыборкаВидыЭД = Результат[1].Выбрать();

	МассивЭД = Новый Массив;
	Пока ВыборкаВидыЭД.Следующий() Цикл
		МассивЭД.Добавить(ВыборкаВидыЭД.ИсходящийДокумент);
	КонецЦикла;
	
	СтруктураВозврата.Вставить("ПринимаемыеВидыЭД", МассивЭД);
	
	ВыборкаОперативныеПараметры = Результат[2].Выбрать();
	ВыборкаОперативныеПараметры.Следующий();
	
	СтруктураВозврата.Вставить("ДатаПоследнегоПолученияВыписки", ВыборкаОперативныеПараметры.ДатаПолученияВыписки);
	СтруктураВозврата.Вставить("ТекстОшибки", ВыборкаОперативныеПараметры.ТекстОшибки);
	СтруктураВозврата.Вставить(
		"ВключеноАвтоматическоеПолучениеВыписки", ВыборкаОперативныеПараметры.АвтоматическоеПолучениеВыписки);
	СтруктураВозврата.Вставить("ДатаПоследнейСинхронизации", ВыборкаОперативныеПараметры.ДатаСинхронизации);
	
	Возврат СтруктураВозврата;
		
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ОбменСБанкамиКлиентСервер.ПараметрыСозданияФормыСписка.
// Формирует параметры создания формы списка документов.
//
// Возвращаемое значение:
//   Структура - содержит поля:
//     * ГруппаКоманд - Структура - параметры создания группы команд 1С:ДиректБанк, содержит поля:
//        ** Добавить - Булево - если Истина (по умолчанию), то группа команд будет создана автоматически
//        ** Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - родитель для добавляемого элемента.
//                      Если не задан, то родителем будет являться ФормаОбъект.КоманднаяПанель.
//        ** МестоРасположения - Строка - имя элемента, перед которым нужно разместить группу команд.
//                                        Если не задан, то группа помещается в конец командной панели формы.
//     * ДинамическийСписок - Структура - параметры изменения запроса динамического списка:
//        ** Изменить - Булево - если Истина (по умолчанию), то в запрос динамического списка добавляются
//                               дополнительные поля.
//        ** ИмяРеквизита - Строка - имя реквизита формы динамического списка. "Список" по-умолчанию.
//     * СписокДокументов - Структура - параметры добавления колонок в список документов:
//        ** ДобавитьКолонки - Булево - если Истина (по умолчанию), то в список добавляются дополнительные колонки.
//        ** ИмяЭлемента - Строка - имя элемента формы динамического списка документов. "Список" по-умолчанию
//        ** ИмяРеквизита - Строка - имя реквизита формы динамического списка документов. "Список" по-умолчанию
//        ** МестоРасположения - Строка - имя элемента, перед которым нужно разместить новую колонку.
//                                        Если не задан, то перемещается в конец колонок таблицы.
//     * ПерепискаСБанками - Структура - параметры добавления ссылки на переписку с банками:
//        ** ДобавитьСсылку - Булево - если Истина (по умолчанию), то добавляется ссылка на переписку с банками.
//        ** Родитель - Строка - имя родителя добавляемого элемента.
//                               Если не указан, то элемент добавляется в конец формы.
//        ** МестоРасположения - Строка - имя элемента, перед которым нужно разместить ссылку на переписку с банками.
//     * Реклама - Структура - параметры отображения рекламы ДиректБанк:
//        ** Добавить - Булево - если Истина (по умолчанию), то на форму добавляется реклама ДиректБанка.
//        ** Родитель - Строка - имя родителя добавляемого элемента.
//                               Если не указан, то элемент добавляется в конец формы.
//        ** МестоРасположения - Строка - имя элемента, перед которым нужно разместить рекламу.
//
Функция ПараметрыСозданияФормыСписка() Экспорт
	
	Возврат ОбменСБанкамиКлиентСервер.ПараметрыСозданияФормыСписка();
	
КонецФункции

// Устарела. Следует использовать ОбменСБанкамиКлиентСервер.ПараметрыСозданияФормыДокумента.
// Формирует параметры для дополнения формы документа
// 
// Возвращаемое значение:
//  Структура - Описание:
//    * МестоРасположенияСостояния - Строка - элемент, перед которым нужно разместить состояние документа.
//    * РодительСостояния - Строка - элемент, в котором нужно разместить состояние.
Функция ПараметрыСозданияФормыДокумента() Экспорт
	
	Возврат ОбменСБанкамиКлиентСервер.ПараметрыСозданияФормыДокумента();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработкаВыпискиБанка

// Получает выписку банка в виде дерева значений.
//
// Параметры:
//  ЭлектронныеДокументы - ДокументСсылка.СообщениеОбменСБанками, Массив - содержит выписку банка;
//  ДеревоДанных - ДеревоЗначений - содержит дерево данных выписки.
//
Процедура ПолучитьДанныеВыпискиБанкаДеревоЗначений(ЭлектронныеДокументы, ДеревоДанных) Экспорт
	
	МассивСообщенийОбмена = Новый Массив;
	
	Если ТипЗнч(ЭлектронныеДокументы) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		
		МассивСообщенийОбмена.Добавить(ЭлектронныеДокументы);
		
	Иначе // массив
		
		МассивСообщенийОбмена = ЭлектронныеДокументы;
		
	КонецЕсли;
	
	ТаблицаВыписок = ДанныеВыпискиБанкаТаблицаЗначений(МассивСообщенийОбмена);
	
	Если НЕ ТаблицаВыписок.Количество() Тогда
		Возврат;
	КонецЕсли;

	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента("ОбменСБанками.ВыпискаБанка");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаВыписок, "Выписки");
	
КонецПроцедуры

// Получает выписку банка в текстовом формате, а также массив ссылок на банковские счета организаций в выписке.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками, Массив - содержит ссылку или массив ссылок на выписки банка
//  СсылкаНаХранилище - Строка - содержит ссылку на хранилище тестовых данных;
//  МассивСчетов - Массив - содержит ссылки на банковские счета организации.
//
Процедура ПолучитьДанныеВыпискиБанкаТекстовыйФормат(
	Знач СообщениеОбмена,
	СсылкаНаХранилище,
	МассивСчетов = Неопределено) Экспорт

	Если ТипЗнч(СообщениеОбмена) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		МассивСообщений = Новый Массив;
		МассивСообщений.Добавить(СообщениеОбмена);
	Иначе
		МассивСообщений = СообщениеОбмена;
	КонецЕсли;
	
	МассивСчетов = Новый Массив;
	
	ДеревоДанных = Неопределено;
	ПолучитьДанныеВыпискиБанкаДеревоЗначений(МассивСообщений, ДеревоДанных);
		
	Если ДеревоДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Поток = Новый ПотокВПамяти;
	Текст = Новый ЗаписьДанных(Поток, "windows-1251");
	
	СтрокаТаблицыВыписок = ДеревоДанных.Строки.Найти("Выписки", "ПолныйПуть");

	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивСообщений.Получить(0), "Организация");
	ЗаполнитьШапкуВыписки(Организация, Текст, СтрокаТаблицыВыписок, МассивСчетов);
			
	Для Каждого Выписка Из СтрокаТаблицыВыписок.Строки Цикл

		СтрокаОперацияВыписки = Выписка.Строки.Найти("Выписки.НомерСтроки.Операции", "ПолныйПуть");
		
		Если СтрокаОперацияВыписки.Значение = Неопределено ИЛИ СтрокаОперацияВыписки.Значение = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Операция Из СтрокаОперацияВыписки.Строки Цикл
			ДобавитьОперацию(Текст, Операция);
		КонецЦикла;
		
	КонецЦикла;
	
	Текст.ЗаписатьСтроку("КонецФайла");
	Текст.Закрыть();
	
	ДанныеФайла = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор());
	
КонецПроцедуры

// Получает выписку банка в виде таблицы значений.
// Повторяет структуру макета Обработки.ОбменСБанками.Макеты.ВыпискаБанка.
//
// Параметры:
//  ЭлектронныеДокументы - ДокументСсылка.СообщениеОбменСБанками, Массив - содержит выписку банка.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит данные выписки.
//                    Структура соответствует макету Обработки.ОбменСБанками.Макеты.ВыпискаБанка.
//
Функция ДанныеВыпискиБанкаТаблицаЗначений(ЭлектронныеДокументы) Экспорт
	
	МассивСообщенийОбмена = Новый Массив;
	
	Если ТипЗнч(ЭлектронныеДокументы) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		МассивСообщенийОбмена.Добавить(ЭлектронныеДокументы);
	Иначе // массив
		МассивСообщенийОбмена = ЭлектронныеДокументы;
	КонецЕсли;
	
	ТаблицаВыписок = ОбменСБанкамиСлужебный.ТаблицаВыписок();
	
	Для Каждого СообщениеОбмена Из МассивСообщенийОбмена Цикл
		
		ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеОбмена);
		ДанныеЭД = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
		
		Если Не ЗначениеЗаполнено(ДанныеЭД) Тогда
			Возврат ТаблицаВыписок;
		КонецЕсли;
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеЭД.СсылкаНаДвоичныеДанныеФайла);
		
		Если ДанныеЭД.Расширение = "xml" Тогда
			ОбменСБанкамиСлужебный.ДобавитьВыпискуXML(
				ДвоичныеДанныеФайла, ТаблицаВыписок, СообщениеОбмена, ПрисоединенныйФайл);
		Иначе
			ОбменСБанкамиСлужебный.ДобавитьВыпискуJSON(СообщениеОбмена, ДвоичныеДанныеФайла,  ТаблицаВыписок);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаВыписок;
	
КонецФункции

#КонецОбласти

#Область Права

// Проверяет возможность выполнения обмена с банком для текущего пользователя
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права на выполнение обмена с банком.
//
Функция ПравоВыполненияОбмена(ВыводитьСообщение = Ложь) Экспорт
	
	Возврат ОбменСБанкамиСлужебныйВызовСервера.ПравоВыполненияОбмена(ВыводитьСообщение);
	
КонецФункции

// Проверяет возможность чтения данных обмена с банком для текущего пользователя
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права на чтение данных обмена с банком.
//
Функция ПравоЧтенияДанных(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Чтение", Метаданные.Документы.ПакетОбменСБанками);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
		
КонецФункции

// Проверяет возможность настройки обмена с банком для текущего пользователя
//
// Возвращаемое значение:
//  Булево - наличие права на настройку обмена с банком.
//
Функция ПравоНастройки() Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиОбменСБанками);
	
КонецФункции

// Проверяет возможность чтения настроек обмена с банками для текущего пользователя
//
// Возвращаемое значение:
//  Булево - наличие права на чтение настроек обмена с банком.
//
Функция ПравоЧтенияНастроек() Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ПравоДоступа("Чтение", Метаданные.Справочники.НастройкиОбменСБанками);
	
КонецФункции

#КонецОбласти 

#Область ОбработкаОткрытияПрикладныхФорм

// Дополняет форму списка документов, отправляемых в банк.
//  
// Параметры:
//   ФормаОбъект - ФормаКлиентскогоПриложения - дополняемая форма
//   Параметры - см. ОбменСБанкамиКлиентСервер.ПараметрыСозданияФормыСписка
Процедура ПриСозданииФормыСпискаНаСервере(ФормаОбъект, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = ОбменСБанкамиКлиентСервер.ПараметрыСозданияФормыСписка();
	КонецЕсли;
	
	ИспользоватьОбменСБанками = ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками");
	Если НЕ ИспользоватьОбменСБанками Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ДинамическийСписок.Изменить Тогда
		ИзменитьЗапросДинамическогоСписка(ФормаОбъект, Параметры);
	КонецЕсли;
	
	Если Параметры.СписокДокументов.ДобавитьКолонки Тогда
		ДобавитьКолонкиВТаблицуДокументов(ФормаОбъект, Параметры);
	КонецЕсли;
	
	Если ПравоЧтенияДанных() Тогда
		
		Если Параметры.ПерепискаСБанками.ДобавитьСсылку Тогда
			ДобавитьСсылкуНаПереписку(ФормаОбъект, Параметры);
		КонецЕсли;
		
		Если Параметры.ГруппаКоманд.Добавить Тогда
			ДобавитьКоманды(ФормаОбъект, Параметры);
		КонецЕсли;
		
		Если ПравоНастройки() Тогда
			Если Параметры.Реклама.Добавить Тогда
				ДобавитьРекламу(ФормаОбъект, Параметры);
			КонецЕсли;
		КонецЕсли;
	
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ФормаОбъект.Элементы, "СостояниеДиректБанк", "ГиперссылкаЯчейки", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Событие возникает при создании формы документа. Добавляет элементы на форму
// 
// Параметры:
//   ФормаОбъект - ФормаКлиентскогоПриложения - дополняемая форма
//   Параметры - см. ПараметрыСозданияФормыДокумента
Процедура ПриСозданииФормыДокументаНаСервере(ФормаОбъект, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = ОбменСБанкамиКлиентСервер.ПараметрыСозданияФормыДокумента();
	КонецЕсли;
	
	Если НЕ ПравоЧтенияДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ФормаОбъект;
	Если ЗначениеЗаполнено(Параметры.РодительСостояния) Тогда
		Если ФормаОбъект.Элементы.Найти(Параметры.РодительСостояния) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Родитель = ФормаОбъект.Элементы[Параметры.РодительСостояния];
	КонецЕсли;
	
	ГруппаСостояниеДиректБанк = ФормаОбъект.Элементы.Добавить("ГруппаСостояниеДиректБанк", Тип("ГруппаФормы"));
	ГруппаСостояниеДиректБанк.Заголовок = НСтр("ru = 'Группа состояние ДиректБанк'; uk = 'Группа состояние ДиректБанк'");
	ГруппаСостояниеДиректБанк.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСостояниеДиректБанк.Объединенная = Истина;
	ГруппаСостояниеДиректБанк.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСостояниеДиректБанк.РастягиватьПоГоризонтали = Истина;
	ГруппаСостояниеДиректБанк.ОтображатьЗаголовок = Ложь;
	
	Если ЗначениеЗаполнено(Параметры.МестоРасположенияСостояния)
		И ФормаОбъект.Элементы.Найти(Параметры.МестоРасположенияСостояния) <> Неопределено Тогда
		ФормаОбъект.Элементы.Переместить(
			ГруппаСостояниеДиректБанк, Родитель, ФормаОбъект.Элементы[Параметры.МестоРасположенияСостояния]);
	КонецЕсли;
	
	Состояние = ФормаОбъект.Элементы.Добавить("СостояниеДиректБанк", Тип("ДекорацияФормы"), ГруппаСостояниеДиректБанк);
	Состояние.Вид = ВидДекорацииФормы.Надпись;
	Состояние.УстановитьДействие("Нажатие", "Подключаемый_ПриНажатииНаСсылкуДиректБанк");
	Если ЗначениеЗаполнено(ФормаОбъект.Объект.Ссылка) Тогда
		Гиперссылка = Ложь;
		Состояние.Заголовок = ОбменСБанкамиСлужебныйВызовСервера.ТекстСостоянияЭД(
			ФормаОбъект.Объект.Ссылка, Гиперссылка);
		Состояние.Гиперссылка = Гиперссылка;
	Иначе
		Состояние.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

// Событие записи документа из формы. Обновляет текст состояния обмена с банком.
// 
// Параметры:
//  ФормаОбъект - ФормаКлиентскогоПриложения - форма, на которой произошла запись объекта.
//  ТекущийОбъект - ОпределяемыйТип.ВладелецОбъектОбменСБанками - записываемый объект.
//  ПараметрыЗаписи - Структура - Структура, содержащая параметры записи.
Процедура ПослеЗаписиНаСервере(ФормаОбъект, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если ФормаОбъект.Элементы.Найти("СостояниеДиректБанк") <> Неопределено
		И ЗначениеЗаполнено(ФормаОбъект.Объект.Ссылка) Тогда
		ФормаОбъект.Элементы.СостояниеДиректБанк.Заголовок = ОбменСБанкамиСлужебныйВызовСервера.ТекстСостоянияЭД(
			ФормаОбъект.Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПоставляемыеДанные

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению,
// и если да - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор - ОбъектXDTO - Descriptor.
//   Загружать  - Булево - возвращаемое.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	// Загрузка списка банков.
	Если Дескриптор.DataType = "DirectBankList" Тогда
		
		ДанныеВнешнихФайлов = Константы.ОбщиеФайлыОбменСБанками.Получить().Получить();
	
		Если ДанныеВнешнихФайлов = Неопределено ИЛИ НЕ ДанныеВнешнихФайлов.Свойство("СписокБанков") Тогда
			Загружать = Истина;
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанныеВБазе = ДанныеВнешнихФайлов.СписокБанков;
		РасчетХеш = Новый ХешированиеДанных(ХешФункция.CRC32);
		РасчетХеш.Добавить(ДвоичныеДанныеВБазе);
		Если Формат(РасчетХеш.ХешСумма, "ЧГ=") <> Дескриптор.Properties.Property.Получить(0).Value Тогда
			Загружать = Истина;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор - ОбъектXDTO - Дескриптор.
//   ПутьКФайлу - Строка - Полное имя извлеченного файла. Файл будет автоматически удален
//                  после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType = "DirectBankList" Тогда
		
		Данные = Новый ДвоичныеДанные(ПутьКФайлу);
		
		ДанныеВнешнихФайлов = Константы.ОбщиеФайлыОбменСБанками.Получить().Получить();
	
		Если ДанныеВнешнихФайлов = Неопределено Тогда
			ДанныеВнешнихФайлов = Новый Структура;
		КонецЕсли;

		ДанныеВнешнихФайлов.Вставить("СписокБанков", Данные);
	
		ХранилищеДанных = Новый ХранилищеЗначения(ДанныеВнешнихФайлов);
	
		Константы.ОбщиеФайлыОбменСБанками.Установить(ХранилищеДанных);
	
		ОбновитьПовторноИспользуемыеЗначения();
	
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя.
//
// Параметры:
//   Дескриптор - ОбъектXDTO - Descriptor.
//
//@skip-warning
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ДляБП3

// Получает сводное состояние банковского документа в виде строки.
//
// Параметры:
//  СостояниеЭД - ПеречислениеСсылка.СостоянияОбменСБанками - текущее состояние электронного документооборота.
// 
// Возвращаемое значение:
//  Строка - сводное упрощенное состояние.
//
Функция СостояниеБанковскогоДокументаСтрокой(СостояниеЭД) Экспорт
	
	Если СостояниеЭД = Перечисления.СостоянияОбменСБанками.НеСформирован
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка Тогда
		
		Возврат "Подготовлено";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.НаПодписи Тогда
		
		Возврат "НаПодписи";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.Отклонен
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.Аннулирован
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОшибкаПередачи Тогда
		
		Возврат "Отклонено";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяВыписка
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяИсполнение Тогда
		
		Возврат "Отправлено";
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждение Тогда
		
		Возврат "ТребуетсяПодтверждение";
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Переносит настройки обмена с банками из справочника УдалитьСоглашенияОбИспользованииЭД в справочник НастройкиОбменСБанками
//
// Параметры:
//  Параметры - Структура - параметры обработки обновления.
//
Процедура ПеренестиДанныеОбменаСБанками(Параметры) Экспорт
	
	ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
	Если Не ЕстьОбменСКонтрагентами Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьСоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
	|ГДЕ
	|	УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.УдалитьЧерезВебРесурсБанка)
	|	И НЕ УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьСоглашенияОбИспользованииЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
	|ГДЕ
	|	УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.УдалитьЧерезВебРесурсБанка)
	|	И УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьСоглашенияОбИспользованииЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
	|ГДЕ
	|	УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.УдалитьЧерезВебРесурсБанка)";
	
	ПакетСоглашения = Запрос.ВыполнитьПакет();
	
	ВыборкаСоглашенийЭДКОбработке = ПакетСоглашения[0].Выбрать();
	ВыборкаОбработанныхСоглашенийЭД = ПакетСоглашения[1].Выбрать();
	ВсегоСоглашенийЭД = ПакетСоглашения[2].Выбрать();
	
	Параметры.ПрогрессВыполнения.ВсегоОбъектов = ВсегоСоглашенийЭД.Количество();
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = ВыборкаОбработанныхСоглашенийЭД.Количество();
	
	СоответствиеВидовЭД = СоответствиеВидовЭД();
	СоответствиеСостояний = СоответствиеСостояний();
	СоответствиеСтатусов = СоответствиеСтатусов();
	
	Если НЕ ВыборкаСоглашенийЭДКОбработке.Следующий() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
		
	Параметры.ОбработкаЗавершена = Ложь;
	
	ЗапросПоСоглашениям = Новый Запрос;
	ЗапросПоСоглашениям.Текст =
	"ВЫБРАТЬ
	|	УдалитьСоглашенияОбИспользованииЭД.УдалитьАдресСервера КАК АдресСервера,
	|	УдалитьСоглашенияОбИспользованииЭД.УдалитьАутентификацияПоСертификату КАК АутентификацияПоСертификату,
	|	УдалитьСоглашенияОбИспользованииЭД.Контрагент КАК Банк,
	|	УдалитьСоглашенияОбИспользованииЭД.Организация,
	|	УдалитьСоглашенияОбИспользованииЭД.УдалитьВнешняяКомпонента КАК ВнешняяКомпонента,
	|	НЕ УдалитьСоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует) КАК Недействительна,
	|	УдалитьСоглашенияОбИспользованииЭД.УдалитьДополнительнаяОбработка КАК ДополнительнаяОбработка,
	|	УдалитьСоглашенияОбИспользованииЭД.ИдентификаторОрганизации,
	|	УдалитьСоглашенияОбИспользованииЭД.УдалитьПользователь КАК ИмяПользователя,
	|	УдалитьСоглашенияОбИспользованииЭД.УдалитьИспользуетсяКриптография КАК ИспользуетсяКриптография,
	|	УдалитьСоглашенияОбИспользованииЭД.Комментарий,
	|	УдалитьСоглашенияОбИспользованииЭД.УдалитьПрограммаБанка КАК ПрограммаБанка,
	|	УдалитьСоглашенияОбИспользованииЭД.РесурсВходящихДокументов,
	|	УдалитьСоглашенияОбИспользованииЭД.РесурсИсходящихДокументов,
	|	УдалитьСоглашенияОбИспользованииЭД.СертификатКонтрагентаДляШифрования,
	|	УдалитьСоглашенияОбИспользованииЭД.УдалитьСжиматьДанныеПакетаЭД КАК СжиматьДанныеПакетаЭД,
	|	УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления,
	|	УдалитьСоглашенияОбИспользованииЭД.Наименование
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
	|ГДЕ
	|	УдалитьСоглашенияОбИспользованииЭД.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат КАК СертификатЭП
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
	|ГДЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &Ссылка";
	
	ЗапросПоСоглашениям.УстановитьПараметр("Ссылка", ВыборкаСоглашенийЭДКОбработке.Ссылка);
	
	ВыборкаПакетов = ЗапросПоСоглашениям.ВыполнитьПакет();
	ВыборкаПараметровСоглашенияЭД = ВыборкаПакетов[0].Выбрать();
	ВыборкаПараметровСоглашенияЭД.Следующий();
	
	НачатьТранзакцию();
	Попытка
			
		#Область СозданиеНастройкиОбмена
		
		НастройкаОбменаОбъект = Справочники.НастройкиОбменСБанками.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НастройкаОбменаОбъект, ВыборкаПараметровСоглашенияЭД);
		ДанныеВнешнейКомпоненты = ВыборкаПараметровСоглашенияЭД.ВнешняяКомпонента.Получить();
		НастройкаОбменаОбъект.УдалитьВнешняяКомпонента = Новый ХранилищеЗначения(ДанныеВнешнейКомпоненты);
		ДанныеСертификатаБанка = ВыборкаПараметровСоглашенияЭД.СертификатКонтрагентаДляШифрования.Получить();
		
		Если ДанныеСертификатаБанка <> Неопределено Тогда
			Если ВыборкаПараметровСоглашенияЭД.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
				ДвоичныеДанныеСертификата = ОбменСБанкамиСлужебный.ДанныеСертификатаВФорматеDER(ДанныеСертификатаБанка);
				Если ДвоичныеДанныеСертификата <> Неопределено Тогда
					СертификатПодписи = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
					СвойстваСертификата = ЭлектроннаяПодпись.СвойстваСертификата(СертификатПодписи);
					НовСтрока = НастройкаОбменаОбъект.СертификатыБанка.Добавить();
					НовСтрока.Наименование = СвойстваСертификата.Представление;
					НовСтрока.СерийныйНомер = НРег(СтрЗаменить(Строка(СвойстваСертификата.СерийныйНомер), " ", ""));
					НовСтрока.Данные = Новый ХранилищеЗначения(ДвоичныеДанныеСертификата, Новый СжатиеДанных(9));
					НовСтрока.ДатаОкончания = СвойстваСертификата.ДатаОкончания;
				КонецЕсли;
			Иначе
				НовСтрока = НастройкаОбменаОбъект.СертификатыБанка.Добавить();
				НовСтрока.Данные = Новый ХранилищеЗначения(ДанныеСертификатаБанка, Новый СжатиеДанных(9));
			КонецЕсли;
		КонецЕсли;
		
		ВыборкаИсходящихДокументов = ВыборкаПакетов[1].Выбрать();
		Пока ВыборкаИсходящихДокументов.Следующий() Цикл
			
			НовСтрока = НастройкаОбменаОбъект.ИсходящиеДокументы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаИсходящихДокументов, "ИспользоватьЭП, Формировать");
			НовСтрока.ИсходящийДокумент = СоответствиеВидовЭД.Получить(ВыборкаИсходящихДокументов.ИсходящийДокумент);
			Если НовСтрока.ИспользоватьЭП Тогда
				НовСтрока.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
			КонецЕсли;
			
		КонецЦикла;
		
		ВыборкаСертификатов = ВыборкаПакетов[2].Выбрать();
		Пока ВыборкаСертификатов.Следующий() Цикл
			
			НовСтрока = НастройкаОбменаОбъект.СертификатыПодписейОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаСертификатов);
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаОбменаОбъект);
		
		НастройкаОбмена = НастройкаОбменаОбъект.Ссылка;
		
		СоглашениеЭДОбъект = ВыборкаСоглашенийЭДКОбработке.Ссылка.ПолучитьОбъект();
		СоглашениеЭДОбъект.ПометкаУдаления = Истина;
		СоглашениеЭДОбъект.Комментарий = НСтр("ru = '##Настройка ЭДО помечена на удаление автоматически при обновлении.'; uk = '##Настройка ЭДО помечена на удаление автоматически при обновлении.'");
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СоглашениеЭДОбъект);
		
		#КонецОбласти
		
		#Область ПереносПрисоединенныхФайлов
		
		ЗапросЭДПрисоединенныеФайлы = Новый Запрос;
		ЗапросЭДПрисоединенныеФайлы.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка,
		|	ЭДПрисоединенныеФайлы.Наименование,
		|	ЭДПрисоединенныеФайлы.УдалитьВидЭД КАК ВидЭД,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла,
		|	ЭДПрисоединенныеФайлы.Автор,
		|	ЭДПрисоединенныеФайлы.ДатаМодификацииУниверсальная,
		|	ЭДПрисоединенныеФайлы.ДатаСоздания,
		|	ЭДПрисоединенныеФайлы.Изменил,
		|	ЭДПрисоединенныеФайлы.ИндексКартинки,
		|	ЭДПрисоединенныеФайлы.Описание,
		|	ЭДПрисоединенныеФайлы.ПодписанЭП,
		|	ЭДПрисоединенныеФайлы.ПутьКФайлу,
		|	ЭДПрисоединенныеФайлы.Размер,
		|	ЭДПрисоединенныеФайлы.Расширение,
		|	ЭДПрисоединенныеФайлы.Редактирует,
		|	ЭДПрисоединенныеФайлы.СтатусИзвлеченияТекста,
		|	ЭДПрисоединенныеФайлы.ТекстХранилище,
		|	ЭДПрисоединенныеФайлы.ТипХраненияФайла,
		|	ЭДПрисоединенныеФайлы.Том,
		|	ЭДПрисоединенныеФайлы.ФайлХранилище,
		|	ЭДПрисоединенныеФайлы.СтатусЭД,
		|	СостоянияЭД.СсылкаНаОбъект,
		|	СостоянияЭД.СостояниеВерсииЭД,
		|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний КАК ВнешнийИдентификатор,
		|	ЭДПрисоединенныеФайлы.УдалитьДатаДокументаОтправителя КАК ДатаДокументаОтправителя,
		|	ЭДПрисоединенныеФайлы.УдалитьДатаИзмененияВнешнегоСтатусаЭД КАК ДатаИзмененияВнешнегоСтатуса,
		|	ЭДПрисоединенныеФайлы.ДатаИзмененияСтатусаЭД КАК ДатаИзмененияСтатуса,
		|	ЭДПрисоединенныеФайлы.УдалитьДатаВыпискиБанка КАК ДатаСообщения,
		|	ЭДПрисоединенныеФайлы.ДополнительнаяИнформация,
		|	ЭДПрисоединенныеФайлы.ДополнительныеРеквизиты,
		|	ЭДПрисоединенныеФайлы.НомерЭД КАК Идентификатор,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК Направление,
		|	ЭДПрисоединенныеФайлы.УдалитьНомерДокументаОтправителя КАК НомерДокументаОтправителя,
		|	ЭДПрисоединенныеФайлы.УдалитьОрганизация КАК Организация,
		|	ЭДПрисоединенныеФайлы.УдалитьПричинаОтклонения КАК ПричинаОтклонения,
		|	ЭДПрисоединенныеФайлы.УдалитьСуммаДокумента КАК СуммаДокумента,
		|	ЭДПрисоединенныеФайлы.ПометкаУдаления
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО (СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка)
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД = &СоглашениеЭД
		|	И НЕ ЭДПрисоединенныеФайлы.УдалитьВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПустаяСсылка)";
		
		ЗапросЭДПрисоединенныеФайлы.УстановитьПараметр("СоглашениеЭД", ВыборкаСоглашенийЭДКОбработке.Ссылка);
		
		ВыборкаРеквизитыЭД = ЗапросЭДПрисоединенныеФайлы.Выполнить().Выбрать();
		
		СоответствиеЭДИСообщенийОбмена = Новый Соответствие;
		
		Пока ВыборкаРеквизитыЭД.Следующий() Цикл
			НовСообщение = Документы.СообщениеОбменСБанками.СоздатьДокумент();
			НовСообщение.Банк = НастройкаОбменаОбъект.Банк;
			НовСообщение.ВидЭД = СоответствиеВидовЭД.Получить(ВыборкаРеквизитыЭД.ВидЭД);
			ЗаполнитьЗначенияСвойств(НовСообщение, ВыборкаРеквизитыЭД, "ВнешнийИдентификатор, ДатаДокументаОтправителя,
				|ДатаИзмененияВнешнегоСтатуса, ДатаИзмененияСтатуса, ДатаСообщения, ДополнительнаяИнформация, Идентификатор,
				|Направление, НомерДокументаОтправителя, Организация, ПричинаОтклонения, ПометкаУдаления");
			НовСообщение.Дата = ВыборкаРеквизитыЭД.ДатаСоздания;
			НовСообщение.ДополнительныеДанные = Новый ХранилищеЗначения(ВыборкаРеквизитыЭД.ДополнительныеРеквизиты.Получить());
			НовСообщение.НастройкаОбмена = НастройкаОбмена;
			НовСообщение.ПрограммаБанка = НастройкаОбменаОбъект.ПрограммаБанка;
			Если ВыборкаРеквизитыЭД.ВидЭД = Перечисления["ВидыЭД"].УдалитьВыпискаБанка Тогда
				НовСообщение.НомерСчета = ВыборкаРеквизитыЭД.ДополнительнаяИнформация;
			КонецЕсли;
			
			НовСообщение.Состояние = СоответствиеСостояний.Получить(ВыборкаРеквизитыЭД.СостояниеВерсииЭД);
			НовСообщение.Статус = СоответствиеСтатусов.Получить(ВыборкаРеквизитыЭД.СтатусЭД);
			НовСообщение.УстановитьНовыйНомер();
			НовСообщение.ПредставлениеДокумента = ПредставлениеЭД(
				ВыборкаРеквизитыЭД.Наименование, НовСообщение.ВидЭД, ВыборкаРеквизитыЭД.ВладелецФайла);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовСообщение);

			ЗапросПоЭП = Новый Запрос;
			ЗапросПоЭП.Текст =
			"ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.НомерСтроки КАК НомерСтроки,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.ПодписьВерна,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.ДатаПроверкиПодписи,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.ДатаПодписи,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.ИмяФайлаПодписи,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Комментарий,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.КомуВыданСертификат,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Отпечаток,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Подпись,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Сертификат,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.УстановившийПодпись
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы.УдалитьЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеПодписи
			|ГДЕ
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			ЗапросПоЭП.УстановитьПараметр("Ссылка", ВыборкаРеквизитыЭД.Ссылка);
			ВыборкаПоЭП = ЗапросПоЭП.Выполнить().Выбрать();
			
			СообщениеОбмена = НовСообщение.Ссылка;
			СоответствиеЭДИСообщенийОбмена.Вставить(ВыборкаРеквизитыЭД.Ссылка, СообщениеОбмена);
			
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ВыборкаРеквизитыЭД.Ссылка);
			
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", СообщениеОбмена);
			ПараметрыФайла.Вставить("ИмяБезРасширения", ДанныеФайла.ИмяФайла);
			ПараметрыФайла.Вставить("РасширениеБезТочки", ДанныеФайла.Расширение);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
			ПараметрыФайла.Вставить("Служебный", Истина);
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
				ПараметрыФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			
			ОбъектПрисоединенныйФайл = ПрисоединенныйФайл.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ОбъектПрисоединенныйФайл, ВыборкаРеквизитыЭД,
				"Автор, ДатаМодификацииУниверсальная, ДатаСоздания, Изменил, Описание, ПутьКФайлу, Наименование, ПодписанЭП");
			
			Пока ВыборкаПоЭП.Следующий() Цикл
				НовСтрока = ОбъектПрисоединенныйФайл.УдалитьЭлектронныеПодписи.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаПоЭП, , "НомерСтроки, Подпись, Сертификат");
				НовСтрока.Подпись = Новый ХранилищеЗначения(ВыборкаПоЭП.Подпись.Получить());
				НовСтрока.Сертификат = Новый ХранилищеЗначения(ВыборкаПоЭП.Сертификат.Получить());
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектПрисоединенныйФайл);
			
			ЭД = ВыборкаРеквизитыЭД.Ссылка.ПолучитьОбъект();
			ЭД.ПометкаУдаления = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭД);
		
		КонецЦикла;
		
		// Заполнение родителей
		ЗапросПоВладельцам = Новый Запрос;
		ЗапросПоВладельцам.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка,
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	НЕ ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)
		|	И ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД = &СоглашениеЭД";
		ЗапросПоВладельцам.УстановитьПараметр("СоглашениеЭД", ВыборкаСоглашенийЭДКОбработке.Ссылка);
		ВыборкаЭДПоВладельцам = ЗапросПоВладельцам.Выполнить().Выбрать();
		Пока ВыборкаЭДПоВладельцам.Следующий() Цикл
			
			СообщениеОбмена = СоответствиеЭДИСообщенийОбмена.Получить(ВыборкаЭДПоВладельцам.Ссылка);
			СообщениеОбменаРодитель = СоответствиеЭДИСообщенийОбмена.Получить(
				ВыборкаЭДПоВладельцам.ЭлектронныйДокументВладелец);
				
			Если ЗначениеЗаполнено(СообщениеОбменаРодитель) И ЗначениеЗаполнено(СообщениеОбмена) Тогда
				СообщениеОбменаОбъект = СообщениеОбмена.ПолучитьОбъект();
				СообщениеОбменаОбъект.СообщениеРодитель = СообщениеОбменаРодитель;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СообщениеОбменаОбъект);
			КонецЕсли;
			
		КонецЦикла;
		
		#КонецОбласти
		
		#Область ПереносСостоянийЭД
		
		ЗапросПоСостояниям = Новый Запрос();
		ЗапросПоСостояниям.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект,
		|	СостоянияЭД.СостояниеВерсииЭД,
		|	СостоянияЭД.ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент.УдалитьСоглашениеЭД = &СоглашениеЭД";
		ЗапросПоСостояниям.УстановитьПараметр("СоглашениеЭД", ВыборкаСоглашенийЭДКОбработке.Ссылка);
		ВыборкаПоСостояниям = ЗапросПоСостояниям.Выполнить().Выбрать();
		Пока ВыборкаПоСостояниям.Следующий() Цикл
			
			СообщениеОбмена = СоответствиеЭДИСообщенийОбмена.Получить(ВыборкаПоСостояниям.ЭлектронныйДокумент);
			Если ЗначениеЗаполнено(СообщениеОбмена) Тогда
				МенеджерРегистраСостоянияОбменСБанками = РегистрыСведений.СостоянияОбменСБанками.СоздатьМенеджерЗаписи();
				МенеджерРегистраСостоянияОбменСБанками.СсылкаНаОбъект = ВыборкаПоСостояниям.СсылкаНаОбъект;
				МенеджерРегистраСостоянияОбменСБанками.СообщениеОбмена = СообщениеОбмена;
				МенеджерРегистраСостоянияОбменСБанками.Состояние = СоответствиеСостояний.Получить(
					ВыборкаПоСостояниям.СостояниеВерсииЭД);
				МенеджерРегистраСостоянияОбменСБанками.Записать();
			КонецЕсли;
			
			МенеджерРегистраСостоянияЭД = РегистрыСведений["СостоянияЭД"].СоздатьМенеджерЗаписи();
			МенеджерРегистраСостоянияЭД.СсылкаНаОбъект = ВыборкаПоСостояниям.СсылкаНаОбъект;
			МенеджерРегистраСостоянияЭД.Удалить();
			
		КонецЦикла;
		
		#КонецОбласти
		
		#Область УдалениеПакетовЭД
		
		ЗапросПоПакетам = Новый Запрос;
		ЗапросПоПакетам.Текст =
		"ВЫБРАТЬ
		|	ПакетЭД.Ссылка
		|ИЗ
		|	Документ.ПакетЭД КАК ПакетЭД
		|ГДЕ
		|	ПакетЭД.УдалитьНастройкаЭДО = &НастройкаЭДО
		|	И НЕ ПакетЭД.ПометкаУдаления";
		
		ЗапросПоПакетам.УстановитьПараметр("НастройкаЭДО", ВыборкаСоглашенийЭДКОбработке.Ссылка);
		ВыборкаПакетов = ЗапросПоПакетам.Выполнить().Выбрать();
		Пока ВыборкаПакетов.Следующий() Цикл
			ПакетОбъект = ВыборкаПакетов.Ссылка.ПолучитьОбъект();
			ПакетОбъект.ПометкаУдаления = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПакетОбъект);
		КонецЦикла;
		
		#КонецОбласти

		#Область ОбработкаРегистраПараметрыОбменСБанками
		
		МенеджерРегистраПараметрыОбменСБанками = РегистрыСведений.ПараметрыОбменСБанками.СоздатьМенеджерЗаписи();
		МенеджерРегистраПараметрыОбменСБанками.НастройкаОбмена = ВыборкаСоглашенийЭДКОбработке.Ссылка;
		МенеджерРегистраПараметрыОбменСБанками.Прочитать();
		Если МенеджерРегистраПараметрыОбменСБанками.Выбран() Тогда
			НаборЗаписейРегистраПараметрыОбменСБанками = РегистрыСведений.ПараметрыОбменСБанками.СоздатьНаборЗаписей();
			НаборЗаписейРегистраПараметрыОбменСБанками.Отбор.НастройкаОбмена.Установить(НастройкаОбмена);
			НовЗапись = НаборЗаписейРегистраПараметрыОбменСБанками.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, МенеджерРегистраПараметрыОбменСБанками, "ПоследняяДатаПолученияЭД, НомерЗапроса");
			НовЗапись.НастройкаОбмена = НастройкаОбмена;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейРегистраПараметрыОбменСБанками);
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ТикетыОбменСБанками
		
		СтарыйНаборЗаписейРегистраТикетыОбменСБанками = РегистрыСведений.ТикетыОбменСБанками.СоздатьНаборЗаписей();
		СтарыйНаборЗаписейРегистраТикетыОбменСБанками.Отбор.НастройкаОбмена.Установить(ВыборкаСоглашенийЭДКОбработке.Ссылка);
		СтарыйНаборЗаписейРегистраТикетыОбменСБанками.Прочитать();
		
		НовыйНаборЗаписейРегистраТикетыОбменСБанками = РегистрыСведений.ТикетыОбменСБанками.СоздатьНаборЗаписей();
		НовыйНаборЗаписейРегистраТикетыОбменСБанками.Отбор.НастройкаОбмена.Установить(НастройкаОбмена);
		
		Для Каждого СтараяЗапись Из СтарыйНаборЗаписейРегистраТикетыОбменСБанками Цикл
			НоваяЗапись = НовыйНаборЗаписейРегистраТикетыОбменСБанками.Добавить();
			НоваяЗапись.Идентификатор = СтараяЗапись.Идентификатор;
			НоваяЗапись.НастройкаОбмена = НастройкаОбмена;
		КонецЦикла;
		
		Если НовыйНаборЗаписейРегистраТикетыОбменСБанками.Количество() Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйНаборЗаписейРегистраТикетыОбменСБанками);
		КонецЕсли;
	
		#КонецОбласти
		
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Обновление подсистемы прямого обмена с банками'; uk = 'Обновление подсистемы прямого обмена с банками'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы прямого обмена с банками произошла ошибка'; uk = 'При обновлении подсистемы прямого обмена с банками произошла ошибка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками", ВыборкаСоглашенийЭДКОбработке.Ссылка);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Заполняет регистр сведений ПодписываемыеВидыЭД
//
// Параметры:
//  Параметры - Структура - параметры обработки обновления.
//
Процедура ОбработатьРегистрПодписываемыеВидыЭД(Параметры) Экспорт
	
	ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
	Если Не ЕстьОбменСКонтрагентами Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	НачатьТранзакцию();
	Попытка
	
		НаборЗаписейРегистра = РегистрыСведений.ПодписываемыеВидыЭД.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Прочитать();
	
		СоответствиеВидовЭД = СоответствиеВидовЭД();
	
		Для Каждого Запись Из НаборЗаписейРегистра Цикл
			
			НовыйВидЭД = СоответствиеВидовЭД.Получить(Запись.ВидЭД);
			Если НовыйВидЭД <> Неопределено Тогда
				Запись.ВидЭД = НовыйВидЭД;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаСвертки = НаборЗаписейРегистра.Выгрузить();
		ТаблицаСвертки.Свернуть("СертификатЭП, ВидЭД, Использовать");
		НаборЗаписейРегистра.Загрузить(ТаблицаСвертки);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейРегистра);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Обновление подсистемы прямого обмена с банками'; uk = 'Обновление подсистемы прямого обмена с банками'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы прямого обмена с банками произошла ошибка'; uk = 'При обновлении подсистемы прямого обмена с банками произошла ошибка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками");
		ВызватьИсключение;
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

// Переносит статусы проверки подписей из документа СообщениеОбменСБанками в справочник СообщениеОбменСБанкамиПрисоединенныеФайлы
//
// Параметры:
//  Параметры - Структура - параметры обработки обновления.
//
Процедура ПеренестиСтатусыЭлектронныхПодписей(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеОбменСБанками.Ссылка КАК СообщениеОбмена,
		|	СообщениеОбменСБанками.УдалитьСтатусыЭлектронныхПодписей.(
		|		НомерСтроки,
		|		ДатаПроверкиПодписи,
		|		ПодписьВерна
		|	),
		|	СообщениеОбменСБанкамиПрисоединенныеФайлы.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы КАК СообщениеОбменСБанкамиПрисоединенныеФайлы
		|		ПО (СообщениеОбменСБанкамиПрисоединенныеФайлы.ВладелецФайла = СообщениеОбменСБанками.Ссылка)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ЭлектронныйДокумент) Цикл
			ЗаписатьОбъект = Ложь;
			ВыборкаСтатусовЭП = Выборка.УдалитьСтатусыЭлектронныхПодписей.Выбрать();
			Если ВыборкаСтатусовЭП.Количество() Тогда
				ПрисоединенныйФайлОбъект = Выборка.ЭлектронныйДокумент.ПолучитьОбъект();
				Пока ВыборкаСтатусовЭП.Следующий() Цикл
					ИскомаяСтрока = ПрисоединенныйФайлОбъект.УдалитьЭлектронныеПодписи.Найти(ВыборкаСтатусовЭП.НомерСтроки, "НомерСтроки");
					Если ИскомаяСтрока = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ЗаписатьОбъект = Истина;
					ЗаполнитьЗначенияСвойств(ИскомаяСтрока, ВыборкаСтатусовЭП);
				КонецЦикла;
			КонецЕсли;
			Если ЗаписатьОбъект Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПрисоединенныйФайлОбъект);
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Обновление подсистемы прямого обмена с банками'; uk = 'Обновление подсистемы прямого обмена с банками'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы прямого обмена с банками произошла ошибка'; uk = 'При обновлении подсистемы прямого обмена с банками произошла ошибка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками");
		ВызватьИсключение;
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

// Включает регламентное задание ЗагрузкаСпискаБанковОбменСБанками
//
// Параметры:
//  Параметры - Структура - параметры обработки обновления.
//
Процедура ВключитьАвтоматическоеОбновлениеСпискаБанков(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;

	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Истина);
		
		ИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(
			Метаданные.РегламентныеЗадания.ЗагрузкаСпискаБанковОбменСБанками);
		РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторЗадания, ПараметрыЗадания);
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

#КонецОбласти

#Область Профили

// Процедура - Добавить базовые права ЭД
//
// Параметры:
//  ОписаниеПрофиля - см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьБазовыеПраваЭД(ОписаниеПрофиля) Экспорт

	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваЭД");

КонецПроцедуры

// Процедура - Добавить права на выполнение обмена
//
// Параметры:
//  ОписаниеПрофиля - см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьВыполнениеОбменаЭД(ОписаниеПрофиля) Экспорт

	ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекЭлектронногоВзаимодействия");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеМаршрутовПодписания");

	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОбменСБанками");
	ОписаниеПрофиля.Роли.Добавить("ВыполнениеОбменаОбменСБанками");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекОбменСБанками");
	
КонецПроцедуры

// Процедура - Добавить права на изменение настроек обмена
//
// Параметры:
//  ОписаниеПрофиля - см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьНастройкуПараметровЭД(ОписаниеПрофиля) Экспорт

	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеМаршрутовПодписания");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеНастроекЭлектронногоВзаимодействия");

	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОбменСБанками");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеНастроекОбменСБанками");
	
КонецПроцедуры

// Процедура - Добавить права на чтение настроек обмена
//
// Параметры:
//  ОписаниеПрофиля - см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьЧтениеЭД(ОписаниеПрофиля) Экспорт

	ОписаниеПрофиля.Роли.Добавить("ЧтениеМаршрутовПодписания");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекЭлектронногоВзаимодействия");

	ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекОбменСБанками");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОбменСБанками");
	
КонецПроцедуры

#КонецОбласти

#Область Криптография

// См. процедуру ЭлектроннаяПодписьПереопределяемый.ПриСозданииФормыПроверкаСертификата.
//
Процедура ПриСозданииФормыПроверкаСертификата(
	Сертификат,
	ДополнительныеПроверки,
	ПараметрыДополнительныхПроверок,
	СтандартныеПроверки,
	ВводитьПароль = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОСертификатахОбменСБанками.ПрограммаБанка
	|ИЗ
	|	РегистрСведений.СведенияОСертификатахОбменСБанками КАК СведенияОСертификатахОбменСБанками
	|ГДЕ
	|	СведенияОСертификатахОбменСБанками.СертификатЭП = &СертификатЭП";
	Запрос.УстановитьПараметр("СертификатЭП", Сертификат);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если НЕ Результат.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		СтандартныеПроверки = Ложь;
		ВводитьПароль = Ложь;
		НовСтрока = ДополнительныеПроверки.Добавить();
		НовСтрока.Имя = "УстановкаПодписиСбербанк";
		НовСтрока.Представление = НСтр("ru = 'Подписание данных'; uk = 'Підписання даних'");
		НовСтрока.Подсказка = НСтр("ru = 'Показывает возможность подписания данных закрытым
                                    |ключом сертификата с помощью банковского ключа.
                                    |Требуется PIN.'; uk = 'Показує можливість підписання даних закритим
                                    |ключем сертифіката за допомогою банківського ключа.
                                    |Потрібно PIN.'");
		НовСтрока = ДополнительныеПроверки.Добавить();
		НовСтрока.Имя = "ПроверкаПодписиСбербанк";
		НовСтрока.Представление = НСтр("ru = 'Проверка созданной подписи'; uk = 'Перевірка створеного підпису'");
		НовСтрока.Подсказка = НСтр("ru = 'Показывает возможность проверки имеющейся подписи открытым ключом сертификата
                                    |с помощью банковского ключа.'; uk = 'Показує можливість перевірки наявного підпису відкритим ключем сертифіката
                                    |за допомогою банківського ключа.'");
	ИначеЕсли Результат.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
		СтандартныеПроверки = Ложь;
		НовСтрока = ДополнительныеПроверки.Добавить();
		НовСтрока.Имя = "УстановкаПодписиЧерезВК";
		НовСтрока.Представление = НСтр("ru = 'Подписание данных'; uk = 'Підписання даних'");
		НовСтрока.Подсказка = НСтр("ru = 'Показывает возможность подписания данных закрытым
                                    |ключом сертификата с помощью аппаратного ключа.'; uk = 'Показує можливість підписання даних закритим
                                    |ключем сертифіката за допомогою апаратного ключа.'");
		НовСтрока = ДополнительныеПроверки.Добавить();
		НовСтрока.Имя = "ПроверкаПодписиЧерезВК";
		НовСтрока.Представление = НСтр("ru = 'Проверка созданной подписи'; uk = 'Перевірка створеного підпису'");
		НовСтрока.Подсказка = НСтр("ru = 'Показывает возможность проверки имеющейся подписи открытым ключом сертификата
                                    |с помощью аппаратного ключа.'; uk = 'Показує можливість перевірки наявного підпису відкритим ключем сертифіката
                                    |за допомогою апаратного ключа.'");
	
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийБСП

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("СессииОбменСБанками", "ОбменСБанками.УстановкаПараметровСеанса");
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "СессииОбменСБанками" Тогда
		ПараметрыСеанса.СессииОбменСБанками = Новый ФиксированноеСоответствие(Новый Соответствие);
		УстановленныеПараметры.Добавить("СессииОбменСБанками");
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.НастройкиОбменСБанками, Истина);
	Списки.Вставить(Метаданные.Документы.ПакетОбменСБанками, Истина);
	Списки.Вставить(Метаданные.Документы.СообщениеОбменСБанками, Истина);
	Списки.Вставить(Метаданные.Документы.ПисьмоОбменСБанками, Истина);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
#Область Отложенно

#Область Версия_1_3_1

#Область ОбменСБанками_ОбработатьРегистрПодписываемыеВидыЭД

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.1.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбменСБанками.ОбработатьРегистрПодписываемыеВидыЭД";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("72fa8a62-3f99-4606-a4eb-92bcf23b6d8d");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
	Обработчик.ОчередьОтложеннойОбработки = 0;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:ДиректБанк: Обновляет данные регистра Подписываемые виды ЭД'; uk = '1С:ДиректБанк: Обновляет данные регистра Подписываемые виды ЭД'");

#КонецОбласти

#Область ОбменСБанками_ПеренестиДанныеОбменаСБанками

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.1.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбменСБанками.ПеренестиДанныеОбменаСБанками";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e2bf49f3-cca8-4a44-9dad-21b0f1d153f7");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
	Обработчик.ОчередьОтложеннойОбработки = 0;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:ДиректБанк: Обновляет данные подсистемы Обмен с банками'; uk = '1С:ДиректБанк: Обновляет данные подсистемы Обмен с банками'");

#КонецОбласти

#КонецОбласти

#Область Версия_1_3_2

#Область ОбменСБанками_ПеренестиСтатусыЭлектронныхПодписей

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.2.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбменСБанками.ПеренестиСтатусыЭлектронныхПодписей";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("704454cb-bfa5-44ba-a9f0-8638aafa7efe");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
	Обработчик.ОчередьОтложеннойОбработки = 0;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:ДиректБанк: Переносит статусы проверки подписей в присоединенные файлы'; uk = '1С:ДиректБанк: Переносит статусы проверки подписей в присоединенные файлы'");

#КонецОбласти

#КонецОбласти

#Область Версия_1_3_4

#Область Справочники_НастройкиОбменСБанками_ЗаполнитьВерсиюФормата

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.4.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.НастройкиОбменСБанками.ЗаполнитьВерсиюФормата";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("788f991b-8283-4a84-a661-c021310a9cf9");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
	Обработчик.ОчередьОтложеннойОбработки = 0;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:ДиректБанк: Заполняет версию формата.'; uk = '1С:ДиректБанк: Заполняет версию формата.'");

#КонецОбласти

#Область ОбменСБанками_ВключитьАвтоматическоеОбновлениеСпискаБанков

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.4.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбменСБанками.ВключитьАвтоматическоеОбновлениеСпискаБанков";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d788ef99-4874-4b3b-81ac-671856a5b183");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
	Обработчик.ОчередьОтложеннойОбработки = 0;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:ДиректБанк: Включает автоматическое обновление списка банков.'; uk = '1С:ДиректБанк: Включает автоматическое обновление списка банков.'");

#КонецОбласти

#КонецОбласти

#Область Версия_1_3_9

#Область РегистрыСведений_СостоянияОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.9.14";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.СостоянияОбменСБанками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e5444128-7069-469a-8c54-ed39deebebfe");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СостоянияОбменСБанками.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СостоянияОбменСБанками";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СостоянияОбменСБанками";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.СостоянияОбменСБанками";
	Обработчик.Комментарий = НСтр("ru = '1С:ДиректБанк: Удаляет состояние На утверждении. Прямой обмен с банками временно невозможен.'; uk = '1С:ДиректБанк: Удаляет состояние На утверждении. Прямой обмен с банками временно невозможен.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Документы_СообщениеОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#КонецОбласти

#Область Версия_1_7_1

#Область ЭлектронноеВзаимодействие_Справочники_НастройкиОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.7.1.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ЭлектронноеВзаимодействие.Справочники_НастройкиОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a9a378c4-1fcc-4082-93b4-234a4837103f");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.Справочники_НастройкиОбменСБанками_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ЭлектронноеВзаимодействие.Справочники_НастройкиОбменСБанками_ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.НастройкиОбменСБанками";
	Обработчик.ИзменяемыеОбъекты = "Справочник.МаршрутыПодписания,"
		+ "Справочник.НастройкиОбменСБанками";
	Обработчик.БлокируемыеОбъекты = "Документ.СообщениеОбменСБанками,"
		+ "Справочник.НастройкиОбменСБанками";
	Обработчик.Комментарий = НСтр("ru = '1С:ДиректБанк: обновление настроек обмена с банками.
                                   |Обмен с банками временно невозможен.'; uk = '1С:ДиректБанк: обновление настроек обмена с банками.
                                   |Обмен с банками временно невозможен.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
		НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_ЭДПрисоединенныеФайлы_ОбработатьДанныеДляПереходаНаНовуюВерсию";
		НоваяСтрока.Порядок = "Любой";

		НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
		НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_УдалитьПрофилиНастроекЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию";
		НоваяСтрока.Порядок = "Любой";
	КонецЕсли;

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Документы_СообщениеОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.МаршрутыПодписания.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#КонецОбласти

#Область Версия_1_8_1

#Область ЭлектронноеВзаимодействие_Документы_СообщениеОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.8.1.26";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ЭлектронноеВзаимодействие.Документы_СообщениеОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1363a2fc-89ab-43e0-85b2-79355bdf89af");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.Документы_СообщениеОбменСБанками_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.СообщениеОбменСБанками,"
		+ "РегистрСведений.СостояниеПодписанияЭД,"
		+ "РегистрСведений.ЭлектронныеПодписи,"
		+ "Справочник.НастройкиОбменСБанками";
	Обработчик.ИзменяемыеОбъекты = "Документ.СообщениеОбменСБанками,"
		+ "РегистрСведений.СостояниеПодписанияЭД,"
		+ "РегистрСведений.СостоянияОбменСБанками";
	Обработчик.БлокируемыеОбъекты = "Документ.СообщениеОбменСБанками";
	Обработчик.Комментарий = НСтр("ru = '1С:ДиректБанк: обработка сообщений обмена с банком.
                                   |Обмен с банками временно невозможен.'; uk = '1С:ДиректБанк: обработка сообщений обмена с банком.
                                   |Обмен с банками временно невозможен.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РаботаСФайлами.ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений";
	НоваяСтрока.Порядок = "После";

	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
		НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_ЭДПрисоединенныеФайлы_ОбработатьДанныеДляПереходаНаНовуюВерсию";
		НоваяСтрока.Порядок = "Любой";
	КонецЕсли;

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_НастройкиОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СостоянияОбменСБанками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#КонецОбласти

#Область КорректировкаОбработчиков

	ВерсияБСП_Больше_3_1_3 = (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтандартныеПодсистемыСервер.ВерсияБиблиотеки(), "3.1.3.0") > 0);
	
	Для каждого Обработчик Из Обработчики Цикл
		
		// Для БСП, начиная с 3.1.3, нужно описать приоритет с обработчиком "РегистрыСведений.ЭлектронныеПодписи.ОбработатьДанныеДляПереходаНаНовуюВерсию".
		Если Обработчик.Процедура = "ЭлектронноеВзаимодействие.Документы_СообщениеОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию"
			И ВерсияБСП_Больше_3_1_3 Тогда
			
			ПроцедураОбработкиЭлектронныеПодписи = "РегистрыСведений.ЭлектронныеПодписи.ОбработатьДанныеДляПереходаНаНовуюВерсию";
			ЕстьПриоритетПоЭлектронныеПодписи = Ложь;
			Для каждого Приоритет Из Обработчик.ПриоритетыВыполнения Цикл
				Если Приоритет.Процедура = ПроцедураОбработкиЭлектронныеПодписи Тогда
					ЕстьПриоритетПоЭлектронныеПодписи = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ЕстьПриоритетПоЭлектронныеПодписи Тогда
				НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
				НоваяСтрока.Процедура = ПроцедураОбработкиЭлектронныеПодписи;
				НоваяСтрока.Порядок = "После";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

#КонецОбласти

#КонецОбласти
	
КонецПроцедуры

// См. процедуру РаботаСФайламиПереопределяемый.ПриПопыткеЗанятьФайл.
Процедура ПриПопыткеЗанятьФайл(ДанныеФайла, ОписаниеОшибки) Экспорт
	
	Если ТипЗнч(ДанныеФайла.Владелец) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеФайла.Владелец, "Направление, ВидЭД");
		Если РеквизитыВладельца.ВидЭД = Перечисления.ВидыЭДОбменСБанками.Письмо
			И РеквизитыВладельца.Направление = Перечисления.НаправленияЭД.Входящий Тогда
			ОписаниеОшибки = НСтр("ru = 'Полученное письмо из банка редактировать нельзя.'; uk = 'Отриманий лист з банку редагувати не можна.'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. процедуру УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ПисьмоОбменСБанками);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Справочник.НастройкиОбменСБанками.Чтение.Организации
	|Документ.ПакетОбменСБанками.Чтение.Организации
	|Документ.СообщениеОбменСБанками.Чтение.Организации
	|Документ.ПисьмоОбменСБанками.Чтение.Организации
	|";
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ПолучениеВыпискиОбменСБанками.Имя);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПолучениеВыпискиОбменСБанками.ИмяМетода);
	
КонецПроцедуры

// См. процедуру ЭлектронноеВзаимодействие.ПриОпределенииНастроекРегламентныхЗаданий.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ЗагрузкаСпискаБанковОбменСБанками"];
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции["ИспользоватьОбменСБанками"];
	КонецЕсли;
	НоваяСтрока.ДоступноВМоделиСервиса = Ложь;
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ПолучениеВыпискиОбменСБанками"];
	НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции["ИспользоватьОбменСБанками"];
	
КонецПроцедуры

// СтандартныеПодсистемы.ПрофилиБезопасности
// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	// Файл списка банков
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS", "directbank.1c.ru", 443, НСтр("ru = 'Список банков сервиса 1С:ДиректБанк.'; uk = 'Список банков сервиса 1С:ДиректБанк.'"));
	НовыеРазрешения.Добавить(Разрешение);

	// Ресурсы банков
	Макет = Справочники.НастройкиОбменСБанками.ПолучитьМакет("СписокБанков");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ДобавитьРесурсыИзМакета(Макет, НовыеРазрешения);
	
	// Ресурсы Сбербанка
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS", "upgsbi.sberbank.ru", 9443, НСтр("ru = 'Обмен с банком Сбербанк по технологии DirectBank.'; uk = 'Обмен с банком Сбербанк по технологии DirectBank.'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	// Ресурсы банков из настроек обмена с банками
	Если (НЕ ОбщегоНазначения.РазделениеВключено() ИЛИ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных())
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	НастройкиОбменСБанками.АдресСервера КАК АдресСервера,
		               |	НастройкиОбменСБанками.Банк КАК Банк
		               |ИЗ
		               |	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками";
		Выборка = Запрос.Выполнить().Выбрать();
		ШаблонОписания = НСтр("ru = 'Обмен с банком %1 по технологии DirectBank.'; uk = 'Обмен с банком %1 по технологии DirectBank.'");
		Пока Выборка.Следующий() Цикл
			СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Выборка.АдресСервера);
			ТекстОписания = СтрШаблон(ШаблонОписания, Строка(Выборка.Банк));
			Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
				"HTTPS", СтруктураURI.Хост, СтруктураURI.Порт, ТекстОписания);
			НовыеРазрешения.Добавить(Разрешение);
		КонецЦикла;
	КонецЕсли;

	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя = "ГруппаКомандДиректБанк";
	Вид.ИмяПодменю = "ПодменюДиректБанк";
	Вид.Заголовок = НСтр("ru = '1C:ДиректБанк'; uk = '1C:ДиректБанк'");
	Вид.Картинка = Новый Картинка;
	Вид.Отображение = ОтображениеКнопки.Текст;
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.СообщениеОбменСБанками) Тогда
		Возврат;
	КонецЕсли;
	
	ТипыОбъектов = Новый Массив;
	ВсеТипыОснований = Метаданные.ОпределяемыеТипы.ВладелецОбменСБанками.Тип.Типы();
	Для каждого ЭлементКоллекции Из ВсеТипыОснований Цикл
		Если ЭлементКоллекции <> Тип("СправочникСсылка.НастройкиОбменСБанками")
			И ЭлементКоллекции <> Тип("ДокументСсылка.ПисьмоОбменСБанками") Тогда
			ТипыОбъектов.Добавить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	ТипПараметра = Новый ОписаниеТипов(ТипыОбъектов);
	
	ПравоВыполненияОбмена = ПравоВыполненияОбмена();
	
	Если ПравоВыполненияОбмена Тогда
		Команда = Команды.Добавить();
		Команда.Вид = "ГруппаКомандДиректБанк";
		Команда.Идентификатор = "ДиректБанкОтправка";
		Команда.Представление = НСтр("ru = 'Отправить электронный документ'; uk = 'Надіслати електронний документ'");
		Команда.Важность = "Обычное";
		Команда.Порядок = 1;
		Команда.ОтображениеКнопки = ОтображениеКнопки.КартинкаИТекст;
		Команда.Картинка = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
		Команда.ТипПараметра = ТипПараметра;
		Команда.ФункциональныеОпции = "ИспользоватьОбменСБанками";
		Команда.ИзменяетВыбранныеОбъекты = Ложь;
		Команда.РежимЗаписи = "Записывать";
		Команда.Обработчик = "ОбменСБанкамиСлужебныйКлиент.СформироватьПодписатьОтправитьЭД";
	КонецЕсли;
	
	Команда = Команды.Добавить();
	Команда.Вид = "ГруппаКомандДиректБанк";
	Команда.Идентификатор = "ДиректБанкПросмотр";
	Команда.Представление = НСтр("ru = 'Просмотреть электронный документ'; uk = 'Переглянути електронний документ'");
	Команда.Важность = "Обычное";
	Команда.Порядок = 2;
	Команда.ОтображениеКнопки = ОтображениеКнопки.КартинкаИТекст;
	Команда.Картинка = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
	Команда.ТипПараметра = ТипПараметра;
	Команда.ФункциональныеОпции = "ИспользоватьОбменСБанками";
	Команда.ИзменяетВыбранныеОбъекты = Ложь;
	Команда.РежимЗаписи = "Записывать";
	Команда.Обработчик = "ОбменСБанкамиСлужебныйКлиент.ОткрытьАктуальныйЭД";
	
	Если ПравоВыполненияОбмена Тогда
		Команда = Команды.Добавить();
		Команда.Вид = "ГруппаКомандДиректБанк";
		Команда.Идентификатор = "ДиректБанкСоздать";
		Команда.Представление = НСтр("ru = 'Создать электронный документ'; uk = 'Створити електронний документ'");
		Команда.Важность = "Обычное";
		Команда.Порядок = 3;
		Команда.ОтображениеКнопки = ОтображениеКнопки.КартинкаИТекст;
		Команда.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
		Команда.ТипПараметра = ТипПараметра;
		Команда.ФункциональныеОпции = "ИспользоватьОбменСБанками";
		Команда.ИзменяетВыбранныеОбъекты = Ложь;
		Команда.РежимЗаписи = "Записывать";
		Команда.Обработчик = "ОбменСБанкамиСлужебныйКлиент.СформироватьЭД";
	КонецЕсли;
	
	Команда = Команды.Добавить();
	Команда.Вид = "ГруппаКомандДиректБанк";
	Команда.Идентификатор = "ДиректБанкСписок";
	Команда.Представление = НСтр("ru = 'Открыть электронные документы'; uk = 'Відкрити електронні документи'");
	Команда.Важность = "Обычное";
	Команда.Порядок = 4;
	Команда.ОтображениеКнопки = ОтображениеКнопки.КартинкаИТекст;
	Команда.Картинка = БиблиотекаКартинок.Подсистема;
	Команда.ТипПараметра = ТипПараметра;
	Команда.ФункциональныеОпции = "ИспользоватьОбменСБанками";
	Команда.ИзменяетВыбранныеОбъекты = Ложь;
	Команда.РежимЗаписи = "Записывать";
	Команда.Обработчик = "ОбменСБанкамиСлужебныйКлиент.СписокЭД";
	Команда.МножественныйВыбор = Ложь;
	
	АктуальныеВидыЭД = ОбменСБанкамиСлужебныйПовтИсп.АктуальныеВидыЭД();

	Если АктуальныеВидыЭД.Найти(Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки) <> Неопределено Тогда
		Команда = Команды.Добавить();
		Команда.Вид = "ГруппаКомандДиректБанк";
		Команда.Идентификатор = "ДиректБанкВыписки";
		Команда.Представление = НСтр("ru = 'Открыть банковские выписки'; uk = 'Відкрити банківські виписки'");
		Команда.Важность = "Обычное";
		Команда.Порядок = 5;
		Команда.Картинка = БиблиотекаКартинок.ВыпискиОбменСБанками;
		Команда.ТипПараметра = ТипПараметра;
		Команда.ФункциональныеОпции = "ИспользоватьОбменСБанками";
		Команда.ИзменяетВыбранныеОбъекты = Ложь;
		Команда.РежимЗаписи = "НеЗаписывать";
		Команда.Обработчик = "ОбменСБанкамиСлужебныйКлиент.ОткрытьБанковскиеВыписки";
		Команда.МножественныйВыбор = Ложь;
	КонецЕсли;
	
	Если АктуальныеВидыЭД.Найти(Перечисления.ВидыЭДОбменСБанками.Письмо) <> Неопределено
		И ОбменСБанкамиСлужебный.ЕстьПоддержкаПисем() Тогда
		Команда = Команды.Добавить();
		Команда.Вид = "ГруппаКомандДиректБанк";
		Команда.Идентификатор = "ДиректБанкПисьма";
		Команда.Представление = НСтр("ru = 'Открыть переписку с банками'; uk = 'Відкрити листування з банками'");
		Команда.Важность = "Обычное";
		Команда.Порядок = 6;
		Команда.Картинка = БиблиотекаКартинок.ПерепискаОбменСБанками;
		Команда.ТипПараметра = ТипПараметра;
		Команда.ФункциональныеОпции = "ИспользоватьОбменСБанками";
		Команда.ИзменяетВыбранныеОбъекты = Ложь;
		Команда.РежимЗаписи = "НеЗаписывать";
		Команда.Обработчик = "ОбменСБанкамиСлужебныйКлиент.ОткрытьПереписку";
		Команда.МножественныйВыбор = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийБИП

// См. процедуру ПолучениеВнешнихКомпонентВМоделиСервисаПереопределяемый.ПриОпределенииИспользуемыхВерсийВнешнихКомпонент
//
Процедура ПриОпределенииИспользуемыхВерсийВнешнихКомпонент(Идентификаторы) Экспорт
	
	Идентификаторы.Добавить(ОбменСБанкамиКлиентСервер.ИдентификаторВнешнейКомпонентыСбербанк());
	Идентификаторы.Добавить("iBank2DxV2");

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьНеПустойПараметр(Текст, ДеревоРазбора, Путь, ИмяПараметра)
	
	ЗначениеПараметра = ЗначениеРеквизитаВДереве(ДеревоРазбора, Путь);
	
	Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, Символы.ПС, "");
		ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, Символы.ВК, "");
		Текст.ЗаписатьСтроку(ИмяПараметра + "=" + ЗначениеПараметра);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьОперацию(Текст, Операция)
			
	СекцияДокумент = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ВидДокумента");
	Текст.ЗаписатьСтроку("СекцияДокумент=" + СекцияДокумент);
	Номер = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НомерДокумента");
	Текст.ЗаписатьСтроку("Номер=" + Номер);
	Дата = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаДокумента");
	Текст.ЗаписатьСтроку("Дата=" + Формат(Дата, ОбменСБанкамиСлужебный.ФорматДатыРоссия()));
	Сумма = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.СуммаДокумента");
	Текст.ЗаписатьСтроку("Сумма=" + Формат(Сумма, "ЧРД=.; ЧГ="));
		
	ДобавитьПлательщикаИПолучателя(Текст, Операция);
	
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ВидПлатежа", "ВидПлатежа");
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ВидОперации", "ВидОплаты");
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.УникальныйИдентификаторПлатежа", "Код");
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.КодВидаДохода", "КодНазПлатежа");
	
	ДобавитьНазначениеПлатежа(Текст, Операция);
	
	ДобавитьБюджетныеРеквизиты(Текст, Операция);
		
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Очередность", "Очередность");
	
	СрокАкцепта = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежноеТребование.СрокАкцепта");
	Если ЗначениеЗаполнено(СрокАкцепта) Тогда
		Текст.ЗаписатьСтроку("СрокАкцепта=" + Формат(СрокАкцепта,"ЧДЦ=0; ЧГ="));
	КонецЕсли;
	
	ДатаОтсылкиДок = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежноеТребование.ДатаОтсылкиДок");
	Если ЗначениеЗаполнено(ДатаОтсылкиДок) Тогда
		Текст.ЗаписатьСтроку("ДатаОтсылкиДок=" + ДатаОтсылкиДок);
	КонецЕсли;
	
	УсловиеОплаты = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежноеТребование.УсловиеОплаты");
	МассивПодстрок = СтрРазделить(УсловиеОплаты, Символы.ПС + Символы.ВК, Ложь);
	Индекс = 1;
	Для Каждого Строка Из МассивПодстрок Цикл
		Текст.ЗаписатьСтроку("УсловиеОплаты" + Индекс + "=" + Строка);
		Индекс = Индекс + 1;
		Если Индекс > 3 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Текст.ЗаписатьСтроку("КонецДокумента");

КонецПроцедуры

Процедура ДобавитьНазначениеПлатежа(Текст, Операция)
	
	НазначениеПлатежа = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НазначениеПлатежа");
	НазначениеПлатежаОднойСтрокой = СтрЗаменить(СтрЗаменить(НазначениеПлатежа, Символы.ПС, ""), Символы.ВК, "");
	Текст.ЗаписатьСтроку("НазначениеПлатежа=" + НазначениеПлатежаОднойСтрокой);
	МассивПодстрок = СтрРазделить(НазначениеПлатежа, Символы.ПС + Символы.ВК, Ложь);
	Индекс = 1;
	Для Каждого Строка Из МассивПодстрок Цикл
		Текст.ЗаписатьСтроку("НазначениеПлатежа" + Индекс + "=" + Строка);
		Индекс = Индекс + 1;
		Если Индекс > 6 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьБюджетныеРеквизиты(Текст, Операция)
	
	ДобавитьНеПустойПараметр(Текст, Операция,
		"Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.СтатусСоставителя", "СтатусСоставителя");
	ДобавитьНеПустойПараметр(Текст, Операция,
		"Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательКБК", "ПоказательКБК");
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ОКТМО", "ОКАТО");
	ДобавитьНеПустойПараметр(Текст, Операция,
		"Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательОснования", "ПоказательОснования");
	ДобавитьНеПустойПараметр(Текст, Операция,
		"Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательПериода", "ПоказательПериода");
	ДобавитьНеПустойПараметр(Текст, Операция,
		"Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательНомера", "ПоказательНомера");
	ДобавитьНеПустойПараметр(Текст, Операция,
		"Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательДаты", "ПоказательДаты");
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.КодВыплат", "ПоказательТипа");
	
КонецПроцедуры

Процедура ДобавитьПлательщикаИПолучателя(Текст, Операция)
		
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет", "ПлательщикСчет");
	
	ДатаСписано = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаСписания");
	Если ЗначениеЗаполнено(ДатаСписано) Тогда
		Текст.ЗаписатьСтроку("ДатаСписано=" + Формат(ДатаСписано, ОбменСБанкамиСлужебный.ФорматДатыРоссия()));
	КонецЕсли;
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Наименование", "Плательщик");
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.ИНН", "ПлательщикИНН");
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.КПП", "ПлательщикКПП");
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет", "ПлательщикРасчСчет");
	ДобавитьНеПустойПараметр(Текст, Операция,
		"Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Наименование", "ПлательщикБанк1");
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Город", "ПлательщикБанк2");
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.БИК", "ПлательщикБИК");
	ДобавитьНеПустойПараметр(Текст, Операция,
		"Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.КоррСчет", "ПлательщикКорсчет");
	
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет", "ПолучательСчет");
	ДатаПоступило = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаПоступления");
	Если ЗначениеЗаполнено(ДатаПоступило) Тогда
		ДатаПоступилоСтрокой = Формат(ДатаПоступило, ОбменСБанкамиСлужебный.ФорматДатыРоссия());
		Текст.ЗаписатьСтроку("ДатаПоступило=" + ДатаПоступилоСтрокой);
	КонецЕсли;
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Наименование", "Получатель");
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.ИНН", "ПолучательИНН");
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.КПП", "ПолучательКПП");
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет", "ПолучательРасчСчет");
	ДобавитьНеПустойПараметр(Текст, Операция,
		"Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.Наименование", "ПолучательБанк1");
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.Город", "ПолучательБанк2");
	ДобавитьНеПустойПараметр(
		Текст, Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.БИК", "ПолучательБИК");
	ДобавитьНеПустойПараметр(Текст, Операция,
		"Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.КоррСчет", "ПолучательКорсчет");
	
КонецПроцедуры

#КонецОбласти


// Возвращает формат временем для России.
// Не исправлять, т.к это не является ошибкой.
// 
// Возвращаемое значение:
//  Строка - формат времени для России
//
Функция ФорматВремениРоссия()
	
	Возврат "HH:mm:ss";
	
КонецФункции

#Область Прочее

Функция СоответствиеВидовЭД()
	
	СоответствиеВозврата = Новый Соответствие;
	СоответствиеВозврата.Вставить(Перечисления["ВидыЭД"].УдалитьДопДанные,
		Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
	СоответствиеВозврата.Вставить(Перечисления["ВидыЭД"].УдалитьВыпискаБанка, Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьЗапросВыписки, Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);
	СоответствиеВозврата.Вставить(Перечисления["ВидыЭД"].УдалитьЗапросЗонд, Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьЗапросНаОтзывЭД, Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьЗапросОСостоянииЭД, Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьИзвещениеОСостоянииЭД, Перечисления.ВидыЭДОбменСБанками.ИзвещениеОСостоянииЭД);
	СоответствиеВозврата.Вставить(Перечисления["ВидыЭД"].УдалитьКвитанция, Перечисления.ВидыЭДОбменСБанками.Квитанция);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьПлатежноеПоручение, Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьПлатежноеТребование, Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование);
		
	Возврат СоответствиеВозврата
		
КонецФункции

Функция СоответствиеСостояний()
	
	СоответствиеВозврата = Новый Соответствие;
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].Аннулирован, Перечисления.СостоянияОбменСБанками.Аннулирован);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].НаПодписи, Перечисления.СостоянияОбменСБанками.НаПодписи);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].НаУтверждении, Перечисления.СостоянияОбменСБанками.НаПодписи);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].НеСформирован, Перечисления.СостоянияОбменСБанками.НеСформирован);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].УдалитьОжидаетсяВыписка, Перечисления.СостоянияОбменСБанками.ОжидаетсяВыписка);
	СоответствиеВозврата.Вставить(Перечисления["СостоянияВерсийЭД"].ОжидаетсяИзвещениеОПолучении,
		Перечисления.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].УдалитьОжидаетсяИсполнение, Перечисления.СостоянияОбменСБанками.ОжидаетсяИсполнение);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].ОжидаетсяОтправка, Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка);
	СоответствиеВозврата.Вставить(Перечисления["СостоянияВерсийЭД"].Отклонен, Перечисления.СостоянияОбменСБанками.Отклонен);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].ОшибкаПередачи, Перечисления.СостоянияОбменСБанками.ОшибкаПередачи);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].УдалитьПлатежИсполнен, Перечисления.СостоянияОбменСБанками.ПлатежИсполнен);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].УдалитьТребуетсяПодтверждение, Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждение);
	
	Возврат СоответствиеВозврата
		
КонецФункции

Функция СоответствиеСтатусов()
	
	СоответствиеВозврата = Новый Соответствие;
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Аннулирован, Перечисления.СтатусыОбменСБанками.Аннулирован);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Доставлен, Перечисления.СтатусыОбменСБанками.Доставлен);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].НеСформирован, Перечисления.СтатусыОбменСБанками.НеСформирован);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Обработан, Перечисления.СтатусыОбменСБанками.Обработан);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Отклонен, Перечисления.СтатусыОбменСБанками.Отклонен);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Отправлен, Перечисления.СтатусыОбменСБанками.Отправлен);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].ОшибкаПередачи, Перечисления.СтатусыОбменСБанками.ОшибкаПередачи);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].ПодготовленКОтправке, Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Подписан, Перечисления.СтатусыОбменСБанками.Подписан);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Получен, Перечисления.СтатусыОбменСБанками.Получен);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Принят, Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Сформирован, Перечисления.СтатусыОбменСБанками.Сформирован);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Утвержден, Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].УдалитьИсполнен, Перечисления.СтатусыОбменСБанками.Исполнен);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьКартотека2, Перечисления.СтатусыОбменСБанками.Приостановлен);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьОтказанАБС, Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьОтклоненБанком, Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьОшибкаРеквизитов, Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьПодтвержден, Перечисления.СтатусыОбменСБанками.Подтвержден);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьПриостановлен, Перечисления.СтатусыОбменСБанками.Приостановлен);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьЭПНеВерна, Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].ЧастичноПодписан, Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
	Возврат СоответствиеВозврата
		
КонецФункции

Функция ПредставлениеЭД(Наименование, ВидЭД, СсылкаНаОбъект)
	
	ПутьКСправочникуСоглашенийЭД = "СправочникСсылка.УдалитьСоглашенияОбИспользованииЭД";
	
	Если СсылкаНаОбъект = Неопределено ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип(ПутьКСправочникуСоглашенийЭД) Тогда
		Возврат Наименование;
	КонецЕсли;
	
	ШаблонПредставленияЭД = НСтр("ru = '%1 %2 от %3'; uk = '%1 %2 від %3'");
	
	ПечатныйНомерДокумента = ""; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект, ПечатныйНомерДокумента);
	
	ДатаСтрокой = Формат(СсылкаНаОбъект.Дата, "ДЛФ=D");
	СтрокаИмениФайла = СтрШаблон(ШаблонПредставленияЭД, ВидЭД, ПечатныйНомерДокумента, ДатаСтрокой);
	
	Возврат СтрокаИмениФайла;
	
КонецФункции

Процедура ДобавитьРесурсыИзМакета(Макет, НовыеРазрешения)
	
	КоличествоЗаписей = Макет.ВысотаТаблицы;
	ШаблонОписания = НСтр("ru = 'Обмен с банком %1 по технологии DirectBank.'; uk = 'Обмен с банком %1 по технологии DirectBank.'");
	
	Для Индекс = 2 По КоличествоЗаписей Цикл
		URL = Макет.Область(Индекс, 5).Текст;
		НазваниеБанка = Макет.Область(Индекс, 1).Текст;
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
		ТекстОписания = СтрШаблон(ШаблонОписания, НазваниеБанка);
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса("HTTPS", СтруктураURI.Хост, СтруктураURI.Порт, ТекстОписания);
		НовыеРазрешения.Добавить(Разрешение);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает условное оформление для динамического списка платежных документов
//
// Параметры:
//  Список - ДинамическийСписок - список платежных документов
//  НазваниеКолонки - Строка - название колонки, в котором отображается состояние электронного документа.
//
Процедура УстановитьУсловноеОформление(Список, НазваниеКолонки)
	
	// Отображение расширенного статуса ЭД
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(НазваниеКолонки);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПредставлениеСостоянияДиректБанк");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Текст", Новый ПолеКомпоновкиДанных("ПредставлениеСостоянияДиректБанк"));

	// Раскрашивание гиперссылки
	// Синий
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(НазваниеКолонки);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НазваниеКолонки);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокОтбора = Новый Массив;
	СписокОтбора.Добавить(Перечисления.СостоянияОбменСБанками.НеСформирован);
	СписокОтбора.Добавить(Перечисления.СостоянияОбменСБанками.НаПодписи);
	СписокОтбора.Добавить(Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка);
	СписокОтбора.Добавить(Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждение);
	ОтборЭлемента.ПравоеЗначение = СписокОтбора;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Метаданные.ЭлементыСтиля.ЦветГиперссылкиБЭД.Значение);

	// Красный
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(НазваниеКолонки);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НазваниеКолонки);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокОтбора = Новый Массив;
	СписокОтбора.Добавить(Перечисления.СостоянияОбменСБанками.Аннулирован);
	СписокОтбора.Добавить(Перечисления.СостоянияОбменСБанками.Отклонен);
	СписокОтбора.Добавить(Перечисления.СостоянияОбменСБанками.ОшибкаПередачи);
	ОтборЭлемента.ПравоеЗначение = СписокОтбора;
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста", Метаданные.ЭлементыСтиля.ПоясняющийОшибкуТекст.Значение);
	
	// Зеленый
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(НазваниеКолонки);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НазваниеКолонки);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияОбменСБанками.ПлатежИсполнен;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Метаданные.ЭлементыСтиля.РезультатУспехЦвет.Значение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаВыписки

Функция ЗначениеРеквизитаВДереве(Дерево, ИмяРеквизита)
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ИмяРеквизита, Ложь)
	
КонецФункции

#КонецОбласти

#Область ФормированиеТекстовойВыписки

Процедура ЗаполнитьШапкуВыписки(Организация, Текст, СтрокаТаблицыВыписок, МассивСчетов)

	Текст.ЗаписатьСтроку("1CClientBankExchange");
	Текст.ЗаписатьСтроку("ВерсияФормата=1.03");
	Текст.ЗаписатьСтроку("Кодировка=Windows");
	
	ПерваяВыписка = СтрокаТаблицыВыписок.Строки.Получить(0);
	
	ДобавитьНеПустойПараметр(Текст, ПерваяВыписка, "Выписки.НомерСтроки.Банк.Наименование", "Отправитель");
	ДобавитьНеПустойПараметр(Текст, ПерваяВыписка, "Выписки.НомерСтроки.Организация.Наименование", "Получатель");
	
	ДатаСоздания = ЗначениеРеквизитаВДереве(ПерваяВыписка, "Выписки.НомерСтроки.ДатаФормирования");
	Если ЗначениеЗаполнено(ДатаСоздания) Тогда
		Текст.ЗаписатьСтроку("ДатаСоздания=" + Формат(ДатаСоздания, ОбменСБанкамиСлужебный.ФорматДатыРоссия()));
		Текст.ЗаписатьСтроку("ВремяСоздания=" + Формат(ДатаСоздания, ФорматВремениРоссия()));
	КонецЕсли;
	
	ДатаНачала = ЗначениеРеквизитаВДереве(ПерваяВыписка, "Выписки.НомерСтроки.НачалоПериода");
	Текст.ЗаписатьСтроку("ДатаНачала=" + Формат(ДатаНачала, ОбменСБанкамиСлужебный.ФорматДатыРоссия()));
	ПоследняяВыписка = СтрокаТаблицыВыписок.Строки.Получить(СтрокаТаблицыВыписок.Строки.Количество() - 1);
	ДатаКонца = ЗначениеРеквизитаВДереве(ПоследняяВыписка, "Выписки.НомерСтроки.КонецПериода");
	Текст.ЗаписатьСтроку("ДатаКонца=" + Формат(ДатаКонца,  ОбменСБанкамиСлужебный.ФорматДатыРоссия()));

	НомерСчета = ЗначениеРеквизитаВДереве(ПоследняяВыписка, "Выписки.НомерСтроки.НомерСчета"); // одинаковый для всех
	Текст.ЗаписатьСтроку("РасчСчет=" + НомерСчета);
	
	ДополнительныеРеквизиты = Новый Структура("Владелец", Организация);
	СчетОрганизации = ЭлектронноеВзаимодействие.НайтиСсылку(
		"БанковскиеСчетаОрганизаций", НомерСчета, ДополнительныеРеквизиты);
	МассивСчетов.Добавить(СчетОрганизации);
	
	Текст.ЗаписатьСтроку("СекцияРасчСчет");
	Текст.ЗаписатьСтроку("ДатаНачала=" + Формат(ДатаНачала, ОбменСБанкамиСлужебный.ФорматДатыРоссия()));
	Текст.ЗаписатьСтроку("ДатаКонца="  + Формат(ДатаКонца, ОбменСБанкамиСлужебный.ФорматДатыРоссия()));
	Текст.ЗаписатьСтроку("РасчСчет=" + НомерСчета);
		
	ЗаполнитьОстаткиИОбороты(Текст, СтрокаТаблицыВыписок, ПерваяВыписка, ПоследняяВыписка);
	
	Текст.ЗаписатьСтроку("КонецРасчСчет");

КонецПроцедуры

Процедура ЗаполнитьОстаткиИОбороты(Текст, СтрокаТаблицыВыписок, ПерваяВыписка, ПоследняяВыписка);
				
	НачальныйОстаток = ЗначениеРеквизитаВДереве(ПерваяВыписка, "Выписки.НомерСтроки.НачальныйОстаток");
	Если ЗначениеЗаполнено(НачальныйОстаток) Тогда
		Текст.ЗаписатьСтроку("НачальныйОстаток=" + Формат(НачальныйОстаток, "ЧРД=.; ЧГ="));
	КонецЕсли;
		
	ВсегоПоступило = 0;
	ВсегоСписано = 0;
		
	Для Каждого Выписка Из СтрокаТаблицыВыписок.Строки Цикл
		ТекВсегоПоступило = ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.ОборотВходящихПлатежей");
		Если ЗначениеЗаполнено(ТекВсегоПоступило) Тогда
			ВсегоПоступило = ВсегоПоступило + ТекВсегоПоступило;
		КонецЕсли;
		ТекВсегоСписано = ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.ОборотИсходящихПлатежей");
		Если ЗначениеЗаполнено(ТекВсегоСписано) Тогда
			ВсегоСписано = ВсегоСписано + ТекВсегоСписано;
		КонецЕсли;
	КонецЦикла;
		
	Если ЗначениеЗаполнено(ВсегоПоступило) Тогда
		Текст.ЗаписатьСтроку("ВсегоПоступило=" + Формат(ВсегоПоступило, "ЧРД=.; ЧГ="));
	КонецЕсли;
	Если ЗначениеЗаполнено(ВсегоСписано) Тогда
		Текст.ЗаписатьСтроку("ВсегоСписано=" + Формат(ВсегоСписано, "ЧРД=.; ЧГ="));
	КонецЕсли;
		
	КонечныйОстаток = ЗначениеРеквизитаВДереве(ПоследняяВыписка, "Выписки.НомерСтроки.КонечныйОстаток");
	Если ЗначениеЗаполнено(КонечныйОстаток) Тогда
		Текст.ЗаписатьСтроку("КонечныйОстаток=" + Формат(КонечныйОстаток, "ЧРД=.; ЧГ="));
	КонецЕсли;

КонецПроцедуры

#Область ИзменениеПрикладныхФорм

Процедура ИзменитьЗапросДинамическогоСписка(ФормаОбъект, Параметры)

	РеквизитыФормы = ФормаОбъект.ПолучитьРеквизиты();
	ЕстьРеквизит = Ложь;
	Для Каждого Реквизит Из РеквизитыФормы Цикл
		Если Реквизит.Имя = Параметры.ДинамическийСписок.ИмяРеквизита Тогда
			ЕстьРеквизит = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьРеквизит Тогда
		Возврат;
	КонецЕсли;

	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ФормаОбъект[Параметры.ДинамическийСписок.ИмяРеквизита].ТекстЗапроса);
	Пакет = СхемаЗапроса.ПакетЗапросов.Получить(СхемаЗапроса.ПакетЗапросов.Количество() - 1);
	Для Каждого Оператор Из Пакет.Операторы Цикл
		ТаблицаРегистра = Оператор.Источники.Добавить("РегистрСведений.СостоянияОбменСБанками", "СостоянияДиректБанк");
		ТаблицаДокумента = Оператор.Источники.Получить(0);
		Условие = ТаблицаДокумента.Источник.Псевдоним + ".Ссылка = СостоянияДиректБанк.СсылкаНаОбъект";
		ТаблицаДокумента.Соединения.Добавить(ТаблицаРегистра, Условие);
		ПолеСостояние = Оператор.ВыбираемыеПоля.Добавить("СостоянияДиректБанк.Состояние");
		КолонкаСостояние = Пакет.Колонки.Найти(ПолеСостояние);
		КолонкаСостояние.Псевдоним = "СостояниеДиректБанк";
		ПолеПредставлениеСостояние = Оператор.ВыбираемыеПоля.Добавить("СостоянияДиректБанк.ПредставлениеСостояния");
		КолонкаСостояние = Пакет.Колонки.Найти(ПолеПредставлениеСостояние);
		КолонкаСостояние.Псевдоним = "ПредставлениеСостоянияДиректБанк";
		ТекстВыраженияВыбора =
		"ВЫБОР
		|	КОГДА СостоянияДиректБанк.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ПлатежИсполнен)
		|		ТОГДА 0
		|	КОГДА СостоянияДиректБанк.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.НаПодписи)
		|			ИЛИ СостоянияДиректБанк.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.НеСформирован)
		|			ИЛИ СостоянияДиректБанк.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ТребуетсяПодтверждение)
		|			ИЛИ СостоянияДиректБанк.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ТребуетсяПодтверждениеВБанке)
		|			ИЛИ СостоянияДиректБанк.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ТребуетсяОтправка)
		|		ТОГДА 1
		|	КОГДА СостоянияДиректБанк.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяВыписка)
		|			ИЛИ СостоянияДиректБанк.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении)
		|			ИЛИ СостоянияДиректБанк.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяИсполнение)
		|		ТОГДА 2
		|	КОГДА СостоянияДиректБанк.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.Аннулирован)
		|			ИЛИ СостоянияДиректБанк.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.Отклонен)
		|			ИЛИ СостоянияДиректБанк.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОшибкаПередачи)
		|		ТОГДА 3
		|	ИНАЧЕ 4
		|КОНЕЦ";
		ВыражениеВыбора = Новый ВыражениеСхемыЗапроса(ТекстВыраженияВыбора);
		ПолеВыбора = Оператор.ВыбираемыеПоля.Добавить(Строка(ВыражениеВыбора));
	КонецЦикла;
	КолонкаКартинка = Пакет.Колонки.Найти(ПолеВыбора);
	КолонкаКартинка.Псевдоним = "КартинкаДиректБанк";
	ФормаОбъект[Параметры.ДинамическийСписок.ИмяРеквизита].ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	УстановитьУсловноеОформление(ФормаОбъект[Параметры.ДинамическийСписок.ИмяРеквизита], "СостояниеДиректБанк");

КонецПроцедуры

Процедура ДобавитьКолонкиВТаблицуДокументов(ФормаОбъект, Параметры)
	
	Если ФормаОбъект.Элементы.Найти(Параметры.СписокДокументов.ИмяЭлемента) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаДиректБанк = ФормаОбъект.Элементы.Добавить(
		"ГруппаДиректБанк", Тип("ГруппаФормы"), ФормаОбъект.Элементы[Параметры.СписокДокументов.ИмяЭлемента]);
	ГруппаДиректБанк.Заголовок = НСтр("ru = 'Группа 1С:ДиректБанк'; uk = 'Группа 1С:ДиректБанк'");
	ГруппаДиректБанк.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаДиректБанк.Группировка = ГруппировкаКолонок.ВЯчейке;
	ГруппаДиректБанк.ОтображатьВШапке = Ложь;
	
	Если ЗначениеЗаполнено(Параметры.СписокДокументов.МестоРасположения)
		И ФормаОбъект.Элементы.Найти(Параметры.СписокДокументов.МестоРасположения) <> Неопределено Тогда
		ФормаОбъект.Элементы.Переместить(ГруппаДиректБанк,
										ФормаОбъект.Элементы[Параметры.СписокДокументов.ИмяЭлемента],
										ФормаОбъект.Элементы[Параметры.СписокДокументов.МестоРасположения]);
	КонецЕсли;
	
	ПолеКартинки = ФормаОбъект.Элементы.Добавить(
		"КартинкаДиректБанк", Тип("ПолеФормы"), ФормаОбъект.Элементы.ГруппаДиректБанк);
	ПолеКартинки.Заголовок = НСтр("ru = 'Картинка состояния 1С:ДиректБанк'; uk = 'Картинка состояния 1С:ДиректБанк'");
	ПолеКартинки.Вид = ВидПоляФормы.ПолеКартинки;
	ПолеКартинки.ПутьКДанным = Параметры.СписокДокументов.ИмяРеквизита + ".КартинкаДиректБанк";
	ПолеКартинки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеКартинки.КартинкаЗначений = БиблиотекаКартинок.СостоянияОбменСБанками;
	
	ПолеСостояние = ФормаОбъект.Элементы.Добавить(
		"СостояниеДиректБанк", Тип("ПолеФормы"), ФормаОбъект.Элементы.ГруппаДиректБанк);
	ПолеСостояние.Заголовок = НСтр("ru = '1С:ДиректБанк'; uk = '1С:ДиректБанк'");
	ПолеСостояние.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеСостояние.ПутьКДанным = Параметры.СписокДокументов.ИмяРеквизита + ".СостояниеДиректБанк";
	Если ПравоЧтенияДанных() Тогда
		ПолеСостояние.ГиперссылкаЯчейки = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСсылкуНаПереписку(ФормаОбъект, Параметры)
	
	Родитель = ФормаОбъект;
	Если ЗначениеЗаполнено(Параметры.ПерепискаСБанками.Родитель) Тогда
		Если ФормаОбъект.Элементы.Найти(Параметры.ПерепискаСБанками.Родитель) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Родитель = ФормаОбъект.Элементы[Параметры.ПерепискаСБанками.Родитель];
	КонецЕсли;
	
	ПерепискаСБанками = ФормаОбъект.Элементы.Добавить("ПисьмаДиректБанк", Тип("ДекорацияФормы"), Родитель);
	
	ПерепискаСБанками.Заголовок = ОбменСБанкамиКлиентСервер.ТекстСсылкиПерепискаСБанками();
	ПерепискаСБанками.Вид = ВидДекорацииФормы.Надпись;
	ПерепискаСБанками.Гиперссылка = Истина;
	ПерепискаСБанками.УстановитьДействие("Нажатие", "Подключаемый_ОбработатьСобытиеДиректБанк");
	
	Если ЗначениеЗаполнено(Параметры.ПерепискаСБанками.МестоРасположения)
		И ФормаОбъект.Элементы.Найти(Параметры.ПерепискаСБанками.МестоРасположения) <> Неопределено Тогда
		ФормаОбъект.Элементы.Переместить(
			ПерепискаСБанками, Родитель, ФормаОбъект.Элементы[Параметры.ПерепискаСБанками.МестоРасположения]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРекламу(ФормаОбъект, Параметры)
	
	Родитель = ФормаОбъект;
	Если ЗначениеЗаполнено(Параметры.Реклама.Родитель) Тогда
		Если ФормаОбъект.Элементы.Найти(Параметры.Реклама.Родитель) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Родитель = ФормаОбъект.Элементы[Параметры.Реклама.Родитель];
	КонецЕсли;
	
	ГруппаРекламаДиректБанкВертикально = ФормаОбъект.Элементы.Добавить(
		"ГруппаРекламаДиректБанкВертикально", Тип("ГруппаФормы"), Родитель);
	ГруппаРекламаДиректБанкВертикально.Заголовок = НСтр("ru = 'Реклама 1С:ДиректБанк'; uk = 'Реклама 1С:ДиректБанк'");
	ГруппаРекламаДиректБанкВертикально.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаРекламаДиректБанкВертикально.Отображение = ОтображениеОбычнойГруппы.Нет; 
	ГруппаРекламаДиректБанкВертикально.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаРекламаДиректБанкВертикально.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	ГруппаРекламаДиректБанкВертикально.ОтображатьЗаголовок = Ложь;
	
	ГруппаЛоготипИТекстДиректБанкВертикально = ФормаОбъект.Элементы.Добавить(
		"ГруппаЛоготипИТекстДиректБанкВертикально", Тип("ГруппаФормы"), ГруппаРекламаДиректБанкВертикально);
	ГруппаЛоготипИТекстДиректБанкВертикально.Заголовок = НСтр("ru = 'Группа логотип и текст 1С:ДиректБанк'; uk = 'Группа логотип и текст 1С:ДиректБанк'");
	ГруппаЛоготипИТекстДиректБанкВертикально.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЛоготипИТекстДиректБанкВертикально.Объединенная = Истина;
	ГруппаЛоготипИТекстДиректБанкВертикально.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаЛоготипИТекстДиректБанкВертикально.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	ГруппаЛоготипИТекстДиректБанкВертикально.ОтображатьЗаголовок = Ложь;
	
	ЛоготипДиректБанкВертикально =  ФормаОбъект.Элементы.Добавить(
		"ЛоготипДиректБанкВертикально", Тип("ДекорацияФормы"), ГруппаЛоготипИТекстДиректБанкВертикально);
	ЛоготипДиректБанкВертикально.Заголовок = НСтр("ru = 'Логотип 1С:ДиректБанк'; uk = 'Логотип 1С:ДиректБанк'");
	ЛоготипДиректБанкВертикально.Вид = ВидДекорацииФормы.Картинка;
	ЛоготипДиректБанкВертикально.Картинка = БиблиотекаКартинок.DirectBank64;
	ЛоготипДиректБанкВертикально.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	
	ТекстДиректБанкВертикально = ФормаОбъект.Элементы.Добавить(
		"ТекстДиректБанкВертикально", Тип("ДекорацияФормы"), ГруппаЛоготипИТекстДиректБанкВертикально);
	ТекстДиректБанкВертикально.Вид = ВидДекорацииФормы.Надпись;
	ТекстДиректБанкВертикально.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
	ТекстДиректБанкВертикально.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	ТекстДиректБанкВертикально.УстановитьДействие(
		"ОбработкаНавигационнойСсылки", "Подключаемый_ОбработатьСобытиеДиректБанк");

	Преимущество1 = ФормаОбъект.Элементы.Добавить(
		"Преимущество1", Тип("ДекорацияФормы"), ГруппаРекламаДиректБанкВертикально);
	Преимущество1.Заголовок = НСтр("ru = '• Управление расчетными счетами прямо из ""1С:Предприятия 8""'; uk = '• Управление расчетными счетами прямо из ""1С:Предприятия 8""'");
	Преимущество1.Вид = ВидДекорацииФормы.Надпись;
	Преимущество1.Шрифт = Новый Шрифт( , 10, Истина);
	Преимущество1.Ширина = 45;
	Преимущество1.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	
	Преимущество2 = ФормаОбъект.Элементы.Добавить(
		"Преимущество2", Тип("ДекорацияФормы"), ГруппаРекламаДиректБанкВертикально);
	Преимущество2.Заголовок = НСтр("ru = '• Высокая скорость обмена информацией с банком'; uk = '• Высокая скорость обмена информацией с банком'");
	Преимущество2.Вид = ВидДекорацииФормы.Надпись;
	Преимущество2.Шрифт = Новый Шрифт( , 10, Истина);
	Преимущество2.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;

	Преимущество3 = ФормаОбъект.Элементы.Добавить(
		"Преимущество3", Тип("ДекорацияФормы"), ГруппаРекламаДиректБанкВертикально);
	Преимущество3.Заголовок = НСтр("ru = '• Повышенный уровень безопасности'; uk = '• Повышенный уровень безопасности'");
	Преимущество3.Вид = ВидДекорацииФормы.Надпись;
	Преимущество3.Шрифт = Новый Шрифт( , 10, Истина);
	Преимущество3.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;

	Если ЗначениеЗаполнено(Параметры.Реклама.МестоРасположения)
		И ФормаОбъект.Элементы.Найти(Параметры.Реклама.МестоРасположения) <> Неопределено Тогда
		ФормаОбъект.Элементы.Переместить(
			ГруппаРекламаДиректБанкВертикально, Родитель, ФормаОбъект.Элементы[Параметры.Реклама.МестоРасположения]);
	КонецЕсли;
	
	ОбменСБанкамиКлиентСервер.ПоказатьРекламуДиректБанк(ГруппаРекламаДиректБанкВертикально, ТекстДиректБанкВертикально);
	
КонецПроцедуры

Процедура ДобавитьКоманды(ФормаОбъект, Параметры)
	
	Если Параметры.ГруппаКоманд.Родитель = Неопределено Тогда
		Параметры.ГруппаКоманд.Родитель = ФормаОбъект.КоманднаяПанель;
	КонецЕсли;

	ГруппаКомандДиректБанк = ФормаОбъект.Элементы.Найти("ГруппаКомандДиректБанк");
	
	Если ГруппаКомандДиректБанк = Неопределено Тогда
		ГруппаКомандДиректБанк = ФормаОбъект.Элементы.Добавить(
			"ГруппаКомандДиректБанк", Тип("ГруппаФормы"), Параметры.ГруппаКоманд.Родитель);
		ГруппаКомандДиректБанк.Заголовок = НСтр("ru = '1С:ДиректБанк'; uk = '1С:ДиректБанк'");
		ГруппаКомандДиректБанк.Вид = ВидГруппыФормы.Подменю;
		ГруппаКомандДиректБанк.Подсказка = НСтр("ru = 'Прямой обмен с банком через сервис 1С:ДиректБанк'; uk = 'Прямой обмен с банком через сервис 1С:ДиректБанк'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ГруппаКоманд.МестоРасположения)
		И ФормаОбъект.Элементы.Найти(Параметры.ГруппаКоманд.МестоРасположения) <> Неопределено Тогда
		ФормаОбъект.Элементы.Переместить(ГруппаКомандДиректБанк, Параметры.ГруппаКоманд.Родитель,
			ФормаОбъект.Элементы[Параметры.ГруппаКоманд.МестоРасположения]);
	КонецЕсли;
	
	ГруппаКомандПодменюДиректБанк = ФормаОбъект.Элементы.Найти("ПодменюДиректБанк");
	Если ГруппаКомандПодменюДиректБанк = Неопределено Тогда
		ГруппаКомандПодменюДиректБанк = ФормаОбъект.Элементы.Добавить(
			"ПодменюДиректБанк", Тип("ГруппаФормы"), ФормаОбъект.Элементы.ГруппаКомандДиректБанк);
		ГруппаКомандПодменюДиректБанк.Заголовок = НСтр("ru = 'Подменю 1С:ДиректБанк'; uk = 'Подменю 1С:ДиректБанк'");
		ГруппаКомандПодменюДиректБанк.Вид = ВидГруппыФормы.ГруппаКнопок;
		ГруппаКомандПодменюДиректБанк.Подсказка = НСтр("ru = 'Подменю дополнительных команд 1С:ДиректБанк'; uk = 'Подменю дополнительных команд 1С:ДиректБанк'");
	Иначе
		ГруппаКомандПодменюДиректБанк.Вид = ВидГруппыФормы.ГруппаКнопок;
		ФормаОбъект.Элементы.Переместить(ГруппаКомандПодменюДиректБанк, ГруппаКомандДиректБанк);
	КонецЕсли;
	
	Если ПравоВыполненияОбмена() Тогда
		КомандаСинхронизировать = ФормаОбъект.Команды.Добавить("СинхронизироватьДиректБанк");
		КомандаСинхронизировать.Действие = "Подключаемый_ВыполнитьСинхронизациюДиректБанк";
		КомандаСинхронизировать.Заголовок = НСтр("ru = 'Синхронизировать с банком'; uk = 'Синхронизировать с банком'");
		КомандаСинхронизировать.Картинка = БиблиотекаКартинок.СинхронизацияДанныхПодсистема;
		КомандаСинхронизировать.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
		КнопкаСинхронизировать = ФормаОбъект.Элементы.Добавить(
			"СинхронизироватьДиректБанк", Тип("КнопкаФормы"), ФормаОбъект.Элементы.ГруппаКомандДиректБанк);
		КнопкаСинхронизировать.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаСинхронизировать.ИмяКоманды = "СинхронизироватьДиректБанк";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти







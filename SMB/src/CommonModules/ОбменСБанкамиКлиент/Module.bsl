////////////////////////////////////////////////////////////////////////////////
// ОбменСБанкамиКлиент: механизм обмена электронными документами с банками.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область НастройкаОбмена

// Создает настройку обмена с банком или открывает существующую.
// Если банк не известен системе, то открывается форма новой настройки обмена с банком,
// в которой заполнена только Организация и Банк.
// Если банк известен системе, но не поддерживает автоматическое получение настроек,
// то предлагается выбор файла настроек, загружает настройки из файла
// и открывает заполненную форму настроек обмена с банком.
// Если банк известен системе и поддерживает автоматическое получение настроек,
// то настройка создается автоматически и производится тест настроек.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ссылка на организацию.
//  Банк - СправочникСсылка.КлассификаторБанков - ссылка на банк.
//  НомерБанковскогоСчета - Строка - номер банковского счета.
//  ОбработчикОповещения - ОписаниеОповещения - содержит описание процедуры,
//   которая будет вызвана после создания настройки обмена с банком, не вызывается если настройка обмена уже существует. Параметры процедуры:
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - созданная настройка обмена с банком.
//    * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//
Процедура ОткрытьСоздатьНастройкуОбмена(Организация, Банк, НомерБанковскогоСчета = "", ОбработчикОповещения = Неопределено) Экспорт
	
	ЕстьПравоПросмотраНастройкиЭДО = Ложь; ФОВключенаСейчас = Ложь; ЕстьПравоНастройкиЭДО = Ложь;
	
	ТекущаяНастройка = ОбменСБанкамиСлужебныйВызовСервера.НастройкаОбмена(
		Организация, Банк, Истина, Истина, ЕстьПравоПросмотраНастройкиЭДО, ЕстьПравоНастройкиЭДО, ФОВключенаСейчас);
		
	ТекстСообщения = НСтр("ru = 'Недостаточно прав для настройки прямого обмена с банком.
                           |Обратитесь к администратору.'; uk = 'Недостатньо прав для налаштування прямого обміну з банком.
                           |Зверніться до адміністратора.'");
		
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		Если Не ЕстьПравоПросмотраНастройкиЭДО Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		Если ФОВключенаСейчас Тогда
			Если ОбработчикОповещения <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(ОбработчикОповещения, ТекущаяНастройка);
			КонецЕсли;
			Возврат
		ИначеЕсли НЕ ФОВключенаСейчас И НЕ ЕстьПравоНастройкиЭДО Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		ПоказатьЗначение( , ТекущаяНастройка);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("Банк", Банк);
	ПараметрыФормы.Вставить("НомерБанковскогоСчета", НомерБанковскогоСчета);
	
	ОткрытьФорму("Справочник.НастройкиОбменСБанками.Форма.ПомощникСозданияНастройкиОбмена", ПараметрыФормы, , , , ,
		ОбработчикОповещения);
	
КонецПроцедуры

// Открывает форму списка настроек обмена с отбором по организации или банку.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка - ссылка на объект отбора. Ссылка должна быть только на организацию или банк.
//
Процедура ОткрытьНастройкиDirectBankСОтбором(СсылкаНаОбъект) Экспорт
	
	НазваниеСправочникаБанки = ЭлектронноеВзаимодействиеСлужебныйКлиентПовтИсп.ИмяПрикладногоСправочника("Банки");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаБанки) Тогда
		НазваниеСправочникаБанки = "КлассификаторБанков";
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ЭлектронноеВзаимодействиеСлужебныйКлиентПовтИсп.ИмяПрикладногоСправочника(
		"Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка." + НазваниеСправочникаОрганизации) Тогда
		ПараметрыФормы.Вставить("Организация", СсылкаНаОбъект);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка." + НазваниеСправочникаБанки) Тогда
		ПараметрыФормы.Вставить("Банк", СсылкаНаОбъект);
	КонецЕсли;

	ОткрытьФорму("Справочник.НастройкиОбменСБанками.Форма.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

// Процедура обрабатывает нажатие ссылки форматированной строки рекламы 1С:ДиректБанк.
//
// Параметры:
//  НавигационнаяСсылка - Строка - текст навигационной ссылки;
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ОбработкаНавигационнойСсылкиРекламыДиректБанк(НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	
	ОчиститьСообщения();
	Если НавигационнаяСсылка = "ОткрытьПомощникСозданияНастройкиОбмена" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура("УпрощенныйРежимНастройки", Истина);
		ОткрытьФорму("Справочник.НастройкиОбменСБанками.Форма.ПомощникСозданияНастройкиОбмена", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыпискаБанка

// Включает автоматическое получение выписки.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - оповещение, вызываемое после выполнения процедуры. Параметры выполнения:
//    Результат - Булево - если Истина, то автоматическое получение выписки подключено успешно.
//  Организация - ОпределяемыйТип.Организация - ссылка на организацию.
//  Банк - ОпределяемыйТип.БанкОбменСБанками - ссылка на банк.
//
Процедура ВключитьАвтоматическоеПолучениеВыписки(Оповещение, Организация, Банк) Экспорт
	
	ЕстьПравоНастройки = Ложь;
	НастройкаОбмена = ОбменСБанкамиСлужебныйВызовСервера.НастройкаОбмена(
		Организация, Банк, Истина, Истина, , ЕстьПравоНастройки);
	
	Если Не ЕстьПравоНастройки Тогда
		ТекстСообщения = НСтр("ru = 'Недостаточно прав на выполнение настройки обмена с банком через сервис 1С:ДиректБанк.
                               |Обратитесь к администратору.'; uk = 'Недостатньо прав на виконання налаштування обміну з банком через сервіс 1С:ДиректБанк.
                               |Зверніться до адміністратора.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкаОбмена) Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует действующая настройка обмена с банком через сервис 1С:ДиректБанк'; uk = 'Відсутня діюча настройка обміну з банком через сервіс 1С:ДиректБанк'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ОповещениеПрикладногоРешения", Оповещение);
	ПараметрыФормы = Новый Структура("НастройкаОбмена", НастройкаОбмена);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеВключенияАвтоматическогоПолученияВыписки", ОбменСБанкамиСлужебныйКлиент, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.НастройкиОбменСБанками.Форма.АвтоматическоеПолучениеВыписки", ПараметрыФормы, , , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Отключает автоматическое получение выписки.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - ссылка на организацию.
//  Банк - ОпределяемыйТип.БанкОбменСБанками - ссылка на банк.
//
// Возвращаемое значение:
//  Булево - Истина, если автоматическое получение выписки было отключено.
// 
Функция ОтключитьАвтоматическоеПолучениеВыписки(Организация, Банк) Экспорт
	
	ЕстьПравоНастройки = Ложь;
	НастройкаОбмена = ОбменСБанкамиСлужебныйВызовСервера.НастройкаОбмена(
		Организация, Банк, Истина, Истина, , ЕстьПравоНастройки);
	
	Если Не ЕстьПравоНастройки Тогда
		ТекстСообщения = НСтр("ru = 'Недостаточно прав на выполнение настройки обмена с банком через сервис 1С:ДиректБанк.
                               |Обратитесь к администратору.'; uk = 'Недостатньо прав на виконання налаштування обміну з банком через сервіс 1С:ДиректБанк.
                               |Зверніться до адміністратора.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкаОбмена) Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует действующая настройка обмена с банком через сервис 1С:ДиректБанк'; uk = 'Відсутня діюча настройка обміну з банком через сервіс 1С:ДиректБанк'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ОбменСБанкамиСлужебныйВызовСервера.ОстановитьАвтоматическоеПолучениеВыписки(НастройкаОбмена);
	
	Возврат Истина
	
КонецФункции

// Отправляет запрос выписки в банк, а после получения выписки вызывает обработчик из оповещения.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - оповещение, вызываемое после получения выписки банка.
//    * Результат - Структура - содержит следующие поля:
//        ** Успех - Булево - если Истина, то операция успешно выполнена.
//        ** Выписки - Массив - массив документов, содержащих данные выписок.
//             *** ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена с выпиской банка.
//  БанковскийСчет - ОпределяемыйТип.СчетОрганизацииОбменСБанками - ссылка на банковский счет организации
//  ДатаНачала - Дата - начало периода запроса.
//  ДатаОкончания - Дата - окончание периода запроса.
//
Процедура ПолучитьВыписку(Оповещение, БанковскийСчет, ДатаНачала, Знач ДатаОкончания) Экспорт
	
	Если Не ДатыКорректны(ДатаНачала, ДатаОкончания) Тогда
		Результат = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
		Возврат;
	КонецЕсли;
		
	ПараметрыОбмена = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыОбменаПоНомеруСчета(БанковскийСчет);

	Если ПараметрыОбмена = Неопределено Тогда
		Результат = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(ДатаОкончания) = ДатаОкончания Тогда
		ДатаОкончания = КонецДня(ДатаОкончания);
	КонецЕсли;
	
	НастройкаОбмена = ПараметрыОбмена.НастройкаОбмена;
	РеквизитыНастройкиОбмена = ПараметрыОбмена.РеквизитыНастройкиОбмена;
	
	ПараметрыЗапроса = ОбменСБанкамиКлиентСервер.ПараметрыПолученияВыпискиБанка();
	ПараметрыЗапроса.НомерСчета = ПараметрыОбмена.РеквизитыСчета.НомерСчета;
	ПараметрыЗапроса.ДатаНачала = ДатаНачала;
	ПараметрыЗапроса.ДатаОкончания = ДатаОкончания;
	ПараметрыЗапроса.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыЗапроса.Вставить("РеквизитыНастройкиОбмена", РеквизитыНастройкиОбмена);
	ПараметрыЗапроса.Вставить("ОповещениеПослеПолученияВыписки", Оповещение);
	ПараметрыЗапроса.Вставить("Организация", ПараметрыОбмена.РеквизитыСчета.Организация);
	ПараметрыЗапроса.Вставить("Банк", ПараметрыОбмена.РеквизитыСчета.Банк);
	
	Если РеквизитыНастройкиОбмена.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПродолжитьПолучениеВыпискиПослеПодготовкиЗапросовЧерезВК", ОбменСБанкамиСлужебныйКлиент, ПараметрыЗапроса);
		ОбменСБанкамиСлужебныйКлиент.ПодготовитьЗапросыВыписокДляОтправкиЧерезВК(
			Оповещение, НастройкаОбмена, ПараметрыЗапроса);
	ИначеЕсли РеквизитыНастройкиОбмена.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ОбработчикПослеПодключения = Новый ОписаниеОповещения(
			"ПолучитьВыпискуЧерезДополнительнуюОбработку", ОбменСБанкамиСлужебныйКлиент, ПараметрыЗапроса);
		ОбменСБанкамиСлужебныйКлиент.ПолучитьВнешнийМодульЧерезДополнительнуюОбработку(
			ОбработчикПослеПодключения, РеквизитыНастройкиОбмена.ДополнительнаяОбработка);
	ИначеЕсли РеквизитыНастройкиОбмена.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		ПолучитьВыпискуСбербанк(Оповещение, НастройкаОбмена, РеквизитыНастройкиОбмена, ПараметрыЗапроса)
	ИначеЕсли РеквизитыНастройкиОбмена.ИспользуетсяКриптография Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПослеПолученияОтпечатковПолучитьВыпискуБанка", ОбменСБанкамиСлужебныйКлиент, ПараметрыЗапроса);
		ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
	ИначеЕсли РеквизитыНастройкиОбмена.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.FintechIntegration") Тогда
		ПолучитьВыпискуFintechСбербанк(Оповещение, ПараметрыЗапроса)
	Иначе
		ОбменСБанкамиСлужебныйКлиент.ПослеПолученияОтпечатковПолучитьВыпискуБанка(
			Новый Соответствие, ПараметрыЗапроса);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаЭлектронныхДокументов

// Отправляет подготовленные документы в банк и получает новые.
// Если параметры не переданы то выполняется синхронизация по всем настройкам с банками.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация из расчетного счета.
//  Банк - СправочникСсылка.КлассификаторБанков - банк из расчетного счета.
//
Процедура СинхронизироватьСБанком(Организация = Неопределено, Банк = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Банк) Тогда
		НастройкаОбмена = ОбменСБанкамиСлужебныйВызовСервера.НастройкаОбмена(Организация, Банк, Ложь, Ложь);
		МассивНастроекОбмена = Новый Массив;
		Если ЗначениеЗаполнено(НастройкаОбмена) Тогда
			МассивНастроекОбмена.Добавить(НастройкаОбмена);
		КонецЕсли;
	Иначе
		МассивНастроекОбмена = ОбменСБанкамиСлужебныйВызовСервера.НастройкиОбмена(Организация, Банк);
	КонецЕсли;
	
	Если МассивНастроекОбмена.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура("МассивНастроекОбмена", МассивНастроекОбмена);
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.Синхронизация", ПараметрыФормы, , , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли МассивНастроекОбмена.Количество() = 1 Тогда
		ОбменСБанкамиСлужебныйКлиент.СинхронизироватьСБанком(Новый ОписаниеОповещения, МассивНастроекОбмена.Получить(0), Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает, подписывает и отправляет электронный документ.
//
// Параметры:
//  ПараметрКоманды - ДокументСсылка, Массив - ссылки на документы ИБ, которые необходимо отправить в банк.
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - электронный документ, который надо подписать, отправить.
//
Процедура СформироватьПодписатьОтправитьЭД(ПараметрКоманды, СообщениеОбмена = Неопределено) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Если СообщениеОбмена = Неопределено Тогда
			Возврат;
		Иначе
			МассивСсылок = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	ОбменСБанкамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "СформироватьПодписатьОтправить", СообщениеОбмена);
	
КонецПроцедуры

// Процедура отправляет повторно электронный документ.
//
// Параметры:
//  ПараметрКоманды - ОпределяемыйТип.ВладелецОбменСБанками - ссылка на объект ИБ,
//                                                            электронные документы которого нужно отправить,
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение, которые нужно отправить.
//
Процедура ОтправитьПовторноЭД(ПараметрКоманды, СообщениеОбмена = Неопределено) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Если СообщениеОбмена = Неопределено Тогда
			Возврат;
		Иначе
			МассивСсылок = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	ОбменСБанкамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "ОтправитьПовторно", СообщениеОбмена);
	
КонецПроцедуры

// Открывает актуальный ЭД по документу ИБ
//
// Параметры:
//  ПараметрКоманды - ДокументСсылка- ссылка на документ ИБ;
//  Источник - ФормаКлиентскогоПриложения - Форма источник;
//  ПараметрыОткрытия - Структура - дополнительные параметры просмотра.
//
Процедура ОткрытьАктуальныйЭД(ПараметрКоманды, Источник = Неопределено, ПараметрыОткрытия = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ОбменСБанкамиСлужебныйВызовСервера.ПравоЧтенияДанных(Истина) Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеВладельцевИСообщенийОбмена = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбменаПоВладельцам(МассивСсылок);
	Для Каждого ТекЭл Из МассивСсылок Цикл
		
		СсылкаНаСообщениеОбмена = СоответствиеВладельцевИСообщенийОбмена.Получить(ТекЭл);
		Если ЗначениеЗаполнено(СсылкаНаСообщениеОбмена) Тогда
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды") Тогда
				ОбменСБанкамиСлужебныйКлиент.ОткрытьЭДДляПросмотра(
					СсылкаНаСообщениеОбмена, ПараметрыОткрытия, ПараметрыОткрытия.Источник);
			Иначе
				ОбменСБанкамиСлужебныйКлиент.ОткрытьЭДДляПросмотра(СсылкаНаСообщениеОбмена, , Источник);
			КонецЕсли;
			
		Иначе
			ТекстШаблона = НСтр("ru = '%1. Актуальный электронный документ не найден.'; uk = '%1. Актуальний електронний документ не знайдено.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, ТекЭл);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Открывает форму со списком электронных документов для данного владельца.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - Ссылка на объект ИБ, электронные документы которого надо увидеть или сообщение обмена.
//  ПараметрыОткрытия - Структура - дополнительные параметры просмотра списка электронных документов.
//
Процедура ОткрытьСписокЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ОбменСБанкамиСлужебныйВызовСервера.ПравоЧтенияДанных(Истина) Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОбъектОтбора", СсылкаНаОбъект);
	Если ПараметрыОткрытия = Неопределено Тогда
		ОткрытьФорму(
			"Документ.СообщениеОбменСБанками.Форма.СписокЭД", ПараметрыФормы, , СсылкаНаОбъект.УникальныйИдентификатор());
	Иначе
		Окно = Неопределено;
		Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды") Тогда
			Окно = ПараметрыОткрытия.Окно;
		КонецЕсли;
		ОткрытьФорму("Документ.СообщениеОбменСБанками.Форма.СписокЭД", ПараметрыФормы,
			ПараметрыОткрытия.Источник, СсылкаНаОбъект.УникальныйИдентификатор(), Окно);
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает новый электронный документ.
//
// Параметры:
//  ПараметрКоманды - ОпределяемыйТип.ВладелецОбменСБанками - ссылка на объект ИБ,
//                                                            электронные документы которого надо отправить.
//  Показывать - Булево - признак того что созданный документ будет показан пользователю.
//
Процедура СформироватьНовыйЭД(ПараметрКоманды, Показывать=Истина) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Показывать Тогда
		ОбменСБанкамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "СформироватьПоказать");
	Иначе
		ОбменСБанкамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "Сформировать");
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму просмотра электронного документа.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение, в которому привязан открываемый электронный документ.
//
Процедура ОткрытьФормуПросмотраЭлектронногоДокумента(СообщениеОбмена) Экспорт
	
	ОбменСБанкамиСлужебныйКлиент.ОткрытьЭДДляПросмотра(СообщениеОбмена);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийБСП

// Вызывается из одноименной процедуры модуля ЭлектроннаяПодписьКлиентПереопределяемый.
//
// Параметры:
//  Параметры - Структура - со свойствами:
//  * ОжидатьПродолжения   - Булево - (возвращаемое значение) - если Истина, тогда дополнительная проверка
//                            будет выполнятся асинхронно, продолжение возобновится после выполнения оповещения.
//                            Начальное значение Ложь.
//  * Оповещение           - ОписаниеОповещения - обработка, которую нужно вызывать для продолжения
//                              после асинхронного выполнения дополнительной проверки.
//  * Сертификат           - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - проверяемый сертификат.
//  * Проверка             - Строка - имя проверки, добавленное в процедуре ПриСозданииФормыПроверкаСертификата
//                              общего модуля ЭлектроннаяПодписьПереопределяемый.
//  * МенеджерКриптографии - МенеджерКриптографии - подготовленный менеджер криптографии для
//                              выполнения проверки.
//                         - Неопределено - если стандартные проверки отключены в процедуре
//                              ПриСозданииФормыПроверкаСертификата общего модуля ЭлектроннаяПодписьПереопределяемый.
//  * ОписаниеОшибки       - Строка - (возвращаемое значение) - описание ошибки, полученной при выполнении проверки.
//                              Это описание сможет увидеть пользователь при нажатии на картинку результата.
//  * ЭтоПредупреждение    - Булево - (возвращаемое значение) - вид картинки Ошибка/Предупреждение 
//                            начальное значение Ложь.
//
Процедура ПриДополнительнойПроверкеСертификата(Параметры) Экспорт
	
	Если Параметры.Проверка = "УстановкаПодписиСбербанк" Тогда
		Параметры.ОжидатьПродолжения = Истина;
		ПроверитьУстановкуПодписиСбербанк(Параметры.Оповещение, Параметры.Сертификат, Параметры);
	ИначеЕсли Параметры.Проверка = "ПроверкаПодписиСбербанк" Тогда
		Параметры.ОжидатьПродолжения = Истина;
		ПроверитьПодписьСбербанк(Параметры.Оповещение, Параметры.Сертификат, Параметры);
	ИначеЕсли Параметры.Проверка = "УстановкаПодписиЧерезВК" Тогда
		Параметры.ОжидатьПродолжения = Истина;
		ПроверитьУстановкуПодписиЧерезВК(Параметры.Оповещение, Параметры.Сертификат, Параметры);
	ИначеЕсли Параметры.Проверка = "ПроверкаПодписиЧерезВК" Тогда
		Параметры.ОжидатьПродолжения = Истина;
		ПроверитьПодписьЧерезВК(Параметры.Оповещение, Параметры.Сертификат, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает нажатие на рекламную ссылку на форме печати БСП.
//
// Параметры:
//  НавигационнаяСсылка - Строка - текст навигационной ссылки;
//  МассивСсылок - Массив - ссылка на объекты ИБ, которые передали на печать.
//
Процедура ОбработкаНавигационнойСсылкиВФормеПечатиБСП(НавигационнаяСсылка, МассивСсылок) Экспорт
	
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		
		ДанныеБанковскогоСчета = ОбменСБанкамиСлужебныйВызовСервера.ПолучитьДанныеБанковскогоСчетаИзДокумента(МассивСсылок[0]);
		
		Если ДанныеБанковскогоСчета <> Неопределено Тогда
			ТекущаяНастройка = ОбменСБанкамиСлужебныйВызовСервера.НастройкаОбмена(
				ДанныеБанковскогоСчета.Организация, ДанныеБанковскогоСчета.Банк, Истина, Ложь);
		Иначе
			ТекущаяНастройка = Неопределено;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
			ПоказатьЗначение( , ТекущаяНастройка);	
		Иначе
			ОткрытьФорму("Обработка.ОбменСБанками.Форма.ПредложениеПодключить1СДиректБанк", ДанныеБанковскогоСчета);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработкаСобытийПрикладныхФорм

// Обрабатывает события нажатия на рекламу или ссылку переписки с банками.
//  Вызывается из процедуры Подключаемый_ОбработатьСобытиеДиректБанк 
//   Параметр1 - Произвольный - 
//   Параметр2 - Произвольный - 
//   Параметр3 - Произвольный - 
Процедура ОбработатьСобытиеНаФормеСписка(
	Параметр1 = Неопределено,
	Параметр2 = Неопределено,
	Параметр3 = Неопределено) Экспорт
	
	Если ТипЗнч(Параметр2) = Тип("Строка") И Параметр2 = "ОткрытьПомощникСозданияНастройкиОбмена" Тогда
		ОбработкаНавигационнойСсылкиРекламыДиректБанк(Параметр2, Параметр3);
	ИначеЕсли ТипЗнч(Параметр1) = Тип("ДекорацияФормы") И Параметр1.Имя = "ПисьмаДиректБанк" Тогда
		ОткрытьФорму("Документ.ПисьмоОбменСБанками.Форма.ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает оповещение, возникающее на форме списка документов.
// 
// Параметры:
//   Объект - ФормаКлиентскогоПриложения - форма, на которой возникло оповещение.
//   ИмяСобытия - Строка - Имя события
//   Параметр - Произвольный - Параметр сообщения
//   Источник - Произвольный - Источник события.
//   ПараметрыСозданияФормыСписка - см. ОбменСБанками.ПараметрыСозданияФормыСписка
Процедура ОбработатьОповещениеФормыСписка(
	Объект,
	ИмяСобытия,
	Параметр,
	Источник,
	ПараметрыСозданияФормыСписка = Неопределено) Экспорт
	
	Если ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		ИмяЭлементаСпискаФормы = "Список";
		Если ПараметрыСозданияФормыСписка <> Неопределено Тогда
			ИмяЭлементаСпискаФормы = ПараметрыСозданияФормыСписка.СписокДокументов.ИмяЭлемента;
		КонецЕсли;
		Если Объект.Элементы.Найти("ГруппаДиректБанк") <> Неопределено Тогда
			Объект.Элементы[ИмяЭлементаСпискаФормы].Обновить();
		КонецЕсли;
		Если Объект.Элементы.Найти("ПисьмаДиректБанк") <> Неопределено Тогда
			Объект.Элементы.ПисьмаДиректБанк.Заголовок = ОбменСБанкамиКлиентСервер.ТекстСсылкиПерепискаСБанками();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененаНастройкаОбменСБанками"
		И Объект.Элементы.Найти("ГруппаРекламаДиректБанкВертикально") <> Неопределено
		И Объект.Элементы.Найти("ТекстДиректБанкВертикально") <> Неопределено Тогда
		ОбновитьРекламуДиректБанк(
			ИмяСобытия, Объект.Элементы.ГруппаРекламаДиректБанкВертикально, Объект.Элементы.ТекстДиректБанкВертикально);
	КонецЕсли;
	
КонецПроцедуры

// Обработка события после записи документа. Оповещает об изменении данных обмена с банками,
// т.к. произошла запись нового состояния обмена с банком.
// 
// Параметры:
//  Объект - ФормаКлиентскогоПриложения - форма, на которой произошла запись объекта.
//  ПараметрыЗаписи - Структура - Структура, содержащая параметры записи.
Процедура ПослеЗаписи(Объект, ПараметрыЗаписи) Экспорт
	
	Оповестить("ОбновитьСостояниеОбменСБанками");
	
КонецПроцедуры

// Событие возникает при получении оповещения в форме документа.
// Необходима для обновления состояния электронного документа.
// 
// Параметры:
//  ФормаОбъект - ФормаКлиентскогоПриложения - форма, получившая оповещение.
//  ИмяСобытия - Строка - идентификатор события
//  Параметр - Произвольный - Параметр сообщения.
//  Источник - Произвольный - Источник события.
Процедура ОбработатьОповещениеФормыДокумента(ФормаОбъект, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		Если ФормаОбъект.Элементы.Найти("СостояниеДиректБанк") <> Неопределено
			И ЗначениеЗаполнено(ФормаОбъект.Объект.Ссылка) Тогда
			Гиперссылка = Ложь;
			ФормаОбъект.Элементы.СостояниеДиректБанк.Заголовок = ОбменСБанкамиСлужебныйВызовСервера.ТекстСостоянияЭД(
				ФормаОбъект.Объект.Ссылка, Гиперссылка);
			ФормаОбъект.Элементы.СостояниеДиректБанк.Гиперссылка = Гиперссылка;
			ФормаОбъект.Прочитать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Событие возникает при нажатии на строку динамического списка документов.
// 
// Параметры:
//   Элемент - ТаблицаФормы - элемент формы, в котором произошло событие
//   ВыбраннаяСтрока - ОпределяемыйТип.ВладелецОбменСБанками - ссылка на прикладной документ.
//   Поле - ПолеФормы - Активное поле (колонка).
//   СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной обработки события.
Процедура ПриВыбореСтрокиИзСпискаДокументов(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	Если Поле.Имя = "СостояниеДиректБанк" И Элемент.ТекущийЭлемент.ГиперссылкаЯчейки Тогда
		ПриНажатииНаГиперссылку(ВыбраннаяСтрока, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие нажатия на гиперссылку в форме списка платежных документов
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена с банком
//  СтандартнаяОбработка - Булево - признак стандартной обработки нажатия на ссылку.
//
Процедура ПриНажатииНаГиперссылку(ДокументСсылка, СтандартнаяОбработка) Экспорт

	ОчиститьСообщения();
	
	РеквизитыЭД = ОбменСБанкамиСлужебныйВызовСервера.РеквизитыЭлектронногоДокумента(ДокументСсылка);
	Если Не ЗначениеЗаполнено(РеквизитыЭД) Тогда // не используется прямой обмен с банком
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(РеквизитыЭД.Состояние)
		ИЛИ РеквизитыЭД.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОбменСБанками.НеСформирован") Тогда
		Если ЕстьПравоОбработкиЭлектронныхДокументов(РеквизитыЭД.ЕстьПравоПравоОбработкиЭД) Тогда
			СформироватьНовыйЭД(ДокументСсылка, Ложь);
		КонецЕсли;
	ИначеЕсли РеквизитыЭД.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОбменСБанками.ТребуетсяОтправка") Тогда
		СформироватьПодписатьОтправитьЭД(ДокументСсылка);
	ИначеЕсли РеквизитыЭД.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОбменСБанками.ТребуетсяПодтверждение") Тогда
		Если РеквизитыЭД.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
			ТекстСообщения = НСтр("ru = 'Подтвердить платеж можно только в личном кабинете банка.'; uk = 'Підтвердити платіж можна тільки в особистому кабінеті банку.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли РеквизитыЭД.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
			Если ЕстьПравоОбработкиЭлектронныхДокументов(РеквизитыЭД.ЕстьПравоПравоОбработкиЭД) Тогда
				Оповещение = Новый ОписаниеОповещения;
				МассивСообщенийОбмена = Новый Массив;
				МассивСообщенийОбмена.Добавить(РеквизитыЭД.СообщениеОбмена);
				ОбменСБанкамиСлужебныйКлиент.ВыполнитьПодтверждениеДокументовСбербанк(
					Оповещение, РеквизитыЭД.НастройкаОбмена, МассивСообщенийОбмена);
			КонецЕсли;
		Иначе
			Если ЕстьПравоОбработкиЭлектронныхДокументов(РеквизитыЭД.ЕстьПравоПравоОбработкиЭД) Тогда
				СформироватьПодписатьОтправитьЭД(ДокументСсылка);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли РеквизитыЭД.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОбменСБанками.Аннулирован")
		ИЛИ РеквизитыЭД.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОбменСБанками.Отклонен")
		ИЛИ РеквизитыЭД.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОбменСБанками.ОшибкаПередачи") Тогда
		ПараметрыФормы = Новый Структура("СообщениеОбмена", РеквизитыЭД.СообщениеОбмена);
		ОткрытьФорму("Документ.СообщениеОбменСБанками.Форма.ПричинаОтклонения", ПараметрыФормы);
	ИначеЕсли РеквизитыЭД.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОбменСБанками.НаПодписи") Тогда
		Если ЕстьПравоОбработкиЭлектронныхДокументов(РеквизитыЭД.ЕстьПравоПравоОбработкиЭД) Тогда
			МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ДокументСсылка);
			ОбменСБанкамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "Подписать");
		КонецЕсли;
	Иначе
		ОбменСБанкамиСлужебныйКлиент.ОткрытьЭДДляПросмотра(РеквизитыЭД.СообщениеОбмена);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет отображение контекстной рекламы 1С:ДиректБанк при оповещении формы.
//
// Параметры:
//  ИмяСобытия - Строка - идентификатор сообщения оповещения формы;
//  ГруппаРекламы - ГруппаФормы - группа элементов контекстной рекламы;
//  ДекорацияТекстРекламы - ДекорацияФормы - декорация, в заголовке которой отображается текст рекламы.
//
Процедура ОбновитьРекламуДиректБанк(ИмяСобытия, ГруппаРекламы, ДекорацияТекстРекламы) Экспорт
	
	Если ИмяСобытия = "ИзмененаНастройкаОбменСБанками" Тогда
		ОбменСБанкамиКлиентСервер.ПоказатьРекламуДиректБанк(ГруппаРекламы, ДекорацияТекстРекламы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПолучитьВыпискуСбербанк(Оповещение, НастройкаОбмена, РеквизитыНастройкиОбмена, Параметры)
	
	ГотовыеВыписки = ОбменСБанкамиСлужебныйВызовСервера.ГотовыеВыпискиСбербанка(
			НастройкаОбмена, Параметры.ДатаНачала, Параметры.ДатаОкончания, Параметры.НомерСчета);
			
	Если ГотовыеВыписки.Количество() Тогда
		Параметры.Вставить("ГотовыеВыписки", ГотовыеВыписки);
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
			"ПолучитьВыпискуСбербанкаПослеВопросаОбИхНаличии", ОбменСБанкамиСлужебныйКлиент, Параметры);
		ТекстВопроса = НСтр("ru = 'В базе уже есть выписки банка за указанный период.
                             |Загрузить выписки из базы или получить новые из банка?'; uk = 'У базі вже є виписки банку за вказаний період.
                             |Завантажити виписки з бази або отримати нові з банку?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(Истина, НСтр("ru = 'Загрузить из базы'; uk = 'Завантажити із бази'"));
		Кнопки.Добавить(Ложь, НСтр("ru = 'Получить из банка'; uk = 'Отримати із банка'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		Заголовок = НСтр("ru = 'Выбор способа получения выписки'; uk = 'Вибір способу отримання виписки'");
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, , Истина, Заголовок);
	Иначе
		Если РеквизитыНастройкиОбмена.ИспользуетсяКриптография Тогда
			ОповещениеПослеАутентификацииНаТокене = Новый ОписаниеОповещения(
				"ОпределитьСертификатПодписиПослеАутентификацииНаТокенеСбербанк",
				ОбменСБанкамиСлужебныйКлиент, Параметры);
			ОбменСБанкамиСлужебныйКлиент.АутентифицироватьсяНаТокенеСбербанка(
				ОповещениеПослеАутентификацииНаТокене, РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля, НастройкаОбмена);
		Иначе
			Обработчик = Новый ОписаниеОповещения(
				"ПолучитьВыпискиПослеБазовойАутентификацииСбербанк", ОбменСБанкамиСлужебныйКлиент, Параметры);
			ОбменСБанкамиСлужебныйКлиент.ВыполнитьАутентификациюПоЛогинуСбербанк(
				Обработчик, РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля, НастройкаОбмена, НастройкаОбмена);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьВыпискуFintechСбербанк(Оповещение, Параметры)
	
	ПараметрыВыполнения = Новый Структура("НастройкаОбмена, НомерСчета, ДатаНачала, ДатаОкончания");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, Параметры);
	РезультатВыполнения = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияПолученияВыпискиFintechСбербанк(
		ПараметрыВыполнения);
	
	Если РезультатВыполнения.Свойство("ТребуетсяАутентификация") Тогда
		Параметры.Вставить("ОповещениеПослеПолученияВыписки", Оповещение);
		ОповещениеПослеАутентификации = Новый ОписаниеОповещения(
			"ПолучитьВыпискуПослеАутентификацииFintechСбербанк", ОбменСБанкамиСлужебныйКлиент, Параметры);
		ОбменСБанкамиСлужебныйКлиент.ВыполнитьАутентификациюFintech(ОповещениеПослеАутентификации,
			Параметры.НастройкаОбмена, Параметры.Организация, Параметры.Банк, Параметры.НомерСчета);
	Иначе
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияВыпискиFintech", ОбменСБанкамиСлужебныйКлиент, Параметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, Оповещение, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

Функция ДатыКорректны(ДатаНачала, Знач ДатаОкончания)
	
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если ДатаНачала > ТекущаяДатаСеанса Тогда
		СообщениеТекст = НСтр("ru = 'Дата начала периода запроса не должна быть позднее текущей даты.'; uk = 'Дата початку періоду запиту не повинна бути пізніше поточної дати.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеТекст, , "НачалоПериода");
		Возврат Ложь;
	КонецЕсли;
	
	Если ДатаОкончания > КонецДня(ТекущаяДатаСеанса) Тогда
		СообщениеТекст = НСтр("ru = 'Дата конца периода запроса не должна быть позднее текущей даты.'; uk = 'Дата кінця періоду запиту не повинна бути пізніше поточної дати.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеТекст, , "КонецПериода");
		Возврат Ложь;
	КонецЕсли;
	
	Если ДатаНачала > ДатаОкончания Тогда
		СообщениеТекст = НСтр("ru = 'Дата начала периода запроса не должна быть позднее даты конца периода.'; uk = 'Дата початку періоду запиту не повинна бути пізніше дати кінця періоду.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеТекст, , "НачалоПериода");
		Возврат Ложь;
	КонецЕсли;
	
	Если КонецДня(ДатаОкончания) = КонецДня(ТекущаяДатаСеанса) Тогда
		ДатаОкончания = ТекущаяДатаСеанса;
	Иначе
		ДатаОкончания = КонецДня(ДатаОкончания);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет механизм установки подписи для сертификата сбербанка
// 
// Параметры:
//    Оповещение - ОписаниеОповещения - оповещение, которое будет вызвано после установки подписи.
//    Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат.
//    Контекст - Структура - контекст из ЭлектроннаяПодписьКлиентПереопределяемый.ПриДополнительнойПроверкеСертификата.
//
Процедура ПроверитьУстановкуПодписиСбербанк(Оповещение, Сертификат, Контекст)

	ИмяВнешнегоМодуля = Неопределено;
	НастройкаОбмена = ОбменСБанкамиСлужебныйВызовСервера.НастройкаОбменаПоСертификату(Сертификат, ИмяВнешнегоМодуля);
	Если Не ЗначениеЗаполнено(НастройкаОбмена) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не найдена действующая настройка обмена с сервисом 1С:ДиректБанка с данным сертификатом'; uk = 'Не найдена действующая настройка обмена с сервисом 1С:ДиректБанка с данным сертификатом'");
		Контекст.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(Оповещение, Контекст);
		Возврат;
	КонецЕсли;
	Параметры = Новый Структура;
	Параметры.Вставить("ОповещениеПослеПодписания", Оповещение);
	Параметры.Вставить("Сертификат", Сертификат);
	Параметры.Вставить("Контекст", Контекст);
	Параметры.Вставить("ИмяВнешнегоМодуля", ИмяВнешнегоМодуля);
		
	ОповещениеПослеАутентификации = Новый ОписаниеОповещения(
		"ПроверитьУстановкуПодписиПослеАутентификацииНаТокенеСбербанк", ОбменСБанкамиСлужебныйКлиент, Параметры);

	ОбменСБанкамиСлужебныйКлиент.АутентифицироватьсяНаТокенеСбербанка(
		ОповещениеПослеАутентификации, ИмяВнешнегоМодуля, НастройкаОбмена, Истина);
	
КонецПроцедуры

// Проверяет механизм установки подписи для сертификата сбербанка
// 
// Параметры:
//    Оповещение - ОписаниеОповещения - оповещение, которое будет вызвано после установки подписи.
//    Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат.
//    Контекст - Структура - контекст из ЭлектроннаяПодписьКлиентПереопределяемый.ПриДополнительнойПроверкеСертификата.
//
Процедура ПроверитьПодписьСбербанк(Оповещение, Сертификат, Контекст)

	Подпись = ОбменСБанкамиСлужебныйКлиент.ЗначениеИзКешаСбербанк("ТестоваяПодпись");
	Если Не ЗначениеЗаполнено(Подпись) Тогда
		Контекст.ОписаниеОшибки = Неопределено;
		ВыполнитьОбработкуОповещения(Оповещение, Контекст);
		Возврат;
	КонецЕсли;
	
	ИмяМодуля = Неопределено;
	НастройкаОбмена = ОбменСБанкамиСлужебныйВызовСервера.НастройкаОбменаПоСертификату(Сертификат, ИмяМодуля);
	
	СтрокаПодписиBase64 = "JiMxMDU4OyYjMTA3NzsmIzEwODk7JiMxMDkwOw==";
	
	РеквизитыСертификата = Новый Структура("ДанныеСертификата");
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовСертификата(Сертификат, РеквизитыСертификата);
		
	Параметры = Новый Структура;
	Параметры.Вставить("ОповещениеПослеТестаПодписиСертификата", Оповещение);
	Параметры.Вставить("Контекст", Контекст);
	
	Оповещение = Новый ОписаниеОповещения(
		"ЗавершитьТестПодписиСертификатаСбербанк", ОбменСБанкамиСлужебныйКлиент, Параметры);
	
	ОбменСБанкамиСлужебныйКлиент.ПроверитьПодписьНаТокенеСбербанк(
		Оповещение, СтрокаПодписиBase64, Подпись, РеквизитыСертификата.ДанныеСертификата, ИмяМодуля);
		
КонецПроцедуры

// Проверяет механизм установки подписи для сертификата, загруженного через ВК
// 
// Параметры:
//    Оповещение - ОписаниеОповещения - оповещение, которое будет вызвано после установки подписи.
//    Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат.
//    Контекст - Структура - контекст из ЭлектроннаяПодписьКлиентПереопределяемый.ПриДополнительнойПроверкеСертификата.
//
Процедура ПроверитьУстановкуПодписиЧерезВК(Оповещение, Сертификат, Контекст)

	НастройкаОбмена = ОбменСБанкамиСлужебныйВызовСервера.НастройкаОбменаПоСертификату(Сертификат);
	Если Не ЗначениеЗаполнено(НастройкаОбмена) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не найдена действующая настройка обмена с сервисом 1С:ДиректБанк с данным сертификатом'; uk = 'Не найдена действующая настройка обмена с сервисом 1С:ДиректБанк с данным сертификатом'");
		Контекст.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(Оповещение, Контекст);
		Возврат;
	КонецЕсли;
	Параметры = Новый Структура;
	Параметры.Вставить("ОповещениеПослеПодписания", Оповещение);
	Параметры.Вставить("Сертификат", Сертификат);
	Параметры.Вставить("Контекст", Контекст);
	
	ОповещениеПослеПодключенияВК = Новый ОписаниеОповещения(
		"АутентификацияНаКлючеПослеПодключенияВК", ОбменСБанкамиСлужебныйКлиент, Параметры);
	
	ОбменСБанкамиСлужебныйКлиент.ПодключитьИИнициализироватьВК(ОповещениеПослеПодключенияВК, НастройкаОбмена);
	
КонецПроцедуры

// Проверяет механизм проверки подписи для сертификата, загруженного через ВК
// 
// Параметры:
//    Оповещение - ОписаниеОповещения - оповещение, которое будет вызвано после проверки установленной подписи.
//    Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат.
//    Контекст - Структура - контекст из ЭлектроннаяПодписьКлиентПереопределяемый.ПриДополнительнойПроверкеСертификата.
//
Процедура ПроверитьПодписьЧерезВК(Оповещение, Сертификат, Контекст)

	Подпись = ПараметрыПриложения.Получить("ЭлектронноеВзаимодействие.ОбменСБанками.ДанныеПодписиВК");
	ПодключаемыйМодуль = ПараметрыПриложения.Получить("ЭлектронноеВзаимодействие.ОбменСБанками.ПодключаемыйМодуль");
	
	Если Не ЗначениеЗаполнено(Подпись) Тогда
		Контекст.ОписаниеОшибки = Неопределено;
		ВыполнитьОбработкуОповещения(Оповещение, Контекст);
		Возврат;
	КонецЕсли;
	
	СтрокаПодписиBase64 = "JiMxMDU4OyYjMTA3NzsmIzEwODk7JiMxMDkwOw==";
	
	РеквизитыСертификата = Новый Структура("ДанныеСертификата");
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовСертификата(Сертификат, РеквизитыСертификата);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОповещениеПослеТестаПодписиЧерезВК", Оповещение);
	Параметры.Вставить("Контекст", Контекст);
	
	ОповещениеПослеПроверкиПодписи = Новый ОписаниеОповещения(
		"ЗавершитьТестСертификатаЧерезВК", ОбменСБанкамиСлужебныйКлиент, Параметры);
	
	ОбменСБанкамиСлужебныйКлиент.ПроверитьПодписьЧерезВК(ОповещениеПослеПроверкиПодписи, ПодключаемыйМодуль,
		СтрокаПодписиBase64, РеквизитыСертификата.ДанныеСертификата, Подпись);
		
КонецПроцедуры

Функция ЕстьПравоОбработкиЭлектронныхДокументов(ЕстьПравоПравоОбработкиЭД)

	Если НЕ ЕстьПравоПравоОбработкиЭД Тогда
		ТекстСообщения = НСтр("ru = 'Недостаточно прав для обработки электронных документов.
                               |Обратитесь к администратору.'; uk = 'Недостатньо прав для обробки електронних документів.
                               |Зверніться до адміністратора.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЕстьПравоПравоОбработкиЭД;
	
КонецФункции

#КонецОбласти


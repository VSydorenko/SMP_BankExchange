////////////////////////////////////////////////////////////////////////////////
// СМП Работа с банками: общие процедуры подсистемы
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверка наличия элемента перечисления.
//
// Параметры:
//   ТекущийБанк - ПеречислениеСсылка.СМП_ПоддерживаемыеИнтеграцииСБанками - устанавливаемый вид банка.
//   ИмяБанка - Строка - Имя элемента перечисления "СМП_ПоддерживаемыеИнтеграцииСБанками" для сопоставления.
//
// Возвращаемое значение:
//   Булево
//
Функция ФункционалБанкаПодключен(ТекущийБанк, ИмяБанка) Экспорт
	
	Результат = Ложь;
	
	МетаданныеПеречисления = Метаданные.Перечисления.Найти("СМП_ПоддерживаемыеИнтеграцииСБанками");
	Если МетаданныеПеречисления <> Неопределено Тогда
		МетаданныеЗначенияПеречисления = МетаданныеПеречисления.ЗначенияПеречисления.Найти(ИмяБанка);
		Если МетаданныеЗначенияПеречисления <> Неопределено Тогда
			
			ВидБанка = Перечисления["СМП_ПоддерживаемыеИнтеграцииСБанками"][ИмяБанка];
			Результат  = (ТекущийБанк = ВидБанка);
			
		Иначе
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФункционалПодключен

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Регл. задание "СМП_ОбменСБанкамиAPI".
//
// Параметры:
//   КодНастройки - Строка - код элемента спр. "СМП_УчетныеЗаписиБанков" по которому нужно выполнить обмен.
//
Процедура ОбменСБанкамиAPI(КодНастройки) Экспорт
	
	Ссылка = Справочники.СМП_УчетныеЗаписиБанков.НайтиПоКоду(КодНастройки);
	
	Если ЗначениеЗаполнено(Ссылка) И НЕ Ссылка.ПометкаУдаления Тогда
		
		Попытка
			ОбменСБанком(Ссылка);
		Исключение
			ЗаписьЖурналаРегистрации(Ссылка.Наименование,
			УровеньЖурналаРегистрации.Ошибка,,,
			ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбменСБанком(Ссылка) Экспорт
	
	Обработка = Обработки.СМП_КлиентБанк.Создать();
	Обработка.БанковскийСчет = Ссылка.БанковскийСчет;
	Обработка.Организация = Ссылка.Организация;
	Обработка.ГруппаДоступа = Ссылка.ГруппаДоступаДляНовыхКонтрагентов;
	Обработка.ПроводитьЗагружаемые = Истина;
	Обработка.КонПериода = ТекущаяДата();
	Обработка.НачПериода = ТекущаяДата() - 864000;
	Обработка.АвтоматическиПодставлятьДокументы = Истина;
	Обработка.СоздаватьКонтрагентов = ?(Ссылка.СоздатьНовогоКонтрагентаПриЗагрузкеВыписки, 2, 1);
	
	Если ФункционалБанкаПодключен(Ссылка.Банк, "ПриватБанк") Тогда
		СМП_РаботаСБанкамиПриватБанкAPIСервер.ВыполнитьРегламент(Обработка, Ссылка);
	КонецЕсли;
	
	ИмпортЗаголовок = Неопределено;
	ТаблицаРезультата = Неопределено;
	ТаблицаПомеченныхНаУдалениеКакДубль = Неопределено;
	
	Если Обработка.Загрузка.Количество() > 0 Тогда
		Обработка.Загрузить(ИмпортЗаголовок, ТаблицаРезультата, ТаблицаПомеченныхНаУдалениеКакДубль);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
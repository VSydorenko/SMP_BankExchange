
#Область ПроцедурыИФункцииОбщегоНазначения

Функция ЭтоСчетКассыКредитнойОрганизации(БалансовыйСчет) Экспорт
	
	Возврат БалансовыйСчет = "20202" // "Касса кредитных организаций"
		Или БалансовыйСчет = "20208"; // "Денежные средства в банкоматах и платежных терминалах"
	
КонецФункции

Процедура ПоменятьСимволПСНаПробел(СтрокаДляОбработки)
	
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, Символы.ПС, " ");
	
КонецПроцедуры

// Процедура определяет, какую информацию выводить в подвале формы, в зависимости от наличия предупреждающих знаков.
//
&НаКлиенте
Процедура УстановитьВидимостьЭлементовСПредупреждающимиЗнакамиНаКлиенте()
	
	Если Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница <> Элементы.СтраницаВсеДанныеГотовыКЗагрузке Тогда
		Если НужноПоказатьСтраницуВсеДанныеГотовыКЗагрузкеНаКлиенте() Тогда
			Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаВсеДанныеГотовыКЗагрузке;
		Иначе
			Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаПредупреждающееСообщение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполним исходные значения.
// В дальнешем будем сохранять комбинацию выбранных пользователем значений.
// Сохранение будет выполняться только в том случае, если пользователь действительно поменял значения.
// Сохраненные значения будут использоваться для подстановки при загрузке значений.
&НаСервере
Процедура ЗаполнитьИсходныеЗначенияВСТроке(СтрокаДокумента)

	СтрокаДокумента.СтатьяДДСИсходноеЗначение = СтрокаДокумента.СтатьяДДС;
	СтрокаДокумента.ВидОперацииИсходноеЗначение = СтрокаДокумента.ВидОперации;
	СтрокаДокумента.КорреспонденцияИсходноеЗначение = СтрокаДокумента.Корреспонденция;
	СтрокаДокумента.ДоговорИсходноеЗначение = СтрокаДокумента.Договор;
	
КонецПроцедуры

// Функция возвращает Истина, если нет строк с предупреждающим знаков в колонке "НомерКартинки".
//
&НаКлиенте
Функция НужноПоказатьСтраницуВсеДанныеГотовыКЗагрузкеНаКлиенте()
	
	Для каждого ТекущаяСтрока Из Объект.Загрузка Цикл
		Если ТекущаяСтрока.НомерКартинки = 1 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает Истина, если нет строк с предупреждающим знаков в колонке "НомерКартинки".
//
&НаСервере
Функция НужноПоказатьСтраницуВсеДанныеГотовыКЗагрузкеНаСерврере()
	
	Для каждого ТекущаяСтрока Из Объект.Загрузка Цикл
		Если ТекущаяСтрока.НомерКартинки = 1 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция СтрокаТаблицыЗначенийВСтруктуру создает
// структуру со свойствами, как колонки таблицы
// значений передаваемой строки
// и устанавливает этим свойствам значения
// из строки таблицы значений.
// 
// Параметры:
//  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений
//
// ВозвращаемоеЗначение:
//  Структура
//
&НаКлиенте
Функция СтрокаТаблицыЗагрузкаВСтруктуру(СтрокаТаблицыЗначений) Экспорт
	
	Структура = Новый Структура;
	Для каждого Колонка Из ИменаКолонок Цикл
		Структура.Вставить(Колонка, СтрокаТаблицыЗначений[Колонка]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

// Функция возвращает первые 5 символов из номера счета.
//
&НаСервере
Функция БалансовыйСчет(НомерСчета) Экспорт
	
	Возврат Лев(НомерСчета, 5);
	
КонецФункции

// Функция проверяет правильность заполнения реквизитов формы.
//
&НаКлиенте
Функция ПроверитьЗаполнениеРеквизитовФормы()
	
	Отказ = Ложь;
	
	// Проверка заполненности реквизитов.
	Если НЕ ЗначениеЗаполнено(Объект.Кодировка) Тогда
		ТекстСообщения = НСтр("ru = 'В настройках не указана кодировка (кнопка ""Еще"" - ""Настройка"")'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Кодировка", , Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ВерсияФормата) Тогда
		ТекстСообщения = НСтр("ru = 'В настройках не указана версия формата обмена (кнопка ""Еще"" - ""Настройка"")'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.ВерсияФормата", , Отказ);
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

// Процедура проверяет устанавливает готовность.
//
&НаСервере
Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)
	
	Если ЗначениеЗаполнено(ТекущаяГотовность)
	   И ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяГотовность) Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;
	
КонецПроцедуры // УстановитьГотовность()

&НаСервере
Процедура УстановитьНомерКартинкиДляПодвалаНаСервере(ДанныеСтроки)
	
	ДанныеСтроки.НомерКартинкиДляПодвала = ?(ДанныеСтроки.НомерКартинки = -1, 0, ДанныеСтроки.НомерКартинки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНомерКартинкиДляПодвалаНаКлиенте(ДанныеСтроки)
	
	ДанныеСтроки.НомерКартинкиДляПодвала = ?(ДанныеСтроки.НомерКартинки = -1, 0, ДанныеСтроки.НомерКартинки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНомерКартинкиНаКлиенте(ДанныеСтроки, ПоказыватьЗнакПредупреждения)
	
	ДанныеСтроки.НомерКартинки = ?(ПоказыватьЗнакПредупреждения, 1, -1);
	УстановитьНомерКартинкиДляПодвалаНаКлиенте(ДанныеСтроки);
	Элементы.ЗагрузкаНомерКартинкиДляПодвала.Обновить();
	
КонецПроцедуры

// Процедура добавляет замечание.
//
&НаСервере
Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания, ВНачало = Ложь)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания, ВНачало);
	СтруктураДокумента.НомерКартинки = 1;
	УстановитьНомерКартинкиДляПодвалаНаСервере(СтруктураДокумента);
	
КонецПроцедуры // ДобавитьЗамечание()

// Процедура добавляет строку.
//
&НаСервере
Процедура ДобавитьВСтроку(Буфер, НоваяСтрока, ВНачало = Ложь)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	ИначеЕсли ВНачало Тогда
		Буфер = НоваяСтрока + Символы.ПС + Буфер;
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьВСтроку()

// Процедура загружает данные из файла.
//
&НаСервере
Функция ЗагрузитьДанныеИзФайла()
	
	РезультатЗагрузкиСтруктура = РеквизитФормыВЗначение("Объект").Загрузить(ИмпортЗаголовок, ТаблицаРезультата, ТаблицаПомеченныхНаУдалениеКакДубль);
	Возврат РезультатЗагрузкиСтруктура;
	
КонецФункции // ЗагрузитьДанныеИзФайла()

// Процедура устанавливает флаги.
//
&НаКлиенте
Процедура УстановитьФлаги(Таблица, Поле, ЗначениеФлага, ЗаполнятьСуммы)
	
	Для каждого Строка Из Таблица Цикл
		Строка[Поле] = ЗначениеФлага;
		Если ЗаполнятьСуммы Тогда
			ЗаполнитьСуммыВыделеныхНаКлиенте(Строка)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьФлаги()

// Функция проверяет наличие в строке только цифр.
//
// Параметры
//  СтрокаПроверки - Строка для проверки только цифр
//
// Возвращаемое значение:
//   Булево
//
&НаКлиенте
Функция ЕстьНеЦифрыНаКлиенте(Знач СтрокаПроверки)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Длина = СтрДлина(СтрокаПроверки);
	Для Сч = 1 По Длина Цикл
		Если СтрНайти("0123456789", Сред(СтрокаПроверки, Сч, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ЕстьНеЦифры()

&НаСервере
Процедура УстановитьСпособЗачетаПоДокументу(СтрокаДокумента)
	
	Если СтрокаДокумента.Документ.РасшифровкаПлатежа.Количество() > 0 Тогда
		СтрокаДокумента.СпособЗачетаТЧ = СтрокаДокумента.Документ.РасшифровкаПлатежа[0].СпособЗачета;
		Если СтрокаДокумента.СпособЗачетаТЧ.Пустая() Тогда
			СтрокаДокумента.СпособЗачетаТЧ = СпособЗачетаВручную;
		КонецЕсли;
	Иначе
		ОбновитьСпособЗачетаНаСервере(СтрокаДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСпособЗачетаПоУмолчанию(СтрокаДокумента)
	
	Если ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
		УстановитьСпособЗачетаПоДокументу(СтрокаДокумента);
	Иначе
		ОбновитьСпособЗачетаНаСервере(СтрокаДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпособЗачетаНаСервере(СтрокаДокумента)
	
	Если ЭтоОперацияГдеВозможныАвторасчеты(СтрокаДокумента.ВидОперации) Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.ДокументРасчетов)
			Или ЗначениеЗаполнено(СтрокаДокумента.ПлатежноеПоручение)
			Или ЗначениеЗаполнено(СтрокаДокумента.СчетНаОплату)
			Или ЗначениеЗаполнено(СтрокаДокумента.Заказ) Тогда
			СтрокаДокумента.СпособЗачетаТЧ = СпособЗачетаВручную;
		ИначеЕсли ТипЗнч(СтрокаДокумента.Договор) = Тип("Строка")
			И ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтрокаДокумента.СпособЗачетаТЧ = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособРазнесенияДляДоговора(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), СтрокаДокумента.Контрагент);
		ИначеЕсли ТипЗнч(СтрокаДокумента.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			И ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтрокаДокумента.СпособЗачетаТЧ = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособРазнесенияДляДоговора(СтрокаДокумента.Договор, СтрокаДокумента.Контрагент);
		Иначе
			СтрокаДокумента.СпособЗачетаТЧ = СпособРазнесенияОплатыПоУмолчанию;
		КонецЕсли;
	Иначе
		СтрокаДокумента.СпособЗачетаТЧ = СпособЗачетаВручную;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпособЗачетаНаКлиенте(СтрокаДокумента)
	
	Если ЭтоОперацияГдеВозможныАвторасчеты(СтрокаДокумента.ВидОперации) Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.ДокументРасчетов)
			Или ЗначениеЗаполнено(СтрокаДокумента.ПлатежноеПоручение)
			Или ЗначениеЗаполнено(СтрокаДокумента.СчетНаОплату)
			Или ЗначениеЗаполнено(СтрокаДокумента.Заказ) Тогда
			СтрокаДокумента.СпособЗачетаТЧ = СпособЗачетаВручную;
		ИначеЕсли ТипЗнч(СтрокаДокумента.Договор) = Тип("Строка")
			И ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтрокаДокумента.СпособЗачетаТЧ = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособРазнесенияДляДоговора(Неопределено, СтрокаДокумента.Контрагент);
		ИначеЕсли ТипЗнч(СтрокаДокумента.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			И ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтрокаДокумента.СпособЗачетаТЧ = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособРазнесенияДляДоговора(СтрокаДокумента.Договор, СтрокаДокумента.Контрагент);
		Иначе
			СтрокаДокумента.СпособЗачетаТЧ = СпособРазнесенияОплатыПоУмолчанию;
		КонецЕсли;
	Иначе
		СтрокаДокумента.СпособЗачетаТЧ = СпособЗачетаВручную;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЗаписиВСправочникеСоответствий()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.Ссылка
		|ИЗ
		|	Справочник.СоответствияНазначенийПлатежаИРеквизитовПлатежа КАК СоответствияНазначенийПлатежаИРеквизитовПлатежа
		|ГДЕ
		|	НЕ СоответствияНазначенийПлатежаИРеквизитовПлатежа.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Процедура заполняет документы на импорт.
//
&НаСервере
Функция ЗаполнитьДокументыНаИмпорт(ИмпортТекстДляРазбора)
	
	// Проверим, есть ли данные в справочнике "СоответствияНазначенийПлатежаИРеквизитовПлатежа".
	ИскатьВСправочникеСоответствий = ЕстьЗаписиВСправочникеСоответствий();
	
	ТаблицаКонтрагентов.ПолучитьЭлементы().Очистить();
	
	// Подготавливаем структуры обработки данных.
	ДокументыКИмпорту = Объект.Загрузка.Выгрузить();
	ДокументыКИмпорту.Колонки.Добавить("КодНазПлатежа", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1)));
	
	РасчетныеСчетаКИмпорту = Объект.ИмпортРасчетныеСчета.Выгрузить();
	
	РасчетныеСчетаКИмпорту.Очистить();
	ДокументыКИмпорту.Очистить();
	ТаблицаТаблицДокументов.Очистить();
	
	КонтекстФормы = Новый Структура;
	КонтекстФормы.Вставить("ИмпортТекстДляРазбора", ИмпортТекстДляРазбора);
	КонтекстФормы.Вставить("ПослеЗагрузкиВыписокВ1С", ПослеЗагрузкиВыписокВ1С);
	КонтекстФормы.Вставить("ИскатьВСправочникеСоответствий", ИскатьВСправочникеСоответствий);
	КонтекстФормы.Вставить("ТаблицаКонтрагентов", РеквизитФормыВЗначение("ТаблицаКонтрагентов", Тип("ДеревоЗначений")));
	КонтекстФормы.Вставить("РасчетныеСчетаКИмпорту", РасчетныеСчетаКИмпорту);
	КонтекстФормы.Вставить("ДокументыКИмпорту", ДокументыКИмпорту);
	КонтекстФормы.Вставить("ТаблицаТаблицДокументов", РеквизитФормыВЗначение("ТаблицаТаблицДокументов"));
	
	Если ПослеЗагрузкиВыписокВ1С Тогда
		КонтекстФормы.Вставить("СтруктураДанныхЗагрузки", СтруктураДанныхЗагрузки);
	КонецЕсли;
	
	ВременнаяСтрока = ТаблицаТаблицДокументов.Добавить();
	КонтекстФормы.Вставить("ТаблицаНайденныхДокументов", ВременнаяСтрока.ТаблицаНайденныхДокументов.Выгрузить());
	ТаблицаТаблицДокументов.Удалить(0);
	
	КонтекстФормы.Вставить("ЕстьОтборПоБанковскомуСчету", ЕстьОтборПоБанковскомуСчету);
	КонтекстФормы.Вставить("ВыдаватьСообщенияОНеверныхРеквизитахИСекциях", ВыдаватьСообщенияОНеверныхРеквизитахИСекциях);
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Организация", Объект.Организация);
	СтруктураОбъекта.Вставить("БанковскийСчет", Объект.БанковскийСчет);
	СтруктураОбъекта.Вставить("АвтоматическиПодставлятьДокументы", Объект.АвтоматическиПодставлятьДокументы);
	СтруктураОбъекта.Вставить("АнализироватьИсториюВыбораЗначенийРеквизитов", Объект.АнализироватьИсториюВыбораЗначенийРеквизитов);
	СтруктураОбъекта.Вставить("СтатьяДДСИсходящий", Объект.СтатьяДДСИсходящий);
	СтруктураОбъекта.Вставить("СтатьяДДСВходящий", Объект.СтатьяДДСВходящий);
	СтруктураОбъекта.Вставить("СпособЗачета", Объект.СпособЗачета);
	
	КонтекстФормы.Вставить("Объект", СтруктураОбъекта);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	Операция = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Обработки.СМП_КлиентБанк.РазобратьБанковскуюВыписку", КонтекстФормы);
	Возврат Операция;
	
КонецФункции // ЗаполнитьДокументыНаИмпорт()

// Функция читает электронную выписку банка и возвращает ее содержимое в текстовом формате.
//
&НаСервере
Функция ПрочитатьЭлектроннуюВыпискуБанкаНаСервере(ЭлектроннаяВыписка, СтекОповещений)
	
	АдресФайла = Неопределено; // адрес временного хранилища
	
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(ЭлектроннаяВыписка, АдресФайла);
		
	Если АдресФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	
	// Тип файла передаем в виде строки, чтобы обеспечить корректное чтение файла в нелокализованных средах
	// (Linux, англоязычная Windows + англоязычный MS SQL и др.)
	Если Объект.Кодировка = Неопределено ИЛИ Объект.Кодировка = "Авто" Тогда
		ТипФайла = КлиентБанкВызовСервера.ТипФайла(ИмяВременногоФайла);
	ИначеЕсли (Объект.Кодировка = КодировкаТекста.OEM) ИЛИ (Объект.Кодировка = "DOS") Тогда
		ТипФайла = "cp866";
	ИначеЕсли Объект.Кодировка = "Windows" ИЛИ НЕ ЗначениеЗаполнено(Объект.Кодировка) Тогда
		ТипФайла = "windows-1251";
	Иначе
		ТипФайла = Объект.Кодировка;
	КонецЕсли;
	
	Попытка
		ПотокЧтения.Прочитать(ИмяВременногоФайла, ТипФайла);
	Исключение
		ТекстСообщения = НСтр("ru = 'Файл не прочитан.'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПотокЧтения.КоличествоСтрок() < 1 Тогда
		ТекстСообщения = НСтр("ru = 'В файле нет данных!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		Возврат Неопределено;
	КонецЕсли;
	
	Если СокрЛП(ПотокЧтения.ПолучитьСтроку(1)) <> "1CClientBankExchange" Тогда
		ТекстСообщения = НСтр("ru = 'Указанный файл не является файлом обмена или неверно указана кодировка!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		Возврат Неопределено;
	КонецЕсли;
	
	// Удаляем временный файл
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при удалении временного файла.'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ПотокЧтения.ПолучитьТекст();

КонецФункции // ПрочитатьЭлектроннуюВыпискуБанка()

&НаКлиенте
Процедура ПрочитатьЭлектронныеВыпискиБанка()
	
	СтекОповещений = Новый Массив;
	ТекстПредупреждения = "";
	
	ИмпортТекстДляРазбора = "";
	Для каждого ЭлементСписка Из ВыпискиБанка Цикл
		ТекстВыписки = ПрочитатьЭлектроннуюВыпискуБанкаНаСервере(ЭлементСписка.Значение, СтекОповещений);
		ИмпортТекстДляРазбора = ИмпортТекстДляРазбора + Символы.ПС + ТекстВыписки;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИмпортТекстДляРазбора) Тогда
		ТекстСообщения = НСтр("ru = 'Файл загрузки не содержит данных!'");
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтрокаСообщения = ЗаполнитьДокументыНаИмпорт(ИмпортТекстДляРазбора);
	Если ЗначениеЗаполнено(СтрокаСообщения) Тогда
		ТекстПредупреждения = ТекстПредупреждения + ?(ЗначениеЗаполнено(ТекстПредупреждения), Символы.ПС, "") + СтрокаСообщения;
	КонецЕсли;
	
	Для каждого Сообщение Из СтекОповещений Цикл
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(ЭтаФорма, Сообщение.Текст);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(Неопределено,ТекстПредупреждения);
	КонецЕсли;
	
	ОбновитьИнформациюОбОстаткахНаСчете(); // Остатки на счете	
	
КонецПроцедуры

// Функция читает данные из файла.
//
&НаКлиенте
Процедура ПрочитатьДанныеИзФайла()
	
	Если ЗначениеЗаполнено(СоглашениеПрямогоОбменаСБанками) Тогда
		
		Если ВыпискиБанка.Количество() = 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Для получения электронной выписки банка нажмите кнопку ""Запросить выписку""'"), ,
				"ЭлектроннаяВыпискаБанка");
			Возврат;
		Иначе
			ПрочитатьЭлектронныеВыпискиБанка();
		КонецЕсли;
		
	Иначе
		
		//СМП_РаботаСБанками +++
		//ИмпортТекстДляРазбора = ОбработанныйТекст;
		//
		//Если ИмпортТекстДляРазбора = Неопределено Тогда
		//	ТекстСообщения = НСтр("ru = 'Файл загрузки не содержит данных'");
		//	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		//	Возврат;
		//КонецЕсли;
		//
		//СоздатьДлительнуюОперациюОбработкиВыписки(ИмпортТекстДляРазбора);
		
		СМП_УчетныеЗаписиБанков = КлиентБанкВызовСервера.СМП_ПолучитьОбработкуПротокола(Объект.БанковскийСчет);
		
		Если ЗначениеЗаполнено(СМП_УчетныеЗаписиБанков) тогда
			Если ТИПЗНЧ(СМП_УчетныеЗаписиБанков) = ТИП("СправочникСсылка.СМП_УчетныеЗаписиБанков") тогда
				СМП_ЗаполнитьДокументыНаИмпортПоСправочнику(СМП_УчетныеЗаписиБанков);
			Иначе
				ДвоичДанные = Новый ДвоичныеДанные(Объект.ФайлЗагрузки);
				АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичДанные, Новый УникальныйИдентификатор);
				СМП_ЗаполнитьДокументыНаИмпортОбработкой(СМП_УчетныеЗаписиБанков, АдресХранилища);
			КонецЕсли;
		Иначе
			
			ИмпортТекстДляРазбора = ОбработанныйТекст;
			
			Если ИмпортТекстДляРазбора = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Файл загрузки не содержит данных'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
			
			СоздатьДлительнуюОперациюОбработкиВыписки(ИмпортТекстДляРазбора);
			
		КонецЕсли;
		//СМП_РаботаСБанками ---
		
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьДанныеИзФайла()

&НаСервере
Процедура УправлениеФормойНаСервере()

	ЕстьОшибки = Ложь; // Могут быть ошибки из-за не верного формата суммы и когда не найдены контрагент, РС или договор...
	Для Каждого ТекущаяСтрока Из Объект.Загрузка Цикл
		Если Не ПустаяСтрока(ТекущаяСтрока.ОписаниеОшибок) Тогда
			ЕстьОшибки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ЗагрузкаСнятьОтметкуУВсехСтрокСПредупреждениями1.Видимость = ЕстьОшибки;
	//
	Элементы.ГруппаЗапросВыписки.Видимость = ПрямойОбменСБанками;
	Элементы.ЗагрузкаОбновить1.Видимость = НЕ ПрямойОбменСБанками;
	Элементы.ЭлектроннаяВыпискаБанка.Видимость = ПрямойОбменСБанками;
	Элементы.ГруппаОписаниеЗагрузкиВыпискиЧерезЭД.Видимость = ПрямойОбменСБанками;
	
	Элементы.БанковскийСчет.Видимость = НЕ (ПрямойОбменСБанками ИЛИ ЕстьОтборПоБанковскомуСчету);

	// Команды, которые зависят от наличия или отсутствия ошибок.
	Элементы.ФормаУбратьПредупреждающийЗнакВТекущейКолонке2.Видимость = ЕстьОшибки;
	Элементы.ФормаУбратьПредупреждающийЗнакВоВсехКолонках2.Видимость = ЕстьОшибки;
	//Элементы.ФормаУбратьПредупреждающийЗнакВТекущейКолонке.Видимость = ЕстьОшибки;
	//Элементы.ФормаУбратьПредупреждающийЗнакВоВсехКолонках.Видимость = ЕстьОшибки;
	Элементы.ЗагрузкаКонтекстноеМенюУбратьПредупреждающийЗнакВТекущейКолонке.Видимость = ЕстьОшибки;
	Элементы.ЗагрузкаКонтекстноеМенюУбратьПредупреждающийЗнакВоВсехКолонках.Видимость = ЕстьОшибки;
	
КонецПроцедуры // УправлениеФормойНаСервере()

&НаКлиенте
Функция ПериодЗаполнен()
	
	ПериодЗаполнен = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.НачПериода) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			Нстр("ru = 'Не заполнена дата начала периода'")
			,, "Объект.НачПериода");
		ПериодЗаполнен = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонПериода) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			Нстр("ru = 'Не заполнена дата окончания периода'")
			,, "Объект.КонПериода");
		ПериодЗаполнен = Ложь;
	КонецЕсли;
	
	Возврат ПериодЗаполнен;
	
КонецФункции

// Процедура выполняет настройку элементов формы для корректного отображения в мобильном клиенте
//
&НаСервере
Процедура НастроитьФормуМобильныйКлиент()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗагрузкаОписаниеОшибок", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация9", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация11", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация12", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация12", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация13", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияНеНайденныеРеквизиты", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Загрузить", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КПоступлению", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КСписанию", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОстатокКон", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КПоступлению", "ШрифтЗаголовка", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КСписанию", "ШрифтЗаголовка", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОстатокКон", "ШрифтЗаголовка", ШрифтыСтиля.ОбычныйШрифтТекста);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КСписанию", "ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Лево);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КПоступлению", "ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Лево);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОстатокКон", "ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Лево);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КПоступлению", "ЦветРамки", Новый Цвет());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КСписанию", "ЦветРамки", Новый Цвет());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОстатокКон", "ЦветРамки", Новый Цвет());
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаСумма", "Группировка", ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Сумма", "ЦветФона", ЦветаСтиля.ИтогиФонГруппы);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация4", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация7", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаНастройка1", "Видимость", Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаНастройка", "ТолькоВоВсехДействиях", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПериод", "Заголовок", "Период");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПериод", "ОтображатьЗаголовок", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗагрузкаНачПериода", "Заголовок", "С");
	
	
	
	// Табличная часть
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗагрузкаНомерСтроки", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗагрузкаНомерДок", "ШрифтЗаголовка", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗагрузкаДатаДок", "ШрифтЗаголовка", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗагрузкаНомерДок", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗагрузкаДатаДок", "Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗагрузкаДатаДок", "ГоризонтальноеПоложение", ГоризонтальноеПоложениеЭлемента.Лево);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗагрузкаДатаДок", "ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Лево);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗагрузкаДатаДок", "Ширина", 7);
	
	Элементы.Переместить(Элементы.ЗагрузкаНомерДок, Элементы.Загрузка, Элементы.ЗагрузкаГруппаДокумент);
	Элементы.Переместить(Элементы.ЗагрузкаДатаДок, Элементы.Загрузка, Элементы.ЗагрузкаГруппаДокумент);
	
	Для Каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			Если Элемент.Вид = ВидГруппыФормы.ГруппаКолонок Тогда
				Если Элемент.Группировка = ГруппировкаКолонок.ВЯчейке Тогда
					Элемент.Группировка = ГруппировкаКолонок.Горизонтальная;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиБанковскойВыписки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда //Не локализуется
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон("%1: %2",Результат.Статус, Результат.КраткоеПредставлениеОшибки));
		Возврат;
	КонецЕсли;
	
	ПослеОбработкиБанковскойВыпискиНаСервере(Результат);
	
	Если ПослеЗагрузкиВыписокВ1С Тогда
		
		Если ТипЗнч(Результат.СтруктураДанныхЗагрузки) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		Если Результат.СтруктураДанныхЗагрузки.Свойство("ТекстПредупреждения") И НЕ ПустаяСтрока(Результат.СтруктураДанныхЗагрузки.ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(Неопределено, Результат.СтруктураДанныхЗагрузки.ТекстПредупреждения);
		КонецЕсли;
		
		ПараметрыЗавершения = Новый Структура("ЕстьПредупреждения, ОбработаноСтрок, ВсегоСтрок, СообщенияПользователю", 
			Результат.СтруктураДанныхЗагрузки.ЕстьПредупреждения, Результат.СтруктураДанныхЗагрузки.ОбработаноСтрок, Результат.СтруктураДанныхЗагрузки.ВсегоСтрок, Результат.СтруктураДанныхЗагрузки.СообщенияПользователю);
		
		#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
			
			ЛеваяЧастьПредупреждения = "Загрузка платежных документов завершена";
			ПраваяЧастьПредупреждения = НСтр("ru = 'Обработано строк: '")+ПараметрыЗавершения.ОбработаноСтрок+НСтр("ru = '. Всего строк: '")+ПараметрыЗавершения.ВсегоСтрок+".";
			ТекстПредупреждения = ЛеваяЧастьПредупреждения + Символы.ПС + Символы.ПС + ПраваяЧастьПредупреждения;
			ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
			
			РезультатЗавершения = Неопределено; // Новый Структура("ПоказатьПротокол", Истина);
			ЗагрузкаПлатежныхДокументовЗавершение(РезультатЗавершения, ПараметрыЗавершения);
			
		#Иначе
			
			ОписаниеОповещенияЗагрузкиПлатежныхДокументов = Новый ОписаниеОповещения("ЗагрузкаПлатежныхДокументовЗавершение", ЭтотОбъект, ПараметрыЗавершения);
			ОткрытьФорму("Обработка.СМП_КлиентБанк.Форма.ФормаЗагрузкаДокументовЗавершена",
				ПараметрыЗавершения,
				,,,,ОписаниеОповещенияЗагрузкиПлатежныхДокументов, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
		#КонецЕсли
	
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиБанковскойВыпискиНаСервере(Результат)
	
	КонтекстФормы = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если КонтекстФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПослеЗагрузкиВыписокВ1С Тогда
		Если КонтекстФормы.Свойство("СтруктураДанныхЗагрузки") Тогда
			СтруктураДанныхЗагрузки =  КонтекстФормы.СтруктураДанныхЗагрузки;
		Иначе
			СтруктураДанныхЗагрузки = ЗагрузитьДанныеИзФайла();
		КонецЕсли;
		Результат.Вставить("СтруктураДанныхЗагрузки", СтруктураДанныхЗагрузки);
	КонецЕсли;
	
	Если КонтекстФормы.ОбработкаПрервана Тогда
		ОбщегоНазначения.СообщитьПользователю(КонтекстФормы.ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Объект.Организация = КонтекстФормы.Объект.Организация;
	Объект.БанковскийСчет = КонтекстФормы.Объект.БанковскийСчет;
	
	ЗначениеВРеквизитФормы(КонтекстФормы.ТаблицаКонтрагентов, "ТаблицаКонтрагентов");
	РасчетныеСчетаКИмпорту = КонтекстФормы.РасчетныеСчетаКИмпорту;
	ДокументыКИмпорту = КонтекстФормы.ДокументыКИмпорту;
	ЗначениеВРеквизитФормы(КонтекстФормы.ТаблицаТаблицДокументов, "ТаблицаТаблицДокументов");
	ПараметрыВыделенияКолонок = КонтекстФормы.ПараметрыВыделенияКолонок;
	ИмпортЗаголовок = КонтекстФормы.ИмпортЗаголовок;
	
	ЕстьОтмеченныеСтроки = Ложь;
	ПоказыватьКартинкуСПредупреждением = Ложь;
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = Не ЗначениеЗаполнено(СтрокаДокумента.Документ);
		
		// Если в выписке будут данные сразу по 2-м счетам (и по тому, с которого переводят, и по тому, на который переводят), то
		// будут дубли строк при загрузке.
		// Различие в фале только в полях ДатаПоступило и ДатаСписано.
		Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ДатаПоступило) Тогда
				
				СтрокаДокумента.Загружать = Ложь;
				
				СтрокаЗамечание = НСтр("ru = 'Это данные по другому счету: %1%!'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%1%", СтрокаДокумента.ПлательщикСчет);
				ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
				
			КонецЕсли;
		ИначеЕсли СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ДатаСписано) Тогда
				
				СтрокаДокумента.Загружать = Ложь;
				
				СтрокаЗамечание = НСтр("ru = 'Это данные по другому счету %1%!'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%1%", СтрокаДокумента.ПолучательСчет);
				ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
				
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДокумента.НазначениеПлатежа = СокрЛП(СтрокаДокумента.НазначениеПлатежа);
		СтрокаДокумента.НомерКартинки = ?(ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок), -1, 1);
		УстановитьНомерКартинкиДляПодвалаНаСервере(СтрокаДокумента);
		Если Не ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
			СтрокаДокумента.ПризнакАванса = Не ЗначениеЗаполнено(СтрокаДокумента.ДокументРасчетов);
		КонецЕсли;
		ЗаполнитьСуммыВыделеныхНаСервере(СтрокаДокумента);
		
		Если ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок) Тогда
			СтрокаДокумента.ОписаниеОшибокПодТЧ = ПолучитьТекстДокументГотовКЗагрузкеНаСервере(СтрокаДокумента);
		Иначе
			СтрокаДокумента.ОписаниеОшибокПодТЧ = СтрокаДокумента.ОписаниеОшибок;
		КонецЕсли;
		ПоменятьСимволПСНаПробел(СтрокаДокумента.ОписаниеОшибокПодТЧ);
		
		Если СтрокаДокумента.Документ = Неопределено Тогда
			СтрокаДокумента.ДокументНеЗагружен = ?(СтрокаДокумента.Загружать, НСтр("ru='Будет загружен'"), НСтр("ru='Не будет загружен'"));
		КонецЕсли;
		
		ПоказыватьКартинкуСПредупреждением = ?(ПоказыватьКартинкуСПредупреждением, ПоказыватьКартинкуСПредупреждением, Не ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок));
		
		// Заполним исходные значения.
		// В дальнешем будем сохранять комбинацию выбранных пользователем значений.
		// Сохранение будет выполняться только в том случае, если пользователь действительно поменял значения.
		// Сохраненные значения будут использоваться для подстановки при загрузке значений.
		ЗаполнитьИсходныеЗначенияВСТроке(СтрокаДокумента);
		
		Если СтрокаДокумента.Загружать Тогда
			ЕстьОтмеченныеСтроки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	
	// Добавим картинку в шапку колонок.
	Элементы.ЗагрузкаГруппаДокумент.КартинкаШапки = ?(ПараметрыВыделенияКолонок.ВыделитьКолонкуДокумент, БиблиотекаКартинок.ВниманиеВВидеТреугольника, Новый Картинка);
	Элементы.ГруппаПоступилоИСписано.КартинкаШапки = ?(ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаСписано ИЛИ ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаПоступило,
		БиблиотекаКартинок.ВниманиеВВидеТреугольника, Новый Картинка);
	Элементы.ЗагрузкаКонтрагент.КартинкаШапки = ?(ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент, БиблиотекаКартинок.ВниманиеВВидеТреугольника, Новый Картинка);
	Элементы.ЗагрузкаГруппаСчетКонтрагента.КартинкаШапки = ?(ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента, БиблиотекаКартинок.ВниманиеВВидеТреугольника, Новый Картинка);
	Элементы.ЗагрузкаДоговор.КартинкаШапки = ?(ПараметрыВыделенияКолонок.ВыделитьКолонкуДоговор, БиблиотекаКартинок.ВниманиеВВидеТреугольника, Новый Картинка);
	Элементы.ЗагрузкаГруппаВидОперации.КартинкаШапки = ?(ПараметрыВыделенияКолонок.ВыделитьКолонкуВидОперации, БиблиотекаКартинок.ВниманиеВВидеТреугольника, Новый Картинка);
	
	
	Элементы.ЗагрузкаСнятьОтметкуУВсехСтрокСПредупреждениями1.Видимость = ПоказыватьКартинкуСПредупреждением;
	
	Объект.Загрузка.Очистить();
	Объект.Загрузка.Загрузить(ДокументыКИмпорту);
	ОстатокКон = ОстатокНач + Объект.Загрузка.Итог("СуммаПоступилоВыделено") - Объект.Загрузка.Итог("СуммаСписаноВыделено");
	
	Объект.ИмпортРасчетныеСчета.Очистить();
	Объект.ИмпортРасчетныеСчета.Загрузить(РасчетныеСчетаКИмпорту);
	
	УстановитьСтраницуПодвалаНаСервере(ЕстьОтмеченныеСтроки);
	НастроитьВидимостьЭлементовНаСервере(Истина);
	
	Если ПослеЗагрузкиВыписокВ1С Тогда
		ОбновитьИнформациюОбОстаткахНаСчете();
		ВывестиТаблицуРезультата();
		ЗаписатьПротокол();
	КонецЕсли;
	
	Если Не Объект.БанковскийСчет.Пустая() Тогда
		ДанныеСчета = УправлениеНебольшойФирмойВызовСервера.ЗначенияРеквизитовОбъекта(Объект.БанковскийСчет, "НомерСчета, ВалютаДенежныхСредств", Истина);
		БанковскийСчетНомер = СокрЛП(ДанныеСчета.НомерСчета);
		БанковскийСчетВалюта = ДанныеСчета.ВалютаДенежныхСредств;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Предопределенные значения
	ВидОперацииВзносНаличных = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными;
	ВидОперацииСписаниеНаличных = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных;
	ВидОперацииПереводСДругогоСчета = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета;
	ВидОперацииПереводНаДругойСчет = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет;
	ВидОПерацииОтКурьерскойКомпанииПочты = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты;
	
	ДействиеНеСоздаватьНовогоКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
	
	СпособЗачетаВручную = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	СпособЗачетаАвтоматически = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
	СпособРазнесенияОплатыПоУмолчанию = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособРазнесенияОплатыПоУмолчанию();
	// Конец Предопределенные значения
	
	// Заполним список колонок таблицы Загрузка (
	ЗагрузкаТЗ = Объект.Загрузка.Выгрузить();
	МассивКолонок = Новый Массив;
	Для Каждого Колонка Из ЗагрузкаТЗ.Колонки Цикл
		МассивКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ИменаКолонок = Новый ФиксированныйМассив(МассивКолонок);
	// )
	
	Если Параметры.Свойство("Организация") Тогда
		Объект.Организация = Параметры.Организация;
	КонецЕсли;
	
	Если Параметры.Свойство("БанковскийСчетОрганизации")
		И ЗначениеЗаполнено(Параметры.БанковскийСчетОрганизации) Тогда
		Объект.БанковскийСчет = Параметры.БанковскийСчетОрганизации;
		ЭтаФорма.Заголовок = "Загрузка выписок по счету: " + Параметры.БанковскийСчетОрганизации.Наименование;
		ПриУстановкеОтбораПоБанковскомуСчету();
	Иначе
		НастройкиОбщиеПолучены = Истина;
		ЕстьОтборПоБанковскомуСчету = Ложь;
	КонецЕсли;
	
	//СМП_РаботаСБанками +++
	Если Параметры.Свойство("ФайлЗагрузки") Тогда
		Объект.ФайлЗагрузки = Параметры.ФайлЗагрузки;
		ФайлЗагрузки = Параметры.ФайлЗагрузки;
	КонецЕсли;
	
	Если Параметры.Свойство("ПутьДоФайла") Тогда
		Объект.ФайлЗагрузки = Параметры.ПутьДоФайла;
		ФайлЗагрузки = Параметры.ПутьДоФайла;
	КонецЕсли;
	//СМП_РаботаСБанками ---
	
	Если Параметры.Свойство("НастройкиПолучены") Тогда
		НастройкиПолучены = Параметры.НастройкиПолучены;
	Иначе
		НастройкиПолучены = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("СтатьяДДСВходящий") Тогда
		Объект.СтатьяДДСВходящий = Параметры.СтатьяДДСВходящий;
	КонецЕсли;
	
	Если Параметры.Свойство("СтатьяДДСИсходящий") Тогда
		Объект.СтатьяДДСИсходящий = Параметры.СтатьяДДСИсходящий;
	КонецЕсли;
	
	Если Параметры.Свойство("ПроводитьЗагружаемые") Тогда
		Объект.ПроводитьЗагружаемые = Параметры.ПроводитьЗагружаемые;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗаполнятьДолгиАвтоматически") Тогда
		Объект.ЗаполнятьДолгиАвтоматически = Параметры.ЗаполнятьДолгиАвтоматически;
	КонецЕсли;
	
	Если Параметры.Свойство("АнализироватьИсториюВыбораЗначенийРеквизитов") Тогда
		Объект.АнализироватьИсториюВыбораЗначенийРеквизитов = Параметры.АнализироватьИсториюВыбораЗначенийРеквизитов;
	Иначе
		Объект.АнализироватьИсториюВыбораЗначенийРеквизитов = Истина
	КонецЕсли;
	
	Если Параметры.Свойство("АвтоматическиПодставлятьДокументы") Тогда
		Объект.АвтоматическиПодставлятьДокументы = Параметры.АвтоматическиПодставлятьДокументы;
	Иначе
		Объект.АвтоматическиПодставлятьДокументы = Истина
	КонецЕсли;
	
	Если Параметры.Свойство("НеУдалятьДокументыКоторыхНетВВыписке") Тогда
		Объект.НеУдалятьДокументыКоторыхНетВВыписке = Параметры.НеУдалятьДокументыКоторыхНетВВыписке;
	Иначе
		Объект.НеУдалятьДокументыКоторыхНетВВыписке = Ложь
	КонецЕсли;
	
	Если Параметры.Свойство("КонтролироватьБезопасностьОбменаСБанком") Тогда
		Объект.КонтролироватьБезопасностьОбменаСБанком = Параметры.КонтролироватьБезопасностьОбменаСБанком;
	Иначе
		Объект.КонтролироватьБезопасностьОбменаСБанком = Истина
	КонецЕсли;
	
	Если Параметры.Свойство("Программа") Тогда
		Объект.Программа = Параметры.Программа;
	КонецЕсли;
	
	Если Параметры.Свойство("Кодировка") Тогда
		Объект.Кодировка = Параметры.Кодировка;
	КонецЕсли;

	Если Параметры.Свойство("ВерсияФормата") Тогда
		Объект.ВерсияФормата = Параметры.ВерсияФормата;
	КонецЕсли;
	
	Если Параметры.Свойство("ГруппаДоступа") И ЗначениеЗаполнено(Параметры.ГруппаДоступа) Тогда
		Объект.ГруппаДоступа = Параметры.ГруппаДоступа;
	Иначе
		Объект.ГруппаДоступа = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяГруппаДоступаКонтрагентов");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НачПериода) Тогда
		Объект.НачПериода = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонПериода) Тогда
		Объект.КонПериода = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Кодировка) Тогда
		Объект.Кодировка = "Авто";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВерсияФормата) Тогда
		Объект.ВерсияФормата = "1.02";
	КонецЕсли;
	
	Если Параметры.Свойство("СпособЗачета") Тогда
		Объект.СпособЗачета = Параметры.СпособЗачета;
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяДДСВходящий) Тогда
		Объект.СтатьяДДСВходящий = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяДДСИсходящий) Тогда
		Объект.СтатьяДДСИсходящий = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
	КонецЕсли;
	
	ЕстьФайлЗагрузки = Ложь;
	Если Параметры.Свойство("ЗагрузитьИзИстории") Тогда
		МенеджерЗаписи = РегистрыСведений.ИсторияРаботыСКлиентомБанка.СоздатьМенеджерЗаписи();
	
		МенеджерЗаписи.Период = Параметры.Период;
		МенеджерЗаписи.Организация = Параметры.Организация;
		МенеджерЗаписи.БанковскийСчет = Параметры.БанковскийСчет;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			ФайлЗагрузки = МенеджерЗаписи.ИсходныйФайл.Получить();
			ЕстьФайлЗагрузки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("АдресФайлаКОбработке") Тогда
		ФайлЗагрузки = ПолучитьИзВременногоХранилища(Параметры.АдресФайлаКОбработке);
		Если ТипЗнч(ФайлЗагрузки) = Тип("ДвоичныеДанные") Тогда
			Попытка
				
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
				ФайлЗагрузки.Записать(ИмяВременногоФайла);
				
				ФайлЗагрузки = КлиентБанкВызовСервера.ПолучитьТекстФайла(ИмяВременногоФайла, Объект.Кодировка);
				
				УдалитьФайлы(ИмяВременногоФайла);
				
			Исключение
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с банком.Временный файл'"), 
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось сохранение временного файла на диск по причине: %1'"),
						ОписаниеОшибки()));
						
				Возврат;
				
			КонецПопытки;
		КонецЕсли;
		ЕстьФайлЗагрузки = Истина;
	КонецЕсли;
	
	Если ЕстьФайлЗагрузки Тогда
		ПотокЧтения.УстановитьТекст(ФайлЗагрузки);
		ОбработанныйТекст = ФайлЗагрузки;
	КонецЕсли;
	
	Если Параметры.Свойство("СоглашениеПрямогоОбменаСБанками") Тогда
		СоглашениеПрямогоОбменаСБанками = Параметры.СоглашениеПрямогоОбменаСБанками;
		Если ЗначениеЗаполнено(СоглашениеПрямогоОбменаСБанками) Тогда
			ТекстШаблона = НСтр("ru = 'С %1 действует соглашение о прямом обмене: банковская выписка будет загружена в 1С:Управление нашей фирмой напрямую из банка'");
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеПрямогоОбменаСБанками, "Банк"));
			СообщениеПрямогоОбмена = ТекстНадписи;
		КонецЕсли;
	КонецЕсли;
	
	//СМП_РаботаСБанками +++
	НайденПротокол = КлиентБанкВызовСервера.СМП_ПолучитьОбработкуПротокола(Объект.БанковскийСчет);
	Если НайденПротокол <> Неопределено Тогда
		Объект.ОбработкаПротокола = НайденПротокол;
		Если ТИПЗНЧ(НайденПротокол) = ТИП("СправочникСсылка.СМП_УчетныеЗаписиБанков") Тогда
			ФайлЗагрузки = "";
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.БанковскийСчет) и 
			ТИПЗНЧ(Объект.ОбработкаПротокола) = ТИП("СправочникСсылка.СМП_УчетныеЗаписиБанков") И
				ЗначениеЗаполнено(Объект.ОбработкаПротокола) Тогда
		ПрямойОбменСБанками = Истина;
	КонецЕсли;
	
	Если ПрямойОбменСБанками и ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ТекстШаблона = НСтр("ru = 'С %1 действует соглашение о прямом обмене: банковская выписка будет загружена в 1С:Управление нашей фирмой напрямую из банка'");
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "Банк"));
		СообщениеПрямогоОбмена = ТекстНадписи;
	КонецЕсли;

	Если ПрямойОбменСБанками Тогда
		УстановитьСтраницуПодвалаНаСервере();
	КонецЕсли;
	//СМП_РаботаСБанками ---
	
	//СМП_РаботаСБанками +++
	Если ФайлЗагрузки <> "" Тогда
		ПотокЧтения.УстановитьТекст(ФайлЗагрузки);
		ОбработанныйТекст = ФайлЗагрузки;
		
		СМП_УчетныеЗаписиБанков = КлиентБанкВызовСервера.СМП_ПолучитьОбработкуПротокола(Объект.БанковскийСчет);
		Если ЗначениеЗаполнено(СМП_УчетныеЗаписиБанков) тогда
			Если ТИПЗНЧ(СМП_УчетныеЗаписиБанков) = ТИП("СправочникСсылка.СМП_УчетныеЗаписиБанков") тогда
				СМП_ЗаполнитьДокументыНаИмпортПоСправочнику(СМП_УчетныеЗаписиБанков);
			Иначе
				ДвоичДанные = Новый ДвоичныеДанные(Объект.ФайлЗагрузки);
				АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичДанные, Новый УникальныйИдентификатор);
				СМП_ЗаполнитьДокументыНаИмпортОбработкой(СМП_УчетныеЗаписиБанков, АдресХранилища);
			КонецЕсли;
			ЕстьФайлЗагрузки = Ложь;
		КонецЕсли;
	КонецЕсли;
	//СМП_РаботаСБанками ---
	
	Если Параметры.Свойство("ЭлектроннаяВыпискаБанка")
		И ЗначениеЗаполнено(Параметры.ЭлектроннаяВыпискаБанка)
		И ТипЗнч(Параметры.ЭлектроннаяВыпискаБанка) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		
		СообщениеБанка = Параметры.ЭлектроннаяВыпискаБанка;
		ВыпискиБанка.Добавить(СообщениеБанка);
		Если ЗначениеЗаполнено(СообщениеБанка.ДатаНачала) Тогда
			Объект.НачПериода = СообщениеБанка.ДатаНачала;
			Объект.КонПериода = ?(ЗначениеЗаполнено(СообщениеБанка.ДатаОкончания),
				СообщениеБанка.ДатаОкончания, СообщениеБанка.ДатаНачала);
			ЭлектроннаяВыпискаБанка = ТекстСсылкиНаЭлектронныеВыписки(Объект.НачПериода, Объект.КонПериода);
		Иначе
			ЭлектроннаяВыпискаБанка = Строка(СообщениеБанка);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормойНаСервере();
	
	ПодсчитатьКонтрагентов();
	
	ОбновитьИнформациюОбОстаткахНаСчете(); // Остатки на счете
	
	ПослеЗагрузкиВыписокВ1С = Ложь;
	
	НастроитьЭлементБанковскийСчет();
	
	// МобильныйКлиент
	НастроитьФормуМобильныйКлиент();
	// Конец МобильныйКлиент
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриУстановкеОтбораПоБанковскомуСчету()
	
	НастройкиОбщиеПолучены = Ложь;
	ЕстьОтборПоБанковскомуСчету = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементБанковскийСчет()
	
	Если ПрямойОбменСБанками ИЛИ ЕстьОтборПоБанковскомуСчету Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка КАК Ссылка,
		|	БанковскиеСчета.Владелец.Наименование КАК ВладелецНаименование,
		|	БанковскиеСчета.ВалютаДенежныхСредств.Представление КАК ВалютаДенежныхСредствПредставление,
		|	БанковскиеСчета.Наименование КАК Наименование
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(БанковскиеСчета.Владелец) = ТИП(Справочник.Организации)
		|	И БанковскиеСчета.НомерСчета = &НомерСчета
		|	И НЕ БанковскиеСчета.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("НомерСчета", БанковскийСчетНомер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка= РезультатЗапроса.Выбрать();
	
	Элементы.БанковскийСчет.СписокВыбора.Очистить();
	
	Если Выборка.Количество() > 1 Тогда
		
		Пока Выборка.Следующий() Цикл
			Элементы.БанковскийСчет.СписокВыбора.Добавить(Выборка.Ссылка, ""+Выборка.Наименование);
		КонецЦикла;
		
		Элементы.БанковскийСчет.Видимость = Истина;
		
		БанковскийСчетПередИзменением = Объект.БанковскийСчет;
	Иначе
		Элементы.БанковскийСчет.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в коллекцию оформляемых полей компоновки данных новое поле
//
// Параметры:
//	КоллекцияОформляемыхПолей 	- коллекция оформляемых полей КД
//	ИмяПоля						- Строка - имя поля
//
// Возвращаемое значение:
//	ОформляемоеПолеКомпоновкиДанных - созданное поле
//
// Пример:
// 	Форма.УсловноеОформление.Элементы[0].Поля
//
Функция ДобавитьОформляемоеПоле(КоллекцияОформляемыхПолей, ИмяПоля) Экспорт
	
	ПолеЭлемента 		= КоллекцияОформляемыхПолей.Элементы.Добавить();
	ПолеЭлемента.Поле 	= Новый ПолеКомпоновкиДанных(ИмяПоля);

	Возврат ПолеЭлемента;
	
КонецФункции

// Добавляет в коллекцию отбора новую группу указанного типа.
//
// Параметры:
//	КоллекцияЭлементовОтбора - КоллекцияЭлементовОтбораКомпоновкиДанных 
//	ТипГруппы - ГруппаЭлементовОтбораКомпоновкиДанных - ГруппаИ или ГруппаИли
//
// Возвращаемое значение:
//	ГруппаЭлементовОтбораКомпоновкиДанных - добавленная группа
//
Функция ДобавитьГруппуОтбора(КоллекцияЭлементовОтбора, ТипГруппы) Экспорт

	ГруппаЭлементовОтбора			 = КоллекцияЭлементовОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.ТипГруппы  = ТипГруппы;
	
	Возврат ГруппаЭлементовОтбора;

КонецФункции

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЕстьФайлЗагрузки Тогда
		СоздатьДлительнуюОперациюОбработкиВыписки();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(Неопределено,ТекстПредупреждения);
	КонецЕсли;
	
	ДопустимыеТипы = Новый ОписаниеТипов("СправочникСсылка.Контрагенты", ,);
	Элементы.ЗагрузкаКонтрагент.ОграничениеТипа = ДопустимыеТипы;
	
	ДопустимыеТипы = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов", ,);
	Элементы.ЗагрузкаДоговор.ОграничениеТипа = ДопустимыеТипы;
	
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, Новый Структура("РеквизитФормы", "ФайлЗагрузки"));
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма.РасширениеРаботыСФайламиПодключено = Подключено;
	Если ЭтаФорма.РасширениеРаботыСФайламиПодключено Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) и Не ЭтаФорма.ПрямойОбменСБанками Тогда
			//СМП_РаботаСБанками +++
			ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ФорматФайла = СМП_ПолучитьФорматФайла();
			ДиалогВыбораФайла.Фильтр                  		= "Файл данных (*." + ФорматФайла + ")|*." + ФорматФайла + "";
			ДиалогВыбораФайла.Заголовок               		= "Выберите файл";
			ДиалогВыбораФайла.ПредварительныйПросмотр		= Ложь;
			ДиалогВыбораФайла.Расширение              		= ФорматФайла;
			ДиалогВыбораФайла.ИндексФильтра           		= 0;	
			//ДиалогВыбораФайла.ПолноеИмяФайла              	= Элемент.ТекстРедактирования;
			ДиалогВыбораФайла.ПроверятьСуществованиеФайла 	= Ложь;
			
			Если ДиалогВыбораФайла.Выбрать() Тогда
				Объект.ФайлЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
				ПрочитатьДанныеИзФайла();
			Иначе
				Объект.ФайлЗагрузки = "";
			КонецЕсли;
			
			//Объект.ФайлЗагрузки = "c:\kl_to_1c.txt";
			//СМП_РаботаСБанками ---
		КонецЕсли;
	Иначе
		Объект.ФайлЗагрузки = "";
	КонецЕсли;
	
	Если НЕ Подключено Тогда
		//Элементы.ЗагрузкаОбновить.Видимость = Ложь; // Работа выполняется с текстом, а не с файлами.
	КонецЕсли;
	
	Если ВыпискиБанка.Количество() > 0 Тогда
		ПрочитатьДанныеИзФайла();
		Элементы.НеНайденныеРеквизиты.Видимость = (ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДлительнуюОперациюОбработкиВыписки(ИмпортТекстДляРазбора = Неопределено)
	
	Если ИмпортТекстДляРазбора = Неопределено Тогда
		ИмпортТекстДляРазбора = ОбработанныйТекст;
	КонецЕсли;
	
	//ДлительнаяОперация = ЗаполнитьДокументыНаИмпорт(ИмпортТекстДляРазбора);
	//ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеОбработкиБанковскойВыписки", ЭтотОбъект);
	//ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	//ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	//ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДействияКомандныхПанелей

// Процедура - обработчик команды ЗагрузкаОтметитьВсе.
//
&НаКлиенте
Процедура ЗагрузкаОтметитьВсеВыполнить(Команда)
	
	УстановитьФлаги(Объект.Загрузка, "Загружать", Истина, Истина);
	УстановитьСтраницуПодвалаНаКлиенте(Истина);
	
КонецПроцедуры // ЗагрузкаОтметитьВсеВыполнить()

// Процедура - обработчик команды ЗагрузкаСнятьОтметкуУВсех.
//
&НаКлиенте
Процедура ЗагрузкаСнятьОтметкуУВсехВыполнить(Команда)
	
	УстановитьФлаги(Объект.Загрузка, "Загружать", Ложь, Истина);
	Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаНетОтмеченныхСтрок;
	
КонецПроцедуры // ЗагрузкаСнятьОтметкуУВсехВыполнить()

// Процедура - обработчик команды НеНайденныеРеквизитыЗагрузкаОтметитьВсе.
//
&НаКлиенте
Процедура НеНайденныеРеквизитыЗагрузкаОтметитьВсе(Команда)
	
	УстановитьФлаги(ТаблицаКонтрагентов.ПолучитьЭлементы(), "Загружать", Истина, Ложь);
	
КонецПроцедуры // НеНайденныеРеквизитыЗагрузкаОтметитьВсе()

// Процедура - обработчик команды НеНайденныеРеквизитыСнятьОтметкуУВсех.
//
&НаКлиенте
Процедура НеНайденныеРеквизитыСнятьОтметкуУВсех(Команда)
	
	УстановитьФлаги(ТаблицаКонтрагентов.ПолучитьЭлементы(), "Загружать", Ложь, Ложь);
	
КонецПроцедуры // НеНайденныеРеквизитыСнятьОтметкуУВсех()

// Процедура - обработчик команды ЗагрузкаОбновить.
//
&НаКлиенте
Процедура ЗагрузкаОбновитьВыполнить(Команда)
	
	ПослеЗагрузкиВыписокВ1С = Ложь;
	
	Если НЕ ПроверитьЗаполнениеРеквизитовФормы() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(
		НСтр("ru='Выполняется чтение файла выписки...'"),
		,
		НСтр("ru='Пожалуйста, подождите'"),
		БиблиотекаКартинок.ЗагрузкаДанных32
	);
	
	ПрочитатьДанныеИзФайла();
	
	Если Объект.Загрузка.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru='В файле нет данных о платежах или их не удалось прочитать'"), , "ЭлектроннаяВыпискаБанка");
	КонецЕсли;
	
КонецПроцедуры // ЗагрузкаОбновитьВыполнить()

&НаСервере
Процедура НастроитьВидимостьЭлементовНаСервере(ПолноеОбновлениеСтраницыПодвала = Ложь) Экспорт
	
	ЕстьОшибки = Ложь; // Могут быть ошибки из-за не верного формата суммы и когда не найдены контрагент, РС или договор...
	Для Каждого ТекущаяСтрока Из Объект.Загрузка Цикл
		Если Не ПустаяСтрока(ТекущаяСтрока.ОписаниеОшибок) Тогда
			ЕстьОшибки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.НеНайденныеРеквизиты.Видимость = (КоличествоНеНайденныхКонтрагентов > 0);
	Если КоличествоНеНайденныхКонтрагентов = 0 И КоличествоНеНайденныхРСчетов = 0 Тогда
		Элементы.ДекорацияНеНайденныеРеквизиты.Гиперссылка = Ложь;
		Элементы.ДекорацияНеНайденныеРеквизиты.Заголовок = "Новых контрагентов: 0. Р/счетов: 0";
	Иначе
		Элементы.ДекорацияНеНайденныеРеквизиты.Гиперссылка = Истина;
		Элементы.ДекорацияНеНайденныеРеквизиты.Заголовок = "Новых контрагентов: "+КоличествоНеНайденныхКонтрагентов+".  Р/счетов: "+КоличествоНеНайденныхРСчетов;
	КонецЕсли;
	
	Элементы.ЗагрузкаСнятьОтметкуУВсехСтрокСПредупреждениями1.Видимость = ЕстьОшибки;
	
	УстановитьСтраницуПодвалаНаСервере(, ПолноеОбновлениеСтраницыПодвала);
	
КонецПроцедуры

// Процедура - обработчик команды Загрузить.
//
&НаКлиенте
Процедура ЗагрузитьВыполнить(Команда)
	
	ПослеЗагрузкиВыписокВ1С = Истина;
	
	Если НЕ ПроверитьЗаполнениеРеквизитовФормы() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.Загрузка.Количество() > 0 Тогда
		
		ЕстьОтмеченныеСтроки = Ложь;
		Для Каждого ТекущаяСтрока Из Объект.Загрузка Цикл
			Если ТекущаяСтрока.Загружать Тогда
				ЕстьОтмеченныеСтроки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьОтмеченныеСтроки Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не отмечено ни одной строки! Выписки не будут загружены. Нужно установить отметку в загружаемых строках и нажать кнопку еще раз.'");
			Сообщение.Поле = "Объект.Загрузка[0].Загружать";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		ТаблицаРезультата.Очистить();
		
		СоздатьДлительнуюОперациюЗагрузкиВыписки();
		
	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Список документов для загрузки пуст.'"));
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьВыполнить()

&НаСервере
Процедура ОбновитьИнформациюОбОстаткахНаСчете()
	
	ОстатокНач = ДвиженияДенежныхСредствВызовСервера.ПолучитьОстатокНаСчете(Объект.БанковскийСчет, Объект.Организация);
	ОстатокКон = ОстатокНач + Объект.Загрузка.Итог("СуммаПоступилоВыделено") - Объект.Загрузка.Итог("СуммаСписаноВыделено");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПлатежныхДокументовЗавершение(РезультатЗавершения, ПараметрыЗавершения) Экспорт
	
	Если ТипЗнч(РезультатЗавершения) = Тип("Структура") Тогда
		Элементы.ЗакрытьПротокол.КнопкаПоУмолчанию = Истина;
		Элементы.СтраницыЗагрузкаИПротокол.ТекущаяСтраница = Элементы.СтраницаПротокол;
	ИначеЕсли ПараметрыЗавершения.ЕстьПредупреждения Тогда
		Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаЗагрузкаЗавершенаСПредупреждениями;
	Иначе
		Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаЗагрузкаЗавершенаБезПредупреждений;
	КонецЕсли;
	
	// Обход очистки сообщений ползователю.
	ОчиститьСообщения();
	Для Каждого Сообщение Из ПараметрыЗавершения.СообщенияПользователю Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
	Если Объект.ПроводитьЗагружаемые Тогда
		Оповестить("ОповещениеОбИзмененииДолга");
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.ПоступлениеНаСчет"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.РасходСоСчета"));
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуРезультата()
	
	// вывод в макет
	
	СтруктураПараметров = Новый Структура(
		"НазваниеОрганизации, ОписаниеПериода, ДатаСеанса",
		Объект.Организация,
		ПредставлениеПериода(Объект.НачПериода, КонецДня(Объект.КонПериода)),
		ТекущаяДатаСеанса());
	
	РезультатЗагрузки.Очистить();
	
	Макет = Обработки.СМП_КлиентБанк.ПолучитьМакет("ПротоколЗагрузки");
	
	ОбластьЗаголовка = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовка.Параметры.Заполнить(СтруктураПараметров);
	
	РезультатЗагрузки.Вывести(ОбластьЗаголовка);
	
	ОбластьНовогоПерваяСтрока = Макет.ПолучитьОбласть("СозданНовый");
	ОбластьНеЗагружалсяПерваяСтрока = Макет.ПолучитьОбласть("НеЗагружался");
	ОбластьОтредактированПерваяСтрока = Макет.ПолучитьОбласть("Отредактирован");
	
	ОбластьНовогоВтораяСтрока = Макет.ПолучитьОбласть("СозданНовыйВтораяСтрока");
	ОбластьНеЗагружалсяВтораяСтрока = Макет.ПолучитьОбласть("НеЗагружалсяВтораяСтрока");
	ОбластьОтредактированВтораяСтрока = Макет.ПолучитьОбласть("ОтредактированВтораяСтрока");
	
	НомерПП = 1;
	ДокументВПротоколе = Неопределено;
	
	Для Каждого СтрокаПротокола Из ТаблицаРезультата Цикл
		
		Область = Неопределено;
		
		Если СтрокаПротокола.Документ <> ДокументВПротоколе Тогда
			ДокументВПротоколе = СтрокаПротокола.Документ;
			ОбластьНового = ОбластьНовогоПерваяСтрока;
			ОбластьОтредактирован = ОбластьОтредактированПерваяСтрока;
			ОбластьНеЗагружался = ОбластьНеЗагружалсяПерваяСтрока;
			ЗаполнятьНомерПП = Истина;
			ВтораяЧастьОбластиКомментария = "";
		Иначе
			ОбластьНового = ОбластьНовогоВтораяСтрока;
			ОбластьОтредактирован = ОбластьОтредактированВтораяСтрока;
			ОбластьНеЗагружался = ОбластьНеЗагружалсяВтораяСтрока;
			ЗаполнятьНомерПП = Ложь;
			ВтораяЧастьОбластиКомментария = "ВтораяСтрока";
		КонецЕсли;
		
		Если СтрокаПротокола.СозданНовый Тогда
			Область = ОбластьНового;
			ОбластьКомментария = "СозданНовый"+ВтораяЧастьОбластиКомментария+"Комментарий";
			ОбластьДействия = "СозданНовый"+ВтораяЧастьОбластиКомментария+"Действия";
		ИначеЕсли СтрокаПротокола.Записывался Тогда
			Область = ОбластьОтредактирован;
			ОбластьКомментария = "Отредактирован"+ВтораяЧастьОбластиКомментария+"Комментарий";
			ОбластьДействия = "Отредактирован"+ВтораяЧастьОбластиКомментария+"Действия";
		Иначе
			Область = ОбластьНеЗагружался;
			ОбластьКомментария = "НеЗагружался"+ВтораяЧастьОбластиКомментария+"Комментарий";
			ОбластьДействия = "НеЗагружался"+ВтораяЧастьОбластиКомментария+"Действия";
		КонецЕсли;
		
		Если СтрокаПротокола.Важность = 1 Тогда
			Область.Область(ОбластьКомментария).ЦветФона = WebЦвета.Желтый;
			Область.Область(ОбластьДействия).ЦветФона = WebЦвета.Желтый;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаПротокола);
		Если ЗаполнятьНомерПП Тогда
			Область.Параметры["НомерПП"] = НомерПП;
			НомерПП = НомерПП + 1;
		КонецЕсли;
		РезультатЗагрузки.Вывести(Область);
		
	КонецЦикла;
	
	Если ТаблицаПомеченныхНаУдалениеКакДубль.Количество() > 0 Тогда
		
		ОбластьЗаголовка = Макет.ПолучитьОбласть("ШапкаДубли");
		ОбластьЗаголовка.Параметры.Заполнить(СтруктураПараметров);
		
		РезультатЗагрузки.Вывести(ОбластьЗаголовка);
		
		ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаДубли");
		
		НомерПП = 1;
		
		Для Каждого СтрокаПротокола Из ТаблицаПомеченныхНаУдалениеКакДубль Цикл
			
			Область = ОбластьСтроки;
			
			Область.Параметры.Заполнить(СтрокаПротокола);
			Область.Параметры["НомерПП"] = НомерПП;
			НомерПП = НомерПП + 1;
			
			Если Не СтрокаПротокола.ОперацияВыполнена Тогда
				Область.Параметры.Комментарий = НСтр("ru = 'Не получилось отменить проведение!'");
			КонецЕсли;
			
			РезультатЗагрузки.Вывести(Область);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПротокол()
	
	Запись = РегистрыСведений.ИсторияРаботыСКлиентомБанка.СоздатьМенеджерЗаписи();
	Запись.Период = ТекущаяДатаСеанса();
	Запись.Организация = Объект.Организация;
	Запись.БанковскийСчет = Объект.БанковскийСчет;
	Запись.КоличествоДокументовВВыписке = Объект.Загрузка.Количество();
	Запись.Загрузка = Истина;
	Запись.Кодировка = Объект.Кодировка;
	
	Запись.ИсходныйФайл = 
		Новый ХранилищеЗначения(
			ОбработанныйТекст,
			Новый СжатиеДанных(5));
	
	Запись.ПротоколЗагрузки =
		Новый ХранилищеЗначения(
			РезультатЗагрузки,
			Новый СжатиеДанных(5));
	
	Запись.Записать();
	
КонецПроцедуры

// Процедура - обработчик команды СоздатьКонтрагентов.
//
&НаКлиенте
Процедура СоздатьКонтрагентов(Команда)
	
	СоздатьНовогоКонтрагента();
	
	ПрочитатьДанныеИзФайла();
	
КонецПроцедуры // СоздатьКонтрагентов()

&НаКлиенте
Процедура ЗапроситьЭлектроннуюВыпискуБанка(Команда)
	
	//СМП_РаботаСБанками +++
	//Если НЕ ЗначениеЗаполнено(СоглашениеПрямогоОбменаСБанками) ИЛИ НЕ ПериодЗаполнен() Тогда
	//	Возврат;
	//КонецЕсли;
	Если НЕ ПрямойОбменСБанками ИЛИ НЕ ПериодЗаполнен() Тогда
		Возврат;
	КонецЕсли;
	

	//ОбменСБанкамиКлиент.ПолучитьВыпискуБанка(
	//	СоглашениеПрямогоОбменаСБанками, Объект.НачПериода, Объект.КонПериода, ЭтотОбъект, ПолучитьНомерСчета(Объект.БанковскийСчет));
	
	СМП_ЗаполнитьДокументыНаИмпортПоСправочнику(Объект.ОбработкаПротокола);
	//СМП_РаботаСБанками ---
	//ОповещениеПолучениеВыписки = Новый ОписаниеОповещения("ЗапроситьЭлектроннуюВыпискуБанкаЗавершение", ЭтотОбъект, Новый Структура);
	
	//ОбменСБанкамиКлиент.ПолучитьВыписку(ОповещениеПолучениеВыписки, Объект.БанковскийСчет, Объект.НачПериода, Объект.КонПериода);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСсылкиНаЭлектронныеВыписки(НачалоПериода, КонецПериода)
	
	ШаблонСтроки = НСтр("ru = 'Выписка банка за период с %1 по %2'");
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
		Формат(НачалоПериода, "ДФ=dd.MM.yyyy"), Формат(КонецПериода, "ДФ=dd.MM.yyyy"));
	
КонецФункции // СсылкаНаЭлектронныеВыписки()

&НаКлиенте
Процедура ЗапроситьЭлектроннуюВыпискуБанкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЕстьВыписки = Истина;
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ЕстьВыписки = Ложь;
	КонецЕсли;
	
	Если НЕ Результат.Свойство("Успех")
		ИЛИ Результат.Успех <> Истина Тогда
		ЕстьВыписки = Ложь;
	КонецЕсли;
	
	Если ЕстьВыписки И Результат.Свойство("Выписки") Тогда
		ОбработкаВыбора(Результат.Выписки, Неопределено);
	КонецЕсли;
	
	УстановитьСтраницуПодвалаНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовШапки

&НаКлиенте
Процедура ЭлектроннаяВыпискаБанкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыпискиБанка.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВыпискиБанка", ВыпискиБанка);
		ПараметрыФормы.Вставить("НачалоПериода", Объект.НачПериода);
		ПараметрыФормы.Вставить("КонецПериода", Объект.КонПериода);
		ОткрытьФорму("Обработка.СМП_КлиентБанк.Форма.ФормаСпискаВыписок", ПараметрыФормы);
		
	ИначеЕсли ВыпискиБанка.Количество() = 1 Тогда
		
		ОбменСБанкамиКлиент.ОткрытьФормуПросмотраЭлектронногоДокумента(ВыпискиБанка[0].Значение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийФормы
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ

&НаКлиенте
Функция ПодготовитьОднуСтрокуТекстаПредупреждения(ОписаниеОшибок, ПоказыватьЗнакПредупреждения, ДанныеСтроки, ТолькоИнформацияОДублях = Неопределено)
	
	ПодготовленноеОписаниеОшибок = ОписаниеОшибок;
	
	// 1. Определим, что делать с контрагентом.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Не найден контрагент'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + 
			?(ДанныеСтроки.ДействиеСКонтрагентом.Пустая(), НСтр("ru = ' Будет создан новый при загрузке в 1С.'"), " "+ДанныеСтроки.ДействиеСКонтрагентом+".");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.КонтрагентНеНайденКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 2. Определим, что делать со счетом контрагента.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Не найден счет'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + 
			?(ДанныеСтроки.ДействиеСоСчетомКонтрагента.Пустая(), НСтр("ru = ' Будет создан новый при загрузке в 1С.'"), " "+ДанныеСтроки.ДействиеСоСчетомКонтрагента+".");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.СчетКонтрагентаНеНайденКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 3. Определим, что делать с договором.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Не найден договор'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ?(ДанныеСтроки.ДействиеСоСчетомКонтрагента.Пустая(), 
			НСтр("ru = 'Не найден основной договор. Будет создан новый при загрузке в 1С и установлен основным.'"), 
			НСтр("ru = 'Не найден договор контрагента. '")+ДанныеСтроки.ДействиеСоСчетомКонтрагента+".");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.ДоговорНеНайденКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 4. Определим, что делать с видом операции.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Проверьте операцию'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' В назначении не найдены данные о счете, накладной или заказе.'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.ВидОперацииНеНайденКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 5.1. Определим, что делать с суммой.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Укажите сумму вручную'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' Сумма в файле содержит недопустимые символы.'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.НеВерныйФорматСуммыКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	// 5.2. Определим, что делать с суммой.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Сумма не указана'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' В файле из банка не указана сумма операции.'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.НеВерныйФорматСуммыКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 6. Определим, что делать с дублями документов.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'соответствующих документов'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' Дубли документов будут помечены на удаление!!!'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.НесколькоДокументовКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = (ТолькоИнформацияОДублях = Неопределено ИЛИ ТолькоИнформацияОДублях = Истина);
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 7. Определим, что делать, если есть контрагенты с одинаковым ИНН.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'контрагентов с одинаковым ИНН!'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' Проверьте контрагента!'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.НесколькоДокументовКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = (ТолькоИнформацияОДублях = Неопределено ИЛИ ТолькоИнформацияОДублях = Истина);
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 8. Определим, что делать, если банковские счета с одинаковым номером.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'одинаковых банковских счетов!'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' Проверьте контрагента и его банковский счет!'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = Истина;
		КонецЕсли;
		
		ТолькоИнформацияОДублях = (ТолькоИнформацияОДублях = Неопределено ИЛИ ТолькоИнформацияОДублях = Истина);
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	ПоказыватьЗнакПредупреждения = Истина;
	
	Возврат ПодготовленноеОписаниеОшибок;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьТекстПредупреждения(ДанныеСтроки, ПоказыватьЗнакПредупреждения = Ложь)
	
	ТолькоИнформацияОДублях = Неопределено;
	
	ПодготовленноеОписаниеОшибок = НСтр("ru = 'В текущей строке: '")+ Символы.ПС + Символы.ПС;
	
	Если НЕ ДанныеСтроки.Загружать Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = '<Флаг загрузки снят. Строка не будет загружена>'") + Символы.ПС + Символы.ПС;
	КонецЕсли;
	
	ОписаниеОшибок = ДанныеСтроки.ОписаниеОшибок;
	
	// 1. Определим, что делать с контрагентом.
	ОбрабатываемыйТекст = ОписаниеОшибок;
	
	ТекС = СтрНайти(ОбрабатываемыйТекст, Символы.ПС);
	Пока ТекС > 0 Цикл
		ОбрабатываемаяСтрока = Лев(ОбрабатываемыйТекст, ТекС - 1);
		ОбрабатываемыйТекст = Сред(ОбрабатываемыйТекст, ТекС + 1);
		
		ОбрабатываемаяСтрока = ПодготовитьОднуСтрокуТекстаПредупреждения(ОбрабатываемаяСтрока, ПоказыватьЗнакПредупреждения, ДанныеСтроки, ТолькоИнформацияОДублях);
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + ОбрабатываемаяСтрока + Символы.ПС + Символы.ПС;
		
		ТекС = СтрНайти(ОбрабатываемыйТекст, Символы.ПС);
	КонецЦикла;
	
	Если Не ПустаяСтрока(ОбрабатываемыйТекст) Тогда
		ОбрабатываемаяСтрока = ПодготовитьОднуСтрокуТекстаПредупреждения(ОбрабатываемыйТекст, ПоказыватьЗнакПредупреждения, ДанныеСтроки, ТолькоИнформацияОДублях);
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + ОбрабатываемаяСтрока + Символы.ПС;
	КонецЕсли;
	
	Если ТолькоИнформацияОДублях = Истина Тогда
		ПоказыватьЗнакПредупреждения = Ложь;
	КонецЕсли;
	
	Возврат ПодготовленноеОписаниеОшибок;
	
КонецФункции

// Процедура - обработчик события Выбор табличной части Загрузка.
//
&НаКлиенте
Процедура ЗагрузкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЗагрузкаЗагружать" Тогда
		
		СтандартнаяОбработка = Ложь;
		Элементы.Загрузка.ТекущиеДанные.Загружать = НЕ (Элементы.Загрузка.ТекущиеДанные.Загружать);
		
	ИначеЕсли Поле.Имя = "ЗагрузкаНомерКартинки" Тогда 
		
		СтандартнаяОбработка = Ложь;
		ТекущаяСтрока = Элементы.Загрузка.ТекущиеДанные;
		ОткрытьФормуРедактированияКонтрагентов(ТекущаяСтрока, "Определить");
		
	ИначеЕсли Поле.Имя = "ЗагрузкаНазначениеПлатежа" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(Неопределено,Элементы.Загрузка.ТекущиеДанные.НазначениеПлатежа);
		
	ИначеЕсли Поле.Имя = "ЗагрузкаКонтрагент" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуРедактированияКонтрагентов(Элементы.Загрузка.ТекущиеДанные, "ДействияСКонтрагентом");
		
	ИначеЕсли Поле.Имя = "ЗагрузкаСчетКонтрагента" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущаяСтрока = Элементы.Загрузка.ТекущиеДанные;
		ОткрытьФормуРедактированияКонтрагентов(ТекущаяСтрока, "ДействияСоСчетомКонтрагента");
		
	ИначеЕсли Поле.Имя = "ЗагрузкаДоговор" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущаяСтрока = Элементы.Загрузка.ТекущиеДанные;
		ОткрытьФормуРедактированияКонтрагентов(ТекущаяСтрока, "ДействияСДоговором");
		
	ИначеЕсли ЗначениеЗаполнено(Элементы.Загрузка.ТекущиеДанные.Документ)
		И ((Поле.Имя = "ЗагрузкаДокумент") ИЛИ (Поле.Имя = "ЗагрузкаДокументНайден")) Тогда
		
		ДанныеСтроки = Элементы.Загрузка.ТекущиеДанные;
		Если ДанныеСтроки.НесколькоДокументовКартинка = 0 ИЛИ СтрНайти(ДанныеСтроки.ДокументНайден, НСтр("ru = 'И еще'")) > 0 Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФормуРедактированияКонтрагентов(ДанныеСтроки, "ДействияСоСпискомНайденныхДокументов");
		Иначе
			ОткрытьФорму("Документ." + ДанныеСтроки.ВидДокумента + ".ФормаОбъекта",
				Новый Структура("Ключ", ДанныеСтроки.Документ),
				ДанныеСтроки.Документ
			);
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "ЗагрузкаНеВерныйФорматСуммыКартинка" Тогда
		
		ТекущиеДанные = Элементы.Загрузка.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.Сумма) Тогда
			ПоказатьВводЧисла(Новый ОписаниеОповещения("ПоказатьВводСуммыДокументаЗавершение", ЭтотОбъект, ТекущиеДанные.ПолучитьИдентификатор()),
				ТекущиеДанные.СуммаДокумента, 
				?(ПустаяСтрока(ТекущиеДанные.Сумма), 
				НСтр("ru = 'Введите нужное число!'"), 
				СтрЗаменить(НСтр("ru = 'Введите нужное число (%1)!'"), "%1", СокрЛП(ТекущиеДанные.Сумма)))
				, 15, 2);
		Иначе
			СтруктураСтроки = СтрокаТаблицыЗагрузкаВСтруктуру(ТекущиеДанные);
			СтруктураСтроки.Вставить("БанковскийСчетВалюта", БанковскийСчетВалюта);
			ОткрытьФорму("Обработка.СМП_КлиентБанк.Форма.ФормаПросмотраСтроки", Новый Структура("ДанныеСтроки", СтруктураСтроки), ЭтаФорма, УникальныйИдентификатор,
				,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
			
	ИначеЕсли (Поле.Имя = "ЗагрузкаСуммаДокумента"
		ИЛИ Поле.Имя = "ЗагрузкаСуммаПоступило"
		ИЛИ Поле.Имя = "ЗагрузкаСуммаСписано"
		ИЛИ Поле.Имя = "ЗагрузкаСуммаСписаноСМинусом") Тогда
		
		ДанныеСтроки = Элементы.Загрузка.ТекущиеДанные;
		НеВерныйФорматСуммы = ЕстьНеЦифрыНаКлиенте(СтрЗаменить(СтрЗаменить(СтрЗаменить(ДанныеСтроки.Сумма, ".", ""), "-", ""), ",", ""))
			И ЗначениеЗаполнено(ДанныеСтроки.Сумма);
		Если НеВерныйФорматСуммы Тогда
			ПоказатьВводЧисла(Новый ОписаниеОповещения("ПоказатьВводСуммыДокументаЗавершение", ЭтотОбъект, ДанныеСтроки.ПолучитьИдентификатор()),
				ДанныеСтроки.СуммаДокумента, 
				?(ПустаяСтрока(ДанныеСтроки.Сумма), 
				НСтр("ru = 'Введите нужное число!'"), 
				СтрЗаменить(НСтр("ru = 'Введите нужное число (%1)!'"), "%1", СокрЛП(ДанныеСтроки.Сумма)))
				, 15, 2);
		Иначе
			СтруктураСтроки = СтрокаТаблицыЗагрузкаВСтруктуру(ДанныеСтроки);
			СтруктураСтроки.Вставить("БанковскийСчетВалюта", БанковскийСчетВалюта);
			ОткрытьФорму("Обработка.СМП_КлиентБанк.Форма.ФормаПросмотраСтроки", Новый Структура("ДанныеСтроки", СтруктураСтроки), ЭтаФорма, УникальныйИдентификатор,
				,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
		
	ИначеЕсли (Поле.Имя = "ЗагрузкаИмяДокумента"
		ИЛИ Поле.Имя = "ЗагрузкаДатаДок"
		ИЛИ Поле.Имя = "ЗагрузкаНомерДок"
		ИЛИ Поле.Имя = "ЗагрузкаСуммаДокумента"
		ИЛИ Поле.Имя = "ЗагрузкаСуммаПоступило"
		ИЛИ Поле.Имя = "ЗагрузкаСуммаСписано"
		ИЛИ Поле.Имя = "ЗагрузкаСуммаСписаноСМинусом"
		ИЛИ Поле.Имя = "ЗагрузкаДокументНеЗагружен"
		ИЛИ Поле.Имя = "ЗагрузкаНомерСтроки") Тогда
		
		ДанныеСтроки = Элементы.Загрузка.ТекущиеДанные;
		СтруктураСтроки = СтрокаТаблицыЗагрузкаВСтруктуру(ДанныеСтроки);
		СтруктураСтроки.Вставить("БанковскийСчетВалюта", БанковскийСчетВалюта);
		ОткрытьФорму("Обработка.СМП_КлиентБанк.Форма.ФормаПросмотраСтроки", Новый Структура("ДанныеСтроки", СтруктураСтроки), ЭтаФорма, УникальныйИдентификатор,
			,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузкаВыбор()

// Процедура создает нового контрагента.
//
&НаСервере
Процедура СоздатьНовогоКонтрагента()
	
	Для каждого Элемент Из ТаблицаКонтрагентов.ПолучитьЭлементы() Цикл
		
		Если Элемент.Загружать Тогда
			РеквизитФормыВЗначение("Объект").СоздатьКонтрагента(Элемент).Пустая();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СоздатьНовогоКонтрагента()

// Процедура проверяет выбарн ли контрагент. Если не выбран, то пользователь увидет сообщение об ошибке.
//
&НаКлиенте
Функция ПроверитьВозможностьВыбораДокумента(ТекущаяСтрокаТабличнойЧасти, СтрокаСНазваниемДокумента)
	
	Если ТипЗнч(ТекущаяСтрокаТабличнойЧасти.Контрагент) = Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстСообщения = НСтр("ru = 'Контрагент не идентифицирован, выбор %1 не возможен.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаСНазваниемДокумента);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
	Возврат СтандартнаяОбработка;
	
КонецФункции //ПроверитьВозможностьВыбораДокумента()

&НаСервереБезКонтекста
Функция ПолучитьРеквизитКонтрагента(Контрагент, Реквизит)
	
	Возврат Контрагент[Реквизит];
	
КонецФункции

// Процедура проверяет настройки расчетов в карточке контрагента. Если нужный флаг не установлен, 
// то пользователь увидит сообщение об ошибке.
//
&НаКлиенте
Функция ПроверитьНастройкиРасчетов(ТекущаяСтрокаТабличнойЧасти, СтрокаСНазваниемДокумента, ИмяРеквизита)
	
	Если Не ПолучитьРеквизитКонтрагента(ТекущаяСтрокаТабличнойЧасти.Контрагент, ИмяРеквизита) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстСообщения = НСтр("ru = 'С контрагент не ведется учет расчетов по %1. Выбор документа не требуется.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаСНазваниемДокумента);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
	Возврат СтандартнаяОбработка;
	
КонецФункции //ПроверитьВозможностьВыбораДокумента()

// Процедура - обработчик события НачалоВыбора для поля Заказ списка Загрузка.
//
&НаКлиенте
Процедура ЗагрузкаЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрокаТабличнойЧасти = Элементы.Загрузка.ТекущиеДанные;
	СтандартнаяОбработка = ПроверитьВозможностьВыбораДокумента(ТекущаяСтрокаТабличнойЧасти, НСтр("ru = 'заказа'"));
	Если СтандартнаяОбработка Тогда
		СтандартнаяОбработка = ПроверитьНастройкиРасчетов(ТекущаяСтрокаТабличнойЧасти, НСтр("ru = 'заказам'"), "ВестиРасчетыПоЗаказам");
	КонецЕсли;
	
КонецПроцедуры //ЗагрузкаЗаказНачалоВыбора()

// Процедура - обработчик события НачалоВыбора для поля СчетНаОплату списка Загрузка.
//
&НаКлиенте
Процедура ЗагрузкаСчетНаОплатуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрокаТабличнойЧасти = Элементы.Загрузка.ТекущиеДанные;
	СтандартнаяОбработка = ПроверитьВозможностьВыбораДокумента(ТекущаяСтрокаТабличнойЧасти, НСтр("ru = 'счета на оплату'"));
	Если СтандартнаяОбработка Тогда
		СтандартнаяОбработка = ПроверитьНастройкиРасчетов(ТекущаяСтрокаТабличнойЧасти, НСтр("ru = 'счетам на оплату'"), "ВестиУчетОплатыПоСчетам");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора для поля ДокументРасчетов списка Загрузка.
//
&НаКлиенте
Процедура ЗагрузкаДокументРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрокаТабличнойЧасти = Элементы.Загрузка.ТекущиеДанные;
	СтандартнаяОбработка = ПроверитьВозможностьВыбораДокумента(ТекущаяСтрокаТабличнойЧасти, НСтр("ru = 'документа расчетов'"));
	Если СтандартнаяОбработка Тогда
		СтандартнаяОбработка = ПроверитьНастройкиРасчетов(ТекущаяСтрокаТабличнойЧасти, НСтр("ru = 'документам расчетов'"), "ВестиРасчетыПоДокументам");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора для поля ПлатежноеПоручение списка Загрузка.
//
&НаКлиенте
Процедура ЗагрузкаПлатежноеПоручениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрокаТабличнойЧасти = Элементы.Загрузка.ТекущиеДанные;
	СтандартнаяОбработка = ПроверитьВозможностьВыбораДокумента(ТекущаяСтрокаТабличнойЧасти, НСтр("ru = 'платежного поручения'"));
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении списка Загрузка.
//
&НаКлиенте
Процедура ЗагрузкаЗагружатьПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Загрузка.ТекущиеДанные;
	ЗаполнитьСуммыВыделеныхНаКлиенте(ТекСтрока);
	
	УстановитьСтраницуПодвалаНаКлиенте(ТекСтрока.Загружать);
	
КонецПроцедуры // ЗагрузкаЗагружатьПриИзменении()

&НаКлиенте
Процедура УстановитьСтраницуПодвалаНаКлиенте(ЕстьСтрокаДляЗагрузки = Ложь)
	
	Если Не ЕстьСтрокаДляЗагрузки Тогда
		ЕстьОтмеченные = ЕстьОтмеченныеСтрокиНаКлиенте();
	Иначе
		ЕстьОтмеченные = Истина;
	КонецЕсли;
	
	Если Не ЕстьОтмеченные Тогда
		Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаНетОтмеченныхСтрок;
	Иначе
		Если Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница <> Элементы.СтраницаВсеДанныеГотовыКЗагрузке Тогда
			Если НужноПоказатьСтраницуВсеДанныеГотовыКЗагрузкеНаКлиенте() Тогда
				Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаВсеДанныеГотовыКЗагрузке;
			Иначе
				Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаПредупреждающееСообщение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницуПодвалаНаСервере(ЕстьСтрокаДляЗагрузки = Ложь, ПолноеОбновлениеСтраницыПодвала = Ложь)
	
	Если Объект.Загрузка.Количество() = 0 Тогда
		Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаСписокДляЗагрузкиПуст;
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьСтрокаДляЗагрузки Тогда
		ЕстьОтмеченные = ЕстьОтмеченныеСтрокиНаСервере();
	Иначе
		ЕстьОтмеченные = Истина;
	КонецЕсли;
	
	Если Не ЕстьОтмеченные Тогда
		Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаНетОтмеченныхСтрок;
	Иначе
		Если Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаПредупреждающееСообщение ИЛИ
			Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаНетОтмеченныхСтрок ИЛИ
			ПолноеОбновлениеСтраницыПодвала Тогда
			Если НужноПоказатьСтраницуВсеДанныеГотовыКЗагрузкеНаСерврере() Тогда
				Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаВсеДанныеГотовыКЗагрузке;
			Иначе
				Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаПредупреждающееСообщение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьОтмеченныеСтрокиНаКлиенте()
	
	Для Каждого ТекущаяСтрока Из Объект.Загрузка Цикл
		Если ТекущаяСтрока.Загружать Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьОтмеченныеСтрокиНаСервере()
	
	Для Каждого ТекущаяСтрока Из Объект.Загрузка Цикл
		Если ТекущаяСтрока.Загружать Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Заполнение суммы отмеченныых.
//
&НаКлиенте
Процедура ЗаполнитьСуммыВыделеныхНаКлиенте(ТекСтрока)
	
	ТекСтрока.СуммаПоступилоВыделено = ?(ТекСтрока.Загружать, ТекСтрока.СуммаПоступило, 0);
	ТекСтрока.СуммаСписаноВыделено = ?(ТекСтрока.Загружать, ТекСтрока.СуммаСписано, 0);
	ТекСтрока.СуммаДокументаВыделено = ?(ТекСтрока.Загружать, ТекСтрока.СуммаДокумента, 0);
	ОстатокКон = ОстатокНач + Объект.Загрузка.Итог("СуммаПоступилоВыделено") - Объект.Загрузка.Итог("СуммаСписаноВыделено");
	ТекСтрока.ДокументНеЗагружен = ?(ТекСтрока.Загружать, НСтр("ru='Будет загружен'"), НСтр("ru='Не будет загружен'"))
	
КонецПроцедуры

// Заполнение суммы отмеченныых.
//
&НаСервере
Процедура ЗаполнитьСуммыВыделеныхНаСервере(ТекСтрока)
	
	ТекСтрока.СуммаПоступилоВыделено = ?(ТекСтрока.Загружать, ТекСтрока.СуммаПоступило, 0);
	ТекСтрока.СуммаСписаноВыделено = ?(ТекСтрока.Загружать, ТекСтрока.СуммаСписано, 0);
	ТекСтрока.СуммаДокументаВыделено = ?(ТекСтрока.Загружать, ТекСтрока.СуммаДокумента, 0);
	ТекСтрока.ДокументНеЗагружен = ?(ТекСтрока.Загружать, НСтр("ru='Будет загружен'"), НСтр("ru='Не будет загружен'"))
	
КонецПроцедуры

// Процедура - обработчик команды "Настройка".
//
&НаКлиенте
Процедура Настройка(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Кодировка", Объект.Кодировка);
	ПараметрыОткрытияФормы.Вставить("ВерсияФормата", Объект.ВерсияФормата);
	ПараметрыОткрытияФормы.Вставить("Программа", Объект.Программа);
	ПараметрыОткрытияФормы.Вставить("ПроводитьЗагружаемые", Объект.ПроводитьЗагружаемые);
	ПараметрыОткрытияФормы.Вставить("ЗаполнятьДолгиАвтоматически", Объект.ЗаполнятьДолгиАвтоматически);
	ПараметрыОткрытияФормы.Вставить("СоглашениеПрямогоОбменаСБанками", СоглашениеПрямогоОбменаСБанками);
	ПараметрыОткрытияФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОткрытияФормы.Вставить("АнализироватьИсториюВыбораЗначенийРеквизитов", Объект.АнализироватьИсториюВыбораЗначенийРеквизитов);
	ПараметрыОткрытияФормы.Вставить("АвтоматическиПодставлятьДокументы", Объект.АвтоматическиПодставлятьДокументы);
	ПараметрыОткрытияФормы.Вставить("НеУдалятьДокументыКоторыхНетВВыписке", Объект.НеУдалятьДокументыКоторыхНетВВыписке);
	ПараметрыОткрытияФормы.Вставить("ФормаЗагрузка", Истина);
	ПараметрыОткрытияФормы.Вставить("ЗагруженыНастройкиСчета", ЗагруженыНастройкиСчета);
	ПараметрыОткрытияФормы.Вставить("БанковскийСчетНомер", БанковскийСчетНомер);
	Если Не ПрямойОбменСБанками Тогда
		ПараметрыОткрытияФормы.Вставить("ФайлЗагрузки", Объект.ФайлЗагрузки);
	КонецЕсли;
	ПараметрыОткрытияФормы.Вставить("СтатьяДДСИсходящий", Объект.СтатьяДДСИсходящий);
	ПараметрыОткрытияФормы.Вставить("СтатьяДДСВходящий", Объект.СтатьяДДСВходящий);
	ПараметрыОткрытияФормы.Вставить("ГруппаДоступа", Объект.ГруппаДоступа);
	ПараметрыОткрытияФормы.Вставить("НастройкиОбщиеПолучены", НастройкиОбщиеПолучены);
	ПараметрыОткрытияФормы.Вставить("КонтролироватьБезопасностьОбменаСБанком", Объект.КонтролироватьБезопасностьОбменаСБанком);
	ПараметрыОткрытияФормы.Вставить("СпособЗачета", Объект.СпособЗачета);
	
	ОткрытьФорму("Обработка.СМП_КлиентБанк.Форма.ФормаНастройка",
		ПараметрыОткрытияФормы
	);
	
КонецПроцедуры // Настройка()

// Процедура - обработка оповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеНастроек" + УникальныйИдентификатор Тогда
		Объект.Кодировка = Параметр.Кодировка;
		Объект.Программа = Параметр.Программа;
		Объект.ВерсияФормата = Параметр.ВерсияФормата;
		Объект.ПроводитьЗагружаемые = Параметр.ПроводитьЗагружаемые;
		Объект.ЗаполнятьДолгиАвтоматически = Параметр.ЗаполнятьДолгиАвтоматически;
		Объект.АнализироватьИсториюВыбораЗначенийРеквизитов = Параметр.АнализироватьИсториюВыбораЗначенийРеквизитов;
		Объект.АвтоматическиПодставлятьДокументы = Параметр.АвтоматическиПодставлятьДокументы;
		Если Не ПрямойОбменСБанками Тогда
			Объект.ФайлЗагрузки = Параметр.ФайлЗагрузки;
		КонецЕсли;
		Объект.СтатьяДДСВходящий = Параметр.СтатьяДДСВходящий;
		Объект.СтатьяДДСИсходящий = Параметр.СтатьяДДСИсходящий;
		Объект.ГруппаДоступа = Параметр.ГруппаДоступа;
		Объект.НеУдалятьДокументыКоторыхНетВВыписке = Параметр.НеУдалятьДокументыКоторыхНетВВыписке;
		Объект.КонтролироватьБезопасностьОбменаСБанком = Параметр.КонтролироватьБезопасностьОбменаСБанком;
		Объект.СпособЗачета = Параметр.СпособЗачета;
		
		СохранитьНастройкиФормы();
	ИначеЕсли ИмяСобытия = "БылиСозданыКонтрагенты" Тогда
		ПрочитатьДанныеИзФайла();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

// Процедура сохраняет настройки формы.
//
&НаСервере
Процедура СохранитьНастройкиФормы()
	
	Настройки = Новый Соответствие;
	Настройки.Вставить("ФайлЗагрузки", Объект.ФайлЗагрузки);
	Настройки.Вставить("ФайлВыгрузки", Объект.ФайлВыгрузки);
	Настройки.Вставить("Программа", Объект.Программа);
	Настройки.Вставить("СтатьяДДСИсходящий", Объект.СтатьяДДСИсходящий);
	Настройки.Вставить("СтатьяДДСВходящий", Объект.СтатьяДДСВходящий);
	Настройки.Вставить("ПроводитьЗагружаемые", Объект.ПроводитьЗагружаемые);
	Настройки.Вставить("ЗаполнятьДолгиАвтоматически", Объект.ЗаполнятьДолгиАвтоматически);
	Настройки.Вставить("Кодировка", Объект.Кодировка);
	Настройки.Вставить("ВерсияФормата", Объект.ВерсияФормата);
	Настройки.Вставить("АвтоматическиПодставлятьДокументы", Объект.АвтоматическиПодставлятьДокументы);
	Настройки.Вставить("НеУдалятьДокументыКоторыхНетВВыписке", Объект.НеУдалятьДокументыКоторыхНетВВыписке);
	Настройки.Вставить("АнализироватьИсториюВыбораЗначенийРеквизитов", Объект.АнализироватьИсториюВыбораЗначенийРеквизитов);
	Настройки.Вставить("ГруппаДоступа", Объект.ГруппаДоступа);
	Настройки.Вставить("КонтролироватьБезопасностьОбменаСБанком", Объект.КонтролироватьБезопасностьОбменаСБанком);
	Настройки.Вставить("СпособЗачета", Объект.СпособЗачета);
	
	ХранилищеСистемныхНастроек.Сохранить("Обработка.СМП_КлиентБанк.Форма.ОсновнаяФорма/" + ?(ЗначениеЗаполнено(Объект.БанковскийСчет), ПолучитьНавигационнуюСсылку(Объект.БанковскийСчет), "БанковскийСчетНеУказан"), "ВыгрузкаВСбербанк", Настройки);
	
КонецПроцедуры // СохранитьНастройкиФормы()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ВыпискиБанка.Очистить();
	Если ЗначениеЗаполнено(СообщениеПрямогоОбмена) Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
			
			ВыпискиБанка.Добавить(ВыбранноеЗначение);
			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() > 0 Тогда
			
			Для Каждого Выписка Из ВыбранноеЗначение Цикл
				ВыпискиБанка.Добавить(Выписка);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ВыпискиБанка.Количество() > 0 Тогда
			
			ПрочитатьДанныеИзФайла();
			
			Элементы.НеНайденныеРеквизиты.Видимость = (ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0);
			ЭлектроннаяВыпискаБанка = ТекстСсылкиНаЭлектронныеВыписки(Объект.НачПериода, Объект.КонПериода);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("БылиСозданыКонтрагенты") Тогда
		
		ПрочитатьДанныеИзФайла();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Разобрать

&НаКлиенте
Процедура ИсторияЗагрузкиИВыгрузки(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура("ОтборТолькоЗагрузкаВ1С, ОтборТолькоВыгрузкаИз1С", Истина, Ложь);
	ОткрытьФорму("РегистрСведений.ИсторияРаботыСКлиентомБанка.ФормаСписка", ПараметрыОткрытияФормы);
	
КонецПроцедуры

// Процедура заполняет документы на импорт.
//
&НаСервере
Функция ОбновитьТаблицуКонтрагентов(НастроитьВидимостьЭлементов = Истина)
	
	ТаблицаКонтрагентов.ПолучитьЭлементы().Очистить();
	КоличествоНеНайденныхКонтрагентов = 0;
	КоличествоНеНайденныхРСчетов = 0;
	
	Для каждого СтрокаДокумента Из Объект.Загрузка Цикл
		
		Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("Строка")
		 ИЛИ ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка") Тогда
			
			// Добавляем реквизиты в табличную часть для дальнейшего использования.
			ВременнаяТаблицаКонтрагентов = РеквизитФормыВЗначение("ТаблицаКонтрагентов", Тип("ДеревоЗначений"));
			Обработки.СМП_КлиентБанк.СписокНенайденных(СтрокаДокумента, Объект.БанковскийСчет, ВременнаяТаблицаКонтрагентов, КоличествоНеНайденныхКонтрагентов, КоличествоНеНайденныхРСчетов);
			ЗначениеВРеквизитФормы(ВременнаяТаблицаКонтрагентов, "ТаблицаКонтрагентов");
		КонецЕсли;
		
	КонецЦикла;
	
	Если НастроитьВидимостьЭлементов Тогда
		НастроитьВидимостьЭлементовНаСервере();
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ТаблицаКонтрагентов", Тип("ДеревоЗначений")), УникальныйИдентификатор);
	
КонецФункции // ЗаполнитьДокументыНаИмпорт()

&НаКлиенте
Процедура ДекорацияНеНайденныеРеквизитыНажатие(Элемент)
	
	Если НЕ ПроверитьЗаполнениеРеквизитовФормы() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Получаем исходные данные.
	АдресДереваКонтрагентов = ОбновитьТаблицуКонтрагентов();
		
	ПараметрыФормыПросмотраФайла = Новый Структура("АдресДереваКонтрагентов, Заголовок, ГруппаДоступа", АдресДереваКонтрагентов, Элемент.Заголовок, Объект.ГруппаДоступа);
	ОткрытьФорму("Обработка.СМП_КлиентБанк.Форма.ФормаНеНайденныхКонтрагентов", ПараметрыФормыПросмотраФайла, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидОперацииВыделенныхСтрок(Команда)
	
	Если Элементы.Загрузка.ВыделенныеСтроки.Количество() > 1 Тогда
		ОткрытьФормуРедактированияНазначенияМножественная();
	Иначе
		ОткрытьФормуРедактированияНазначения(Элементы.Загрузка.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияНазначения(ДанныеСтроки)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеРедактированияНазначения", ЭтотОбъект,
		Новый Структура("ДанныеСтроки", ДанныеСтроки));
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Исходящий", ДанныеСтроки.Исходящий);
	ПараметрыФормы.Вставить("ВидОперации", ДанныеСтроки.ВидОперации);
	ПараметрыФормы.Вставить("СтатьяРасходов");
	ПараметрыФормы.Вставить("НазначениеПлатежа", ДанныеСтроки.НазначениеПлатежа);
	
	ОткрытьФорму("Обработка.СМП_КлиентБанк.Форма.РедактированиеНазначения", ПараметрыФормы, , , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеРедактированияНазначения(Результат, Параметры) Экспорт
	
	Если Результат  = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Параметры.ДанныеСтроки;
	ДанныеСтроки.ВидОперации = Результат.ВидОперации;
	
	Если ДанныеСтроки.Исходящий Тогда
		ДанныеСтроки.ВидОперацииСписание = ДанныеСтроки.ВидОперации;
	Иначе
		ДанныеСтроки.ВидОперацииПоступление = ДанныеСтроки.ВидОперации;
	КонецЕсли;
	
	ДанныеСтроки.СтатьяДДС = ПолучитьСтатьюДДСПоВидуОперацииПриИзменении(ДанныеСтроки.ВидОперации, ДанныеСтроки.СтатьяДДС);
	
	ДанныеСтроки.ВидОперацииНеНайденКартинка = -1;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияНазначенияМножественная()
	
	КоличествоИсходящих = 0;
	КоличествоВходящих = 0;
	ВидОперацииИсходящих = Неопределено;
	ВидОперацииВходящих = Неопределено;
	СтатьяРасходов = Неопределено;
	
	Для Каждого Строка Из Элементы.Загрузка.ВыделенныеСтроки Цикл
		
		СтрокаДанных = Объект.Загрузка.НайтиПоИдентификатору(Строка);
		
		Если СтрокаДанных.Исходящий Тогда
			
			Если ВидОперацииИсходящих <> СтрокаДанных.ВидОперации
				И КоличествоИсходящих = 0 Тогда
				ВидОперацииИсходящих = СтрокаДанных.ВидОперации;
			ИначеЕсли ВидОперацииИсходящих <> СтрокаДанных.ВидОперации Тогда 
				ВидОперацииИсходящих = Неопределено;
				СтатьяРасходов = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
			КонецЕсли;
			
			КоличествоИсходящих = КоличествоИсходящих + 1;
			
		Иначе
			
			Если ВидОперацииВходящих <> СтрокаДанных.ВидОперации
				И КоличествоВходящих = 0 Тогда
				ВидОперацииВходящих = СтрокаДанных.ВидОперации;
			ИначеЕсли ВидОперацииВходящих <> СтрокаДанных.ВидОперации Тогда
				ВидОперацииВходящих = Неопределено;
			КонецЕсли;
			
			КоличествоВходящих = КоличествоВходящих + 1;
		КонецЕсли;
		
		Если СтрокаДанных.Исходящий Тогда
			СтрокаДанных.ВидОперацииСписание = СтрокаДанных.ВидОперации;
		Иначе
			СтрокаДанных.ВидОперацииПоступление = СтрокаДанных.ВидОперации;
		КонецЕсли;
		
	КонецЦикла;
	
	оп = Новый ОписаниеОповещения("ОповещениеРедактированияНазначенияМножественная", ЭтотОбъект);
	ОткрытьФорму(
		"Обработка.СМП_КлиентБанк.Форма.РедактированиеНазначения", 
		Новый Структура("Множественный,ВидОперацииИсходящих,ВидОперацииВходящих,КоличествоИсходящих,КоличествоВходящих,СтатьяРасходов",
			Истина,
			ВидОперацииИсходящих,
			ВидОперацииВходящих,
			КоличествоИсходящих,
			КоличествоВходящих,
			СтатьяРасходов),
		,
		,
		,
		,
		оп,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеРедактированияНазначенияМножественная(Результат, Параметры) Экспорт
	
	Если Результат  = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Элементы.Загрузка.ВыделенныеСтроки Цикл
		СтрокаДанных = Объект.Загрузка.НайтиПоИдентификатору(Строка);
		
		Если СтрокаДанных.Исходящий Тогда
			СтрокаДанных.ВидОперации = Результат.ВидОперацииИсходящих;
			СтрокаДанных.ВидОперацииСписание = СтрокаДанных.ВидОперации;
		Иначе
			СтрокаДанных.ВидОперации = Результат.ВидОперацииВходящих;
			СтрокаДанных.ВидОперацииПоступление = СтрокаДанных.ВидОперации;
		КонецЕсли;
		
		СтрокаДанных.СтатьяДДС = ПолучитьСтатьюДДСПоВидуОперацииПриИзменении(СтрокаДанных.ВидОперации, СтрокаДанных.СтатьяДДС);
		СтрокаДанных.ВидОперацииНеНайденКартинка = -1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТекущийПлатеж(Команда)
	
	Если Элементы.Загрузка.ТекущиеДанные = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выберите платеж (строку), который хотите загрузить";
		Сообщение.Поле = "Объект.Загрузка";
		Сообщение.Сообщить();
	Иначе
		ЗагрузитьТекущийПлатежНаСервере(Элементы.Загрузка.ТекущиеДанные.НомерСтроки);
		
		ПрочитатьДанныеИзФайла();
	КонецЕсли;
	
КонецПроцедуры

// Процедура загружает данные из файла.
//
&НаСервере
Процедура ЗагрузитьТекущийПлатежНаСервере(НомерСтроки)
	
	ТаблицаРезультата.Очистить();
	
	РеквизитФормыВЗначение("Объект").ЗагрузитьОднуСтроку(ИмпортЗаголовок, НомерСтроки-1, ТаблицаРезультата);
	
	ВывестиТаблицуРезультата();
	ЗаписатьПротокол();
	
КонецПРоцедуры // ЗагрузитьДанныеИзФайла()

&НаСервере
Функция ПолучитьСтатьюДДСПоВидуОперацииПриИзменении(ВидОперации, СтатьяДДС)
	
	Если ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПоступлениеНаСчет") Тогда
		Возврат ДвиженияДенежныхСредствВызовСервера.ПолучитьНовоеЗначениеСтатьиДДСПоступления(ВидОперации, СтатьяДДС, Объект.СтатьяДДСВходящий, Объект.СтатьяДДСИсходящий);
	Иначе
		Возврат ДвиженияДенежныхСредствВызовСервера.ПолучитьНовоеЗначениеСтатьиДДССписания(ВидОперации, СтатьяДДС, Объект.СтатьяДДСВходящий, Объект.СтатьяДДСИсходящий);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СнятьОтметкуУВсехСтрокСПредупреждениями(Команда)
	
	ЕстьСтрокаДляЗагрузки = Ложь;
	Для каждого Строка Из Объект.Загрузка Цикл
		Если Строка.Загружать И Не (Строка.НомерКартинки = -1) Тогда
			Строка.Загружать = Ложь;
			ЗаполнитьСуммыВыделеныхНаКлиенте(Строка);
		ИначеЕсли Строка.Загружать Тогда
			ЕстьСтрокаДляЗагрузки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьСтраницуПодвалаНаКлиенте(ЕстьСтрокаДляЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если НЕ ПроверитьЗаполнениеРеквизитовФормы() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормыПросмотраФайла = Новый Структура("ТекстФайла, Кодировка", ОбработанныйТекст, Объект.Кодировка);
	ОткрытьФорму("Обработка.СМП_КлиентБанк.Форма.ФормаФайла", ПараметрыФормыПросмотраФайла, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстУкажитеСуммуВручную(ДанныеСтроки)

	Буфер = СокрЛП(СтрЗаменить(ДанныеСтроки.Сумма, " ", ""));
	Если ЗначениеЗаполнено(Буфер) Тогда
		СтрокаЗамечание = НСтр("ru = 'Укажите сумму вручную (%Буфер%)!'");
		СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Буфер%", Буфер);
	Иначе
		СтрокаЗамечание = НСтр("ru = 'Сумма не указана!'");
	КонецЕсли;
	
	Возврат СтрокаЗамечание;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(ДанныеСтроки, ПодробноеСообщение = Ложь)
	
	Если ПодробноеСообщение Тогда
		ТекстПредупреждения = НСтр("ru = 'Текущий документ готов к загрузке%1!"
				+Символы.ПС+"В других строках есть не найденные элементы или суммы не верного формата."
				+Символы.ПС+"Проверьте значения в колонках, где в заголовке стоит предупреждающий знак.'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Текущий документ готов к загрузке%1!"
				+Символы.ПС+"Проверьте значения в других строках, где есть предупреждающий знак.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Документ) Тогда
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", НСтр("ru = ' (был загружен ранее)'"));
	Иначе
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", "");
	КонецЕсли;
	
	Возврат ТекстПредупреждения;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстДокументГотовКЗагрузкеНаСервере(ДанныеСтроки, ПодробноеСообщение = Ложь)
	
	Если ПодробноеСообщение Тогда
		ТекстПредупреждения = НСтр("ru = 'Текущий документ готов к загрузке%1!"
				+Символы.ПС+"В других строках есть не найденные элементы или суммы не верного формата."
				+Символы.ПС+"Проверьте значения в колонках, где в заголовке стоит предупреждающий знак.'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Текущий документ готов к загрузке%1!"
				+Символы.ПС+"Проверьте значения в других строках, где есть предупреждающий знак.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Документ) Тогда
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", НСтр("ru = ' (был загружен ранее)'"));
	Иначе
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", "");
	КонецЕсли;
	
	Возврат ТекстПредупреждения;
	
КонецФункции

&НаКлиенте
Функция УдалитьДанныеИзОписанияОшибкиНаКлиенте(ТекстУдаления, Знач ОписаниеОшибок, ДанныеСтроки)

	НовоеОписаниеОшибок = "";
	
	СимволТекстаУдаления = СтрНайти(ОписаниеОшибок, ТекстУдаления);
	Если СимволТекстаУдаления = 0 Тогда
		НовоеОписаниеОшибок = ОписаниеОшибок;
	Иначе
		НовоеОписаниеОшибок = Лев(ОписаниеОшибок, СимволТекстаУдаления - 1);
		
		ДанныеСправаОтТекстаУдаления = Сред(ОписаниеОшибок, СимволТекстаУдаления + 1);
		СимволТочки = СтрНайти(ДанныеСправаОтТекстаУдаления, "!");
		Если СимволТочки = 0 Тогда
			СимволТочки = СтрНайти(ДанныеСправаОтТекстаУдаления, ".");
		КонецЕсли;
		Если СимволТочки <> 0 Тогда
			НовоеОписаниеОшибок = НовоеОписаниеОшибок + Сред(ДанныеСправаОтТекстаУдаления, СимволТочки + 1);
		Иначе
			СимволВосклицательногоЗнака = СтрНайти(ДанныеСправаОтТекстаУдаления, "!");
			Если СимволВосклицательногоЗнака <> 0 Тогда
				НовоеОписаниеОшибок = НовоеОписаниеОшибок + Сред(ДанныеСправаОтТекстаУдаления,
					СимволВосклицательногоЗнака + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(НовоеОписаниеОшибок) Тогда
		НовоеОписаниеОшибок = ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(ДанныеСтроки);
		УстановитьНомерКартинкиНаКлиенте(ДанныеСтроки, Ложь);
	КонецЕсли;
	
	УстановитьВидимостьЭлементовСПредупреждающимиЗнакамиНаКлиенте();
	
	Возврат НовоеОписаниеОшибок;

КонецФункции // УдалитьИзОписанияОшибки()

&НаКлиенте
Процедура ОповещениеРедактированиеКонтрагента(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Параметры.ДанныеСтроки;
	
	КонтрагентПередИзменением = ДанныеСтроки.Контрагент;
	ДоговорПередИзменением = ДанныеСтроки.Договор;
	ВидОперацииПередИзменением = ДанныеСтроки.ВидОперации;
	
	// Контрагент, договор и р/счет.
	Если (ТипЗнч(Результат.Контрагент) = Тип("СправочникСсылка.Контрагенты")) И ЗначениеЗаполнено(Результат.Контрагент) Тогда
		
		ДанныеСтроки.КонтрагентНеНайденКартинка = -1;
		ДанныеСтроки.СчетКонтрагентаНеНайденКартинка = -1;
		ДанныеСтроки.ДоговорНеНайденКартинка = -1;
		
		ДанныеСтроки.ДействиеСконтрагентом = Результат.ДействиеСконтрагентом;
		ДанныеСтроки.ДействиеСоСчетомКонтрагента = Результат.ДействиеСоСчетомКонтрагента;
		ДанныеСтроки.ДействиеСДоговором = Результат.ДействиеСДоговором;
		
		ДанныеСтроки.Контрагент = Результат.Контрагент;
		ДанныеСтроки.КонтрагентНайден = Истина;
		Если Результат.ДействиеСконтрагентом = ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С") Тогда
			ДанныеСтроки.Контрагент = ДанныеСтроки.КонтрагентИсходный;
		ИначеЕсли Результат.ДействиеСконтрагентом = ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента") Тогда
			ДанныеСтроки.Контрагент = ДанныеСтроки.КонтрагентИсходный;
		КонецЕсли;
		
		// Р/счет.
		Если ЗначениеЗаполнено(Результат.БанковскийСчетПоУмолчанию) Тогда
			ДанныеСтроки.СчетКонтрагента = Результат.БанковскийСчетПоУмолчанию;
		КонецЕсли;
		
		// Договор.
		Если ЗначениеЗаполнено(Результат.Договор) Тогда
			ДанныеСтроки.Договор = Результат.Договор;
		КонецЕсли;
		
		// Обработаем строки, где контрагент с таким же ИНН
		Если Результат.ПрименятьДляВсехСтрок Тогда // применяется для всех строк
			ИНН = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательИНН, ДанныеСтроки.ПлательщикИНН);
			КПП = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательКПП, ДанныеСтроки.ПлательщикКПП);
			Наименование = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.Получатель1, ДанныеСтроки.Плательщик1);
			Счет = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательСчет, ДанныеСтроки.ПлательщикСчет);
			
			Для Каждого Строка Из Объект.Загрузка Цикл
				Если ДанныеСтроки <> Строка И ИНН = ?(Строка.Исходящий, Строка.ПолучательИНН, Строка.ПлательщикИНН) И
					Счет = ?(Строка.Исходящий, Строка.ПолучательСчет, Строка.ПлательщикСчет) Тогда
					
					Строка.ДействиеСконтрагентом = Результат.ДействиеСконтрагентом;
					Строка.ДействиеСоСчетомКонтрагента = Результат.ДействиеСоСчетомКонтрагента;
					Строка.ДействиеСДоговором = Результат.ДействиеСДоговором;
					
					Строка.КонтрагентНеНайденКартинка = -1;
					Строка.СчетКонтрагентаНеНайденКартинка = -1;
					Строка.ДоговорНеНайденКартинка = -1;
					
					Строка.Контрагент = ДанныеСтроки.Контрагент;
					Строка.КонтрагентНайден = Истина;
					
					// Договор.
					Если ЗначениеЗаполнено(Результат.Договор) Тогда
						Строка.Договор = Результат.Договор;
					КонецЕсли;
					
					// Р/счет.
					Если ЗначениеЗаполнено(Результат.БанковскийСчетПоУмолчанию) Тогда
						Строка.СчетКонтрагента = Результат.БанковскийСчетПоУмолчанию;
					КонецЕсли;
					
					// Операция, Статья ДДС и Корреспонденция
					Если Строка.Исходящий = ДанныеСтроки.Исходящий Тогда
						Если ЗначениеЗаполнено(Результат.ВидОперации) Тогда
							УстановитьВидОперации(Строка, Результат.ВидОперации);
						КонецЕсли;
						Если ЗначениеЗаполнено(Результат.СтатьяДДС) Тогда
							Строка.СтатьяДДС = Результат.СтатьяДДС;
						КонецЕсли;
						Если ЗначениеЗаполнено(Результат.Корреспонденция) Тогда
							Строка.Корреспонденция = Результат.Корреспонденция;
						КонецЕсли;
					КонецЕсли;
					
					// Если пользователь нажал в окне действий с ключевыми реквизитами кнопку "ОК", то мы
					// убираем все предупреждения, но только когда сумма <> 0.
					Если Строка.СуммаДокумента = 0 Тогда
						Строка.ОписаниеОшибокПодТЧ = ПолучитьТекстУкажитеСуммуВручную(Строка);
					Иначе
						Строка.ОписаниеОшибокПодТЧ = ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(Строка);
					КонецЕсли;
					ПоменятьСимволПСНаПробел(Строка.ОписаниеОшибокПодТЧ);
					
					ПоказыватьЗнакПредупреждения = Ложь;
					ПодготовитьТекстПредупреждения(Строка, ПоказыватьЗнакПредупреждения);
					УстановитьНомерКартинкиНаКлиенте(Строка, ПоказыватьЗнакПредупреждения);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		
		ДанныеСтроки.ДействиеСконтрагентом = Результат.ДействиеСконтрагентом;
		ДанныеСтроки.ДействиеСоСчетомКонтрагента = Результат.ДействиеСоСчетомКонтрагента;
		ДанныеСтроки.ДействиеСДоговором = Результат.ДействиеСДоговором;
		
		ДанныеСтроки.КонтрагентНеНайденКартинка = -1;
		ДанныеСтроки.СчетКонтрагентаНеНайденКартинка = -1;
		ДанныеСтроки.ДоговорНеНайденКартинка = -1;
		
		// Р/счет.
		Если Результат.ЭтоПеремещение Тогда
			Если НЕ Результат.ЭтоПеремещениеНуженВыборКассы Тогда
				ДанныеСтроки.СчетКонтрагента = Результат.БанковскийСчетПоУмолчанию;
				ДанныеСтроки.Касса = Неопределено;
			Иначе
				ДанныеСтроки.СчетКонтрагента = Неопределено;
				ДанныеСтроки.Касса = Результат.Касса;
			КонецЕсли;
			
			НеСоздаватьНовогоКонтрагента = ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента");
			ДанныеСтроки.ДействиеСконтрагентом = НеСоздаватьНовогоКонтрагента;
			ДанныеСтроки.ДействиеСоСчетомКонтрагента = НеСоздаватьНовогоКонтрагента;
			ДанныеСтроки.ДействиеСДоговором = НеСоздаватьНовогоКонтрагента;
		КонецЕсли;
		
		// Обработаем строки, где контрагент с таким же ИНН
		Если Результат.ПрименятьДляВсехСтрок Тогда // применяется для всех строк
			ИНН          = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательИНН, ДанныеСтроки.ПлательщикИНН);
			КПП          = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательКПП, ДанныеСтроки.ПлательщикКПП);
			Наименование = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.Получатель1, ДанныеСтроки.Плательщик1);
			Счет = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательСчет, ДанныеСтроки.ПлательщикСчет);
			
			Для Каждого Строка Из Объект.Загрузка Цикл
				Если ДанныеСтроки <> Строка И ИНН = ?(Строка.Исходящий, Строка.ПолучательИНН, Строка.ПлательщикИНН) И
					Счет = ?(Строка.Исходящий, Строка.ПолучательСчет, Строка.ПлательщикСчет) Тогда
					
					Строка.КонтрагентНеНайденКартинка = -1;
					Строка.СчетКонтрагентаНеНайденКартинка = -1;
					Строка.ДоговорНеНайденКартинка = -1;
					
					Строка.ДействиеСконтрагентом = Результат.ДействиеСконтрагентом;
					Строка.ДействиеСоСчетомКонтрагента = Результат.ДействиеСоСчетомКонтрагента;
					Строка.ДействиеСДоговором = Результат.ДействиеСДоговором;
					
					// Если пользователь нажал в окне действий с ключевыми реквизитами кнопку "ОК", то мы
					// убираем все предупреждения, но только когда сумма <> 0.
					Если Строка.СуммаДокумента = 0 Тогда
						Строка.ОписаниеОшибокПодТЧ = ПолучитьТекстУкажитеСуммуВручную(Строка);
					Иначе
						Строка.ОписаниеОшибокПодТЧ = ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(Строка);
					КонецЕсли;
					ПоменятьСимволПСНаПробел(Строка.ОписаниеОшибокПодТЧ);
					
					ПоказыватьЗнакПредупреждения = Ложь;
					ПодготовитьТекстПредупреждения(Строка, ПоказыватьЗнакПредупреждения);
					УстановитьНомерКартинкиНаКлиенте(Строка, ПоказыватьЗнакПредупреждения);
					
					// Р/счет.
					Если Результат.ЭтоПеремещение Тогда
						Если НЕ Результат.ЭтоПеремещениеНуженВыборКассы Тогда
							ДанныеСтроки.СчетКонтрагента = Результат.БанковскийСчетПоУмолчанию;
							ДанныеСтроки.Касса = Неопределено;
						Иначе
							ДанныеСтроки.СчетКонтрагента = Неопределено;
							ДанныеСтроки.Касса = Результат.Касса;
						КонецЕсли;
						
						НеСоздаватьНовогоКонтрагента = ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента");
						ДанныеСтроки.ДействиеСконтрагентом = НеСоздаватьНовогоКонтрагента;
						ДанныеСтроки.ДействиеСоСчетомКонтрагента = НеСоздаватьНовогоКонтрагента;
						ДанныеСтроки.ДействиеСДоговором = НеСоздаватьНовогоКонтрагента;
					КонецЕсли;
					
					// Операция, Статья ДДС и Корреспонденция
					Если Строка.Исходящий = ДанныеСтроки.Исходящий Тогда
						Если ЗначениеЗаполнено(Результат.ВидОперации) Тогда
							УстановитьВидОперации(Строка, Результат.ВидОперации);
						КонецЕсли;
						Если ЗначениеЗаполнено(Результат.СтатьяДДС) Тогда
							Строка.СтатьяДДС = Результат.СтатьяДДС;
						КонецЕсли;
						Если ЗначениеЗаполнено(Результат.Корреспонденция) Тогда
							Строка.Корреспонденция = Результат.Корреспонденция;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

	// Сумма документа.
	Если Результат.Свойство("СуммаДокумента") Тогда
		Если Результат.СуммаДокумента > 0 Тогда
			ДанныеСтроки.СуммаДокумента = Результат.СуммаДокумента;
			ПриИзмененииСуммыДокумента(ДанныеСтроки);
		КонецЕсли;
	КонецЕсли;
	
	// Вид операции.
	Если ДанныеСтроки.ВидОперации <> Результат.ВидОперации ИЛИ ДанныеСтроки.ВидОперацииНеНайденКартинка = 0 Тогда
		УстановитьВидОперации(ДанныеСтроки, Результат.ВидОперации);
	КонецЕсли;
	
	// Документы.
	Если ДанныеСтроки.НесколькоДокументовКартинка = 0 Тогда
		ДанныеСтроки.НесколькоДокументовКартинка = -1;
	КонецЕсли;
	
	// Статья ДДС и Корреспонденция.
	ДанныеСтроки.СтатьяДДС = Результат.СтатьяДДС;
	ДанныеСтроки.Корреспонденция = Результат.Корреспонденция;
	
	//////////////////////////////////////////////////////////////////////////////////////////////////
	ПоказыватьЗнакПредупреждения = Ложь;
	
	// Если пользователь нажал в окне действий с ключевыми реквизитами кнопку "ОК", то мы
	// убираем все предупреждения, но только когда сумма <> 0.
	Если ДанныеСтроки.СуммаДокумента = 0 Тогда
		ДанныеСтроки.ОписаниеОшибокПодТЧ = ПолучитьТекстУкажитеСуммуВручную(ДанныеСтроки);
		ПоказыватьЗнакПредупреждения = Истина;
	Иначе
		ДанныеСтроки.ОписаниеОшибокПодТЧ = ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(ДанныеСтроки);
	КонецЕсли;
	ПоменятьСимволПСНаПробел(ДанныеСтроки.ОписаниеОшибокПодТЧ);
	
	УстановитьНомерКартинкиНаКлиенте(ДанныеСтроки, ПоказыватьЗнакПредупреждения);
	
	Если Не ПоказыватьЗнакПредупреждения Тогда
		УстановитьВидимостьЭлементовСПредупреждающимиЗнакамиНаКлиенте();
	КонецЕсли;
	
	Если Результат.ОбновитьТаблицуКонтрагентовПослеЗакрытияФормы Тогда
		ОбновитьТаблицуКонтрагентов();
	КонецЕсли;
	
	Элементы.ЗагрузкаНомерКартинкиДляПодвала.Обновить();
	
	// СпособЗачета
	Если КонтрагентПередИзменением <> ДанныеСтроки.Контрагент
		Или ДоговорПередИзменением <> ДанныеСтроки.Договор
		Или ВидОперацииПередИзменением <> ДанныеСтроки.ВидОперации Тогда
		
		Если КонтрагентПередИзменением <> ДанныеСтроки.Контрагент Тогда
			ОчиститьИнформациюОДокументахНаКлиенте(ДанныеСтроки);
		ИначеЕсли ДоговорПередИзменением <> ДанныеСтроки.Договор Тогда
			ДанныеСтроки.Заказ = Неопределено;
			ДанныеСтроки.СчетНаОплату = Неопределено;
			Если ЗначениеЗаполнено(ДанныеСтроки.ДокументРасчетов) И НужноОчищатьДокументРасчетов(ДанныеСтроки.ДокументРасчетов, ДанныеСтроки.Договор) Тогда
				ДанныеСтроки.ДокументРасчетов = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтроки.ПлатежноеПоручение) И НужноОчищатьДокументРасчетов(ДанныеСтроки.ПлатежноеПоручение, ДанныеСтроки.Договор) Тогда
				ДанныеСтроки.ПлатежноеПоручение = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьСпособЗачетаНаКлиенте(ДанныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НужноОчищатьДокументРасчетов(пДокументРасчетов, пДоговор)
	
	Если пДокументРасчетов.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено
		И пДокументРасчетов.Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("Договор") <> Неопределено Тогда
		Для Каждого ТекущаяСтрока Из пДокументРасчетов.РасшифровкаПлатежа Цикл
			Если ТекущаяСтрока.Договор = пДоговор Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		Возврат Истина;
	ИначеЕсли пДокументРасчетов.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
		Возврат пДокументРасчетов.Договор <> пДоговор И ЗначениеЗаполнено(пДоговор);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДанныхРасчетногоСчета(СтрокаДокумента, БанковскийСчет)
	
	СтруктураДанныхСтроки = Новый Структура;
	
	ТипКонтрагента = ?(СтрокаДокумента.ПлательщикСчет = БанковскийСчетНомер, "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
	
	СтруктураДанныхСтроки.Вставить("СЧЕТ", СтрокаДокумента[ТипКонтрагента + "СЧЕТ"]);
	
	ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ТипКонтрагента + "2"]);
	СтруктураДанныхСтроки.Вставить("ПрямыеРасчеты", ПрямыеРасчеты);
	
	Если ПрямыеРасчеты Тогда
		
		СтруктураДанныхСтроки.Вставить("Банк", СтрокаДокумента[ТипКонтрагента + "БАНК1"]);
		СтруктураДанныхСтроки.Вставить("Город", СтрокаДокумента[ТипКонтрагента + "БАНК2"]);
		СтруктураДанныхСтроки.Вставить("БИК", СтрокаДокумента[ТипКонтрагента + "БИК"]);
		СтруктураДанныхСтроки.Вставить("КоррСчет", СтрокаДокумента[ТипКонтрагента + "КОРСЧЕТ"]);
		
	Иначе
		
		СтруктураДанныхСтроки.Вставить("Банк", СтрокаДокумента[ТипКонтрагента + "3"]);
		СтруктураДанныхСтроки.Вставить("Город", СтрокаДокумента[ТипКонтрагента + "4"]);
		СтруктураДанныхСтроки.Вставить("БИК", ""); // В менеджере будем банк искать по корр. счету.
		СтруктураДанныхСтроки.Вставить("КоррСчет", СтрокаДокумента[ТипКонтрагента + "РАСЧСЧЕТ"]);
		
		СтруктураДанныхСтроки.Вставить("БанкРасчетов", СтрокаДокумента[ТипКонтрагента + "БАНК1"]);
		СтруктураДанныхСтроки.Вставить("ГородРасчетов", СтрокаДокумента[ТипКонтрагента + "БАНК2"]);
		СтруктураДанныхСтроки.Вставить("БИКРасчетов",  СтрокаДокумента[ТипКонтрагента + "БИК"]);
		СтруктураДанныхСтроки.Вставить("КоррСчетРасчетов", СтрокаДокумента[ТипКонтрагента + "КОРСЧЕТ"]);
		
	КонецЕсли;
	
	СтруктураДанныхСтроки.Вставить("БанковскийСчет", Объект.БанковскийСчет);
	СтруктураДанныхСтроки.Вставить("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
	СтруктураДанныхСтроки.Вставить("СчетБИК", ?(СтрокаДокумента.Исходящий, СтрокаДокумента.ПолучательБИК, СтрокаДокумента.ПлательщикБИК));
	
	Возврат СтруктураДанныхСтроки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДанныхДоговора(СтрокаДокумента)
	
	СтруктураДанныхСтроки = Новый Структура;
	
	СтруктураДанныхСтроки.Вставить("ДоговорНомер", СтрокаДокумента.ДоговорНомер);
	СтруктураДанныхСтроки.Вставить("ДоговорДата", СтрокаДокумента.ДоговорДата);
	СтруктураДанныхСтроки.Вставить("ДоговорВалютаРасчетов", СтрокаДокумента.ДоговорВалютаРасчетов);
	СтруктураДанныхСтроки.Вставить("ДоговорРасчетыВУсловныхЕдиницах", СтрокаДокумента.ДоговорРасчетыВУсловныхЕдиницах);
	СтруктураДанныхСтроки.Вставить("ДоговорНаименованиеЛеваяЧасть", СтрокаДокумента.ДоговорНаименованиеЛеваяЧасть);
	СтруктураДанныхСтроки.Вставить("Договор", СтрокаДокумента.Договор);
	СтруктураДанныхСтроки.Вставить("ДатаДок", СтрокаДокумента.ДатаДок);
	
	Возврат СтруктураДанныхСтроки;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияКонтрагентов(ДанныеСтроки, ИмяЗакладкиНаФорме)
	
	ИНН = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательИНН, ДанныеСтроки.ПлательщикИНН);
	КПП = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательКПП, ДанныеСтроки.ПлательщикКПП);
	Счет = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательСчет, ДанныеСтроки.ПлательщикСчет);
	Если ДанныеСтроки.Исходящий Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.Получатель1) Тогда
			Наименование = ДанныеСтроки.Получатель1;
		Иначе
			Наименование = ДанныеСтроки.Получатель;
		КОнецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДанныеСтроки.Плательщик1) Тогда
			Наименование = ДанныеСтроки.Плательщик1;
		Иначе
			Наименование = ДанныеСтроки.Плательщик;
		КОнецЕсли;
	КонецЕсли;
	
	СтруктураДанныхРасчетногоСчета = ПолучитьСтруктуруДанныхРасчетногоСчета(ДанныеСтроки, Объект.БанковскийСчет);
	СтруктураДанныхДоговора = ПолучитьСтруктуруДанныхДоговора(ДанныеСтроки);
	
	оп = Новый ОписаниеОповещения("ОповещениеРедактированиеКонтрагента", ЭтотОбъект, Новый Структура("ДанныеСтроки", ДанныеСтроки));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураДанныхРасчетногоСчета", СтруктураДанныхРасчетногоСчета);
	СтруктураПараметров.Вставить("СтруктураДанныхДоговора", СтруктураДанныхДоговора);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент", ДанныеСтроки.Контрагент);
	СтруктураПараметров.Вставить("Договор", ДанныеСтроки.Договор);
	СтруктураПараметров.Вставить("Наименование", Наименование);
	СтруктураПараметров.Вставить("ИНН", ИНН);
	СтруктураПараметров.Вставить("КПП", КПП);
	СтруктураПараметров.Вставить("НаименованиеПолное", Наименование);
	
	// Количество строк с одинаковым ИНН и номером счета.
	МассивСтрок = КонтрагентыКоличество.НайтиСтроки(Новый Структура("ИНН, Счет", ИНН, Счет));
	Если МассивСтрок.Количество() > 0 Тогда
		СтруктураПараметров.Вставить("КоличествоСтрокКонтрагента", МассивСтрок[0].КоличествоСтрок);
	Иначе
		СтруктураПараметров.Вставить("КоличествоСтрокКонтрагента", 0);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ДеньгиОтКонтрагентаПоступили", ДанныеСтроки.СуммаПоступило <> 0);
	СтруктураПараметров.Вставить("ДействиеСКонтрагентом", ДанныеСтроки.ДействиеСКонтрагентом);
	СтруктураПараметров.Вставить("ДействиеСоСчетомКонтрагента", ДанныеСтроки.ДействиеСоСчетомКонтрагента);
	СтруктураПараметров.Вставить("ДействиеСДоговором", ДанныеСтроки.ДействиеСДоговором);
	СтруктураПараметров.Вставить("ИмяЗакладкиНаФорме", ИмяЗакладкиНаФорме);
	СтруктураПараметров.Вставить("ДатаДок", ДанныеСтроки.ДатаДок);
	СтруктураПараметров.Вставить("ВидОперации", ДанныеСтроки.ВидОперации);
	СтруктураПараметров.Вставить("СтатьяДДС", ДанныеСтроки.СтатьяДДС);
	СтруктураПараметров.Вставить("Корреспонденция", ДанныеСтроки.Корреспонденция);
	СтруктураПараметров.Вставить("НазначениеПлатежа", ДанныеСтроки.НазначениеПлатежа);
	СтруктураПараметров.Вставить("Исходящий", ДанныеСтроки.Исходящий);
	НеВерныйФорматСуммы = ЕстьНеЦифрыНаКлиенте(СтрЗаменить(СтрЗаменить(СтрЗаменить(ДанныеСтроки.Сумма, ".", ""), "-", ""), ",", ""));
	СтруктураПараметров.Вставить("НеВерныйФорматСуммы", НеВерныйФорматСуммы);
	СтруктураПараметров.Вставить("Сумма", ДанныеСтроки.Сумма);
	СтруктураПараметров.Вставить("СуммаДокумента", ДанныеСтроки.СуммаДокумента);
	// Картинки (
	СтруктураПараметров.Вставить("НеВерныйФорматСуммыКартинка", ДанныеСтроки.НеВерныйФорматСуммыКартинка);
	СтруктураПараметров.Вставить("ВидОперацииНеНайденКартинка", ДанныеСтроки.ВидОперацииНеНайденКартинка);
	СтруктураПараметров.Вставить("НесколькоДокументовКартинка", ДанныеСтроки.НесколькоДокументовКартинка);
	СтруктураПараметров.Вставить("КонтрагентНеНайденКартинка", ДанныеСтроки.КонтрагентНеНайденКартинка);
	СтруктураПараметров.Вставить("СчетКонтрагентаНеНайденКартинка", ДанныеСтроки.СчетКонтрагентаНеНайденКартинка);
	СтруктураПараметров.Вставить("ДоговорНеНайденКартинка", ДанныеСтроки.ДоговорНеНайденКартинка);
	// )
	// Найдено несколько документов (
	МСтрок = ТаблицаТаблицДокументов.НайтиСтроки(Новый Структура("НомерСтрокиВТаблицеИмпорта", ДанныеСтроки.НомерСтроки - 1));
	Если МСтрок.Количество() > 0 Тогда
		СтруктураПараметров.Вставить("ТаблицаДокументов", МСтрок[0].ТаблицаНайденныхДокументов);
	Иначе
		СтруктураПараметров.Вставить("ТаблицаДокументов", Неопределено);
	КонецЕсли;
	СтруктураПараметров.Вставить("ЕстьНесколькоДокументов", ?(СтрНайти(ДанныеСтроки.ДокументНайден, НСтр("ru = 'И еще'")) > 0 ИЛИ ДанныеСтроки.НесколькоДокументовКартинка = 0, Истина, Ложь));
	СтруктураПараметров.Вставить("Документ", ДанныеСтроки.Документ);
	Если Не ПустаяСтрока(ДанныеСтроки.ОписаниеОшибок) Тогда
		СтруктураПараметров.Вставить("ОписаниеОшибок", ПодготовитьТекстПредупреждения(ДанныеСтроки));
		Если ДанныеСтроки.НомерКартинки = -1 Тогда
			СтруктураПараметров.Вставить("СтраницаОшибокТекущая", Истина);
		КонецЕсли;
	КонецЕсли;
	// )
	СтруктураПараметров.Вставить("СтатьяДДСВходящий", Объект.СтатьяДДСВходящий);
	СтруктураПараметров.Вставить("СтатьяДДСИсходящий", Объект.СтатьяДДСИсходящий);
	
	ОткрытьФорму(
		"Обработка.СМП_КлиентБанк.Форма.РедактированиеКонтрагентаДоговора",
		СтруктураПараметров,
		,
		,
		,
		,
		оп,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ПодсчитатьКонтрагентов()
	
	КонтрагентыКоличествоВрем = Новый ТаблицаЗначений;
	КонтрагентыКоличествоВрем.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	КонтрагентыКоличествоВрем.Колонки.Добавить("Счет", Новый ОписаниеТипов("Строка"));
	КонтрагентыКоличествоВрем.Колонки.Добавить("КоличествоСтрок", Новый ОписаниеТипов("Число"));
	
	Для Каждого Строка Из Объект.Загрузка Цикл
		
		ИНН = ?(Строка.Исходящий, Строка.ПолучательИНН, Строка.ПлательщикИНН);
		Счет = ?(Строка.Исходящий, Строка.ПолучательСчет, Строка.ПлательщикСчет);
		
		НоваяСтрока = КонтрагентыКоличествоВрем.Добавить();
		НоваяСтрока.ИНН = ИНН;
		НоваяСтрока.Счет = Счет;
		НоваяСтрока.КоличествоСтрок = 1;
		
	КонецЦикла;
	
	КонтрагентыКоличествоВрем.Свернуть("ИНН, Счет", "КоличествоСтрок");
	
	КонтрагентыКоличество.Загрузить(КонтрагентыКоличествоВрем);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПриАктивизацииСтроки(Элемент)
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация1Нажатие(Элемент)
	
	ТекущиеДанные = Элементы.Загрузка.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(Элементы.Загрузка.ТекущиеДанные.ОписаниеОшибок) Тогда
			ТекстПредупреждения = ПодготовитьТекстПредупреждения(Элементы.Загрузка.ТекущиеДанные);
			ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Иначе
			ПоказатьПредупреждение(Неопределено, ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(Элементы.Загрузка.ТекущиеДанные, Истина));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКонтрагентНеНайденКартинкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элементы.Загрузка.ТекущиеДанные.ОписаниеОшибок) Тогда
		ПоказатьПредупреждение(Неопределено,Элементы.Загрузка.ТекущиеДанные.ОписаниеОшибок);
	Иначе
		ПоказатьПредупреждение(Неопределено, ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(Элементы.Загрузка.ТекущиеДанные));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсортироватьПоТекущейКолонке(Команда)
	
	ИмяЭлемента =СтрЗаменить(Элементы.Загрузка.ТекущийЭлемент.Имя, "Загрузка", "");
	Объект.Загрузка.Сортировать(ИмяЭлемента+" Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсортироватьПоТекущейКолонкеПоУбыванию(Команда)
	
	ИмяЭлемента =СтрЗаменить(Элементы.Загрузка.ТекущийЭлемент.Имя, "Загрузка", "");
	Объект.Загрузка.Сортировать(ИмяЭлемента+" Убыв");
	
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьВОтдельномОкне(Команда)
	
	СтруктураСтроки = СтрокаТаблицыЗагрузкаВСтруктуру(Элементы.Загрузка.ТекущиеДанные);
	СтруктураСтроки.Вставить("БанковскийСчетВалюта", БанковскийСчетВалюта);
	
	ОткрытьФорму("Обработка.СМП_КлиентБанк.Форма.ФормаПросмотраСтроки", Новый Структура("ДанныеСтроки", СтруктураСтроки), ЭтаФорма, УникальныйИдентификатор,
		,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтрокуВПомощнике(Команда)
	
	ТекущиеДанные = Элементы.Загрузка.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОткрытьФормуРедактированияКонтрагентов(ТекущиеДанные, "ДействияСКонтрагентом");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация5Нажатие(Элемент)
	
	ОткрытьФайл(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация3Нажатие(Элемент)
	
	ИсторияЗагрузкиИВыгрузки(Неопределено);
	
КонецПроцедуры

#Область РедактированиеСтатьиДДС

&НаКлиенте
Процедура ИзменитьСтатьюДДСВВыделенныхСтроках(Команда)
	
	Если Элементы.Загрузка.ВыделенныеСтроки.Количество() > 1 Тогда
		ОткрытьФормуРедактированияСтатьиДДСМножественная();
	Иначе
		ОткрытьФормуРедактированияСтатьиДДС(Элементы.Загрузка.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтатьиДДС(ДанныеСтроки)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеРедактированияСтатьиДДС", ЭтотОбъект,
		Новый Структура("ДанныеСтроки", ДанныеСтроки));
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Исходящий", ДанныеСтроки.Исходящий);
	ПараметрыФормы.Вставить("ВидОперации", ДанныеСтроки.ВидОперации);
	ПараметрыФормы.Вставить("СтатьяРасходов");
	ПараметрыФормы.Вставить("НазначениеПлатежа", ДанныеСтроки.НазначениеПлатежа);
	ПараметрыФормы.Вставить("СтатьяДДС", ДанныеСтроки.СтатьяДДС);
	
	ОткрытьФорму("Обработка.СМП_КлиентБанк.Форма.РедактированиеСтатьиДДС", ПараметрыФормы, , , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеРедактированияСтатьиДДС(Результат, Параметры) Экспорт
	
	Если Результат  = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Параметры.ДанныеСтроки;
	ДанныеСтроки.СтатьяДДС = Результат.СтатьяДДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтатьиДДСМножественная()
	
	КоличествоИсходящих = 0;
	КоличествоВходящих = 0;
	СтатьяДДСВходящих = Неопределено;
	СтатьяДДСИсходящих = Неопределено;
	
	Для Каждого Строка Из Элементы.Загрузка.ВыделенныеСтроки Цикл
		
		СтрокаДанных = Объект.Загрузка.НайтиПоИдентификатору(Строка);
		
		Если СтрокаДанных.Исходящий Тогда
			
			Если СтатьяДДСИсходящих <> СтрокаДанных.СтатьяДДС
				И КоличествоИсходящих = 0 Тогда
				СтатьяДДСИсходящих = СтрокаДанных.СтатьяДДС;
			ИначеЕсли СтатьяДДСИсходящих <> СтрокаДанных.СтатьяДДС Тогда 
				СтатьяДДСИсходящих = Неопределено;
			КонецЕсли;
			
			КоличествоИсходящих = КоличествоИсходящих + 1;
			
		Иначе
			
			Если СтатьяДДСВходящих <> СтрокаДанных.СтатьяДДС
				И КоличествоВходящих = 0 Тогда
				СтатьяДДСВходящих = СтрокаДанных.СтатьяДДС;
			ИначеЕсли СтатьяДДСВходящих <> СтрокаДанных.СтатьяДДС Тогда
				СтатьяДДСВходящих = Неопределено;
			КонецЕсли;
			
			КоличествоВходящих = КоличествоВходящих + 1;
		КонецЕсли;
		
		Если СтрокаДанных.Исходящий Тогда
			СтрокаДанных.ВидОперацииСписание = СтрокаДанных.СтатьяДДС;
		Иначе
			СтрокаДанных.ВидОперацииПоступление = СтрокаДанных.СтатьяДДС;
		КонецЕсли;
		
	КонецЦикла;
	
	оп = Новый ОписаниеОповещения("ОповещениеРедактированияСтатьиДДСМножественная", ЭтотОбъект);
	ОткрытьФорму(
		"Обработка.СМП_КлиентБанк.Форма.РедактированиеСтатьиДДС", 
		Новый Структура("Множественный,СтатьяДДСИсходящих,СтатьяДДСВходящих,КоличествоИсходящих,КоличествоВходящих",
			Истина,
			СтатьяДДСИсходящих,
			СтатьяДДСВходящих,
			КоличествоИсходящих,
			КоличествоВходящих),
		,
		,
		,
		,
		оп,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеРедактированияСтатьиДДСМножественная(Результат, Параметры) Экспорт
	
	Если Результат  = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Элементы.Загрузка.ВыделенныеСтроки Цикл
		СтрокаДанных = Объект.Загрузка.НайтиПоИдентификатору(Строка);
		
		Если СтрокаДанных.Исходящий Тогда
			СтрокаДанных.СтатьяДДС = Результат.СтатьяДДСИсходящих;
		Иначе
			СтрокаДанных.СтатьяДДС = Результат.СтатьяДДСВходящих;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеКорреспонденции

&НаКлиенте
Процедура ИзменитьСчетКорреспонденцииВВыделенныхСтроках(Команда)
	
	Если Элементы.Загрузка.ВыделенныеСтроки.Количество() > 1 Тогда
		ОткрытьФормуРедактированияСчетаКорреспонденцииМножественная();
	Иначе
		ОткрытьФормуРедактированияСчетаКорреспонденции(Элементы.Загрузка.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСчетаКорреспонденции(ДанныеСтроки)
	
	Если ДанныеСтроки.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.Прочее") И
		ДанныеСтроки.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Прочее") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Корреспонденцию нужно устанавливать только для операции ""Прочее"".'"));
		Возврат;
	КонецЕсли;
	
	оп = Новый ОписаниеОповещения("ОповещениеРедактированияСчетаКорреспонденции", ЭтотОбъект, Новый Структура("ДанныеСтроки", ДанныеСтроки));
	ОткрытьФорму(
		"Обработка.СМП_КлиентБанк.Форма.РедактированиеКорреспонденции", 
		Новый Структура("Исходящий, ВидОперации, СтатьяРасходов, НазначениеПлатежа, Корреспонденция",
			ДанныеСтроки.Исходящий, 
			ДанныеСтроки.ВидОперации, 
			, 
			ДанныеСтроки.НазначениеПлатежа,
			ДанныеСтроки.Корреспонденция),
		,
		,
		,
		,
		оп,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеРедактированияСчетаКорреспонденции(Результат, Параметры) Экспорт
	
	Если Результат  = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Параметры.ДанныеСтроки;
	ДанныеСтроки.Корреспонденция = Результат.Корреспонденция;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСчетаКорреспонденцииМножественная()
	
	КоличествоИсходящих = 0;
	КоличествоВходящих = 0;
	КорреспонденцияВходящих = Неопределено;
	КорреспонденцияИсходящих = Неопределено;
	
	Для Каждого Строка Из Элементы.Загрузка.ВыделенныеСтроки Цикл
		
		СтрокаДанных = Объект.Загрузка.НайтиПоИдентификатору(Строка);
		
		Если СтрокаДанных.Исходящий Тогда
			
			Если КорреспонденцияИсходящих <> СтрокаДанных.Корреспонденция
				И КоличествоИсходящих = 0 Тогда
				КорреспонденцияИсходящих = СтрокаДанных.Корреспонденция;
			ИначеЕсли КорреспонденцияИсходящих <> СтрокаДанных.Корреспонденция Тогда 
				КорреспонденцияИсходящих = Неопределено;
			КонецЕсли;
			
			Если СтрокаДанных.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Прочее") Тогда
				КоличествоИсходящих = КоличествоИсходящих + 1;
			КонецЕсли;
			
		Иначе
			
			Если КорреспонденцияВходящих <> СтрокаДанных.Корреспонденция
				И КоличествоВходящих = 0 Тогда
				КорреспонденцияВходящих = СтрокаДанных.Корреспонденция;
			ИначеЕсли КорреспонденцияВходящих <> СтрокаДанных.Корреспонденция Тогда
				КорреспонденцияВходящих = Неопределено;
			КонецЕсли;
			
			Если СтрокаДанных.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.Прочее") Тогда
				КоличествоВходящих = КоличествоВходящих + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДанных.Исходящий Тогда
			СтрокаДанных.ВидОперацииСписание = СтрокаДанных.Корреспонденция;
		Иначе
			СтрокаДанных.ВидОперацииПоступление = СтрокаДанных.Корреспонденция;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоВходящих = 0 И КоличествоИсходящих = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Корреспонденцию нужно устанавливать только для операции ""Прочее"".'"));
		Возврат;
	КонецЕсли;
	
	оп = Новый ОписаниеОповещения("ОповещениеРедактированияСчетаКорреспонденцииМножественная", ЭтотОбъект);
	ОткрытьФорму(
		"Обработка.СМП_КлиентБанк.Форма.РедактированиеКорреспонденции", 
		Новый Структура("Множественный,КорреспонденцияИсходящих,КорреспонденцияВходящих,КоличествоИсходящих,КоличествоВходящих",
			Истина,
			КорреспонденцияИсходящих,
			КорреспонденцияВходящих,
			КоличествоИсходящих,
			КоличествоВходящих),
		,
		,
		,
		,
		оп,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеРедактированияСчетаКорреспонденцииМножественная(Результат, Параметры) Экспорт
	
	Если Результат  = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Элементы.Загрузка.ВыделенныеСтроки Цикл
		СтрокаДанных = Объект.Загрузка.НайтиПоИдентификатору(Строка);
		
		Если СтрокаДанных.Исходящий И
			СтрокаДанных.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Прочее") Тогда
			СтрокаДанных.Корреспонденция = Результат.КорреспонденцияИсходящих;
		ИначеЕсли СтрокаДанных.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.Прочее") Тогда
			СтрокаДанных.Корреспонденция = Результат.КорреспонденцияВходящих;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗагрузкаСчетКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Загрузка.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(ТекущиеДанные.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчета") И ЗначениеЗаполнено(ТекущиеДанные.СчетКонтрагента) Тогда
			ТекущиеДанные.СчетКонтрагентаНеНайденКартинка = -1;
			ТекущиеДанные.ОписаниеОшибокПодТЧ = УдалитьДанныеИзОписанияОшибкиНаКлиенте(НСтр("ru = 'Не найден счет контрагента'"), ТекущиеДанные.ОписаниеОшибокПодТЧ, ТекущиеДанные);
			ПоменятьСимволПСНаПробел(ТекущиеДанные.ОписаниеОшибокПодТЧ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаСчетКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Загрузка.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.СчетКонтрагентаНеНайденКартинка = 0;
		ТекущиеДанные.СчетКонтрагента = ТекущиеДанные.СчетКонтрагентаСтрока;
		
		НомерСчетаКонтрагента = СтрЗаменить(ТекущиеДанные.СчетКонтрагентаСтрока, ").", "");
		НомерСимволаОткрывающейСкобки = СтрНайти(НомерСчетаКонтрагента, "(");
		НомерСчетаКонтрагента = Сред(НомерСчетаКонтрагента, НомерСимволаОткрывающейСкобки+1);
		СтрокаДляВыводаПодТЧ = НСтр("ru = 'Не найден счет контрагента ("+НомерСчетаКонтрагента+").'");
		
		Если ПустаяСтрока(ТекущиеДанные.ОписаниеОшибокПодТЧ) Тогда
			ТекущиеДанные.ОписаниеОшибокПодТЧ = СтрокаДляВыводаПодТЧ;
		Иначе
			ТекущиеДанные.ОписаниеОшибокПодТЧ = ТекущиеДанные.ОписаниеОшибокПодТЧ + ?(СтрНайти(ТекущиеДанные.ОписаниеОшибокПодТЧ, СтрокаДляВыводаПодТЧ) = 0, СтрокаДляВыводаПодТЧ, "");
		КонецЕсли;
		ПоменятьСимволПСНаПробел(ТекущиеДанные.ОписаниеОшибокПодТЧ);
		
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УбратьПредупреждающийЗнакВоВсехКолонках(Команда)
	
	Для Каждого Строка Из Элементы.Загрузка.ВыделенныеСтроки Цикл
		СтрокаДанных = Объект.Загрузка.НайтиПоИдентификатору(Строка);
		СтрокаДанных.НомерКартинки = -1;
		УстановитьНомерКартинкиДляПодвалаНаКлиенте(СтрокаДанных);
		СтрокаДанных.КонтрагентНеНайденКартинка = -1;
		СтрокаДанных.СчетКонтрагентаНеНайденКартинка = -1;
		СтрокаДанных.ДоговорНеНайденКартинка = -1;
		СтрокаДанных.ВидОперацииНеНайденКартинка = -1;
		СтрокаДанных.НеВерныйФорматСуммыКартинка = -1;
		СтрокаДанных.НесколькоДокументовКартинка = -1;
	КонецЦикла;
	
	УстановитьВидимостьЭлементовСПредупреждающимиЗнакамиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьПредупреждающийЗнакВТекущейКолонке(Команда)
	
	Попытка
		ИмяКолонки = Элементы.Загрузка.ТекущийЭлемент.Имя;
	Исключение
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выберите в таблице ячейку с предупреждающим знаком'"), 30);
		Возврат;
	КонецПопытки;
	
	УдалятьПредупреждение = "";
	Если ИмяКолонки = "ЗагрузкаНомерКартинки" Тогда
		ИмяКолонки = "НомерКартинки";
	ИначеЕсли ИмяКолонки = "ЗагрузкаКонтрагентНеНайденКартинка" ИЛИ ИмяКолонки = "ЗагрузкаКонтрагент" Тогда
		ИмяКолонки = "КонтрагентНеНайденКартинка";
	ИначеЕсли ИмяКолонки = "ЗагрузкаВидОперацииНеНайденКартинка" ИЛИ ИмяКолонки = "ЗагрузкаВидОперацииПоступление" ИЛИ 
		ИмяКолонки = "ЗагрузкаВидОперацииСписание" ИЛИ ИмяКолонки = "ЗагрузкаВидОперации" Тогда
		ИмяКолонки = "ВидОперацииНеНайденКартинка";
		УдалятьПредупреждение = НСтр("ru = 'Проверьте операцию'");
	ИначеЕсли ИмяКолонки = "ЗагрузкаДоговорНеНайденКартинка" ИЛИ ИмяКолонки = "ЗагрузкаДоговор" Тогда
		ИмяКолонки = "ДоговорНеНайденКартинка";
	ИначеЕсли ИмяКолонки = "ЗагрузкаСчетКонтрагентаНеНайденКартинка" ИЛИ ИмяКолонки = "ЗагрузкаСчетКонтрагента" Тогда
		ИмяКолонки = "СчетКонтрагентаНеНайденКартинка";
	ИначеЕсли ИмяКолонки = "ЗагрузкаНеВерныйФорматСуммыКартинка" Тогда
		ИмяКолонки = "НеВерныйФорматСуммыКартинка";
	ИначеЕсли ИмяКолонки = "ЗагрузкаНесколькоДокументовКартинка" ИЛИ ИмяКолонки = "ЗагрузкаДокументНайден" Тогда
		ИмяКолонки = "НесколькоДокументовКартинка";
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Действие доступно для колонок с предупреждающим знаком'"), 30);
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Элементы.Загрузка.ВыделенныеСтроки Цикл
		
		СтрокаДанных = Объект.Загрузка.НайтиПоИдентификатору(Строка);
		СтрокаДанных[ИмяКолонки] = -1;
		
		Если НЕ ПустаяСтрока(УдалятьПредупреждение) Тогда
			СтрокаДанных.ОписаниеОшибокПодТЧ = УдалитьДанныеИзОписанияОшибкиНаКлиенте(УдалятьПредупреждение, СтрокаДанных.ОписаниеОшибокПодТЧ, СтрокаДанных);
			ПоменятьСимволПСНаПробел(СтрокаДанных.ОписаниеОшибокПодТЧ);
		КонецЕсли;
		
		Если ИмяКолонки <> "НомерКартинки" Тогда
			ПоказыватьЗнакПредупреждения = Ложь;
			ПодготовитьТекстПредупреждения(СтрокаДанных, ПоказыватьЗнакПредупреждения);
			УстановитьНомерКартинкиНаКлиенте(СтрокаДанных, ПоказыватьЗнакПредупреждения);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьВидимостьЭлементовСПредупреждающимиЗнакамиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидОперации(ДанныеСтроки, ВыбранноеЗначение)

	ВидОперацииПредыдущееЗначение = ДанныеСтроки.ВидОперации;
	
	ДанныеСтроки.ВидОперации = ВыбранноеЗначение;
	Если ДанныеСтроки.Исходящий Тогда
		ДанныеСтроки.ВидОперацииСписание = ВыбранноеЗначение;
	Иначе
		ДанныеСтроки.ВидОперацииПоступление = ВыбранноеЗначение;
	КонецЕсли;
	Если ДанныеСтроки.ВидОперацииНеНайденКартинка = 0 Тогда
		ДанныеСтроки.ВидОперацииНеНайденКартинка = -1;
	КонецЕсли;
	ДанныеСтроки.СтатьяДДС = ПолучитьСтатьюДДСПоВидуОперацииПриИзменении(ВыбранноеЗначение, ДанныеСтроки.СтатьяДДС);
	ДанныеСтроки.ОписаниеОшибокПодТЧ = УдалитьДанныеИзОписанияОшибкиНаКлиенте(НСтр("ru = 'Проверьте операцию'"), ДанныеСтроки.ОписаниеОшибокПодТЧ, ДанныеСтроки);
	ПоменятьСимволПСНаПробел(ДанныеСтроки.ОписаниеОшибокПодТЧ);
	
	Если ДанныеСтроки.ВидОперации = ВидОперацииПереводНаДругойСчет ИЛИ ДанныеСтроки.ВидОперации = ВидОперацииПереводСДругогоСчета Тогда
		
		Если НЕ (ВидОперацииПредыдущееЗначение = ВидОперацииПереводНаДругойСчет ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииПереводСДругогоСчета
			ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииСписаниеНаличных ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииВзносНаличных) Тогда
			ДанныеСтроки.СчетКонтрагентаИсходный = ДанныеСтроки.СчетКонтрагента;
		КонецЕсли;
		
		ЗаполнитьСчетОрганизации(ДанныеСтроки.ПолучитьИдентификатор());
		
	ИначеЕсли ДанныеСтроки.ВидОперации = ВидОперацииСписаниеНаличных ИЛИ ДанныеСтроки.ВидОперации = ВидОперацииВзносНаличных Тогда
		
		Если НЕ (ВидОперацииПредыдущееЗначение = ВидОперацииПереводНаДругойСчет ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииПереводСДругогоСчета
			ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииСписаниеНаличных ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииВзносНаличных) Тогда
			ДанныеСтроки.СчетКонтрагентаИсходный = ДанныеСтроки.СчетКонтрагента;
		КонецЕсли;
		
		Если ВидОперацииПредыдущееЗначение = ВидОперацииПереводНаДругойСчет ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииПереводСДругогоСчета Тогда
			ДанныеСтроки.СчетКонтрагента = "";
		Иначе
			ДанныеСтроки.СчетКонтрагента = "";
		КонецЕсли;
		ЗаполнитьКассуОрганизации(ДанныеСтроки.ПолучитьИдентификатор());
		
	ИначеЕсли ВидОперацииПредыдущееЗначение = ВидОперацииПереводНаДругойСчет ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииПереводСДругогоСчета
		ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииСписаниеНаличных ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииВзносНаличных Тогда
		
		ДанныеСтроки.СчетКонтрагента = ДанныеСтроки.СчетКонтрагентаИсходный;
		ДанныеСтроки.Контрагент = ДанныеСтроки.КонтрагентИсходный;
		
	ИначеЕсли ВыбранноеЗначение = ВидОПерацииОтКурьерскойКомпанииПочты Тогда
		
		ДанныеСтроки.Корреспонденция = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыСРазнымиКредиторами");
		
	КонецЕсли;
	
	ОбновитьСпособЗачетаНаКлиенте(ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетОрганизации(ИдентификаторСтроки)
	
	ВыделитьКолонкуРСКонтрагента = Ложь;
	
	СтрокаДокумента = Объект.Загрузка.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) ИЛИ
		(ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчета")
		И ТипЗнч(СтрокаДокумента.СчетКонтрагента.Владелец) = Тип("СправочникСсылка.Контрагенты"))
		Тогда
		ЗапросПоискаСчета = Новый Запрос;
		Если СтрокаДокумента.ВидОперации = ВидОперацииПереводНаДругойСчет Тогда
			СчетКонтрагента = СтрокаДокумента.ПолучательСчет;
			ИННКонтрагента = СтрокаДокумента.ПолучательИНН;
			КППКонтрагента = СтрокаДокумента.ПолучательКПП;
			Если ЗначениеЗаполнено(СтрокаДокумента.Получатель1) Тогда
				ИмяКонтрагента = СтрокаДокумента.Получатель1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Получатель;
			КонецЕсли;
			БИКСчета = СтрокаДокумента.ПолучательБИК;
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПолучательСчет);
		Иначе
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПлательщикСчет);
			СчетКонтрагента = СтрокаДокумента.ПлательщикСчет;
			ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
			КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
			Если СтрокаДокумента.Плательщик1 <> "" Тогда
				ИмяКонтрагента = СтрокаДокумента.Плательщик1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Плательщик;
			КонецЕсли;
			БИКСчета = СтрокаДокумента.ПлательщикБИК;
		КонецЕсли;
		
		Если СокрЛП(КППКонтрагента) = "0" Тогда
			КППКонтрагента = "";
		КонецЕсли;
		
		ЗапросПоискаСчета.УстановитьПараметр("ИННКонтрагента", ИННКонтрагента);
		ЗапросПоискаСчета.УстановитьПараметр("КППКонтрагента", КППКонтрагента);
		ЗапросПоискаСчета.УстановитьПараметр("ИмяКонтрагента", ИмяКонтрагента);
		ЗапросПоискаСчета.УстановитьПараметр("БИКБанка", БИКСчета);
		
		ЗапросПоискаСчета.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Владелец,
		|	БанковскиеСчета.Владелец.ИНН КАК ВладелецИНН,
		|	БанковскиеСчета.Владелец.КодПоЕДРПОУ КАК ВладелецКПП,
		|	БанковскиеСчета.Ссылка,
		|	БанковскиеСчета.НомерСчета,
		|	БанковскиеСчета.Банк.Код КАК БИК_из_Базы,
		|	Выбор Когда БанковскиеСчета.Банк.Код = &БИКБанка Тогда 1 Иначе 2 Конец КАК ПриоритетБИК,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА БанковскиеСчета.Владелец.КодПоЕДРПОУ = ""0""
		|					ТОГДА """"
		|				ИНАЧЕ БанковскиеСчета.Владелец.КодПоЕДРПОУ
		|			КОНЕЦ = &КППКонтрагента
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ПриоритетКПП,
		|	Выбор Когда БанковскиеСчета.Владелец.ИНН = &ИННКонтрагента Тогда 1 Иначе 2 Конец КАК ПриоритетИНН,
		|	Выбор Когда (БанковскиеСчета.Владелец.Наименование = &ИмяКонтрагента) 
		|		ИЛИ (Выразить(БанковскиеСчета.Владелец.НаименованиеПолное КАК Строка(1024)) = &ИмяКонтрагента) Тогда 1 Иначе 2 Конец КАК ПриоритетНаименования
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации 
		|	И БанковскиеСчета.НомерСчета = &НомерСчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетИНН,
		|	ПриоритетБИК,
		|	ПриоритетНаименования,
		|	ПриоритетКПП";
		
		РезультатЗапросаПоБС = ЗапросПоискаСчета.Выполнить();
		ВыборкаПоиска = РезультатЗапросаПоБС.Выбрать();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		
		// Нужно обработать следующую ситуацию.
		// У контрагента изменился ИНН, но номер счета остался прежним.
		// Будем в этом случае выдавать предупреждающее сообщение и предлагать создать нового контрагента, если не нашли контрагента с нужным ИНН.
		
		КонтрагентНеНайден = Истина;
		Если ВыборкаПоиска.Следующий() Тогда
			ПроверкаБИКа = Ложь;
			
			// Если в файле указан ИНН контрагента, но мы его не нашли.
			Если НЕ ПустаяСтрока(ИННКонтрагента) И ВыборкаПоиска.ПриоритетИНН = 2 И ВыборкаПоиска.ПриоритетНаименования = 2 Тогда
				
				СтрокаЗамечание = НСтр("ru = 'Банковский счет найден у контрагента с другим ИНН (%ВладелецИНН%)!'");
				Если ЗначениеЗаполнено(ВыборкаПоиска.ВладелецИНН) Тогда
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", ВыборкаПоиска.ВладелецИНН);
				Иначе
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", НСтр("ru = '<Не заполнен>'"));
				КонецЕсли;
				ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
				СтрокаДокумента.СчетКонтрагента = СтрокаЗамечание;
				СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаЗамечание;
				ВыделитьКолонкуРСКонтрагента = Истина;
				СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
				СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
				
			Иначе
				
				КонтрагентНеНайден = Ложь;
				
				СтрокаДокумента.СчетКонтрагента = ВыборкаПоиска.Ссылка;
				Контрагент = ВыборкаПоиска.Владелец;
				СтрокаДокумента.КонтрагентНеНайденКартинка = -1;
				
				// Не совпадает БИК в базе и в выписке.
				Если (ВыборкаПоиска.ПриоритетБИК = 2) Тогда
					// Проверим БИК банка. Может не совпадать. Например у разных контрагентов есть разные счета в разных банках,
					// но с одинаковым номером.
					ВыделитьКолонкуРСКонтрагента = Истина;
					СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
					
					СтрокаЗамечание = НСтр("ru = 'БИК банка счета контрагента в базе (%БИК_из_Базы%) не совпадает с БИК банка в выписке (%БИК_в_Выписке%).'");
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%БИК_из_Базы%", ?(ЗначениеЗаполнено(ВыборкаПоиска.БИК_из_Базы), ВыборкаПоиска.БИК_из_Базы, НСтр("ru = '<пустой>'")));
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%БИК_в_Выписке%", ?(ЗначениеЗаполнено(БИКСчета), БИКСчета, НСтр("ru = '<пустой>'")));
					ДобавитьЗамечание(СтрокаДокумента, 4, СтрокаЗамечание);
				КонецЕсли;
				
				// Не совпадает ИНН (в частности, когда ИНН не заполнен в ИБ.
				Если НЕ ПустаяСтрока(ИННКонтрагента) И ВыборкаПоиска.ПриоритетИНН = 2 Тогда
					СтрокаЗамечание = НСтр("ru = 'Банковский счет найден у контрагента с другим ИНН (%ВладелецИНН%)!'");
					Если ЗначениеЗаполнено(ВыборкаПоиска.ВладелецИНН) Тогда
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", ВыборкаПоиска.ВладелецИНН);
					Иначе
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", НСтр("ru = '<Не заполнен>'"));
					КонецЕсли;
					ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
					СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаЗамечание;
					ВыделитьКолонкуРСКонтрагента = Истина;
					СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
					СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если КонтрагентНеНайден Тогда
			СтрокаЗамечание = НСтр("ru = 'Не найден счет контрагента (%СчетКонтрагента%)!'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%СчетКонтрагента%", СчетКонтрагента);
			
			ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
			//СтрокаДокумента.НомерКартинки = 1;
			//УстановитьНомерКартинкиДляПодвалаНаСервере(СтрокаДокумента);
			
			СтрокаСчетКонтрагента = НСтр("ru = 'Не найден (%СчетКонтрагента%).'");
			СтрокаСчетКонтрагента = СтрЗаменить(СтрокаСчетКонтрагента, "%СчетКонтрагента%", СчетКонтрагента);
			СтрокаДокумента.СчетКонтрагента = СтрокаСчетКонтрагента;
			СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаСчетКонтрагента;
			ВыделитьКолонкуРСКонтрагента = Истина;
			СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
		КонецЕсли;
		
		// Если ИНН не указан, то в выборку попадут все контрагенты, у которых есть счет с нужным номером.
		// Если ИНН указан, то нужно сообщать только количестве счетов у контрагентов с ИНН как в выписке из банка.
		Если НЕ ПустаяСтрока(ИННКонтрагента) Тогда
			КоличествоЭлементовВВыборке = 0;
			ВыборкаПоиска.Сбросить();
			Пока ВыборкаПоиска.Следующий() Цикл
				Если ВыборкаПоиска.ВладелецИНН = ИННКонтрагента Тогда
					КоличествоЭлементовВВыборке = КоличествоЭлементовВВыборке + 1;
				КонецЕсли;
			КонецЦикла;
		Иначе
			КоличествоЭлементовВВыборке = ВыборкаПоиска.Количество();
		КонецЕсли;
		
		
		Если КоличествоЭлементовВВыборке > 1 //И 
			// Если ИНН и наименование контрагента совпадают с теми, что указаны в выписке, то не будем выдавать сообщения о нескольких РС.
			//ВыборкаПоиска.ПриоритетНаименования = 2 
			Тогда
			СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%Количество%) одинаковых банковских счетов! Проверьте контрагента и р/счет!'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Количество%", КоличествоЭлементовВВыборке);
			ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
			Если ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка") ИЛИ Не ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
				СтрокаДокумента.СчетКонтрагента = СтрокаЗамечание;
			КонецЕсли;
			СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаСчетКонтрагента;
			ВыделитьКолонкуРСКонтрагента = Истина;
			СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
			СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыделитьКолонкуРСКонтрагента Тогда
		Элементы.ЗагрузкаГруппаСчетКонтрагента.КартинкаШапки = БиблиотекаКартинок.ВниманиеВВидеТреугольника;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКассуОрганизации(ИдентификаторСтроки)
	
	СтрокаДокумента = Объект.Загрузка.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	// Определим кассу орагазинации для операций снятия наличных и взноса наличных на счет организации.
	Если СтрокаДокумента.Касса.Пустая() Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Кассы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Кассы КАК Кассы
			|ГДЕ
			|	НЕ Кассы.ПометкаУдаления
			|ИТОГИ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
			|ПО
			|	ОБЩИЕ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ВыборкаОбщийИтог.Следующий();		// Общий итог
		
		Если ВыборкаОбщийИтог.Ссылка = 1 Тогда
			
			ВыборкаДетальныеЗаписи = ВыборкаОбщийИтог.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			
			СтрокаДокумента.Касса = ВыборкаДетальныеЗаписи.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если Элементы.Загрузка.ТекущиеДанные.Исходящий Тогда
		ДвиженияДенежныхСредствВызовСервера.ЗаполнитьСписокВыбораВидовОпераций("РасходСоСчета", ДанныеВыбора);
	Иначе
		ДвиженияДенежныхСредствВызовСервера.ЗаполнитьСписокВыбораВидовОпераций("ПоступлениеНаСчет", ДанныеВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Загрузка.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьВидОперации(ТекущиеДанные, ВыбранноеЗначение);
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыДокумента(ТекущаяСтрока)
	
	Если ТекущаяСтрока.Исходящий Тогда
		ТекущаяСтрока.СуммаСписано = ТекущаяСтрока.СуммаДокумента;
		ТекущаяСтрока.СуммаСписаноСМинусом = -ТекущаяСтрока.СуммаДокумента;
	Иначе
		ТекущаяСтрока.СуммаПоступило = ТекущаяСтрока.СуммаДокумента;
	КонецЕсли;
	ТекущаяСтрока.НеВерныйФорматСуммыКартинка = -1;
	Если ТекущаяСтрока.Готовность > 3 Тогда
		ТекущаяСтрока.Готовность = 3;
	КонецЕсли;
	
	УдалятьПредупреждение = НСтр("ru = 'Укажите сумму вручную'");
	ТекущаяСтрока.ОписаниеОшибокПодТЧ = УдалитьДанныеИзОписанияОшибкиНаКлиенте(УдалятьПредупреждение, ТекущаяСтрока.ОписаниеОшибокПодТЧ, ТекущаяСтрока);
	ПоменятьСимволПСНаПробел(ТекущаяСтрока.ОписаниеОшибокПодТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводСуммыДокументаЗавершение(РезультатЗавершения, ПараметрыЗавершения) Экспорт
	
	Если Не РезультатЗавершения = Неопределено И РезультатЗавершения > 0 Тогда
	
		ТекущаяСтрока = Объект.Загрузка.НайтиПоИдентификатору(ПараметрыЗавершения);
		ТекущаяСтрока.СуммаДокумента = РезультатЗавершения;
		
		ПриИзмененииСуммыДокумента(ТекущаяСтрока);
		
		ПоказыватьЗнакПредупреждения = Ложь;
		ПодготовитьТекстПредупреждения(ТекущаяСтрока, ПоказыватьЗнакПредупреждения);
		УстановитьНомерКартинкиНаКлиенте(ТекущаяСтрока, ПоказыватьЗнакПредупреждения);
		
		УстановитьВидимостьЭлементовСПредупреждающимиЗнакамиНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПротокол(Команда)
	
	Элементы.Загрузить.КнопкаПоУмолчанию = Истина;
	Элементы.СтраницыЗагрузкаИПротокол.ТекущаяСтраница = Элементы.СтраницаЗагрузка;
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация13Нажатие(Элемент)
	
	Элементы.ЗакрытьПротокол.КнопкаПоУмолчанию = Истина;
	Элементы.СтраницыЗагрузкаИПротокол.ТекущаяСтраница = Элементы.СтраницаПротокол;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКорреспонденцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормыВыбора = Новый Структура("Отбор", ПолучитьСтруктуруПараметровВыбора(Элементы.Загрузка.ТекущиеДанные.Исходящий));
	ОткрытьФорму("ПланСчетов.Управленческий.ФормаВыбора", ПараметрыФормыВыбора, ЭтотОбъект, УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("ЗагрузкаКорреспонденцияНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПараметровВыбора(Исходящий)
	
	СтруктураПараметровВыбора = Новый Структура;
	Если Исходящий Тогда
		ПараметрыВыбора = Метаданные.Документы.РасходСоСчета.Реквизиты.Корреспонденция.ПараметрыВыбора;
	Иначе
		ПараметрыВыбора = Метаданные.Документы.ПоступлениеНаСчет.Реквизиты.Корреспонденция.ПараметрыВыбора;
	КонецЕсли;
	
	Для каждого ТекущийПараметрВыбора Из ПараметрыВыбора Цикл
		Если ТекущийПараметрВыбора.Имя = "Отбор.ТипСчета" Тогда
			СтруктураПараметровВыбора.Вставить("ТипСчета", ТекущийПараметрВыбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПараметровВыбора;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузкаКорреспонденцияНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Загрузка.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Корреспонденция = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаНомерКартинкиДляПодвалаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Загрузка.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Загрузка.ТекущиеДанные.ОписаниеОшибок) Тогда
		ТекстПредупреждения = ПодготовитьТекстПредупреждения(Элементы.Загрузка.ТекущиеДанные);
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	Иначе
		ПоказатьПредупреждение(Неопределено, ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(Элементы.Загрузка.ТекущиеДанные, Истина));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаНомерКартинкиДляПодвалаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Загрузка.ТекущиеДанные.ОписаниеОшибок) Тогда
		ТекстПредупреждения = ПодготовитьТекстПредупреждения(Элементы.Загрузка.ТекущиеДанные);
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	Иначе
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		ПоказатьПредупреждение(Неопределено, ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(Элементы.Загрузка.ТекущиеДанные, Истина));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПлатежноеПоручениеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Загрузка.ТекущиеДанные;
	Если НЕ ТекущаяСтрока.ПлатежноеПоручение.Пустая() И ТекущаяСтрока.Исходящий Тогда
		ДанныеСтруктура = ЗагрузкаПлатежноеПоручениеПриИзмененииНаСервере(ТекущаяСтрока.ПлатежноеПоручение);
		Если ДанныеСтруктура.ВидОперации <> Неопределено Тогда
			УстановитьВидОперации(ТекущаяСтрока, ДанныеСтруктура.ВидОперации);
		КонецЕсли;
		ТекущаяСтрока.Корреспонденция = ДанныеСтруктура.Корреспонденция;
		ТекущаяСтрока.СтатьяДДС = ДанныеСтруктура.Статья;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузкаПлатежноеПоручениеПриИзмененииНаСервере(ПлатежноеПоручение)
	
	ДанныеСтруктура = Новый Структура;
	
	ВидОперации = Неопределено;
	
	Если ПлатежноеПоручение.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога") Тогда
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Налоги");
	ИначеЕсли ПлатежноеПоручение.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Зарплата") Тогда
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Зарплата");
	ИначеЕсли ПлатежноеПоручение.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ЛичныеСредстваПредпринимателя") Тогда
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя");
	ИначеЕсли ПлатежноеПоручение.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.НаРасходы") Тогда
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.НаРасходы");
	ИначеЕсли ПлатежноеПоручение.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет") Тогда
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет");
	ИначеЕсли ПлатежноеПоручение.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Покупателю") Тогда
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Покупателю");
	ИначеЕсли ПлатежноеПоручение.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Прочее") Тогда
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Прочее");
	ИначеЕсли ПлатежноеПоручение.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПрочиеРасчеты") Тогда
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ПрочиеРасчеты");
	Иначе
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Поставщику");
	КонецЕсли;
	
	ДанныеСтруктура.Вставить("ВидОперации", ВидОперации);
	ДанныеСтруктура.Вставить("Корреспонденция", ПлатежноеПоручение.Корреспонденция);
	ДанныеСтруктура.Вставить("Статья", ПлатежноеПоручение.Статья);
	
	Возврат ДанныеСтруктура;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузкаДокументРасчетовПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Загрузка.ТекущиеДанные;
	ТекущаяСтрока.ПризнакАванса = НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДокументРасчетов);
	
	УстановитьСпособРаспределенияОплаты();
	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	ОписаниеОповещенияОбОтветеНаВопрос = Новый ОписаниеОповещения("БанковскийСчетПриИзмененииЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещенияОбОтветеНаВопрос, НСтр("ru = 'Данные будут обновлены из файла, продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПриУстановкеОтбораПоБанковскомуСчету();
		ЗагрузкаОбновитьВыполнить(Неопределено);
		ОбновитьИнформациюОбОстаткахНаСчете();
		БанковскийСчетПередИзменением = Объект.БанковскийСчет;
	Иначе
		Объект.БанковскийСчет = БанковскийСчетПередИзменением;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДоговорПриИзменении(Элемент)
	
	СтрокаДокумента = Элементы.Загрузка.ТекущиеДанные;
	Если СтрокаДокумента <> Неопределено Тогда
		ОбновитьСпособЗачетаНаКлиенте(СтрокаДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОперацияГдеВозможныАвторасчеты(пВидОперации)
	
	Возврат (пВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПокупателя")
		Или пВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Поставщику"));
	
КонецФункции

&НаКлиенте
Процедура ЗагрузкаСпособЗачетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Загрузка.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПриИзмененииСпособаЗачета(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСпособаЗачета(пТекущаяСтрока)
	
	Если пТекущаяСтрока.СпособЗачетаТЧ = СпособЗачетаАвтоматически Тогда
		ОчиститьИнформациюОДокументахНаКлиенте(пТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИнформациюОДокументахНаКлиенте(пСтрока)
	
	пСтрока.Заказ = Неопределено;
	пСтрока.СчетНаОплату = Неопределено;
	// Если ПП было подставлено автоматически, то способ = Вручную.
	// Если пользователь выбрал ПП вручную, то способ = Вручную.
	// При загрузке выписки данные будут заполнен из ПП (кроме суммы и некоторых других реквизитов).
	пСтрока.ПлатежноеПоручение = Неопределено;
	пСтрока.ДокументРасчетов = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСпособВоВсехСтроках(Команда)
	
	ОписаниеОповещенияВводаЗначения = Новый ОписаниеОповещения("ИзменитьСпособВоВсехСтрокахЗавершение", ЭтотОбъект);
	
	Список = Новый СписокЗначений;
	Список.Добавить(СпособЗачетаВручную);
	Список.Добавить(СпособЗачетаАвтоматически);
	Список.Добавить(НСтр("ru = '<по умолчанию>'"));
	
	Список.ПоказатьВыборЭлемента(ОписаниеОповещенияВводаЗначения, НСтр("ru = 'Выберите способ распределения оплаты'"), Список.Получить(0));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСпособВоВсехСтрокахЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		НовыйСпособРаспределения = ВыбранныйЭлемент.Значение;
		Если ТипЗнч(НовыйСпособРаспределения) = Тип("Строка") Тогда
			УстановитьСпособЗачетаПоУмолчаниюДляВсехСтрок();
		Иначе
			Для Каждого ТекущаяСтрока Из Объект.Загрузка Цикл
				Если ТекущаяСтрока.СпособЗачетаТЧ <> НовыйСпособРаспределения
					И ЭтоОперацияГдеВозможныАвторасчеты(ТекущаяСтрока.ВидОперации) Тогда
					ТекущаяСтрока.СпособЗачетаТЧ = НовыйСпособРаспределения;
					ПриИзмененииСпособаЗачета(ТекущаяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСпособЗачетаПоУмолчаниюДляВсехСтрок()
	Для Каждого ТекущаяСтрока Из Объект.Загрузка Цикл
		УстановитьСпособЗачетаПоУмолчанию(ТекущаяСтрока)
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаСчетНаОплатуПриИзменении(Элемент)
	УстановитьСпособРаспределенияОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаЗаказПриИзменении(Элемент)
	УстановитьСпособРаспределенияОплаты();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСпособРаспределенияОплаты()
	ТекущаяСтрокаТабличнойЧасти = Элементы.Загрузка.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущаяСтрокаТабличнойЧасти.СчетНаОплату)
		Или ЗначениеЗаполнено(ТекущаяСтрокаТабличнойЧасти.ДокументРасчетов)
		Или ЗначениеЗаполнено(ТекущаяСтрокаТабличнойЧасти.Заказ) Тогда
		ТекущаяСтрокаТабличнойЧасти.СпособЗачетаТЧ = СпособЗачетаВручную;
	КонецЕсли;
КонецПроцедуры


#Область СМП_РаботаСБанками

&НаСервере
Процедура СМП_ЗаполнитьДокументыНаИмпортОбработкой(Обработка, ХранФайлаЗагрузки)
	Попытка
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ФайлВХранилище = ПолучитьИзВременногоХранилища(ХранФайлаЗагрузки);
		
		Если ТипЗнч(ФайлВХранилище) = Тип("ДвоичныеДанные") Тогда
			ФайлВХранилище.Записать(ИмяВременногоФайла);
		Иначе
			ТекстовыйФайл = Новый ТекстовыйДокумент;
			ТекстовыйФайл.УстановитьТекст(ФайлВХранилище);
			ТекстовыйФайл.Записать(ИмяВременногоФайла,КодировкаТекста.Системная);
		КонецЕсли;
		
		ИмяФайла = ПолучитьИмяВременногоФайла("epf");
		ОбработкаОткр = Обработка.ХранилищеОбработки.Получить();
		ОбработкаОткр.Записать(ИмяФайла);
		ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
		ВнешняяОбработка.Загрузить_УНФ(ЭтаФорма, ИмяВременногоФайла, РеквизитФормыВЗначение("ТаблицаТаблицДокументов"), РеквизитФормыВЗначение("ТаблицаКонтрагентов", Тип("ДеревоЗначений")));
		УдалитьФайлы(ИмяФайла);
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с банком'"), 
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось загрузить по причине: %1'"),
		ОписаниеОшибки()));
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ОписаниеОшибки());
		
		Возврат;
		
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура СМП_ЗаполнитьДокументыНаИмпортПоСправочнику(ЭлСправочника)
	
	Попытка
		Справочники.СМП_УчетныеЗаписиБанков.ЗагрузитьВыпискуЧерезAPI(
		ЭтаФорма, 
		ЭлСправочника, 
		РеквизитФормыВЗначение("ТаблицаТаблицДокументов"), 
		РеквизитФормыВЗначение("ТаблицаКонтрагентов", Тип("ДеревоЗначений")));
	Исключение
		
		ЗаписьЖурналаРегистрации(нСтр("ru='Обмен с банком'; uk='Обмін з банком'"), 
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		СтрШаблон(
		нСтр("ru='Не удалось подключиться по причине: %1'; uk='Не вдалося підключитися з наступної причини: %1'"),
		ОписаниеОшибки()));
		
		Возврат;
		
	КонецПопытки;
	
	ОбновитьИнформациюОбОстаткахНаСчете();
	
КонецПроцедуры

Функция СМП_ПолучитьФорматФайла()
	ОбработкаПротокола = КлиентБанкВызовСервера.СМП_ПолучитьОбработкуПротокола(Объект.БанковскийСчет);
	Если ЗначениеЗаполнено(ОбработкаПротокола) И ТИПЗНЧ(ОбработкаПротокола) <> ТИП("СправочникСсылка.СМП_УчетныеЗаписиБанков") Тогда
		Попытка
			ИмяФайла = ПолучитьИмяВременногоФайла("epf");
			ОбработкаОткр = ОбработкаПротокола.ХранилищеОбработки.Получить();
			ОбработкаОткр.Записать(ИмяФайла);
			ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
			Формат = ВнешняяОбработка.ФорматФайла();
			УдалитьФайлы(ИмяФайла);
			Возврат Формат;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат "xml";
	
КонецФункции

#КонецОбласти


&НаКлиенте
Процедура СоздатьДлительнуюОперациюЗагрузкиВыписки()
	
	ДлительнаяОперация = ДлительнаяОперацияЗагрузкиВыписки();
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеЗагрузкиБанковскойВыписки", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДлительнаяОперацияЗагрузкиВыписки()
	
	Если НЕ ПослеЗагрузкиВыписокВ1С Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураДанныхЗагрузки = Неопределено;
	
	// Подготавливаем структуры обработки данных.
	ДокументыКИмпорту = Объект.Загрузка.Выгрузить();
	ДокументыКИмпорту.Колонки.Добавить("КодНазПлатежа", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1)));
	
	КонтекстФормы = Новый Структура;
	КонтекстФормы.Вставить("ДокументыКИмпорту", ДокументыКИмпорту);
	КонтекстФормы.Вставить("ТаблицаПомеченныхНаУдалениеКакДубль", РеквизитФормыВЗначение("ТаблицаПомеченныхНаУдалениеКакДубль", Тип("ТаблицаЗначений")));
	КонтекстФормы.Вставить("ТаблицаРезультата", РеквизитФормыВЗначение("ТаблицаРезультата",Тип("ТаблицаЗначений")));
	
	СтруктураЗаголовка = Новый Структура;
	Если ТипЗнч(ИмпортЗаголовок) = Тип("Структура") Тогда
		Для каждого КлючЗначение Из ИмпортЗаголовок Цикл
			СтруктураЗаголовка.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	КонтекстФормы.Вставить("ИмпортЗаголовок", СтруктураЗаголовка);
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Организация",						  Объект.Организация);
	СтруктураОбъекта.Вставить("БанковскийСчет",						  Объект.БанковскийСчет);
	СтруктураОбъекта.Вставить("ЗаполнятьДолгиАвтоматически",		  Объект.ЗаполнятьДолгиАвтоматически);
	СтруктураОбъекта.Вставить("ПроводитьЗагружаемые",				  Объект.ПроводитьЗагружаемые);
	СтруктураОбъекта.Вставить("ДатаГраницыОбработки",				  Объект.ДатаГраницыОбработки);
	СтруктураОбъекта.Вставить("ИспользоватьГраницуОбработки",		  Объект.ИспользоватьГраницуОбработки);
	СтруктураОбъекта.Вставить("ГруппаДоступа", 						  Объект.ГруппаДоступа);
	СтруктураОбъекта.Вставить("НеУдалятьДокументыКоторыхНетВВыписке", Объект.НеУдалятьДокументыКоторыхНетВВыписке);
	СтруктураОбъекта.Вставить("ИмпортРасчетныеСчета", 				  Объект.ИмпортРасчетныеСчета.Выгрузить());
	
	КонтекстФормы.Вставить("Объект", СтруктураОбъекта);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	Операция = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Обработки.СМП_КлиентБанк.Загрузить", КонтекстФормы);
	
	Возврат Операция;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗагрузкиБанковскойВыписки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда //Не локализуется
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон("%1: %2",Результат.Статус, Результат.КраткоеПредставлениеОшибки));
		Возврат;
	КонецЕсли;
	
	ПослеЗагрузкиБанковскойВыпискиНаСервере(Результат);
	
	//СМП_РаботаСБанками +++
	//СоздатьДлительнуюОперациюОбработкиВыписки();
	
	СМП_УчетныеЗаписиБанков = КлиентБанкВызовСервера.СМП_ПолучитьОбработкуПротокола(Объект.БанковскийСчет);
	
	Если ЗначениеЗаполнено(СМП_УчетныеЗаписиБанков) тогда
		Если ТИПЗНЧ(СМП_УчетныеЗаписиБанков) = ТИП("СправочникСсылка.СМП_УчетныеЗаписиБанков") тогда
			СМП_ЗаполнитьДокументыНаИмпортПоСправочнику(СМП_УчетныеЗаписиБанков);
		Иначе
			ДвоичДанные = Новый ДвоичныеДанные(Объект.ФайлЗагрузки);
			АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичДанные, Новый УникальныйИдентификатор);
			СМП_ЗаполнитьДокументыНаИмпортОбработкой(СМП_УчетныеЗаписиБанков, АдресХранилища);
		КонецЕсли;
	Иначе
		СоздатьДлительнуюОперациюОбработкиВыписки();
	КонецЕсли;
	//СМП_РаботаСБанками ---
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗагрузкиБанковскойВыпискиНаСервере(Результат)
	
	КонтекстФормы = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если КонтекстФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтекстФормы.ОбработкаПрервана Тогда
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, КонтекстФормы.ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультата.Загрузить(КонтекстФормы.ТаблицаРезультата);
	ТаблицаПомеченныхНаУдалениеКакДубль.Загрузить(КонтекстФормы.ТаблицаПомеченныхНаУдалениеКакДубль);
	СтруктураДанныхЗагрузки = КонтекстФормы.ДанныеЗагрузки;
	
КонецПроцедуры

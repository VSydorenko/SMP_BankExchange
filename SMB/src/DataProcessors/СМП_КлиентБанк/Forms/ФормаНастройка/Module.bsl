#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Кодировка") Тогда
		ТекущаяКодировка = Параметры.Кодировка;
		Если ТекущаяКодировка = "Windows" ИЛИ ТекущаяКодировка = "DOS" ИЛИ ТекущаяКодировка = "Авто" Тогда
			Кодировка = ТекущаяКодировка;
			КодировкаПроизвольная = "";
		Иначе
			Кодировка = "Другая";
			КодировкаПроизвольная = Параметры.Кодировка;
		КонецЕсли;
		КодировкаПриИзмененииНаСервере();
	Иначе
		Элементы.Кодировка.Видимость = Ложь;
		Элементы.КодировкаПроизвольная.Доступность = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ВерсияФормата") Тогда
		ВерсияФормата = Параметры.ВерсияФормата;
	Иначе
		Элементы.ВерсияФормата.Видимость = Ложь;
	КонецЕсли;
	
	//СМП_РаботаСБанками +++
	//Если Параметры.Свойство("Программа") Тогда
	//	Программа = Параметры.Программа;
	//Иначе
	//	Элементы.Программа.Видимость = Ложь;
	//КонецЕсли;
	ПрямойОбменСБанками = Ложь;
	
	//Если Параметры.Свойство("ОбработкаПротокола") Тогда
	//	ОбработкаПротокола = Параметры.ОбработкаПротокола;
	//Иначе
	//	Элементы.ОбработкаПротокола.Видимость = Ложь;
	//КонецЕсли;
	//СМП_РаботаСБанками ---
	
	Если Параметры.Свойство("СтатьяДДСИсходящий") Тогда
		СтатьяДДСИсходящий = Параметры.СтатьяДДСИсходящий;
	Иначе
		Элементы.СтатьяДДСИсходящий.Видимость = Ложь;
	КонецЕсли;

	Если Параметры.Свойство("СтатьяДДСВходящий") Тогда
		СтатьяДДСВходящий = Параметры.СтатьяДДСВходящий;
	Иначе
		Элементы.СтатьяДДСВходящий.Видимость = Ложь;
	КонецЕсли;

	Если Параметры.Свойство("ГруппаДоступа") Тогда
		ГруппаДоступа = Параметры.ГруппаДоступа;
	Иначе
		Элементы.ГруппаДоступа.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ПроводитьЗагружаемые") Тогда
		ПроводитьЗагружаемые = Параметры.ПроводитьЗагружаемые;
	Иначе
		Элементы.ПроводитьЗагружаемые.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗаполнятьДолгиАвтоматически") Тогда
		ЗаполнятьДолгиАвтоматически = Параметры.ЗаполнятьДолгиАвтоматически;
	Иначе
		Элементы.ЗаполнятьДолгиАвтоматически.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("АнализироватьИсториюВыбораЗначенийРеквизитов") Тогда
		АнализироватьИсториюВыбораЗначенийРеквизитов = Параметры.АнализироватьИсториюВыбораЗначенийРеквизитов;
	Иначе
		Элементы.АнализироватьИсториюВыбораЗначенийРеквизитов.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("АвтоматическиПодставлятьДокументы") Тогда
		АвтоматическиПодставлятьДокументы = Параметры.АвтоматическиПодставлятьДокументы;
	Иначе
		Элементы.АвтоматическиПодставлятьДокументы.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("НеУдалятьДокументыКоторыхНетВВыписке") Тогда
		НеУдалятьДокументыКоторыхНетВВыписке = Параметры.НеУдалятьДокументыКоторыхНетВВыписке;
	Иначе
		Элементы.НеУдалятьДокументыКоторыхНетВВыписке.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ФайлВыгрузки") Тогда
		ФайлВыгрузки = Параметры.ФайлВыгрузки;
	Иначе
		Элементы.ФайлВыгрузки.Видимость = Ложь;
		Элементы.СформироватьУникальноеИмяФайла.Видимость = Ложь;
		Элементы.КонтролироватьБезопасностьОбменаСБанком.Видимость = Ложь;
	КонецЕсли;

	Если Параметры.Свойство("КонтролироватьБезопасностьОбменаСБанком") Тогда
		КонтролироватьБезопасностьОбменаСБанком = Параметры.КонтролироватьБезопасностьОбменаСБанком;
	Иначе
		КонтролироватьБезопасностьОбменаСБанком = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ФайлЗагрузки") Тогда
		ФайлЗагрузки = Параметры.ФайлЗагрузки;
	Иначе
		Элементы.ФайлЗагрузки.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ВыборНазванияПрограммы") Тогда
		ВыборНазванияПрограммы = Параметры.ВыборНазванияПрограммы;
		Если ВыборНазванияПрограммы Тогда
			Элементы.Программа.АктивизироватьПоУмолчанию = ВыборНазванияПрограммы;
			Элементы.Программа.АвтоВыборНезаполненного = ВыборНазванияПрограммы;
			Элементы.Программа.ОтметкаНезаполненного = ВыборНазванияПрограммы;
		КонецЕсли;
	Иначе
		ВыборНазванияПрограммы = Ложь;
	КонецЕсли;
	//СМП_РаботаСБанками +++
	//Параметры.Свойство("СоглашениеПрямогоОбменаСБанками", СоглашениеПрямогоОбменаСБанками);
	//Если ЗначениеЗаполнено(СоглашениеПрямогоОбменаСБанками) Тогда
	//	Элементы.ГруппаВидыОбмена.ТекущаяСтраница = Элементы.ГруппаПрямойОбмен;
	//	ТекстНадписи = НСтр("ru = 'С банком %1 действует соглашение о прямом обмене.
	//		|Отправка подписанных платежных поручений и запрос банковской выписки осуществляется из 1С:Управление нашей фирмой.'");
	//	СообщениеПрямогоОбмена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		ТекстНадписи, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеПрямогоОбменаСБанками, "Контрагент"));
	//		
	//	Элементы.ФайлЗагрузки.Видимость = Ложь;
	//	Элементы.ФайлВыгрузки.Видимость = Ложь;
	//	Элементы.СформироватьУникальноеИмяФайла.Видимость = Ложь;
	//	Элементы.КонтролироватьБезопасностьОбменаСБанком.Видимость = Ложь;
	//Иначе
	//	Элементы.ГруппаВидыОбмена.ТекущаяСтраница = Элементы.ГруппаОбменЧерезФайл;
	//	СообщениеПрямогоОбмена                    = "";
	//КонецЕсли;
	//Если ЗначениеЗаполнено(БанковскийСчет) и 
	//		ТИПЗНЧ(ОбработкаПротокола) = ТИП("СправочникСсылка.СМП_УчетныеЗаписиБанков") И
	//			ЗначениеЗаполнено(ОбработкаПротокола) Тогда
	//	ПрямойОбменСБанками = Истина;
	//КонецЕсли;

	Если ПрямойОбменСБанками Тогда
		Элементы.ГруппаВидыОбмена.ТекущаяСтраница = Элементы.ГруппаПрямойОбмен;			
		Элементы.ФайлЗагрузки.Видимость = Ложь;
		Элементы.ФайлВыгрузки.Видимость = Ложь;
		Элементы.СформироватьУникальноеИмяФайла.Видимость = Ложь;
		Элементы.КонтролироватьБезопасностьОбменаСБанком.Видимость = Ложь;
	Иначе
		Элементы.ГруппаВидыОбмена.ТекущаяСтраница = Элементы.ГруппаОбменЧерезФайл;
		СообщениеПрямогоОбмена                    = "";
	КонецЕсли;
	//СМП_РаботаСБанками ---

	
	ИдентификаторВладельца = Параметры.УникальныйИдентификатор;
	
	Если Параметры.Свойство("ФормаЗагрузка") Тогда
		Элементы.ОткрытьСправочникСоответствийНазначенийПлатежаИРеквизитовДокументов.Видимость = Истина;
		Элементы.ОткрытьСписокПоследнихВыбранныхЗначений.Видимость = Истина;
	Иначе
		Элементы.ОткрытьСправочникСоответствийНазначенийПлатежаИРеквизитовДокументов.Видимость = Ложь;
		Элементы.ОткрытьСписокПоследнихВыбранныхЗначений.Видимость = Ложь;
	КонецЕсли;
	ВыводитьГруппуЗагрузкиИГруппуВыгрузки = Истина;
	Элементы.ЗначенияДляЗагружаемых.ОтображатьЗаголовок = Параметры.Свойство("ФормаЗагрузка");
	Элементы.ЗначенияДляВыгружаемых.ОтображатьЗаголовок = Параметры.Свойство("ФормаВыгрузка");
	// Если в группу выгрузки не выводится ни один элемент, то не будем ее показывать.
	// Это будет в случае прямого обмена с банком.
	//СМП_РаботаСБанками +++
	//Элементы.ЗначенияДляВыгружаемых.Видимость = СоглашениеПрямогоОбменаСБанками.Пустая();
	//СМП_РаботаСБанками ---
	Если Параметры.Свойство("ЗагруженыНастройкиСчета") И Параметры.ЗагруженыНастройкиСчета Тогда
		ТекстСчетаДляЗаголовка = НСтр("ru = ' (счет %БанковскийСчетНомер%)'");
		ТекстСчетаДляЗаголовка = СтрЗаменить(ТекстСчетаДляЗаголовка, "%БанковскийСчетНомер%", Параметры.БанковскийСчетНомер);
		
		Заголовок = Заголовок + ТекстСчетаДляЗаголовка;
	Иначе
		Заголовок = НСтр("ru = 'Общая настройка обмена с банком'");
	КонецЕсли;
	
	ЗаполнитьСписокВыбораПроизвольнойКодировки();
	
	// Способ зачета
	Если Параметры.Свойство("СпособЗачета") Тогда
		СпособЗачета = Параметры.СпособЗачета;
	Иначе
		Элементы.СпособЗачета.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФайлВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, Новый Структура("РеквизитФормы", "ФайлВыгрузки"));
	//НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
	ВыборФайлаДляВыгрузки(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект,
		Новый Структура("РеквизитФормы", "ФайлЗагрузки"));
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура КодировкаПриИзменении(Элемент)
	
	КодировкаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если (Кодировка = "Другая") И НЕ ЗначениеЗаполнено(КодировкаПроизвольная) Тогда
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выберите кодировку";
		Сообщение.Поле = "КодировкаПроизвольная";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьДолгиАвтоматическиПриИзменении(Элемент)
	
	Если ЗаполнятьДолгиАвтоматически Тогда
		АвтоматическиПодставлятьДокументы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиПодставлятьДокументыПриИзменении(Элемент)
	
	Если АвтоматическиПодставлятьДокументы Тогда
		ЗаполнятьДолгиАвтоматически = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьСправочникСоответствийНазначенийПлатежаИРеквизитовДокументов(Команда)

	ОткрытьФорму("Справочник.СоответствияНазначенийПлатежаИРеквизитовПлатежа.ФормаСписка", , , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПоследнихВыбранныхЗначений(Команда)

	ОткрытьФорму("РегистрСведений.ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.ФормаСписка", , , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьУникальноеИмяФайла(Команда)
	
	УникальноеИмяФайла = ИмяФайлаВыгрузки();
	
	Если СтрНайти(ФайлВыгрузки, "/") = 0 И СтрНайти(ФайлВыгрузки, "\") = 0 Тогда
		ФайлВыгрузки = УникальноеИмяФайла;
	Иначе
		ТекС1 = СтрНайти(ФайлВыгрузки, "/", НаправлениеПоиска.СКонца);
		ТекС2 = СтрНайти(ФайлВыгрузки, "\", НаправлениеПоиска.СКонца);
		МаксС = Макс(ТекС1, ТекС2);
		
		ФайлВыгрузки = Лев(ФайлВыгрузки, МаксС + 1) + УникальноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработка команды Ок.
//
&НаКлиенте
Процедура Ок(Команда)
	
	ВозвращаемыеПараметры = Новый Структура;
	
	Если Кодировка = "Windows" ИЛИ Кодировка = "DOS" ИЛИ Кодировка = "Авто" Тогда
		ВозвращаемыеПараметры.Вставить("Кодировка", Кодировка);
	Иначе
		ВозвращаемыеПараметры.Вставить("Кодировка", КодировкаПроизвольная);
	КонецЕсли;
	ВозвращаемыеПараметры.Вставить("Программа", Программа);
	ВозвращаемыеПараметры.Вставить("СтатьяДДСВходящий", СтатьяДДСВходящий);
	ВозвращаемыеПараметры.Вставить("СтатьяДДСИсходящий", СтатьяДДСИсходящий);
	ВозвращаемыеПараметры.Вставить("ПроводитьЗагружаемые", ПроводитьЗагружаемые);
	ВозвращаемыеПараметры.Вставить("ЗаполнятьДолгиАвтоматически", ЗаполнятьДолгиАвтоматически);
	ВозвращаемыеПараметры.Вставить("ФайлВыгрузки", ФайлВыгрузки);
	ВозвращаемыеПараметры.Вставить("ФайлЗагрузки", ФайлЗагрузки);
	ВозвращаемыеПараметры.Вставить("ВерсияФормата", ВерсияФормата);
	ВозвращаемыеПараметры.Вставить("АнализироватьИсториюВыбораЗначенийРеквизитов", АнализироватьИсториюВыбораЗначенийРеквизитов);
	ВозвращаемыеПараметры.Вставить("АвтоматическиПодставлятьДокументы", АвтоматическиПодставлятьДокументы);
	ВозвращаемыеПараметры.Вставить("НеУдалятьДокументыКоторыхНетВВыписке", НеУдалятьДокументыКоторыхНетВВыписке);
	ВозвращаемыеПараметры.Вставить("ГруппаДоступа", ГруппаДоступа);
	ВозвращаемыеПараметры.Вставить("КонтролироватьБезопасностьОбменаСБанком", КонтролироватьБезопасностьОбменаСБанком);
	ВозвращаемыеПараметры.Вставить("СпособЗачета", СпособЗачета);
	
	Оповестить("ИзменениеНастроек" + ИдентификаторВладельца, ВозвращаемыеПараметры);
	Закрыть();
	
КонецПроцедуры // Ок()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораПроизвольнойКодировки()
	
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("UTF-8");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("UTF-16");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("UTF-16BE");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("UTF-16LE");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("UTF-32");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("UTF-32BE");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("UTF-32LE");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("UTF16_PlatformEndian");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("UTF16_OppositeEndian");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("UTF32_PlatformEndian");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("UTF32_OppositeEndian");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("UTF-7");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IMAP-mailbox-name");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("SCSU");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("BOCU-1");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("CESU-8");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ISO-8859-1");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("US-ASCII");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("gb18030");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM367");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("iso-8859-2");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("iso-8859-3");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("iso-8859-4");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("iso-8859-5");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("iso-8859-6");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("iso-8859-7");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("iso-8859-8");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("iso-8859-9");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("iso-8859-13");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("iso-8859-15");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp932");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("Shift_JIS");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("EUC-JP");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp33722");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-950");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("Big5");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp950");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("Big5-HKSCS");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp1386");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("GBK");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("GB2312");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("GB_2312-80");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp964");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp949");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp949c");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("EUC-KR");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-971");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("KSC_5601");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1363");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-949");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-874");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp874");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1162");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp437");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp737");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp775");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp850");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp851");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp852");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp855");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp856");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp857");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp858");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp860");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp861");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp862");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp863");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp864");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp865");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp866");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-867");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("CP868");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp869");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("KOI8-R");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-901");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-902");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp922");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("KOI8-U");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-4909");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-1250");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-1251");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-1252");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-1253");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-1254");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-1255");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-1256");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-1257");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-1258");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("macintosh");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("x-mac-greek");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("x-mac-cyrillic");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("x-mac-centraleurroman");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("x-mac-turkish");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("hp-roman8");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("Adobe-Standard-Encoding");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp1006");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp1098");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp1124");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp1125");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1129");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp1131");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1133");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ISO-2022-JP");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("JIS_Encoding");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ISO-2022-JP-2");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ISO_2022,locale=ja,version=3");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ISO_2022,locale=ja,version=4");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ISO-2022-KR");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ISO_2022,locale=ko,version=1");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ISO-2022-CN");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ISO-2022-CN-EXT");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("HZ-GB-2312");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-57002");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-57003");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-57011");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-57010");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-57007");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-57004");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-57005");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-57008");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("windows-57009");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("LMBCS-1");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("LMBCS-2");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("LMBCS-3");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("LMBCS-4");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("LMBCS-5");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("LMBCS-6");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("LMBCS-8");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("LMBCS-11");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("LMBCS-16");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("LMBCS-17");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("LMBCS-18");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("LMBCS-19");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM037");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ebcdic-de");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ebcdic-dk");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM278");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM280");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM284");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM285");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM290");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM297");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM420");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM424");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM500");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-803");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM-Thai");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM870");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM871");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp875");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM918");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp930");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp933");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp935");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp937");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp939");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp1025");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM1026");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM1047");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp1097");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp1112");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp1122");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("cp1123");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1130");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1132");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1137");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM01140");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM01141");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM01142");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM01143");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM01144");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM01145");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM01146");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM01147");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM01148");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("IBM01149");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1153");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1154");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1155");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1156");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1157");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1158");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1160");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1164");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1364");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1371");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1388");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1390");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1399");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-5123");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-8482");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-16684");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-4899");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-4971");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ebcdic-he");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ebcdic-ar");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-37_P100-1995,swaplfnl");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1047_P100-1995,swaplfnl");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1140_P100-1997,swaplfnl");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1142_P100-1997,swaplfnl");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1143_P100-1997,swaplfnl");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1144_P100-1997,swaplfnl");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1145_P100-1997,swaplfnl");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1146_P100-1997,swaplfnl");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1147_P100-1997,swaplfnl");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1148_P100-1997,swaplfnl");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1149_P100-1997,swaplfnl");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-1153_P100-1999,swaplfnl");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-12712_P100-1998,swaplfnl");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ibm-16804_X110-1999,swaplfnl");
	Элементы.КодировкаПроизвольная.СписокВыбора.Добавить("ebcdic-xml-us");
	
КонецПроцедуры

&НаКлиенте
Функция ИмяФайлаВыгрузки()
	
	Возврат СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") + ".txt";
	
КонецФункции

&НаКлиенте
Процедура ВыборФайлаДляВыгрузки(Элемент) Экспорт
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбора.Фильтр                  = НСтр("ru = 'Текстовый файл'") + " (*.txt)|*.txt";
	ДиалогВыбора.Заголовок               = НСтр("ru = 'Выберите папку для выгрузки данных из 1C'");
	ДиалогВыбора.ПредварительныйПросмотр = Ложь;
	ДиалогВыбора.Расширение              = "txt";
	ДиалогВыбора.ИндексФильтра           = 0;
	ДиалогВыбора.ПолноеИмяФайла          = ?(ПустаяСтрока(Элемент.ТекстРедактирования),
		ИмяФайлаВыгрузки(), Элемент.ТекстРедактирования);
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаДляВыгрузкиЗавершение", ЭтотОбъект);
	ДиалогВыбора.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаДляВыгрузкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено
		И ВыбранныеФайлы.Количество()>0 Тогда
		
		ФайлВыгрузки = ВыбранныеФайлы.Получить(0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет); 
	КонецЕсли;
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = ФайлЗагрузки;
	
	//СМП_РаботаСБанками +++
	//Фильтр = "Текстовый файл(*.txt)|*.txt";
	ФорматФайла = СМП_ПолучитьФорматФайла();
	Фильтр = "Файл данных (*." + ФорматФайла + ")|*." + ФорматФайла + "";
	//СМП_РаботаСБанками ---
	
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
	
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогОткрытияФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогОткрытияФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
		Если ДополнительныеПараметры.РеквизитФормы = "ФайлЗагрузки" Тогда
			ФайлЗагрузки = ВыбранныеФайлы[0];
		Иначе
			ФайлВыгрузки = ВыбранныеФайлы[0];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КодировкаПриИзмененииНаСервере()
	
	Элементы.КодировкаПроизвольная.Доступность = (Кодировка = "Другая");
	Элементы.КодировкаПроизвольная.АвтоОтметкаНезаполненного = Элементы.КодировкаПроизвольная.Доступность;
	Элементы.КодировкаПроизвольная.ОтметкаНезаполненного = Элементы.КодировкаПроизвольная.Доступность;
	
КонецПроцедуры

#КонецОбласти


#Область СМП_РаботаСБанками

&НаСервере   

Функция СМП_ПолучитьФорматФайла()
	ОбработкаПротокола = КлиентБанкВызовСервера.СМП_ПолучитьОбработкуПротокола(Объект.БанковскийСчет);
	Если ЗначениеЗаполнено(ОбработкаПротокола) И ТИПЗНЧ(ОбработкаПротокола) <> ТИП("СправочникСсылка.СМП_УчетныеЗаписиБанков") Тогда
		Попытка
			ИмяФайла = ПолучитьИмяВременногоФайла("epf");
			ОбработкаОткр = ОбработкаПротокола.ХранилищеОбработки.Получить();
			ОбработкаОткр.Записать(ИмяФайла);
			ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
			Формат = ВнешняяОбработка.ФорматФайла();
			УдалитьФайлы(ИмяФайла);
			Возврат Формат;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат "txt";
	
КонецФункции

#КонецОбласти
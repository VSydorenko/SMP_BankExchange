#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Банк = Перечисления.СМП_ПоддерживаемыеИнтеграцииСБанками.ПриватБанк Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ПодключаемаяОбработка");
		МассивНепроверяемыхРеквизитов.Добавить("ИД");
		
	ИначеЕсли Банк = Перечисления.СМП_ПоддерживаемыеИнтеграцииСБанками.МОНОБанк Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ПодключаемаяОбработка");
		
	ИначеЕсли Банк = Перечисления.СМП_ПоддерживаемыеИнтеграцииСБанками.ПУМБ Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ПодключаемаяОбработка");
		МассивНепроверяемыхРеквизитов.Добавить("ИД");
		МассивНепроверяемыхРеквизитов.Добавить("Токен");
		
	ИначеЕсли Банк = Перечисления.СМП_ПоддерживаемыеИнтеграцииСБанками.ПодключаемаяОбработка Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ИД");
		МассивНепроверяемыхРеквизитов.Добавить("Токен");
		
	КонецЕсли;
	
	Если Банк <> Перечисления.СМП_ПоддерживаемыеИнтеграцииСБанками.ПУМБ Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Username");
		МассивНепроверяемыхРеквизитов.Добавить("password");
		МассивНепроверяемыхРеквизитов.Добавить("client_id");
		МассивНепроверяемыхРеквизитов.Добавить("client_secret");
		
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		НоваяСсылка = Справочники.СМП_УчетныеЗаписиБанков.ПолучитьСсылку();
		ЭтотОбъект.УстановитьСсылкуНового(НоваяСсылка);
	КонецЕсли;
	
	Если НЕ ЭтоНовый() И (ПометкаУдаления ИЛИ НЕ ИспользоватьРегламентноеЗадание) Тогда
		
		РегламентныеЗаданияСервер.УдалитьЗадание(ИдентификаторРегламентногоЗадания);
		
	КонецЕсли;
	
	Если НЕ ПометкаУдаления И ИспользоватьРегламентноеЗадание Тогда
		
		СоздатьОбновитьРеглЗадание();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИспользоватьРегламентноеЗадание = Ложь;
	ИдентификаторРегламентногоЗадания = Неопределено;
	РасписаниеРегламентногоЗадания = "";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// .
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СоздатьОбновитьРеглЗадание() 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ИдентификаторРегламентногоЗадания) Тогда
		
		Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторРегламентногоЗадания);
		СтароеРасписание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Ссылка, "РасписаниеРегламентногоЗадания");
		Если РасписаниеРегламентногоЗадания <> СтароеРасписание Тогда
			РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторРегламентногоЗадания, 
				Новый Структура("Расписание", ЗначениеИзСтрокиВнутр(РасписаниеРегламентногоЗадания)));
		КонецЕсли;
		
	Иначе
		
		мПараметры = Новый Массив;
		мПараметры.Добавить(ЭтотОбъект.Ссылка);
		
		сПараметрыЗадания = Новый Структура;
		сПараметрыЗадания.Вставить("Наименование", 
			СтрШаблон(НСтр("ru='Загрузка банковских выписок %1'; uk='Завантаження банківських виписок %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			Наименование));
		сПараметрыЗадания.Вставить("Использование", Истина);
		сПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.СМП_ОбменСБанкамиAPI);
		сПараметрыЗадания.Вставить("Расписание", ЗначениеИзСтрокиВнутр(РасписаниеРегламентногоЗадания));
		сПараметрыЗадания.Вставить("Параметры", мПараметры);
		
		Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(сПараметрыЗадания);
		ИдентификаторРегламентногоЗадания = Задание.УникальныйИдентификатор;
		
	КонецЕсли;
	
КонецПроцедуры //СоздатьОбновитьРеглЗадание

#КонецОбласти

#КонецЕсли
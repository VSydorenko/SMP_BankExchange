
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	//ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметры);
	КонецЕсли;
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	//ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьНомерСчета()
	
	Возврат Объект.БанковскийСчет.НомерСчета;
	
КонецФункции

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ЭтоПриватБанкAPI = Объект.Банк = Перечисления.СМП_ПоддерживаемыеИнтеграцииСБанками.ПриватБанк;
	ЭтоМоноБанкAPI = Объект.Банк = Перечисления.СМП_ПоддерживаемыеИнтеграцииСБанками.МОНОБанк;
	ЭтоФайловаяВыписка = Объект.Банк = Перечисления.СМП_ПоддерживаемыеИнтеграцииСБанками.ПодключаемаяОбработка;
	
	Элементы.ПодключаемаяОбработка.Видимость = ЭтоФайловаяВыписка;
	Элементы.ДекорацияРаботаСБанкамиПриватБанкАРІ.Видимость = ЭтоПриватБанкAPI;
	Элементы.ДекорацияРаботаСБанкамиМОНОБанкАРІ.Видимость = ЭтоМоноБанкAPI;
	Элементы.ИД.Видимость = ЭтоПриватБанкAPI; // Или ЭтоМоноБанкAPI;
	Элементы.Токен.Видимость = ЭтоПриватБанкAPI; // Или ЭтоМоноБанкAPI;
	//Элементы.ГруппаРегламентноеЗадание.Видимость = ЭтоПриватБанкAPI; // Или ЭтоМоноБанкAPI;
	Элементы.ДекорацияРазработкаМОНО.Видимость = ЭтоМоноБанкAPI;
	//Элементы.СоздаватьНенайденныеЭлементы.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	//Элементы.ГруппаДоступаДляНовыхКонтрагентов.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	
	//Не работает механизм - постоянно выдает сообщение, что нет лицензии, хотя подсистема есть
	//Если ЭтоПриватБанкAPI И Не ОбщегоНазначения.ПодсистемаСуществует("СМП_simplyUNF.РаботаСБанками.ПриватБанк") Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не обнаружена лицензия на использование интеграции с банком ПриватБанк средствами API!';
	//												|uk = 'Не знайдена ліцензія на використання інтеграції з банком ПриватБанк методами API!'"));
	//КонецЕсли;
	
	//Если ЭтоМоноБанкAPI И Не ОбщегоНазначения.ПодсистемаСуществует("СМП_simplyUNF.РаботаСБанками.МОНОБанк") Тогда
	//	ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не обнаружена лицензия на использование интеграции с банком МОНО средствами API!';
	//												|uk = 'Не знайдена ліцензія на використання інтеграції з банком МОНО методами API!'"));
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультат(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		Сообщить(Результат.КраткоеПредставлениеОшибки);
	Иначе
		
		//РезультатРаботы = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		//Если ЗначениеЗаполнено(РезультатРаботы.Ошибка) Тогда
		//	Сообщить(РезультатРаботы.Ошибка);
		//Иначе
		//	ЭтотОбъект.Прочитать();
		//	Элементы.Товары.Обновить();
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

#Область ОбработчикиСтандартныхПодсистем

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
//&НаКлиенте
//Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
//	
//	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
//	
//КонецПроцедуры // Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта()

#КонецОбласти

&НаКлиенте
Процедура ФайлВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборФайлаДляВыгрузкиИЗагрузки(Элемент, НСтр("ru='выгрузки';uk='вивантаження'"));
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборФайлаДляВыгрузкиИЗагрузки(Элемент, НСтр("ru='загрузки';uk='завантаження'"));
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура ВыборФайлаДляВыгрузкиИЗагрузки(Элемент, Режим) Экспорт
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбора.Фильтр                      = НСтр("ru='" + Объект.РасширениеФайлаИмпорта + " файл';uk='" + Объект.РасширениеФайлаИмпорта + " файл'") + " (*." + Объект.РасширениеФайлаИмпорта + ")|*." + Объект.РасширениеФайлаИмпорта;
	ДиалогВыбора.Заголовок                   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Выберите файл для %1 данных из клиента банка';uk='Виберіть файл для %1 даних з клієнта банку'"), Режим);
	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.Расширение                  = "xml";
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПолноеИмяФайла              = ?(ПустаяСтрока(Элемент.ТекстРедактирования),
		?(Режим = НСтр("ru='выгрузки';uk='вивантаження'"), "1C_to_CB.xml", "CB_to_1C.xml"), Элемент.ТекстРедактирования);
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбора.Выбрать() Тогда
		Если Режим = НСтр("ru='загрузки';uk='завантаження'") Тогда
			Объект.ФайлЗагрузки = ДиалогВыбора.ПолноеИмяФайла;
		Иначе
			Объект.ФайлВыгрузки = ДиалогВыбора.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодключаемаяОбработкаПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.ПодключаемаяОбработка) Тогда
		Объект.РасширениеФайлаИмпорта = ПолучитьФорматФайла(Объект.ПодключаемаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодключаемаяОбработкаПриИзменении(Элемент)
	ПодключаемаяОбработкаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьФорматФайла(ОбработкаПротокола)
	
	Если ЗначениеЗаполнено(ОбработкаПротокола) И ТИПЗНЧ(ОбработкаПротокола) <> ТИП("СправочникСсылка.СМП_УчетныеЗаписиБанков") Тогда
		Попытка
			ИмяФайла = ПолучитьИмяВременногоФайла("epf");
			ОбработкаОткр = ОбработкаПротокола.ХранилищеОбработки.Получить();
			ОбработкаОткр.Записать(ИмяФайла);
			ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
			Формат = ВнешняяОбработка.ФорматФайла();
			УдалитьФайлы(ИмяФайла);
			Возврат Формат;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат "xml";
	
КонецФункции

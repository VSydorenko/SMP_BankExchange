
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	//ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметры);
	КонецЕсли;
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	//ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры

#КонецОбласти


&НаСервере
Функция ПолучитьНомерСчета()
	
	Возврат Объект.БанковскийСчет.НомерСчета;
	
КонецФункции

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ЭтоПриватБанкAPI = Объект.Банк = Перечисления.СМП_ПоддерживаемыеИнтеграцииСБанками.ПриватБанк;
	ЭтоМоноБанкAPI = Объект.Банк = Перечисления.СМП_ПоддерживаемыеИнтеграцииСБанками.МОНОБанк;
	ЭтоПумбБанкAPI = Объект.Банк = Перечисления.СМП_ПоддерживаемыеИнтеграцииСБанками.ПУМБ;
	ЭтоФайловаяВыписка = Объект.Банк = Перечисления.СМП_ПоддерживаемыеИнтеграцииСБанками.ПодключаемаяОбработка;
	
	Элементы.ПодключаемаяОбработка.Видимость = ЭтоФайловаяВыписка;
	Элементы.ДекорацияРаботаСБанкамиПриватБанкАРІ.Видимость = ЭтоПриватБанкAPI;
	Элементы.ДекорацияРаботаСБанкамиМОНОБанкАРІ.Видимость = ЭтоМоноБанкAPI;
	Элементы.ГруппаБанкПумб.Видимость = ЭтоПумбБанкAPI;
	Элементы.ИД.Видимость = ЭтоПриватБанкAPI; // Или ЭтоМоноБанкAPI;
	Элементы.Токен.Видимость = ЭтоПриватБанкAPI; // Или ЭтоМоноБанкAPI;
	Элементы.ГруппаРегламентноеЗадание.Видимость = ЭтоПриватБанкAPI; // Или ЭтоМоноБанкAPI;
	Элементы.ДекорацияРазработкаМОНО.Видимость = ЭтоМоноБанкAPI;
	Элементы.СоздаватьНенайденныеЭлементы.Видимость = Объект.ИспользоватьРегламентныеЗадания;
	//Элементы.ГруппаДоступаДляНовыхКонтрагентов.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	Элементы.ФайлЗагрузки.Видимость = ЭтоФайловаяВыписка;
	Элементы.ФайлВыгрузки.Видимость = ЭтоФайловаяВыписка;
	Элементы.ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет.Видимость = Объект.ИспользоватьРегламентныеЗадания;
	Элементы.ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета.Видимость = Объект.ИспользоватьРегламентныеЗадания;
	//Не работает механизм - постоянно выдает сообщение, что нет лицензии, хотя подсистема есть
	//Если ЭтоПриватБанкAPI И Не ОбщегоНазначения.ПодсистемаСуществует("СМП_simplyUNF.РаботаСБанками.ПриватБанк") Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не обнаружена лицензия на использование интеграции с банком ПриватБанк средствами API!';
	//												|uk = 'Не знайдена ліцензія на використання інтеграції з банком ПриватБанк методами API!'"));
	//КонецЕсли;
	
	//Если ЭтоМоноБанкAPI И Не ОбщегоНазначения.ПодсистемаСуществует("СМП_simplyUNF.РаботаСБанками.МОНОБанк") Тогда
	//	ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не обнаружена лицензия на использование интеграции с банком МОНО средствами API!';
	//												|uk = 'Не знайдена ліцензія на використання інтеграції з банком МОНО методами API!'"));
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультат(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		Сообщить(Результат.КраткоеПредставлениеОшибки);
	Иначе
		
		//РезультатРаботы = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		//Если ЗначениеЗаполнено(РезультатРаботы.Ошибка) Тогда
		//	Сообщить(РезультатРаботы.Ошибка);
		//Иначе
		//	ЭтотОбъект.Прочитать();
		//	Элементы.Товары.Обновить();
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

#Область ОбработчикиСтандартныхПодсистем

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
//&НаКлиенте
//Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
//	
//	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
//	
//КонецПроцедуры // Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта()

#КонецОбласти

&НаКлиенте
Процедура ФайлВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборФайлаДляВыгрузки(Элемент, НСтр("ru='выгрузки';uk='вивантаження'"));
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборФайлаДляЗагрузки(Элемент, НСтр("ru='загрузки';uk='завантаження'"));
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура ВыборФайлаДляЗагрузки(Элемент, Режим) Экспорт
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбора.Фильтр                      = НСтр("ru='" + Объект.РасширениеФайлаИмпорта + " файл';uk='" + Объект.РасширениеФайлаИмпорта + " файл'") + " (*." + Объект.РасширениеФайлаИмпорта + ")|*." + Объект.РасширениеФайлаИмпорта;
	ДиалогВыбора.Заголовок                   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Выберите файл для %1 данных из клиента банка';uk='Виберіть файл для %1 даних з клієнта банку'"), Режим);
	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.Расширение                  = Объект.РасширениеФайлаИмпорта;
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПолноеИмяФайла              = ?(ПустаяСтрока(Элемент.ТекстРедактирования),
		?(Режим = НСтр("ru='выгрузки';uk='вивантаження'"), "1C_to_CB." + Объект.РасширениеФайлаИмпорта, "CB_to_1C." + Объект.РасширениеФайлаИмпорта), Элемент.ТекстРедактирования);
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбора.Выбрать() Тогда
		Если Режим = НСтр("ru='загрузки';uk='завантаження'") Тогда
			Объект.ФайлЗагрузки = ДиалогВыбора.ПолноеИмяФайла;
		Иначе
			Объект.ФайлВыгрузки = ДиалогВыбора.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаДляВыгрузки(Элемент, Режим) Экспорт
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбора.Фильтр                      = НСтр("ru='" + Объект.РасширениеФайлаЭкспорта + " файл';uk='" + Объект.РасширениеФайлаЭкспорта + " файл'") + " (*." + Объект.РасширениеФайлаЭкспорта + ")|*." + Объект.РасширениеФайлаЭкспорта;
	ДиалогВыбора.Заголовок                   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Выберите файл для %1 данных из клиента банка';uk='Виберіть файл для %1 даних з клієнта банку'"), Режим);
	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.Расширение                  = Объект.РасширениеФайлаЭкспорта;
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПолноеИмяФайла              = ?(ПустаяСтрока(Элемент.ТекстРедактирования),
		?(Режим = НСтр("ru='выгрузки';uk='вивантаження'"), "1C_to_CB." + Объект.РасширениеФайлаЭкспорта, "CB_to_1C." + Объект.РасширениеФайлаЭкспорта), Элемент.ТекстРедактирования);
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбора.Выбрать() Тогда
		Если Режим = НСтр("ru='загрузки';uk='завантаження'") Тогда
			Объект.ФайлЗагрузки = ДиалогВыбора.ПолноеИмяФайла;
		Иначе
			Объект.ФайлВыгрузки = ДиалогВыбора.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодключаемаяОбработкаПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.ПодключаемаяОбработка) Тогда
		Объект.РасширениеФайлаИмпорта = ПолучитьФорматФайла(Объект.ПодключаемаяОбработка);  
		Объект.РасширениеФайлаЭкспорта = ПолучитьФорматФайлаЭкспорта(Объект.ПодключаемаяОбработка);
	КонецЕсли;
КонецПроцедуры   

&НаКлиенте
Процедура ПодключаемаяОбработкаПриИзменении(Элемент)
	ПодключаемаяОбработкаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьФорматФайла(ОбработкаПротокола)
	
	Если ЗначениеЗаполнено(ОбработкаПротокола) И ТИПЗНЧ(ОбработкаПротокола) <> ТИП("СправочникСсылка.СМП_УчетныеЗаписиБанков") Тогда
		Попытка
			ИмяФайла = ПолучитьИмяВременногоФайла("epf");
			ОбработкаОткр = ОбработкаПротокола.ХранилищеОбработки.Получить();
			ОбработкаОткр.Записать(ИмяФайла);
			ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
			Формат = ВнешняяОбработка.ФорматФайла();
			УдалитьФайлы(ИмяФайла);
			Возврат Формат;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат "xml";
	
КонецФункции

&НаСервере
Функция ПолучитьФорматФайлаЭкспорта(ОбработкаПротокола)
	
	Если ЗначениеЗаполнено(ОбработкаПротокола) И ТИПЗНЧ(ОбработкаПротокола) <> ТИП("СправочникСсылка.СМП_УчетныеЗаписиБанков") Тогда
		Попытка
			ИмяФайла = ПолучитьИмяВременногоФайла("epf");
			ОбработкаОткр = ОбработкаПротокола.ХранилищеОбработки.Получить();
			ОбработкаОткр.Записать(ИмяФайла);
			ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
			Формат = ВнешняяОбработка.ФорматФайлаВыгрузки();
			УдалитьФайлы(ИмяФайла);
			Возврат Формат;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат "xml";
	
КонецФункции

#Область ОбработчикиКомандФормы

 &НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	ДлительнаяОперация = НачатьВыполнениеНаСервереОбмена();
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультат", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеОбмена(Команда)
	
	НастроитьРасписание(РасписаниеРегламентногоЗаданияОбмена, Элементы.НастроитьРасписание, "РасписаниеРегламентногоЗаданияОбмена");
	
КонецПроцедуры

&НаКлиенте
Процедура МоноУстановитьВебХук(Команда)
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(, 
		нСтр("ru='Сохраните изменения элемента справочника перед установкой webhook!'; uk='Збережіть зміни елемента довідника перед встановленням Webhook!'"),,
		нСтр("ru='Форма изменена!'; uk='Форма змінена!'"))
	ИначеЕсли ПустаяСтрока(Объект.Токен) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(нСтр("ru='Не заполнен токен для доступа!'; uk='Не заповнений токен для доступу!'"),,
		"Токен", "Объект");
		Возврат;
	ИначеЕсли ПустаяСтрока(Объект.АдресДляWebHook) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(нСтр("ru='Не заполнен адрес для WebHook.'; uk='Не заповнена адреса для WebHook.'"),,
		"АдресДляWebHook", "Объект");
		Возврат;
	ИначеЕсли НЕ ПроверитьАдресWebHookНаСервере(Объект.АдресДляWebHook) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(нСтр("ru='Адрес для WebHook заполнен некорректно.'; uk='Адреса для WebHook заповнена некоректно.'"),,
		"АдресДляWebHook", "Объект");
		Возврат;	
	Иначе
		Результат = УстановитьАдресWebHookНаСервере(Объект.Токен, Объект.АдресДляWebHook);
		Если Результат = Истина Тогда
			ПоказатьПредупреждение(, нСтр("ru='WebHook установлен успешно.'; uk='WebHook встановлений успішно.'"));
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(нСтр("ru='Ошибка при установке Webhook - %1.'; uk='Помилка при встановленні Webhook - %1'"), Результат));
		Возврат;		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

 &НаСервере
Функция НачатьВыполнениеНаСервереОбмена()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = Ложь;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = "Обмен с банком (" + Объект.Ссылка + ")";
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, "СМП_РаботаСБанкамиСервер.ОбменСБанком", Объект.Ссылка);
	
КонецФункции

// Возвращает "Истина" если введен корректный адрес публикации http-сервиса.
//
// Параметры:
//   АдресWebHook - Строка - Адрес публикации http-сервиса информационной базы для установки WebHook.
//
// Возвращаемое значение:
//   Булево - результат проверки адреса.
//
&НаСервереБезКонтекста
Функция ПроверитьАдресWebHookНаСервере(АдресWebHook) 

	Результат = Истина;

	СтруктураURL = КоннекторHTTP.РазобратьURL(АдресWebHook);
	Если СтруктураURL.Путь = "/" ИЛИ СтрНайти(СтруктураURL.Путь, "/hs/") = 0 Тогда //Адрес базы введен некоретно
		Результат = Ложь;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // ПроверитьАдресWebHookНаСервере

// Возврашает результат установки адреса для Webhook.
//
// Параметры:
//	 Токен - Строка - токен доступа к API монобанка.
//   АдресWebHook - Строка - Адрес публикации http-сервиса информационной базы для установки WebHook.
//
// Возвращаемое значение:
//   Булево, Строка - Истина - если успешно, Строка - если возникла ошибка.
//
&НаСервереБезКонтекста
Функция УстановитьАдресWebHookНаСервере(Токен, АдресWebHook) 
	
	Результат = Истина;
	АдресСервераМонобанк = "https://api.monobank.ua/personal/webhook";
	
	ТелоСтруктура = Новый Структура("webHookUrl", АдресWebHook);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-Token", Токен);
	
	ДопПараметры = Новый Структура("JSON, Заголовки", ТелоСтруктура, Заголовки);
	ДанныеОтвета = КоннекторHTTP.Post(АдресСервераМонобанк,, ДопПараметры);
	
	Если ДанныеОтвета.КодСостояния <> 200 Тогда
		сОтвет = КоннекторHTTP.КакJson(ДанныеОтвета);
		
		СтрокаРезультат = "";
		Для Каждого КлючИЗначение Из сОтвет Цикл
			
			СтрокаРезультат	= КлючИЗначение.Ключ + ": " + КлючИЗначение.Значение; 
			Прервать;
			
		КонецЦикла;
		Результат = СтрокаРезультат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // УстановитьАдресWebHookНаСервере 

#Область РегламентноеЗадание

&НаКлиенте
Процедура НастроитьРасписание(Расписание, Элемент, СтрокаРасписания)
	
	ВыполнитьНастройкуРасписания(Расписание, Элемент, СтрокаРасписания);
	Элемент.Заголовок = УстановитьНадписьРасписания(Расписание, СтрокаРасписания);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписания(РасписаниеЗадания, Элемент, СтрокаРасписания)
	
	Если РасписаниеЗадания = Неопределено Тогда
		РасписаниеЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьНастройкуРасписанияЗавершение", ЭтотОбъект, Новый Структура("ЭлементФормы, СтрокаРасписания, Расписание", Элемент, СтрокаРасписания, РасписаниеЗадания));
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписанияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание = Неопределено Тогда
		Расписание = РасписаниеРегламентногоЗаданияОбмена;
	КонецЕсли;
	
	ЭтотОбъект[ДополнительныеПараметры.СтрокаРасписания] = Расписание;
	ДополнительныеПараметры.ЭлементФормы.Заголовок = УстановитьНадписьРасписания(Расписание, ЭтотОбъект[ДополнительныеПараметры.СтрокаРасписания]);
	РасписаниеРегламентногоЗаданияОбмена = Расписание;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентныеЗаданияПриИзменении(Элемент)
	
	ПриИзмененииИспользоватьРегламентныеЗадания();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьНадписьРасписания(Расписание, СтрокаРасписания)
	
	Если Расписание = Неопределено Тогда
		ТекстЗаголовка = НСтр("ru = 'Настроить расписание обмена'; uk = 'Налаштувати розклад обміну'");
	Иначе
		ТекстЗаголовка = Расписание;
	КонецЕсли;
	
	Возврат ТекстЗаголовка;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииИспользоватьРегламентныеЗадания()
	
	УстановитьДоступностьРасписанияОбмена();
	
	Если Объект.ИспользоватьРегламентныеЗадания Тогда
		
		ВыполнитьНастройкуРасписания(РасписаниеРегламентногоЗаданияОбмена, Элементы.НастроитьРасписание, "ИнтервалОбменаССайтом");
		Элементы.НастроитьРасписание.Заголовок = УстановитьНадписьРасписания(РасписаниеРегламентногоЗаданияОбмена, "ИнтервалОбменаССайтом");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРасписанияОбмена()
	Элементы.НастроитьРасписание.Доступность = Объект.ИспользоватьРегламентныеЗадания;
КонецПроцедуры

&НаСервере
// Создает новое задание очереди заданий.
//
// Возвращаемое значение: УникальныйИдентификатор.
//
Функция СоздатьНовоеЗадание(КодНастройки, НаименованиеНастройки, Расписание, ПолныйПарсинг = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(КодНастройки);
	
	ИдентификаторРегламентногоЗадания = Неопределено;
	Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание("СМП_ОбменСБанкамиAPI");
	Задание.Использование = Истина;
	Задание.Ключ = Строка(Новый УникальныйИдентификатор);
	Задание.Наименование = НаименованиеНастройки;
	Задание.Параметры = ПараметрыЗадания;
	Задание.Расписание = Расписание;
	Задание.Записать();
	
	ИдентификаторРегламентногоЗадания = Задание.УникальныйИдентификатор;
	
	Возврат ИдентификаторРегламентногоЗадания;
	
КонецФункции

&НаСервере
// Устанавливает параметры регламентного задания или задания очереди заданий.
//
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийОбластейДанных,
//  Использование - булево, флаг использования регламентного задания,
//  КодУзла - Строка - Код узла плана обмена
//  НаименованиеУзла - Строка - Наименование узла плана обмена
//  Расписание - РасписаниеРегламентногоЗадания.
//
Процедура УстановитьПараметрыЗадания(Задание, Использование, КодНастройки, НаименованиеНастройки, Расписание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(КодНастройки);
	
	Задание.Использование = Истина;
	Задание.Ключ = Строка(Новый УникальныйИдентификатор);
	Задание.Наименование = НаименованиеНастройки;
	Задание.Параметры = ПараметрыЗадания;
	Задание.Расписание = Расписание;
	Задание.Записать();
	
КонецПроцедуры

#КонецОбласти

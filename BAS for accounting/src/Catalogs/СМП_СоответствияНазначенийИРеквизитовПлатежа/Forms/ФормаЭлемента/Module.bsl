
&НаКлиенте
Процедура СчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)
	НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, Элемент.Имя);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриИзмененииСчета(Форма, ИмяСчета)
	
	ИмяПоля = ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета);
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма, ИмяСчета, ИмяПоля);
	УстановитьЗначенияСубконтоПриИзмененииСчета(Форма, ИмяСчета, ИмяПоля);
	УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета)
	
	Если ИмяСчета = "СчетУчетаРасчетовСКонтрагентом" Тогда
		Возврат "СубконтоДт"
	КонецЕсли;
	
	ВызватьИсключение "Неверное обращение к функции ОпределитьИмяСубконтоПоИмениСчета";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, ИмяСчета, ИмяПоля)
	
	ОбъектФормы = Форма;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3", ИмяПоля+"1", ИмяПоля+"2", ИмяПоля+"3");
		
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3", "Заголовок"+ИмяПоля+"1", "Заголовок"+ИмяПоля+"2", "Заголовок"+ИмяПоля+"3");
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Форма.Объект[ИмяСчета], Форма, ПоляФормы, ЗаголовкиПолей);
	
	Для каждого текКлючИЗначение Из ПоляФормы Цикл
		Форма.Элементы[текКлючИЗначение.Значение].Заголовок = СтрЗаменить(Форма[ЗаголовкиПолей[текКлючИЗначение.Ключ]],":","") + " ";
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияСубконтоПриИзмененииСчета(Форма, ИмяСчета, ИмяПоля)
	
	ОбъектФормы = Форма;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Организация", ИмяПоля+"1", ИмяПоля+"2", ИмяПоля+"3", Неопределено);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Форма.Объект[ИмяСчета], ОбъектФормы, ПоляОбъекта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля)
	
	ОбъектФормы = Форма;
	
	ПараметрыДокумента = ПолучитьСписокПараметров(Форма, ИмяПоля+"%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, ОбъектФормы, ИмяПоля+"%Индекс%", ИмяПоля+"%Индекс%", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ШаблонИмяПоляОбъекта)
	
	ОбъектФормы = Форма;
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ОбъектФормы[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ОбъектФормы[ИмяПоля]);
		ИначеЕсли ТипЗнч(ОбъектФормы[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ОбъектФормы[ИмяПоля]);
		ИначеЕсли ТипЗнч(ОбъектФормы[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ОбъектФормы[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	СписокПараметров.Вставить("Организация", Неопределено);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		СубконтоДт1 = Объект.Ссылка.СубконтоДт1Хранилище.Получить();
		СубконтоДт2 = Объект.Ссылка.СубконтоДт2Хранилище.Получить();
		СубконтоДт3 = Объект.Ссылка.СубконтоДт3Хранилище.Получить();
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СубконтоДт1Хранилище = Новый ХранилищеЗначения(СубконтоДт1);
	ТекущийОбъект.СубконтоДт2Хранилище = Новый ХранилищеЗначения(СубконтоДт2);
	ТекущийОбъект.СубконтоДт3Хранилище = Новый ХранилищеЗначения(СубконтоДт3);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СчетУчетаРасчетовСКонтрагентомПриИзменении(Элементы.СчетУчетаРасчетовСКонтрагентом);
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПоступленияНаСчетПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииРасходаСоСчетаПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	мВидыОпераций = Новый Массив;
	мВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств);
	мВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	мВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет);
	мВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП);
	мВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику);
	мВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПокупкаПродажаВалюты);
	мВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступлениеСредствОтФСС);
	мВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПокупкаПродажаВалюты);
	мВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств);
	мВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
	мВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств);
	
	Если мВидыОпераций.Найти(Объект.ВидОперацииРасходаСоСчета) <> Неопределено
		ИЛИ мВидыОпераций.Найти(Объект.ВидОперацииПоступленияНаСчет) <> Неопределено Тогда
		
		Элементы.ГруппаСчетУчета.Видимость = Истина;
	Иначе
		Элементы.ГруппаСчетУчета.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

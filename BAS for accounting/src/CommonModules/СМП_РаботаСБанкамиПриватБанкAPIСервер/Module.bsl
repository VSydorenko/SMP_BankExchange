
Процедура ПрочитатьВыписки(Знач Начало, Знач ДатаКонца = Неопределено, СчетКИмпорту, ДокументыКИмпорту, id, token, Регламент = Ложь, НомерСтраницы = Неопределено) Экспорт
	
	Запрос = "statements/transactions?acc=" + Прав(СчетКИмпорту.НомерСчета, 14);
	
	
	Если Регламент Тогда
		Данные = ПолучитьЗначениеСведения(СчетКИмпорту);
		Если Данные <> Неопределено Тогда
			
			Запрос = Запрос + "&startDate=" + Формат(Данные["ДатаТранзакции"], "ДФ=dd-MM-yyyy");
			Если СокрЛП(Данные["ИДТранзакции"]) <> "" Тогда
				Запрос = Запрос + "&followId=" + Данные["ИДТранзакции"];
			КонецЕсли;
		Иначе
			Запрос = Запрос + "&startDate=" + Формат(Начало, "ДФ=dd-MM-yyyy");
		КонецЕсли;
	Иначе
		Запрос = Запрос + "&startDate=" + Формат(Начало, "ДФ=dd-MM-yyyy") + "&endDate=" + Формат(ДатаКонца, "ДФ=dd-MM-yyyy") + "&limit=500";
		Если НомерСтраницы <> Неопределено Тогда
			Запрос = Запрос + "&followId=" + НомерСтраницы;
		КонецЕсли;

	КонецЕсли;
	
		
	Тело = ПрочитатьОтвет(ОтправитьЗапрос(Запрос, "", "GET", id, token));
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Тело);
	Стр = ПрочитатьJSON(Чтение, Истина);
	
	Если Стр["status"] = "SUCCESS" Тогда
		Для каждого tr Из Стр["transactions"] Цикл
			ДобавитьДокумент_v3(tr, СчетКИмпорту, ДокументыКИмпорту);
		КонецЦикла;
		Если Стр["exist_next_page"] Тогда
			ПрочитатьВыписки(Начало, ДатаКонца, СчетКИмпорту, ДокументыКИмпорту, id, token, Регламент, Стр["next_page_id"]); 
		КонецЕсли;
	Иначе
		ВызватьИсключение Стр["error"];
	КонецЕсли;
	
	Если Не Регламент Тогда
		ДокументыКИмпорту.Сортировать("Дата");
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьОтвет(HTTPОтвет) Экспорт
	
	Если HTTPОтвет.КодСостояния = 400 Тогда
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
		Отв = ПрочитатьJSON(Чтение);
		ВызватьИсключение "Банк сообщает об ошибке (по-английски): " + Отв.message;
	ИначеЕсли HTTPОтвет.КодСостояния < 200 Или HTTPОтвет.КодСостояния > 299 Тогда
		ВызватьИсключение "Ошибка http: " + HTTPОтвет.КодСостояния + " " + HTTPОтвет.ПолучитьТелоКакСтроку();
	Иначе
		Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьДокумент_v3(Данные, СчетКИмпорту, ДокументыДляИмпорта)
	
	Организация = Неопределено;
	Если СчетаРавны(СчетКИмпорту.НомерСчета, Данные["AUT_MY_ACC"]) Тогда
		Организация = СчетКИмпорту.Владелец;
	КонецЕсли;
	
	Если Организация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовСтр = ДокументыДляИмпорта.Добавить();
	НовСтр.ИдТранзакции = Данные["TECHNICAL_TRANSACTION_ID"];
	НовСтр.Номер = Данные["NUM_DOC"];
	НовСтр.Сумма = Данные["SUM"];
	НовСтр.СуммаДокумента = Данные["SUM"];
	Если Данные["TRANTYPE"] = "D" Тогда
		ПрефПолуч = "AUT_CNTR";
		ПрефПлат = "AUT_MY";
	Иначе
		ПрефПолуч = "AUT_MY";
		ПрефПлат = "AUT_CNTR";
	КонецЕсли;
	
	НовСтр.ПолучательСчет = Данные[ПрефПолуч + "_ACC"];
	НовСтр.Получатель = Данные[ПрефПолуч + "_NAM"];
	НовСтр.ПолучательКПП = Данные[ПрефПолуч + "_CRF"];
	НовСтр.ПолучательБИК = Данные[ПрефПолуч + "_MFO"];
	НовСтр.ПолучательБанк1 = Данные[ПрефПолуч + "_MFO_NAME"];
//	НовСтр.ПолучательБанкГород = Данные[ПрефПолуч + "_MFO_CITY"];
	
	НовСтр.ПлательщикСчет = Данные[ПрефПлат + "_ACC"];
	НовСтр.ПлательщикКПП = Данные[ПрефПлат + "_CRF"];
	НовСтр.Плательщик = Данные[ПрефПлат + "_NAM"];
	НовСтр.ПлательщикБИК = Данные[ПрефПлат + "_MFO"];
	НовСтр.ПлательщикБанк1 = Данные[ПрефПлат + "_MFO_NAME"];
	//НовСтр.ПлательщикБанк2 = Данные[ПрефПлат + "_MFO_CITY"];
	
	НовСтр.НазначениеПлатежа = Данные["OSND"];

	
	Если Данные["CCY"] = "UAH" Тогда
		НовСтр.КодВалюты = "980";
	Иначе
		Попытка
			НовСтр.КодВалюты = Справочники.Валюты.НайтиПоНаименованию(Данные["CCY"]).Код;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	НовСтр.Дата = Дата(Данные["DATE_TIME_DAT_OD_TIM_P"]);
	
	НовСтр.НомерДок = НовСтр.Номер;
	//НовСтр.ДатаПроведения = Дата(НовСтр.Дата);
	НовСтр.СуммаДокумента = Число(НовСтр.Сумма);
	//НовСтр.ДатаДок = Дата(НовСтр.Дата);
	Если СокрЛП(НовСтр.ПлательщикСчет) = СчетКИмпорту.НомерСчета Тогда
		НовСтр.Операция = "ПлатежноеПоручение";
		НовСтр.СуммаСписано = НовСтр.СуммаДокумента;
		НовСтр.ДатаСписано = Дата(НовСтр.Дата);
		НовСтр.Списано = Дата(НовСтр.Дата);
		//НовСтр.СчетКонтрагента = НовСтр.ПолучательСчет;
		//НовСтр.Контрагент = НовСтр.Получатель;
		//КонтрагентОКПО = НовСтр.ПолучательКПП;

		//	НовСтр.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
		//	НовСтр.СтатьяДДС = ЭтотОбъект.СтатьяДДССписаниеСРасчетногоСчета;
		//НовСтр.СчетОрганизации = НайтиСчёт(НовСтр.ПлательщикСчет, Организация);
		Если СокрЛП(НовСтр.ПолучательСчет) = СчетКИмпорту.НомерСчета Тогда
			//НовСтр.Операция = "ПлатежноеПоручение";
			НовСтр.СуммаПоступило = НовСтр.СуммаДокумента;
			//	НовСтр.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
			//	НовСтр.СтатьяДДС = ЭтотОбъект.СтатьяДДСПереводНаДругойСчёт;
		КонецЕсли;
	Иначе
		НовСтр.Операция = "ПлатежноеТребование";
		НовСтр.СуммаПоступило = НовСтр.СуммаДокумента;
		НовСтр.ДатаПоступило = Дата(НовСтр.Дата);
		НовСтр.Поступило = Дата(НовСтр.Дата);
		//НовСтр.СчетКонтрагента = НовСтр.ПлательщикСчет;
		//НовСтр.Контрагент = НовСтр.Плательщик;
		//КонтрагентОКПО = НовСтр.ПлательщикКПП;

		//	НовСтр.СтатьяДДС = ЭтотОбъект.СтатьяДДСПоступлениеНаРасчетныйСчет;
		//НовСтр.СчетОрганизации = НайтиСчёт(НовСтр.ПолучательСчет, Организация);
	КонецЕсли;
	
	//Если НовСтр.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
	//	НовСтр.Контрагент = Организация;
	////	Счёт = НайтиСчёт(НовСтр.СчетКонтрагента, Организация);
	//	Если ЗначениеЗаполнено(Счёт) Тогда
	//		НовСтр.СчетКонтрагента = Счёт;
	//	Иначе
	////		НовыйСчет = СоздатьСчёт(НовСтр.СчетКонтрагента, Организация, НовСтр.СчетОрганизации.ВалютаДенежныхСредств, НовСтр.ПолучательМФО, НовСтр.ПолучательБанк, НовСтр.ПолучательБанкГород);
	////		НовСтр.СчетКонтрагента = НовыйСчет.Ссылка;
	//	КонецЕсли;
	
	//ИначеЕсли ЭтотОбъект.СоздаватьНенайденныеЭлементы Тогда
	//	НовСтр.Контрагент = СоздатьКонтрагента(НовСтр, Организация);
	//Иначе
	//	Контр = Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ", КонтрагентОКПО);
	//	Если Не Контр.Пустая() Тогда
	//		НовСтр.Контрагент = Контр;
	
	//		Счёт = НайтиСчёт(НовСтр.СчетКонтрагента, Контр);
	//		Если ЗначениеЗаполнено(Счёт) Тогда
	//			НовСтр.СчетКонтрагента = Счёт;
	//		КонецЕсли;
	
	//		Договор = НайтиДоговор(НовСтр.ВидОперации, Организация, Контр);
	//		Если ЗначениеЗаполнено(Договор) Тогда
	//			НовСтр.Договор = Договор;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//НайтиДокумент(НовСтр);
	//НовСтр.Загружать = Не ЗначениеЗаполнено(НовСтр.Документ);
	
КонецПроцедуры

Функция СчетаРавны(Знач Счёт1, Знач Счёт2)
	
	Счёт1 = СокрЛП(Счёт1);
	Счёт2 = СокрЛП(Счёт2);
	Возврат Счёт1 = Счёт2 Или (СтрДлина(Счёт1) < 29 Или СтрДлина(Счёт2) < 29) И Прав(Счёт1, 14) = Прав(Счёт2, 14);
	
КонецФункции

Функция ОтправитьЗапрос(Команда, ТекстЗапроса, Метод, id, token)
	
	АдресСайта = "acp.privatbank.ua";
	АдресРесурса = "/api";
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
	
	Соединение = Новый HTTPСоединение(АдресСайта, Неопределено, Неопределено, Неопределено, Неопределено, 60, ssl);
	
	Запрос = Новый HTTPЗапрос(АдресРесурса + "/" + Команда);
	Запрос.Заголовки.Вставить("Content-Type", "application/json;charset=utf8");
	Запрос.Заголовки.Вставить("id", id);
	Запрос.Заголовки.Вставить("token", token);
	
	Запрос.УстановитьТелоИзСтроки(ТекстЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Если Метод = "POST" Тогда
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Иначе
		Ответ = Соединение.ВызватьHTTPМетод(Метод, Запрос);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Процедура Прочитать(СтруктураПараметров, id, token, ЭтоРеглЗадание = Ложь) Экспорт
	
	НомерСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.БанковскийСчет, "НомерСчета");

	ДокументыКИмпорту = СоздатьТаблицуКИмпорту();
	
	ДокументыДляИмпорта = СтруктураПараметров.ДокументыКИмпорту;
	РасчетныеСчетаКИмпорту = СтруктураПараметров.Импорт_РасчетныеСчета;
	
	Импорт_ВидыДокументов = Новый Массив;
	ДокументыДляИмпорта.Очистить();

	РасчетныеСчетаКИмпорту.Очистить();
	ДокументыКИмпорту.Очистить();

	ПрочитатьВыписки(
		СтруктураПараметров.НачПериода, 
		КонецДня(СтруктураПараметров.КонПериода),
		СтруктураПараметров.БанковскийСчет, 
		ДокументыКИмпорту, 
		id, 
		token, 
		ЭтоРеглЗадание);
	
	СтруктураПараметров.Импорт_Заголовок = Новый Структура;
	Импорт_Заголовок = СтруктураПараметров.Импорт_Заголовок;
	Импорт_Заголовок.Вставить("ДатаНачала", ТекущаяДата());
	Импорт_Заголовок.Вставить("ДатаКонца", Дата("20000101"));
	
	Для каждого СтрокаДокументов из ДокументыКИмпорту Цикл
		
		Если (СтрокаДокументов.ПлательщикСчет <> "" И СтрокаДокументов.ПлательщикСчет <> НомерСчета) и 
			(СтрокаДокументов.ПолучательСчет <> "" И СтрокаДокументов.ПолучательСчет <> НомерСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДокументов, СтрокаДокументов);
		ДатаВФормате = Формат(Дата(СтрокаДокументов.Дата), "ДФ=гг") + "-" + Формат(Дата(СтрокаДокументов.Дата), "ДФ=ММ") +
							"-" + Формат(Дата(СтрокаДокументов.Дата), "ДФ=дд");
		
		//НоваяСтрокаДокументов.ДокументИД 			= СтрокаДокументов.Номер;
		НоваяСтрокаДокументов.ДокументИД 			= СтрокаДокументов.ИдТранзакции;
		НоваяСтрокаДокументов.ПлательщикМФО 		= СтрокаДокументов.ПлательщикБИК;
		НоваяСтрокаДокументов.ПлательщикОКПО 		= СтрокаДокументов.ПлательщикКПП;
		НоваяСтрокаДокументов.ПлательщикБанк 		= СтрокаДокументов.ПлательщикБанк1;
		НоваяСтрокаДокументов.ПолучательМФО 		= СтрокаДокументов.ПолучательБИК;
		НоваяСтрокаДокументов.ПолучательОКПО 		= СтрокаДокументов.ПолучательКПП;
		НоваяСтрокаДокументов.ПолучательБанк 		= СтрокаДокументов.ПолучательБанк1;
		НоваяСтрокаДокументов.ДатаПоступило 		= ДатаВФормате;
		НоваяСтрокаДокументов.ДатаСписано 			= ДатаВФормате;
		НоваяСтрокаДокументов.ДатаОтсылкиДок 		= ДатаВФормате;
		НоваяСтрокаДокументов.ДатаДок 				= ДатаВФормате;
		НоваяСтрокаДокументов.Дата 					= ДатаВФормате;
		НоваяСтрокаДокументов.ДатаПроведенияБанком 	= СтрокаДокументов.Дата;
		
		Импорт_ВидыДокументов.Добавить(СтрокаДокументов.Операция);
		Импорт_Заголовок.ДатаНачала 				= Мин(Импорт_Заголовок.ДатаНачала, СтрокаДокументов.Дата);
		Импорт_Заголовок.ДатаКонца 					= Макс(Импорт_Заголовок.ДатаКонца, КонецДня(СтрокаДокументов.Дата));
		
	КонецЦикла;
	
КонецПроцедуры 

Функция СоздатьТаблицуКИмпорту();
	
	ОписаниеЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ДокументыКИмпорту = Новый ТаблицаЗначений;
	ДокументыКИмпорту.Колонки.Добавить("СуммаПоступило", ОписаниеЧисло);
	ДокументыКИмпорту.Колонки.Добавить("ДатаСписано");
	ДокументыКИмпорту.Колонки.Добавить("СуммаСписано", ОписаниеЧисло);
	ДокументыКИмпорту.Колонки.Добавить("ПлательщикСчет");
	ДокументыКИмпорту.Колонки.Добавить("ПлательщикБИК");
	ДокументыКИмпорту.Колонки.Добавить("ПлательщикКПП");
	ДокументыКИмпорту.Колонки.Добавить("Получатель");
	ДокументыКИмпорту.Колонки.Добавить("ПолучательСчет");
	ДокументыКИмпорту.Колонки.Добавить("ПолучательКПП");
	ДокументыКИмпорту.Колонки.Добавить("ПолучательБИК");
	ДокументыКИмпорту.Колонки.Добавить("ПолучательБанк1");
	ДокументыКИмпорту.Колонки.Добавить("ДатаПоступило");
	ДокументыКИмпорту.Колонки.Добавить("Плательщик");
	ДокументыКИмпорту.Колонки.Добавить("ПлательщикБанк1");
	ДокументыКИмпорту.Колонки.Добавить("КодВалюты");
	ДокументыКИмпорту.Колонки.Добавить("НазначениеПлатежа");
	ДокументыКИмпорту.Колонки.Добавить("Номер");
	ДокументыКИмпорту.Колонки.Добавить("НомерДок");
	ДокументыКИмпорту.Колонки.Добавить("Дата");
	ДокументыКИмпорту.Колонки.Добавить("СуммаДокумента", ОписаниеЧисло);
	ДокументыКИмпорту.Колонки.Добавить("Сумма");
	ДокументыКИмпорту.Колонки.Добавить("Операция");
	ДокументыКИмпорту.Колонки.Добавить("Поступило");
	ДокументыКИмпорту.Колонки.Добавить("Списано");
	ДокументыКИмпорту.Колонки.Добавить("ИдТранзакции");
	
	Возврат ДокументыКИмпорту;
	
КонецФункции	

Процедура ЗаполнитьСуммыВыделеныхНаСервере(ТекСтрока)
	
	ТекСтрока.СуммаПоступилоВыделено = ?(ТекСтрока.Загружать, ТекСтрока.СуммаПоступило, 0);
	ТекСтрока.СуммаСписаноВыделено = ?(ТекСтрока.Загружать, ТекСтрока.СуммаСписано, 0);
	ТекСтрока.СуммаДокументаВыделено = ?(ТекСтрока.Загружать, ТекСтрока.СуммаДокумента, 0);
	ТекСтрока.ДокументНеЗагружен = ?(ТекСтрока.Загружать, НСтр("ru='Будет загружен'"), НСтр("ru='Не будет загружен'"))
	
КонецПроцедуры

Процедура ВыполнитьРегламент(Объект, Настройки) Экспорт
	
	//Элемент.ТаблицаКонтрагентов.ПолучитьЭлементы().Очистить();
	// Подготавливаем структуры обработки данных.
	ДокументыКИмпорту = Объект.Загрузка.Выгрузить();
	//ИмпортЗагружаемые = Элемент.СформироватьСоответствиеЗагружаемых();
	//ИмпортНеПустые = Неопределено;
	//ИмпортНеПустыеПлатежноеПоручение = Неопределено;
	//ИмпортНеПустыеПлатежноеПоручениеБюджет = Неопределено;
	
	РасчетныеСчетаКИмпорту = Объект.ИмпортРасчетныеСчета.Выгрузить();
	//Элемент.СформироватьСоответствияНеПустыхПриИмпорте(
	//ИмпортНеПустые,
	//ИмпортНеПустыеПлатежноеПоручение,
	//ИмпортНеПустыеПлатежноеПоручениеБюджет
	//);
	//ТегиРасчетногоСчета = Элемент.СоздатьСоответствиеИзСтроки(
	//ВРег("ДатаНачала,ДатаКонца,РасчСчетОрг,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток,КонецРасчСчет")
	//);
	//ТегиЗаголовка = Элемент.СоздатьСоответствиеИзСтроки(
	//ВРег("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца")
	//);
	//СтруктураЗаголовок = Новый Структура(
	//ВРег("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца")
	//);
	//ИмпортЗаголовок = СтруктураЗаголовок;
	//ИмпортПризнакОбмена = Ложь;
	//НайденКонецФайла = Ложь;
	//ИмпортВидыДокументов = Новый Массив;
	РасчетныеСчетаКИмпорту.Очистить();
	ДокументыКИмпорту.Очистить();
	
	//Для каждого Счет из РасчетныеСчетаКИмпорту цикл
	ПрочитатьВыписки(НачалоДня(ТекущаяДата()),ТекущаяДата(),Объект.БанковскийСчет,ДокументыКИмпорту, Настройки.ИД, Настройки.Токен, Истина);
	//КонецЦикла;
	
	НомерСтроки = 0;
	
	КоличествоНеНайденныхКонтрагентов = 0;
	КоличествоНеНайденныхРСчетов = 0;
	
	ПараметрыВыделенияКолонок = Новый Структура("ВыделитьКолонкуДокумент, ВыделитьКолонкуСуммаСписано, ВыделитьКолонкуСуммаПоступило, 
	|ВыделитьКолонкуКонтрагент, ВыделитьКолонкуДоговор, ВыделитьКолонкуРСКонтрагента, ВыделитьКолонкуВидОперации", 
	Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь);
	
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		Если (СтрокаДокумента.ПлательщикСчет = Объект.БанковскийСчет.НомерСчета
			ИЛИ СтрокаДокумента.ПолучательСчет  = Объект.БанковскийСчет.НомерСчета) 
			И (Не ЗначениеЗаполнено(Объект.БанковскийСчет.ВалютаДенежныхСредств) 
			ИЛИ Объект.БанковскийСчет.ВалютаДенежныхСредств.Код = СтрокаДокумента.КодВалюты)
			Тогда
			РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, ПараметрыВыделенияКолонок,, Объект);
			НомерСтроки = НомерСтроки + 1;
			СтрокаДокумента.НомерСтроки = НомерСтроки;
		Иначе
			//остальные помечаем для последующего удаления
			СтрокаДокумента.НомерСтроки = 0;
		КонецЕсли;
	КонецЦикла;
	
	//Удалим не нужные строки из таблицы
	Количество = ДокументыКИмпорту.количество()-1;
	Для й=0 по Количество Цикл
		Если ДокументыКИмпорту[Количество-й].НомерСтроки = 0 Тогда
			ДокументыКИмпорту.Удалить(Количество-й);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		Если Не СтрокаДокумента.Проведен тогда
			СтрокаДокумента.Загружать = Истина;
		КонецЕсли;
		СтрокаДокумента.НазначениеПлатежа = СокрЛП(СтрокаДокумента.НазначениеПлатежа);
		СтрокаДокумента.НомерКартинки = ?(ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок), 0, 1);
		//Доработать учет галочки в справочнике СМП_УчетныеЗаписиБанков
		//СтрокаДокумента.
		//Если Настройки.СоздатьНовогоКонтрагентаПриЗагрузкеВыписки тогда
		//	Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) и ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка") Тогда
		//		
		//		СтрокаДокумента.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.ИспользоватьСуществующего;
		//		
		//		Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) тогда
		//			СтрокаДокумента.ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.ИспользоватьСуществующего;
		//		Иначе
		//			СтрокаДокумента.ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С;
		//		КонецЕсли;
		//		
		//		Если ЗначениеЗаполнено(СтрокаДокумента.Договор) тогда
		//			СтрокаДокумента.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.ИспользоватьСуществующего;
		//		Иначе
		//			СтрокаДокумента.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С;
		//		КонецЕсли;
		//		
		//	Иначе	
		//		СтрокаДокумента.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С;
		//		СтрокаДокумента.ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С;
		//		СтрокаДокумента.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С;
		//	КонецЕсли;
		//Иначе
		//	СтрокаДокумента.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
		//	СтрокаДокумента.ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
		//	СтрокаДокумента.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
		//КонецЕсли;
	КонецЦикла;
	
	Если ДокументыКИмпорту.Количество() > 0 тогда
		ЗаписатьЗначениеСведения(Объект.БанковскийСчет, ДокументыКИмпорту[ДокументыКИмпорту.Количество()-1].ДокументИД, ДокументыКИмпорту[ДокументыКИмпорту.Количество()-1].Дата );
	КонецЕсли;
	Объект.Загрузка.Очистить();
	Объект.Загрузка.Загрузить(ДокументыКИмпорту);
	
	Объект.ИмпортРасчетныеСчета.Очистить();
	Объект.ИмпортРасчетныеСчета.Загрузить(РасчетныеСчетаКИмпорту);
	
КонецПроцедуры

Процедура РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, ПараметрыВыделенияКолонок, ПослеЗагрузкиВыписокВ1С = Ложь, Объект) Экспорт
	
	ИскатьВСправочникеСоответствий = ЕстьЗаписиВСправочникеСоответствий();
	
	СтруктураЗначенийИзСоответствия = ПолучитьДанныеИзСоответствияНазначенияПлатежа(СтрокаДокумента);
	
	ПустаяДата = Дата("00010101");
	
	// 1) Определим вид платежа – входящий или исходящий.
	ПлатежноеПоручение = ВРег(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ";
	Исходящий = (СтрокаДокумента.ПлательщикСчет = Объект.БанковскийСчет.НомерСчета);
	
	СтрокаДокумента.Исходящий = Исходящий;
	
	// 2) Определим вид документа в программе.
	ВидДокумента = ?(Исходящий, "РасходСоСчета", "ПоступлениеНаСчет");
	ИмяДокумента = ?(Исходящий, "Расход со счета", "Поступление на счет");
	
	СтрокаДокумента.ИмяДокумента = ИмяДокумента;
	СтрокаДокумента.ВидДокумента = ВидДокумента;
	РеквизитСчета = ?(Исходящий, "БанковскийСчет", "СчетКонтрагента");
	
	// 10) Определим сумму.
	
	// Преобразуем из строки в число.
	Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
	
	Если ПустаяСтрока(Буфер) Тогда
		
		//СтрокаДокумента.НеВерныйФорматСуммыКартинка = 0;
		СтрокаЗамечание = НСтр("ru = 'Сумма не указана!'");
		ДобавитьЗамечание(СтрокаДокумента, 4, СтрокаЗамечание);
		Если Исходящий Тогда
			ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаСписано = Истина;
		Иначе
			ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаПоступило = Истина;
		КонецЕсли;
	ИначеЕсли Не ЕстьНеЦифрыНаСервере(СтрЗаменить(СтрЗаменить(СтрЗаменить(Буфер, ".", ""), "-", ""), ",", "")) Тогда
		Сумма = Число(Буфер);
		Если Сумма < 0 Тогда
			Сумма = - Сумма;
		КонецЕсли;
		СтрокаДокумента.СуммаДокумента = Сумма;
		Если Исходящий Тогда
			СтрокаДокумента.СуммаСписано = Сумма;
			//СтрокаДокумента.СуммаСписаноСМинусом = -Сумма;
		Иначе
			СтрокаДокумента.СуммаПоступило = Сумма;
		КонецЕсли;
		//СтрокаДокумента.НеВерныйФорматСуммыКартинка = -1;
	Иначе
		//СтрокаДокумента.НеВерныйФорматСуммыКартинка = 0;
		СтрокаЗамечание = НСтр("ru = 'Укажите сумму вручную (%Буфер%)!'");
		СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Буфер%", Буфер);
		ДобавитьЗамечание(СтрокаДокумента, 4, СтрокаЗамечание);
		Если Исходящий Тогда
			ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаСписано = Истина;
		Иначе
			ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаПоступило = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// 3) Найдем ранее загруженный (введенный вручную) документ.
	// Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.
	
	// Распознаем дату документа.
	ДатаДок = ПустаяДата;
	
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаСписано) Тогда
		Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.ДатаСписано);
	ИначеЕсли НЕ ПустаяСТрока(СтрокаДокумента.ДатаПоступило) Тогда
		Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.ДатаПоступило);
	Иначе
		Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.Дата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		СтрокаДокумента.ДатаДок = Результат;
		НомерДляПоискаДок = СтрокаДокумента.Номер;
		РеквизитДаты = "ДатаВходящегоДокумента";
		РеквизитНомера = "НомерВходящегоДокумента";
		ВсеРеквизитыПоискаЕсть = Истина;
	КонецЕсли;
	
	СтрокаДокумента.НомерДок = СтрокаДокумента.Номер;
	//СтрокаДокумента.НесколькоДокументовКартинка = -1;
	
	АнализироватьИсторию = Ложь;
	ДокументНайден = Ложь;
	Если ВсеРеквизитыПоискаЕсть Тогда
		
		// При наличии нескольких предпочтение отдается первому, с совпадающим
		// номером счета.
		ЗапросПоискаДокумента = Новый Запрос;
		ЗапросПоискаДокумента.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлатежныеДокументы.Ссылка,
		|	ПлатежныеДокументы.ВидОперации,
		|	ПлатежныеДокументы.Статья,
		|	ПлатежныеДокументы.СчетКонтрагента,
		|	ПлатежныеДокументы.Контрагент,
		|	ПлатежныеДокументы.Контрагент.ИНН КАК КонтрагентИНН,
		|	ПлатежныеДокументы.Контрагент.Наименование КАК КонтрагентНаименование,
		|	ПлатежныеДокументы.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
		|	ПлатежныеДокументы.Проведен,
		|	ПлатежныеДокументы." + РеквизитНомера + " КАК Номер,
		|	ПлатежныеДокументы." + РеквизитДаты + " КАК Дата,
		|	ПлатежныеДокументы.Дата КАК ДатаДок,
		|	ПлатежныеДокументы.СчетКонтрагента.НомерСчета КАК НомерСчета,
		|	ПлатежныеДокументы.Организация,
		|	ПлатежныеДокументы.Касса,
		|	ПлатежныеДокументы.СуммаДокумента КАК Сумма,
		|	ТипЗначения(ПлатежныеДокументы.Ссылка) КАК ВидДокумента,
		|	ПлатежныеДокументы.ДокументОснование КАК ПлатежноеПоручение,
		|	ПлатежныеДокументы.БанковскаяОперация КАК БанковскаяОперация
		|ИЗ
		|	Документ." + СтрокаДокумента.ВидДокумента + " КАК ПлатежныеДокументы
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ПлатежныеДокументы." + РеквизитДаты + ", ДЕНЬ)= &ДатаДок
		|	И ПлатежныеДокументы.БанковскийСчет = &БанковскийСчет
		|	И ПлатежныеДокументы.Организация = &Организация";
		
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаДок", ДатаДок);
		ЗапросПоискаДокумента.УстановитьПараметр("Организация", Объект.Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("БанковскийСчет", Объект.БанковскийСчет);
		Результат = ЗапросПоискаДокумента.Выполнить();
		ВыборкаДокументов = Результат.Выбрать();
		СчетДляПоискаДок = ?(Исходящий, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
		ДлинаНомера = СтрДлина(НомерДляПоискаДок);
		КоличествоДок = 0;
		
		//СтрокаСТаблицейДокументов = ТаблицаТаблицДокументов.Добавить();
		//СтрокаСТаблицейДокументов.НомерСтрокиВТаблицеИмпорта = СтрокаДокумента.Владелец().Индекс(СтрокаДокумента);
		
		Пока ВыборкаДокументов.Следующий() Цикл
			// Так не очень корректно, т.к. нумерация за расчетное обслуживание может быть одна, а по фактическим операциям другая.
			ВыборкаНомер = СокрЛП(ВыборкаДокументов.Номер); // Прав(СокрЛП(ВыборкаДокументов.Номер), ДлинаНомера);
			Если ВыборкаНомер = НомерДляПоискаДок
				И (НЕ ЗначениеЗаполнено(ВыборкаДокументов.НомерСчета) ИЛИ ВыборкаДокументов.НомерСчета = СчетДляПоискаДок
				//ИЛИ (ВыборкаДокументов.ВидОперации = ВидОперацииВзносНаличных И ЭтоСчетКассыКредитнойОрганизации(БалансовыйСчет(СтрокаДокумента.ПлательщикСчет)))
				//ИЛИ (ВыборкаДокументов.ВидОперации = ВидОперацииСписаниеНаличных И ЭтоСчетКассыКредитнойОрганизации(БалансовыйСчет(СтрокаДокумента.ПолучательСчет)))
				)
				Тогда
				
				БудетОбрабатыватьсяПриЗагрузке = Ложь;
				
				ДокументПодходит = Истина;
				Если КоличествоДок = 0 Тогда
					
					Если СтрокаДокумента.СуммаДокумента <> ВыборкаДокументов.Сумма И НЕ ВыборкаДокументов.Проведен Тогда
						
						ДокументПодходит = Ложь;
						
						// У документа может быть нужный номер и дата, но он может быть не тот, что нужен.
						// Из банка иногда приходит файл, в котором у документов разного вида будут одинаковые номера, например,
						// у банковского ордера и платежного поручения.
					ИначеЕсли СтрокаДокумента.СуммаДокумента <> ВыборкаДокументов.Сумма И
						(СокрЛП(ВРег(СтрокаДокумента.Операция)) <> СокрЛП(ВРег(ВыборкаДокументов.БанковскаяОперация)) И
						ЗначениеЗаполнено(СтрокаДокумента.Операция) И ЗначениеЗаполнено(ВыборкаДокументов.БанковскаяОперация))
						Тогда
						
						ДокументПодходит = Ложь;
						
					КонецЕсли;
					
					Если ДокументПодходит Тогда
						
						СтрокаДокумента.Документ = ВыборкаДокументов.Ссылка;
						//Если ПослеЗагрузкиВыписокВ1С Тогда
						//	СтрокаДокумента.ДокументНайден = ""+ВыборкаДокументов.Ссылка;
						//Иначе
						//	СтрокаДокумента.ДокументНайден = ?(СтрокаДокумента.Исходящий, НСтр("ru = 'Найден '"), НСтр("ru = 'Найдено '"))+ВыборкаДокументов.Ссылка;
						//КонецЕсли;
						СтрокаДокумента.Проведен = ВыборкаДокументов.Проведен;
						СтрокаДокумента.НомерДок = ВыборкаДокументов.Номер;
						СтрокаДокумента.ДатаДок = ВыборкаДокументов.Дата;
						СтрокаДокумента.ВидОперации = ВыборкаДокументов.ВидОперации;
						СтрокаДокумента.СтатьяДДС = ВыборкаДокументов.Статья; 
						СтрокаДокумента.СчетКонтрагента = ВыборкаДокументов.СчетКонтрагента;
						Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета
							ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет
							Тогда
							
							//
							
						ИначеЕсли СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными
							ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных
							Тогда
							
							СтрокаДокумента.Касса = ВыборкаДокументов.Касса;
							
						Иначе
							СтрокаДокумента.Контрагент = ВыборкаДокументов.Контрагент;
						КонецЕсли;
						СтрокаДокумента.Корреспонденция = ВыборкаДокументов.Корреспонденция;
						БудетОбрабатыватьсяПриЗагрузке = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				Если ДокументПодходит Тогда
					КоличествоДок = КоличествоДок + 1;
				КонецЕсли;
				
				// Поместим данные о документа в служебную таблицу.
				//СтрокаНайденныеДокументы = СтрокаСТаблицейДокументов.ТаблицаНайденныхДокументов.Добавить();
				//ЗаполнитьЗначенияСвойств(СтрокаНайденныеДокументы, ВыборкаДокументов);
				//СтрокаНайденныеДокументы.БудетОбрабатыватьсяПриЗагрузке = БудетОбрабатыватьсяПриЗагрузке;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоДок > 1 Тогда
			
			СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%КоличествоДок%) соответствующих документов!'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%КоличествоДок%", КоличествоДок);
			
			//Если Не ПослеЗагрузкиВыписокВ1С Тогда
			//	СтрокаДокумента.ДокументНайден = СтрокаДокумента.ДокументНайден + НСтр("ru = '. И еще %КоличествоДок% док.'");
			//	СтрокаДокумента.ДокументНайден = СтрЗаменить(СтрокаДокумента.ДокументНайден, "%КоличествоДок%", КоличествоДок-1);
			//КонецЕсли;
			
			ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
			ПараметрыВыделенияКолонок.ВыделитьКолонкуДокумент = Истина;
			//СтрокаДокумента.НесколькоДокументовКартинка = 0;
			
		КонецЕсли;
		
		// Если документ уже есть в ИБ, то берем все данные из него.
		ДокументНайден = ЗначениеЗаполнено(СтрокаДокумента.Документ);
		Если ДокументНайден Тогда
			
			Документ = СтрокаДокумента.Документ; 
			СтрокаДокумента.БанковскийСчет = Объект.БанковскийСчет;
			
			Если Документ.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаДокумента.Договор = Документ.РасшифровкаПлатежа[0].Договор;
				СтрокаДокумента.ПризнакАванса = Документ.РасшифровкаПлатежа[0].ПризнакАванса;
				СтрокаДокумента.Заказ = Документ.РасшифровкаПлатежа[0].Заказ;
				СтрокаДокумента.ДокументРасчетов = Документ.РасшифровкаПлатежа[0].Документ;
				СтрокаДокумента.СчетНаОплату = Документ.РасшифровкаПлатежа[0].СчетНаОплату;
				Если ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
					СтрокаДокумента.ПлатежноеПоручение = Документ.ДокументОснование;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			АнализироватьИсторию = Истина;
		КонецЕсли;
		
	Иначе // Попробуем собрать статистику использования данных по выбранному контрагенту.
		
		АнализироватьИсторию = Истина;
	КонецЕсли;
	
	#Область ВидОперации
	// 4) Определяем вид операции документа.
	ЭтоПереводМеждуСчетами = Ложь;
	ЭтоСнятиеИлиВзносНаличных = Ложь;
	ЭтоКомиссия = Ложь;
	ЭтоПлатежСотруднику = Ложь;
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		
		НеСоздаватьНовыхЭлементов = Ложь;
		
		Если Исходящий Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.СтатусСоставителя) И СокрП(СтрокаДокумента.СтатусСоставителя) <> "0" Тогда // перечисление налога 
				Если СтрокаДокумента.СтатусСоставителя = "06" ИЛИ СтрокаДокумента.СтатусСоставителя = "08" 
					ИЛИ ((Число(СтрокаДокумента.СтатусСоставителя) >= 16) И (Число(СтрокаДокумента.СтатусСоставителя) <= 20)) Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
				Иначе
					ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.Налоги;
				КонецЕсли;
				//СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
			ИначеЕсли Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", СтрокаДокумента.ПолучательСчет).Владелец = Объект.БанковскийСчет.Владелец Тогда // перевод на другой счет
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет;
				//СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
				ЭтоПереводМеждуСчетами = Истина;
				НеСоздаватьНовыхЭлементов = Истина;
				
			ИначеЕсли ЭтоСчетКассыКредитнойОрганизации(БалансовыйСчет(СтрокаДокумента.ПолучательСчет)) Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных;
				//СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
				ЭтоСнятиеИлиВзносНаличных = Истина;
				НеСоздаватьНовыхЭлементов = Истина;
				
			ИначеЕсли ЭтоКомиссияБанка(СтрокаДокумента, Исходящий) Тогда
				ЭтоКомиссия = Истина;
				ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
				//СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
				
			ИначеЕсли ТипЗнч(Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", СтрокаДокумента.ПолучательСчет).Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда // Сотруднику
				ЭтоПлатежСотруднику = Истина;
				ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику;
				//СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
				
			Иначе // оплата поставщику
				
				ВидОперацииДокумента = ПроверитьВидОперации(СтрокаДокумента, ПараметрыВыделенияКолонок, СтруктураЗначенийИзСоответствия);
				
			КонецЕсли;
		ИначеЕсли Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", СтрокаДокумента.ПлательщикСчет).Владелец = Объект.БанковскийСчет.Владелец Тогда // перевод на другой счет
			
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета;
			//СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
			ЭтоПереводМеждуСчетами = Истина;
			НеСоздаватьНовыхЭлементов = Истина;
			
		ИначеЕсли ЭтоСчетКассыКредитнойОрганизации(БалансовыйСчет(СтрокаДокумента.ПлательщикСчет)) Тогда
			
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными;
			//СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
			ЭтоСнятиеИлиВзносНаличных = Истина;
			НеСоздаватьНовыхЭлементов = Истина;
			
		Иначе
			
			ВидОперацииДокумента = ПроверитьВидОперации(СтрокаДокумента, ПараметрыВыделенияКолонок, СтруктураЗначенийИзСоответствия);
			
		КонецЕсли;
		
		Если НеСоздаватьНовыхЭлементов Тогда
			СтрокаДокумента.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
			СтрокаДокумента.ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
			СтрокаДокумента.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
		КонецЕсли;
		
		СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
	Иначе
		ВидОперацииДокумента = СтрокаДокумента.ВидОперации;
		//СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
	КонецЕсли;
	#КонецОбласти
	
	// 5) Определяем банковский счет организации
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.БанковскийСчет) Тогда
		СтрокаДокумента.БанковскийСчет = Объект.БанковскийСчет;
	КонецЕсли;
	
	#Область БанковскийСчет
	// 6) Определяем банковский счет контрагента
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
		ЗапросПоискаСчета = Новый Запрос;
		Если ОрганизацияПлательщик(ВидДокумента) Тогда
			СчетКонтрагента = СтрокаДокумента.ПолучательСчет;
			ИННКонтрагента = СтрокаДокумента.ПолучательИНН;
			КППКонтрагента = СтрокаДокумента.ПолучательКПП;
			Если ЗначениеЗаполнено(СтрокаДокумента.Получатель1) Тогда
				ИмяКонтрагента = СтрокаДокумента.Получатель1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Получатель;
			КонецЕсли;
			БИКСчета = СтрокаДокумента.ПолучательБИК;
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПолучательСчет);
		Иначе
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПлательщикСчет);
			СчетКонтрагента = СтрокаДокумента.ПлательщикСчет;
			ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
			КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
			Если СтрокаДокумента.Плательщик1 <> "" Тогда
				ИмяКонтрагента = СтрокаДокумента.Плательщик1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Плательщик;
			КонецЕсли;
			БИКСчета = СтрокаДокумента.ПлательщикБИК;
		КонецЕсли;
		
		Если СокрЛП(КППКонтрагента) = "0" Тогда
			КППКонтрагента = "";
		КонецЕсли;
		
		Если ПустаяСтрока(СчетКонтрагента) Тогда
			
			СтрокаЗамечание = НСтр("ru = 'Не найден счет контрагента (%СчетКонтрагента%)!'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%СчетКонтрагента%", СчетКонтрагента);
			
			ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
			
			СтрокаСчетКонтрагента = НСтр("ru = 'Не найден (%СчетКонтрагента%).'");
			СтрокаСчетКонтрагента = СтрЗаменить(СтрокаСчетКонтрагента, "%СчетКонтрагента%", СчетКонтрагента);
			СтрокаДокумента.СчетКонтрагента = СтрокаСчетКонтрагента;
			СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаСчетКонтрагента;
			ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
			//СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
			
		Иначе
			
			ЗапросПоискаСчета.УстановитьПараметр("ИННКонтрагента", ИННКонтрагента);
			ЗапросПоискаСчета.УстановитьПараметр("КППКонтрагента", КППКонтрагента);
			ЗапросПоискаСчета.УстановитьПараметр("ИмяКонтрагента", ИмяКонтрагента);
			ИмяКонтрагентаБезЁ = СтрЗаменить(ИмяКонтрагента, "ё", "е");
			ИмяКонтрагентаБезЁ = СтрЗаменить(ИмяКонтрагентаБезЁ, "Ё", "Е");
			ЗапросПоискаСчета.УстановитьПараметр("ИмяКонтрагентаБезЁ", ИмяКонтрагентаБезЁ);
			ЗапросПоискаСчета.УстановитьПараметр("БИКБанка", БИКСчета);
			
			ЗапросПоискаСчета.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БанковскиеСчета.Владелец КАК Владелец,
			|	БанковскиеСчета.Владелец.ИНН КАК ВладелецИНН,
			|	БанковскиеСчета.Владелец.КодПоЕДРПОУ КАК ВладелецКПП,
			|	БанковскиеСчета.Ссылка КАК Ссылка,
			|	БанковскиеСчета.НомерСчета КАК НомерСчета,
			|	БанковскиеСчета.Банк.Код КАК БИК_из_Базы,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.Банк.Код = &БИКБанка
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетБИК,
			|	ВЫБОР
			|		КОГДА ВЫБОР
			|				КОГДА БанковскиеСчета.Владелец.КодПоЕДРПОУ = ""0""
			|					ТОГДА """"
			|				ИНАЧЕ БанковскиеСчета.Владелец.КодПоЕДРПОУ
			|			КОНЕЦ = &КППКонтрагента
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетКПП,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.Владелец.ИНН = &ИННКонтрагента
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетИНН,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.Владелец.Наименование = &ИмяКонтрагента
			|				ИЛИ БанковскиеСчета.Владелец.Наименование = &ИмяКонтрагентаБезЁ
			|				ИЛИ (ВЫРАЗИТЬ(БанковскиеСчета.Владелец.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагента
			|				ИЛИ (ВЫРАЗИТЬ(БанковскиеСчета.Владелец.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагентаБезЁ
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетНаименования
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Контрагенты
			|	И БанковскиеСчета.НомерСчета = &НомерСчета
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПриоритетИНН,
			|	ПриоритетБИК,
			|	ПриоритетНаименования,
			|	ПриоритетКПП";
			
			Если ЭтоПереводМеждуСчетами Тогда
				ЗапросПоискаСчета.Текст = СтрЗаменить(ЗапросПоискаСчета.Текст,
				"БанковскиеСчета.Владелец ССЫЛКА Справочник.Контрагенты",
				"БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации");
			ИначеЕсли ЭтоПлатежСотруднику Тогда
				ЗапросПоискаСчета.Текст = СтрЗаменить(ЗапросПоискаСчета.Текст,
				"БанковскиеСчета.Владелец ССЫЛКА Справочник.Контрагенты",
				"БанковскиеСчета.Владелец ССЫЛКА Справочник.ФизическиеЛица");
			КонецЕсли;
			
			РезультатЗапросаПоБС = ЗапросПоискаСчета.Выполнить();
			ВыборкаПоиска = РезультатЗапросаПоБС.Выбрать();
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			
			// Нужно обработать следующую ситуацию.
			// У контрагента изменился ИНН, но номер счета остался прежним.
			// Будем в этом случае выдавать предупреждающее сообщение и предлагать создать нового контрагента, если не нашли контрагента с нужным ИНН.
			
			КонтрагентНеНайден = Истина;
			Если ВыборкаПоиска.Следующий() Тогда
				ПроверкаБИКа = Ложь;
				
				// Если в файле указан ИНН контрагента, но мы его не нашли.
				Если НЕ ПустаяСтрока(ИННКонтрагента) И ВыборкаПоиска.ПриоритетИНН = 2 И ВыборкаПоиска.ПриоритетНаименования = 2 Тогда
					
					СтрокаЗамечание = НСтр("ru = 'Банковский счет найден у контрагента с другим ИНН (%ВладелецИНН%)!'");
					Если ЗначениеЗаполнено(ВыборкаПоиска.ВладелецИНН) Тогда
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", ВыборкаПоиска.ВладелецИНН);
					Иначе
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", НСтр("ru = '<Не заполнен>'"));
					КонецЕсли;
					ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
					СтрокаДокумента.СчетКонтрагента = СтрокаЗамечание;
					СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаЗамечание;
					
				Иначе
					
					КонтрагентНеНайден = Ложь;
					
					СтрокаДокумента.СчетКонтрагента = ВыборкаПоиска.Ссылка;
					Контрагент = ВыборкаПоиска.Владелец;
					
					// Не совпадает БИК в базе и в выписке.
					Если (ВыборкаПоиска.ПриоритетБИК = 2) Тогда
						// Проверим БИК банка. Может не совпадать. Например у разных контрагентов есть разные счета в разных банках,
						// но с одинаковым номером.
						ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
						//СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
						
						СтрокаЗамечание = НСтр("ru = 'БИК банка счета контрагента в базе (%БИК_из_Базы%) не совпадает с БИК банка в выписке (%БИК_в_Выписке%).'");
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%БИК_из_Базы%", ?(ЗначениеЗаполнено(ВыборкаПоиска.БИК_из_Базы), ВыборкаПоиска.БИК_из_Базы, НСтр("ru = '<пустой>'")));
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%БИК_в_Выписке%", ?(ЗначениеЗаполнено(БИКСчета), БИКСчета, НСтр("ru = '<пустой>'")));
						ДобавитьЗамечание(СтрокаДокумента, 4, СтрокаЗамечание);
					КонецЕсли;
					
					// Не совпадает ИНН (в частности, когда ИНН не заполнен в ИБ.
					Если НЕ ПустаяСтрока(ИННКонтрагента) И ВыборкаПоиска.ПриоритетИНН = 2 Тогда
						СтрокаЗамечание = НСтр("ru = 'Банковский счет найден у контрагента с другим ИНН (%ВладелецИНН%)!'");
						Если ЗначениеЗаполнено(ВыборкаПоиска.ВладелецИНН) Тогда
							СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", ВыборкаПоиска.ВладелецИНН);
						Иначе
							СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", НСтр("ru = '<Не заполнен>'"));
						КонецЕсли;
						ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
						СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаЗамечание;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если КонтрагентНеНайден Тогда
				СтрокаЗамечание = НСтр("ru = 'Не найден счет контрагента (%СчетКонтрагента%)!'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%СчетКонтрагента%", СчетКонтрагента);
				
				ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
				
				СтрокаСчетКонтрагента = НСтр("ru = 'Не найден (%СчетКонтрагента%).'");
				СтрокаСчетКонтрагента = СтрЗаменить(СтрокаСчетКонтрагента, "%СчетКонтрагента%", СчетКонтрагента);
				СтрокаДокумента.СчетКонтрагента = СтрокаСчетКонтрагента;
				СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаСчетКонтрагента;
				ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
				//СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
			КонецЕсли;
			
			// Если ИНН не указан, то в выборку попадут все контрагенты, у которых есть счет с нужным номером.
			// Если ИНН указан, то нужно сообщать только количестве счетов у контрагентов с ИНН как в выписке из банка.
			Если НЕ ПустаяСтрока(КППКонтрагента) Тогда
				КоличествоЭлементовВВыборке = 0;
				ВыборкаПоиска.Сбросить();
				Пока ВыборкаПоиска.Следующий() Цикл
					Если ВыборкаПоиска.ВладелецКПП = КППКонтрагента Тогда
						КоличествоЭлементовВВыборке = КоличествоЭлементовВВыборке + 1;
					КонецЕсли;
				КонецЦикла;
			Иначе
				КоличествоЭлементовВВыборке = ВыборкаПоиска.Количество();
			КонецЕсли;
			
			Если КоличествоЭлементовВВыборке > 1 Тогда
				// Если ИНН и наименование контрагента совпадают с теми, что указаны в выписке, то не будем выдавать сообщения о нескольких РС.
				СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%Количество%) одинаковых банковских счетов! Проверьте контрагента и р/счет!'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Количество%", КоличествоЭлементовВВыборке);
				ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
				Если ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка") ИЛИ Не ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
					СтрокаДокумента.СчетКонтрагента = СтрокаЗамечание;
				КонецЕсли;
				СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаСчетКонтрагента;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область КассаОрганизации
	// Определим кассу орагазинации для операций снятия наличных и взноса наличных на счет организации.
	Если ЭтоСнятиеИлиВзносНаличных И СтрокаДокумента.Касса.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Кассы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|ГДЕ
		|	НЕ Кассы.ПометкаУдаления
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
		|ПО
		|	ОБЩИЕ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ВыборкаОбщийИтог.Следующий();		// Общий итог
		
		Если ВыборкаОбщийИтог.Ссылка = 1 Тогда
			
			ВыборкаДетальныеЗаписи = ВыборкаОбщийИтог.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			
			СтрокаДокумента.Касса = ВыборкаДетальныеЗаписи.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область Контрагент
	
	// 7) Определим контрагента.
	ДанныеКонтрагентаПолучены = Ложь;
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СтрокаДокумента.Контрагент = Контрагент;
		ИначеЕсли НЕ ПустаяСтрока(КППКонтрагента) Тогда
			
			СтрокаДокумента.Контрагент = Контрагент;
			ЗапросПоискаКонтрагента = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка КАК Ссылка,
			|	Контрагенты.Наименование КАК Наименование,
			|	Контрагенты.ИНН КАК ИНН,
			|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
			|	ВЫБОР
			|		КОГДА Контрагенты.КодПоЕДРПОУ = ""0""
			|			ТОГДА """"
			|		ИНАЧЕ Контрагенты.КодПоЕДРПОУ
			|	КОНЕЦ КАК КПП,
			|	ВЫБОР
			|		КОГДА ВЫБОР
			|				КОГДА Контрагенты.КодПоЕДРПОУ = ""0""
			|					ТОГДА """"
			|				ИНАЧЕ Контрагенты.КодПоЕДРПОУ
			|			КОНЕЦ = &КППКонтрагента
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетКПП,
			|	ВЫБОР
			|		КОГДА Контрагенты.Наименование = &ИмяКонтрагента
			|				ИЛИ Контрагенты.Наименование = &ИмяКонтрагентаБезЁ
			|				ИЛИ (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагента
			|				ИЛИ (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагентаБезЁ
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетНаименования
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	(Контрагенты.КодПоЕДРПОУ = &КППКонтрагента
			|			ИЛИ ВЫБОР
			|				КОГДА Контрагенты.Наименование = &ИмяКонтрагента
			|						ИЛИ Контрагенты.Наименование = &ИмяКонтрагентаБезЁ
			|						ИЛИ (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагента
			|						ИЛИ (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагентаБезЁ
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПриоритетНаименования,
			|	ПриоритетКПП");
			
			//ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентИНН", ИННКонтрагента);
			ЗапросПоискаКонтрагента.УстановитьПараметр("КППКонтрагента", КППКонтрагента);
			ЗапросПоискаКонтрагента.УстановитьПараметр("ИмяКонтрагента", ИмяКонтрагента);
			ЗапросПоискаКонтрагента.УстановитьПараметр("ИмяКонтрагентаБезЁ", ИмяКонтрагентаБезЁ);
			
			ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выбрать();
			
			Если ВыборкаПоиска.Следующий() Тогда
				СтрокаДокумента.Контрагент = ВыборкаПоиска.Ссылка;
				
				ИННКонтрагентаВБазе = ВыборкаПоиска.ИНН;
				КППКонтрагентаВБазе = ВыборкаПоиска.КПП;
				
				НаименованиеПолноеКонтрагентаВБазе = ВыборкаПоиска.НаименованиеПолное;
				
				ДанныеКонтрагентаПолучены = Истина;
				
				Если ПустаяСтрока(ВыборкаПоиска.КПП) Тогда
					СтрокаЗамечание = НСтр("ru = 'У контрагента не заполнен ЕДРПОУ!'");
					ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВыборкаПоиска.Количество() > 1 Тогда
				СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%Количество%) контрагентов с одинаковым ЕДРПОУ!'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Количество%", ВыборкаПоиска.Количество());
				ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
				
			ИначеЕсли ВыборкаПоиска.Количество() = 0 Тогда
				СтрокаЗамечание = НСтр("ru = 'Не найден контрагент (%ИмяКонтрагента%, ЕДРПОУ %ИННКонтрагента%)!'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИмяКонтрагента%", ИмяКонтрагента);
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИННКонтрагента%", КППКонтрагента);
				ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание, Истина);
				СтрокаКонтрагент = НСтр("ru = 'Не найден (%ИмяКонтрагента%, ЕДРПОУ %ИННКонтрагента%)!'");
				СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИмяКонтрагента%", ИмяКонтрагента);
				СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИННКонтрагента%", КППКонтрагента);
				СтрокаДокумента.Контрагент = СтрокаКонтрагент; // БЫЛО РАНЬШЕ - СтрокаСчетКонтрагента;
				
			КонецЕсли;
			
		Иначе
			ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru = 'Не указан ЕДРПОУ контрагента! '"), Истина);
			СтрокаКонтрагент = НСтр("ru = 'Не найден (%ИмяКонтрагента%, не указан ЕДРПОУ)!'");
			СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИмяКонтрагента%", ИмяКонтрагента);
			СтрокаДокумента.Контрагент = СтрокаКонтрагент;
			
		КонецЕсли;
	КонецЕсли;
	
	
	// Если платеж осуществляется сотруднику, подставляем первого подходящего сотрудника по найденному физ лицу
	Если ЭтоПлатежСотруднику И ЗначениеЗаполнено(Контрагент) Тогда
		
		ЗапросПоСотруднику = Новый Запрос;
		ЗапросПоСотруднику.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Физлицо = &Физлицо
		|	И НЕ Сотрудники.Недействителен
		|	И НЕ Сотрудники.ПометкаУдаления";
		
		ЗапросПоСотруднику.УстановитьПараметр("Физлицо", Контрагент);
		
		ВыборкаСотрудник = ЗапросПоСотруднику.Выполнить().Выбрать();
		
		Если ВыборкаСотрудник.Следующий() Тогда
			СтрокаДокумента.Контрагент = ВыборкаСотрудник.Ссылка;
			СтрокаДокумента.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
			СтрокаДокумента.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
			СтрокаДокумента.КонтрагентНайден = Истина;
			Контрагент = ВыборкаСотрудник.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим совпадают ли данные контрагента в выписке с данными в информационной базе.
	// Если не совпадают, то будем выводить восклицательный знак.
	Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если НЕ ДанныеКонтрагентаПолучены И ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
			ИННКонтрагентаВБазе = СтрокаДокумента.Контрагент.ИНН;
			КППКонтрагентаВБазе = СтрокаДокумента.Контрагент.КодПоЕДРПОУ;
			Если СокрЛП(КППКонтрагентаВБазе) = "0" Тогда
				КППКонтрагентаВБазе = "";
			КонецЕсли;
			НаименованиеПолноеКонтрагентаВБазе = СтрокаДокумента.Контрагент.НаименованиеПолное;
		КонецЕсли;
		Если ИмяКонтрагента = Неопределено Тогда
			Если ОрганизацияПлательщик(ВидДокумента) Тогда
				ИННКонтрагента = СтрокаДокумента.ПолучательИНН;
				КППКонтрагента = СтрокаДокумента.ПолучательКПП;
				Если ЗначениеЗаполнено(СтрокаДокумента.Получатель1) Тогда
					ИмяКонтрагента = СтрокаДокумента.Получатель1;
				Иначе
					ИмяКонтрагента = СтрокаДокумента.Получатель;
				КонецЕсли;
			Иначе
				ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
				КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
				Если СтрокаДокумента.Плательщик1 <> "" Тогда
					ИмяКонтрагента = СтрокаДокумента.Плательщик1;
				Иначе
					ИмяКонтрагента = СтрокаДокумента.Плательщик;
				КонецЕсли;
			КонецЕсли;
			
			Если СокрЛП(КППКонтрагента) = "0" Тогда
				КППКонтрагента = "";
			КонецЕсли;
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) И СтрокаДокумента.КонтрагентНеНайденКартинка = -1 Тогда
		//	Если ИННКонтрагентаВБазе <> ИННКонтрагента
		//		ИЛИ КППКонтрагентаВБазе <> КППКонтрагента
		//		ИЛИ ВРег(СокрЛП(НаименованиеПолноеКонтрагентаВБазе)) <> ВРег(СокрЛП(ИмяКонтрагента)) Тогда
		//		
		//		СтрокаПроверки = "";
		//		КолвоРеквизитовДляПроверки = 0;
		//		Если ИННКонтрагентаВБазе <> ИННКонтрагента Тогда
		//			СтрокаПроверки = НСтр("ru = 'ЕДРПОУ, '");
		//			КолвоРеквизитовДляПроверки = КолвоРеквизитовДляПроверки + 1;
		//		КонецЕсли;
		//		Если КППКонтрагентаВБазе <> КППКонтрагента Тогда
		//			СтрокаПроверки = СтрокаПроверки + НСтр("ru = 'ЕДРПОУ, '");
		//			КолвоРеквизитовДляПроверки = КолвоРеквизитовДляПроверки + 1;
		//		КонецЕсли;
		//		Если ВРег(СокрЛП(НаименованиеПолноеКонтрагентаВБазе)) <> ВРег(СокрЛП(ИмяКонтрагента)) Тогда
		//			СтрокаПроверки = СтрокаПроверки + НСтр("ru = 'юридическое название, '");
		//			КолвоРеквизитовДляПроверки = КолвоРеквизитовДляПроверки + 1;
		//		КонецЕсли;
		//		СтрокаПроверки = Лев(СтрокаПроверки, СтрДлина(СтрокаПроверки) - 2);
		//		
		//		Если КолвоРеквизитовДляПроверки = 2 Тогда
		//			СтрокаПроверки = СтрЗаменить(СтрокаПроверки, ", ", НСтр("ru = ' и '"));
		//		КонецЕсли;
		//		
		//		СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
		//		ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
		//		Если КолвоРеквизитовДляПроверки = 1 Тогда
		//			СтрокаЗамечание = НСтр("ru = 'Проверьте %СтрокаПроверки% контрагента!'");
		//		Иначе
		//			СтрокаЗамечание = НСтр("ru = 'Проверьте реквизиты контрагента: %СтрокаПроверки%!'");
		//		КонецЕсли;
		//		СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%СтрокаПроверки%", СтрокаПроверки);
		//		ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
		//		ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
		//	КонецЕсли;
		//КонецЕсли;
	Иначе
		// Для новых контрагентов не будем выводить информацию о том, что не найден РС или договор.
		СтрокаДокумента.ОписаниеОшибок = УдалитьДанныеИзОписанияОшибкиНаСервере(НСтр("ru = 'Не найден счет контрагента'"), СтрокаДокумента.ОписаниеОшибок, СтрокаДокумента);
	КонецЕсли;
	
	#КонецОбласти
	
	ВидОперацииОпределен = Ложь;
	
	// 14) Поищем платежное поручение, заказ покупателя и счет на оплату.
	//     Ищем только точное совпадение суммы, вхождение номера и года.
	Если Не ДокументНайден Тогда
		// Поищем платежное поручение и заполним все по нему, если найдем.
		НашлиПП = Ложь;
		
		Если Объект.АвтоматическиПодставлятьДокументы Тогда
			Если Исходящий Тогда
				СтруктураВозвратаПП = ОпределитьПлатежноеПоручение(СтрокаДокумента);
				НашлиПП = СтруктураВозвратаПП.НашлиПП;
			КонецЕсли;
			
			// Поищем заказ или счет на оплату. Если найдем, то договор возьмем оттуда.
			ДоговорВЗаказеСчете = ОпределитьЗаказИСчетНаСервере(СтрокаДокумента, Объект);
			// Поищем расчётный документ. Если договор уже определили, то документы ищем с отбором по договору.
			// Более приоритетны расчётные документы, которые связаны с найденным заказом.
			Если ЗначениеЗаполнено(ДоговорВЗаказеСчете) Тогда
				ОпределитьДокументРасчетовНаСервере(СтрокаДокумента, ДоговорВЗаказеСчете, Объект);
			Иначе
				ДоговорВЗаказеСчете = ОпределитьДокументРасчетовНаСервере(СтрокаДокумента,, Объект);
			КонецЕсли;
			
			// Если заказ и счет на оплату определить не удалось, то поищем их в связанных документах.
			// Если они там есть в единственном экземпляре, то подставим их.
			Если ЗначениеЗаполнено(СтрокаДокумента.ДокументРасчетов)
				И НЕ ЗначениеЗаполнено(СтрокаДокумента.Заказ)
				И НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетНаОплату) Тогда
				//СчетНаОплату = УчетРасчетовСКонтрагентами.ПолучитьСчетНаОплатуПоОснованию(СтрокаДокумента.ДокументРасчетов, Истина);!!!!!!!
				//СчетНаОплатуПоставщика = УчетРасчетовСКонтрагентами.ПолучитьСчетНаОплатуПоОснованию(СтрокаДокумента.ДокументРасчетов, Ложь);!!!!!!!
				//Если ЗначениеЗаполнено(СчетНаОплату) И НЕ ЗначениеЗаполнено(СчетНаОплатуПоставщика) Тогда
				//	СтрокаДокумента.СчетНаОплату = СчетНаОплату;
				//ИначеЕсли НЕ ЗначениеЗаполнено(СчетНаОплату) И ЗначениеЗаполнено(СчетНаОплатуПоставщика) Тогда
				//	СтрокаДокумента.СчетНаОплату = СчетНаОплатуПоставщика;
				//КонецЕсли;
			КонецЕсли;
			
			Если НашлиПП Тогда
				
				Если СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа.Количество() = 1 Тогда
					
					// Документ расчетов
					Если ЗначениеЗаполнено(СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].Документ) Тогда
						СтрокаДокумента.ДокументРасчетов = СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].Документ;
					КонецЕсли;
					
					// Заказ
					Если ЗначениеЗаполнено(СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].Заказ) Тогда
						СтрокаДокумента.Заказ = СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].Заказ;
					КонецЕсли;
					
					// Счет на оплату
					Если ЗначениеЗаполнено(СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].СчетНаОплату) Тогда
						СтрокаДокумента.СчетНаОплату = СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].СчетНаОплату;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаДокумента.Заказ) Тогда
					
					Если ТипЗнч(СтруктураВозвратаПП.ДокументОснованиеПП) = Тип("ДокументСсылка.ЗаказПоставщику") И
						ЗначениеЗаполнено(СтруктураВозвратаПП.ДокументОснованиеПП)
						Тогда
						СтрокаДокумента.Заказ = СтруктураВозвратаПП.ДокументОснованиеПП;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрокаДокумента.Договор) И ЗначениеЗаполнено(СтруктураВозвратаПП.Договор) Тогда
						СтрокаДокумента.Договор = СтруктураВозвратаПП.Договор;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаДокумента.СчетНаОплату) Тогда
					
					Если ТипЗнч(СтруктураВозвратаПП.ДокументОснованиеПП) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И
						ЗначениеЗаполнено(СтруктураВозвратаПП.ДокументОснованиеПП)
						Тогда
						
						Если СтруктураВозвратаПП.ДокументОснованиеПП.Контрагент = СтрокаДокумента.Контрагент Тогда
							СтрокаДокумента.СчетНаОплату = СтруктураВозвратаПП.ДокументОснованиеПП;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Попробуем определить вид операции по данным в ПП.
				Если СтруктураВозвратаПП.ВидОперацииПП <> Неопределено Тогда
					
					ВидОперацииОпределен = Истина;
					
					Если СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.Зарплата Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.ЛичныеСредстваПредпринимателя Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.НаРасходы Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.Покупателю Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.Прочее Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.ПрочиеРасчеты Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.Подотчетнику Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику;
					Иначе
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
						ВидОперацииОпределен = Ложь;
					КонецЕсли;
					
					Если ВидОперацииОпределен Тогда
						// Удалим предупреждение о проверке вида операции.
						СтрокаДокумента.ОписаниеОшибок = УдалитьДанныеИзОписанияОшибкиНаСервере(НСтр("ru = 'Проверьте операцию'"), СтрокаДокумента.ОписаниеОшибок, СтрокаДокумента);
						//СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
					КонецЕсли;
					
				КонецЕсли;
				
				// Корреспонденция и статья ДДС
				Если СтруктураВозвратаПП.КорреспонденцияПП <> Неопределено Тогда
					СтрокаДокумента.Корреспонденция = СтруктураВозвратаПП.КорреспонденцияПП;
				КонецЕсли;
				Если СтруктураВозвратаПП.СтатьяДДС_ПП <> Неопределено Тогда
					СтрокаДокумента.СтатьяДДС = СтруктураВозвратаПП.СтатьяДДС_ПП;
				КонецЕсли;
				
			ИначеЕсли Не ДоговорВЗаказеСчете.Пустая() Тогда
				СтрокаДокумента.Договор = ДоговорВЗаказеСчете;
			КонецЕсли; // Если НашлиПП Тогда
		Иначе
			ДоговорВЗаказеСчете = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Исходящий Тогда
		СтрокаДокумента.ВидОперацииСписание = СтрокаДокумента.ВидОперации;
	Иначе
		СтрокаДокумента.ВидОперацииПоступление = СтрокаДокумента.ВидОперации;
	КонецЕсли;
	
	// 8) Определим договор контрагента
	Если СтрокаДокумента.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Налоги
		И СтрокаДокумента.ВидОперации <> Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги
		И СтрокаДокумента.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику
		И СтрокаДокумента.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику
		И НЕ ЗначениеЗаполнено(СтрокаДокумента.Договор) Тогда
		СтруктураДанныхПоискаДоговора = НайтиДоговор(СтрокаДокумента.Контрагент, Объект.Организация);
		СтрокаДокумента.Договор = СтруктураДанныхПоискаДоговора.Договор;
		Если СтрНайти(СтрокаДокумента.Договор, НСтр("ru = 'Не найден'")) > 0 Тогда
			СтруктураДанныхПоискаДоговора = НайтиДоговор(СтрокаДокумента.Контрагент);
			СтрокаДокумента.Договор = СтруктураДанныхПоискаДоговора.Договор;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") И
				ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
				
				Если ТипЗнч(СтрокаДокумента.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					СтрокаЗамечания = НСтр("ru = 'Организация в договоре отличается от организации счета! '");
					ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечания);
				КонецЕсли;
				
				ПараметрыВыделенияКолонок.ВыделитьКолонкуДоговор = Истина;
				//СтрокаДокумента.ДоговорНеНайденКартинка = 0;
				
			КонецЕсли;
		КонецЕсли;
		// Если контрагент новый и будет создан новый, то не будем сообщать, что не найден договор и РС.
		Если СтрНайти(СтрокаДокумента.Договор, НСтр("ru = 'Не найден'")) > 0 И ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка") Тогда
			ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru = 'Не найден договор контрагента! '"));
			ПараметрыВыделенияКолонок.ВыделитьКолонкуДоговор = Истина;
			//СтрокаДокумента.ДоговорНеНайденКартинка = 0;
		КонецЕсли;
		Если СтруктураДанныхПоискаДоговора.КоличествоДоговоров > 1 Тогда
			СтрокаЗамечания = НСтр("ru = 'У контрагента несколько договоров (%КоличествоДоговоров%)! '");
			СтрокаЗамечания = СтрЗаменить(СтрокаЗамечания, "%КоличествоДоговоров%", СтруктураДанныхПоискаДоговора.КоличествоДоговоров);
			ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечания);
			ПараметрыВыделенияКолонок.ВыделитьКолонкуДоговор = Истина;
			//СтрокаДокумента.ДоговорНеНайденКартинка = 0;
		КонецЕсли;
	КонецЕсли;
	
	// 9) Определим Статью ДДС по умолчанию.
	Если СтруктураЗначенийИзСоответствия.СоответствиеНайдено Тогда
		ЗаполнитьСтатьюДДСИСвязанныеЭлементыПоСтруктуреСоответствий(СтрокаДокумента, СтруктураЗначенийИзСоответствия);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
		
		Если ЭтоКомиссия Тогда
			СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
		ИначеЕсли СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги ИЛИ
			СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги ИЛИ
			СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными ИЛИ
			СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета ИЛИ
			СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных ИЛИ
			СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет
			Тогда
			
			СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
			
		ИначеЕсли Исходящий Тогда
			СтрокаДокумента.СтатьяДДС = Объект.СтатьяДДСИсходящий;
		Иначе
			СтрокаДокумента.СтатьяДДС = Объект.СтатьяДДСВходящий;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
			СтрокаДокумента.СтатьяДДС = ПолучитьСтатьюДДСПоВидуОперации(СтрокаДокумента.ВидОперации, СтрокаДокумента.СтатьяДДС);
		КонецЕсли;
		
	КонецЕсли;
	
	// 11) Определим очередность платежа.
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрокаДокумента.Очередность);
	Если Буфер <> "" И НЕ ЕстьНеЦифрыНаСервере(Буфер) Тогда
		СтрокаДокумента.ОчередностьПлатежа = Число(Буфер);
	Иначе
		СтрокаДокумента.ОчередностьПлатежа = 0;
	КонецЕсли;
	
	// 12) Определим ПоказательДатыДок (для Платежного поручения исхожящего при
	// перечислении налогов).
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСТрока(СтрокаДокумента.ПоказательДаты) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.ПоказательДатыДок, СтрокаДокумента.ПоказательДаты);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.ПоказательДатыДок = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// 13) ДатаСписано и ДатаПоступило, ДатаПроведения.
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаСписано) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Списано, СтрокаДокумента.ДатаСписано);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Списано = ПустаяДата;
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Списано = ПустаяДата;
	КонецЕсли;
	
	// Преобразуем в дату из строки, если не пустая.
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаПоступило) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Поступило, СтрокаДокумента.ДатаПоступило);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Поступило = ПустаяДата;
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Поступило = ПустаяДата;
	КонецЕсли;
	
	// Если НазначениеПлатежа пустое, формируем его из НазначениеПлатежа1...НазначениеПлатежа6.
	Если ПустаяСтрока(СтрокаДокумента.НазначениеПлатежа) Тогда
		СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа1;
		Для Сч = 2 По 6 Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента["НазначениеПлатежа" + Сч]) Тогда
				Прервать;
			КонецЕсли;
			СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа + Символы.ПС + СтрокаДокумента["НазначениеПлатежа" + Сч];
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураЗначенийИзСоответствия.СоответствиеНайдено Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Корреспонденция) Тогда
			СтрокаДокумента.Корреспонденция = СтруктураЗначенийИзСоответствия.Корреспонденция;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДокумента.КонтрагентИсходный = СтрокаДокумента.Контрагент;
	
	Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными Тогда
		СтрокаДокумента.СчетКонтрагента = "";
	КонецЕсли;
	
	//СтрокаДокумента.СчетКонтрагентаИсходный = СтрокаДокумента.СчетКонтрагента;
	
	// Способ зачета
	Если ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
		УстановитьСпособЗачетаПоДокументу(СтрокаДокумента);
	Иначе
		Если Объект.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную Тогда
			СтрокаДокумента.СпособЗачетаТЧ = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
		ИначеЕсли Объект.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто
			И ЭтоОперацияГдеВозможныАвторасчеты(СтрокаДокумента.ВидОперации) Тогда
			СтрокаДокумента.СпособЗачетаТЧ = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
			ОчиститьИнформациюОДокументахНаСервере(СтрокаДокумента);
		Иначе
			УстановитьСпособЗачетаПоУмолчанию(СтрокаДокумента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РаспознатьДанныеВСтрокеДокумента()

Процедура УстановитьСпособЗачетаПоУмолчанию(СтрокаДокумента)
	
	Если ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
		УстановитьСпособЗачетаПоДокументу(СтрокаДокумента);
	Иначе
		ОбновитьСпособЗачетаНаСервере(СтрокаДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСпособЗачетаПоДокументу(СтрокаДокумента)
	
	Если СтрокаДокумента.Документ.РасшифровкаПлатежа.Количество() > 0 Тогда
		СтрокаДокумента.СпособЗачетаТЧ = СтрокаДокумента.Документ.РасшифровкаПлатежа[0].СпособЗачета;
		Если СтрокаДокумента.СпособЗачетаТЧ.Пустая() Тогда
			СтрокаДокумента.СпособЗачетаТЧ = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
		КонецЕсли;
	Иначе
		ОбновитьСпособЗачетаНаСервере(СтрокаДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСпособЗачетаНаСервере(СтрокаДокумента)
	
	//Если ЭтоОперацияГдеВозможныАвторасчеты(СтрокаДокумента.ВидОперации) Тогда  !!!!!!!
	//	Если ЗначениеЗаполнено(СтрокаДокумента.ДокументРасчетов)
	//		Или ЗначениеЗаполнено(СтрокаДокумента.ПлатежноеПоручение)
	//		Или ЗначениеЗаполнено(СтрокаДокумента.СчетНаОплату)
	//		Или ЗначениеЗаполнено(СтрокаДокумента.Заказ) Тогда
	//		СтрокаДокумента.СпособЗачетаТЧ = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	//	ИначеЕсли ТипЗнч(СтрокаДокумента.Договор) = Тип("Строка")
	//		И ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
	//		СтрокаДокумента.СпособЗачетаТЧ = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособРазнесенияДляДоговора(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), СтрокаДокумента.Контрагент);
	//	ИначеЕсли ТипЗнч(СтрокаДокумента.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
	//		И ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
	//		СтрокаДокумента.СпособЗачетаТЧ = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособРазнесенияДляДоговора(СтрокаДокумента.Договор, СтрокаДокумента.Контрагент);
	//	Иначе
	//		СтрокаДокумента.СпособЗачетаТЧ = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособРазнесенияОплатыПоУмолчанию();
	//	КонецЕсли;
	//Иначе
	//	СтрокаДокумента.СпособЗачетаТЧ = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	//КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОперацияГдеВозможныАвторасчеты(пВидОперации)
	
	Возврат (пВидОперации = "Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПокупателя"
	Или пВидОперации = "Перечисление.ВидыОперацийРасходСоСчета.Поставщику");
	
КонецФункции

Процедура ОчиститьИнформациюОДокументахНаСервере(пСтрока)
	
	пСтрока.Заказ = Неопределено;
	пСтрока.СчетНаОплату = Неопределено;
	пСтрока.ПлатежноеПоручение = Неопределено;
	пСтрока.ДокументРасчетов = Неопределено;
	
КонецПроцедуры

Функция ПолучитьСтатьюДДСПоВидуОперации(ВидОперации, СтатьяДДС)
	
	Если ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПоступлениеНаСчет") Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
		Иначе
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
		КонецЕсли;
	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
		Иначе
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьСтатьюДДСИСвязанныеЭлементыПоСтруктуреСоответствий(СтрокаДокумента, СтруктураЗначенийИзСоответствия)
	
	Если (СтрокаДокумента.Исходящий И Не СтруктураЗначенийИзСоответствия.ВидОперацииРасходаСоСчета.Пустая()) ИЛИ
		(Не СтрокаДокумента.Исходящий И Не СтруктураЗначенийИзСоответствия.ВидОперацииПоступленияНаСчет.Пустая()) Тогда
		
		Если Не СтруктураЗначенийИзСоответствия.СтатьяДДС.Пустая() Тогда
			СтрокаДокумента.СтатьяДДС = СтруктураЗначенийИзСоответствия.СтатьяДДС;
		КонецЕсли;
		Если Не СтруктураЗначенийИзСоответствия.Корреспонденция.Пустая() Тогда
			СтрокаДокумента.Корреспонденция = СтруктураЗначенийИзСоответствия.Корреспонденция;
		КонецЕсли;
		
		//СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
		
		Возврат ?(СтрокаДокумента.Исходящий, СтруктураЗначенийИзСоответствия.ВидОперацииРасходаСоСчета, СтруктураЗначенийИзСоответствия.ВидОперацииПоступленияНаСчет);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция НайтиДоговор(ВладелецДоговора, ОрганизацияДоговора = Неопределено, СписокВидовДоговора = Неопределено)
	
	СтруктураВозврат = Новый Структура("Договор, КоличествоДоговоров", НСтр("ru = 'Не найден договор по умолчанию'"), 0);
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА ОсновныеДоговорыКонтрагента.Контрагент ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО (ОсновныеДоговорыКонтрагента.Контрагент = ДоговорыКонтрагентов.Владелец)
	|			И ДоговорыКонтрагентов.Ссылка = ОсновныеДоговорыКонтрагента.Договор
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ТекстФильтра =
	"	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора"
	+ ?(ОрганизацияДоговора <> Неопределено, "
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора", "") 
	+	"	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+ ?(СписокВидовДоговора <> Неопределено, "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)", "");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		СтруктураВозврат.КоличествоДоговоров = Выборка.Количество();
		
		Выборка.Следующий();
		СтруктураВозврат.Договор = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат СтруктураВозврат;
	
КонецФункции // НайтиДоговор()

Функция ОпределитьДокументРасчетовНаСервере(СтрокаДокумента, ДоговорВЗаказеСчете = Неопределено, Объект)
	
	Если (ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты")) 
		И ЗначениеЗаполнено(СтрокаДокумента.Контрагент)
		И СтрокаДокумента.Контрагент.ВестиРасчетыПоДокументам
		Тогда
		
		// Для сценария, когда заполнен заказ, в результат запроса не попадают те документы, в которых заказ заполнен и он не равен заказу в параметре &Заказ.
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСПокупателямиОстатки.Документ КАК ДокументРасчетов,
		|	РасчетыСПокупателямиОстатки.СуммаОстаток,
		|	РасчетыСПокупателямиОстатки.СуммаВалОстаток,
		|	РасчетыСПокупателямиОстатки.Документ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	РасчетыСПокупателямиОстатки.Документ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	РасчетыСПокупателямиОстатки.Заказ,
		|	РасчетыСПокупателямиОстатки.Договор,
		|	РасчетыСПокупателямиОстатки.Документ.Номер КАК Номер,
		|	РасчетыСПокупателямиОстатки.Документ.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА &ЗаказЗаполнен
		|				И РасчетыСПокупателямиОстатки.Заказ = &Заказ
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Остатки(
		|			,
		|			Организация = &Организация
		|				И Документ.Контрагент = &Контрагент) КАК РасчетыСПокупателямиОстатки
		|ГДЕ
		|	РасчетыСПокупателямиОстатки.СуммаВалОстаток = &Сумма
		|	И НЕ &Исходящий
		|	И (НЕ &ОтборПоДоговору
		|			ИЛИ РасчетыСПокупателямиОстатки.Договор = &ДоговорВЗаказеСчете)
		|	И (НЕ &ЗаказЗаполнен
		|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = &Заказ
		|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = NULL
		|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = НЕОПРЕДЕЛЕНО)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.Документ,
		|	РасчетыСПоставщикамиОстатки.СуммаОстаток,
		|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток,
		|	РасчетыСПоставщикамиОстатки.Документ.НомерВходящегоДокумента,
		|	РасчетыСПоставщикамиОстатки.Документ.ДатаВходящегоДокумента,
		|	РасчетыСПоставщикамиОстатки.Заказ,
		|	РасчетыСПоставщикамиОстатки.Договор,
		|	РасчетыСПоставщикамиОстатки.Документ.Номер,
		|	РасчетыСПоставщикамиОстатки.Документ.Дата,
		|	ВЫБОР
		|		КОГДА &ЗаказЗаполнен
		|				И РасчетыСПоставщикамиОстатки.Заказ = &Заказ
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
		|			,
		|			Организация = &Организация
		|				И Документ.Контрагент = &Контрагент) КАК РасчетыСПоставщикамиОстатки
		|ГДЕ
		|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток = &Сумма
		|	И &Исходящий
		|	И (НЕ &ОтборПоДоговору
		|			ИЛИ РасчетыСПоставщикамиОстатки.Договор = &ДоговорВЗаказеСчете)
		|	И (НЕ &ЗаказЗаполнен
		|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = &Заказ
		|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = NULL
		|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
		|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = НЕОПРЕДЕЛЕНО)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	ДокументРасчетов УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСПокупателямиОстатки.Документ КАК ДокументРасчетов,
		|	РасчетыСПокупателямиОстатки.СуммаОстаток,
		|	РасчетыСПокупателямиОстатки.СуммаВалОстаток,
		|	РасчетыСПокупателямиОстатки.Документ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	РасчетыСПокупателямиОстатки.Документ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	РасчетыСПокупателямиОстатки.Заказ,
		|	РасчетыСПокупателямиОстатки.Договор,
		|	РасчетыСПокупателямиОстатки.Документ.Номер КАК Номер,
		|	РасчетыСПокупателямиОстатки.Документ.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА &ЗаказЗаполнен
		|				И РасчетыСПокупателямиОстатки.Заказ = &Заказ
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Остатки(
		|			,
		|			Организация = &Организация
		|				И Документ.Контрагент = &Контрагент) КАК РасчетыСПокупателямиОстатки
		|ГДЕ
		|	РасчетыСПокупателямиОстатки.СуммаВалОстаток > &Сумма
		|	И НЕ &Исходящий
		|	И (НЕ &ОтборПоДоговору
		|			ИЛИ РасчетыСПокупателямиОстатки.Договор = &ДоговорВЗаказеСчете)
		|	И (НЕ &ЗаказЗаполнен
		|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = &Заказ
		|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = NULL
		|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = НЕОПРЕДЕЛЕНО)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.Документ,
		|	РасчетыСПоставщикамиОстатки.СуммаОстаток,
		|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток,
		|	РасчетыСПоставщикамиОстатки.Документ.НомерВходящегоДокумента,
		|	РасчетыСПоставщикамиОстатки.Документ.ДатаВходящегоДокумента,
		|	РасчетыСПоставщикамиОстатки.Заказ,
		|	РасчетыСПоставщикамиОстатки.Договор,
		|	РасчетыСПоставщикамиОстатки.Документ.Номер,
		|	РасчетыСПоставщикамиОстатки.Документ.Дата,
		|	ВЫБОР
		|		КОГДА &ЗаказЗаполнен
		|				И РасчетыСПоставщикамиОстатки.Заказ = &Заказ
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
		|			,
		|			Организация = &Организация
		|				И Документ.Контрагент = &Контрагент) КАК РасчетыСПоставщикамиОстатки
		|ГДЕ
		|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток > &Сумма
		|	И &Исходящий
		|	И (НЕ &ОтборПоДоговору
		|			ИЛИ РасчетыСПоставщикамиОстатки.Договор = &ДоговорВЗаказеСчете)
		|	И (НЕ &ЗаказЗаполнен
		|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = &Заказ
		|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = NULL
		|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
		|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = НЕОПРЕДЕЛЕНО)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	ДокументРасчетов УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Сумма", СтрокаДокумента.СуммаДокумента);
		Запрос.УстановитьПараметр("Исходящий", СтрокаДокумента.Исходящий);
		Запрос.УстановитьПараметр("Заказ", СтрокаДокумента.Заказ);
		Запрос.УстановитьПараметр("ЗаказЗаполнен", ЗначениеЗаполнено(СтрокаДокумента.Заказ));
		Запрос.УстановитьПараметр("ДоговорВЗаказеСчете", ДоговорВЗаказеСчете);
		Запрос.УстановитьПараметр("ОтборПоДоговору", ЗначениеЗаполнено(ДоговорВЗаказеСчете));
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		РезультатЗапроса = МассивРезультатов[0];
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаДокументовРасчетов = РезультатЗапроса.Выбрать();
			
			// Поищем номер в основании платежа.
			// Нужно учесть номер и год документа, а также вид документа и флаги учета взаиморасчетов, которые установлены в договоре.
			ДокументНайденныйПоНомеру = Неопределено;
			
			Пока ВыборкаДокументовРасчетов.Следующий() Цикл
				// Сценарий, когда дата документа > 2011.01.01.
				НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументовРасчетов.Номер, Истина, Истина);
				
				Если ЗначениеЗаполнено(ВыборкаДокументовРасчетов.НомерВходящегоДокумента) Тогда
					НомерДляПоиска = СокрЛП(ВыборкаДокументовРасчетов.НомерВходящегоДокумента);
				Иначе
					НомерДляПоиска = НомерНаПечать;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаДокументовРасчетов.ДатаВходящегоДокумента) Тогда
					ДатаДляПоиска = ВыборкаДокументовРасчетов.ДатаВходящегоДокумента;
				Иначе
					ДатаДляПоиска = ВыборкаДокументовРасчетов.Дата;
				КонецЕсли;
				
				Если //СтрНайти(СтрокаДокумента.НазначениеПлатежа, ВыборкаДокументовРасчетов.Номер) > 0 ИЛИ
					СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерДляПоиска) > 0 ИЛИ
					СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерДляПоиска) > 0 ИЛИ
					(ЗначениеЗаполнено(СтрокаДокумента.Заказ) И ВыборкаДокументовРасчетов.Приоритет = 1) Тогда
					
					ДокументНайденныйПоНомеру = ВыборкаДокументовРасчетов.ДокументРасчетов;
					
					НомерГода = СтрЗаменить(Год(ДатаДляПоиска), Символы.НПП, "");
					
					Если СтрНайти(СтрокаДокумента.НазначениеПлатежа, НомерГода) > 0 Тогда // Поищем год.
						
						СтрокаДокумента.ДокументРасчетов = ВыборкаДокументовРасчетов.ДокументРасчетов;
						СтрокаДокумента.ПризнакАванса = Ложь;
						
						ДоговорВДокументе = ВыборкаДокументовРасчетов.Договор;
						
						Возврат ДоговорВДокументе;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ДокументНайденныйПоНомеру <> Неопределено Тогда
				СтрокаДокумента.ДокументРасчетов = ДокументНайденныйПоНомеру;
				СтрокаДокумента.ПризнакАванса = Ложь;
				
				ДоговорВДокументе = ВыборкаДокументовРасчетов.Договор;
				
				Возврат ДоговорВДокументе;
			КонецЕсли;
			
		КонецЕсли;
		
		// Во вторую очередь обработаем ситуацию, когда с клиентом оформлен только один не оплаченный заказ или счёт.
		// Если сумма этого документа > суммы платежа, то выберем этот документ.
		// Документ будет выбран, если в назначении нет информации о заказе или счете.
		РезультатЗапроса = МассивРезультатов[1];
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаДокументовРасчетов = РезультатЗапроса.Выбрать();
			Если ВыборкаДокументовРасчетов.Количество() = 1 Тогда
				ВыборкаДокументовРасчетов.Следующий();
				
				НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументовРасчетов.Номер, Истина, Истина);
				Если ЗначениеЗаполнено(ВыборкаДокументовРасчетов.НомерВходящегоДокумента) Тогда
					НомерДляПоиска = СокрЛП(ВыборкаДокументовРасчетов.НомерВходящегоДокумента);
				Иначе
					НомерДляПоиска = НомерНаПечать;
				КонецЕсли;
				
				Если (СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерДляПоиска) > 0 ИЛИ
					СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерДляПоиска) > 0) ИЛИ
					(ЗначениеЗаполнено(СтрокаДокумента.Заказ) И ВыборкаДокументовРасчетов.Приоритет = 1) Тогда
					
					СтрокаДокумента.ДокументРасчетов = ВыборкаДокументовРасчетов.ДокументРасчетов;
					СтрокаДокумента.ПризнакАванса = Ложь;
					
					ДоговорВДокументе = ВыборкаДокументовРасчетов.Договор;
					
					Возврат ДоговорВДокументе;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецФункции

Функция ОпределитьЗаказИСчетНаСервере(СтрокаДокумента, Объект)
	
	НашлиЗаказ = Ложь;
	НашлиСчет = Ложь;
	
	ДоговорЗаказа = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ДоговорСчета = ДоговорЗаказа;
	
	Если (ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты")) 
		И ЗначениеЗаполнено(СтрокаДокумента.Контрагент)
		Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату КАК Документ,
		|	ОплатаСчетовИЗаказовОбороты.СуммаОборот КАК СуммаДокумента,
		|	ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК Оплачено,
		|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК НеОплачено,
		|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Дата КАК Дата,
		|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Номер КАК Номер,
		|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Договор КАК Договор
		|ИЗ
		|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И СчетНаОплату.Контрагент = &Контрагент) КАК ОплатаСчетовИЗаказовОбороты
		|ГДЕ
		|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот = &Сумма
		|	И ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказовОбороты.СчетНаОплату) = ТИП(Документ.ЗаказПоставщику)
		|					ИЛИ ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказовОбороты.СчетНаОплату) = ТИП(Документ.СчетНаОплатуПоставщика)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ = &Исходящий
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату КАК Документ,
		|	ОплатаСчетовИЗаказовОбороты.СуммаОборот КАК СуммаДокумента,
		|	ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК Оплачено,
		|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК НеОплачено,
		|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Дата КАК Дата,
		|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Номер КАК Номер,
		|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Договор КАК Договор
		|ИЗ
		|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И СчетНаОплату.Контрагент = &Контрагент) КАК ОплатаСчетовИЗаказовОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказовОбороты.СчетНаОплату) = ТИП(Документ.ЗаказПоставщику)
		|					ИЛИ ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказовОбороты.СчетНаОплату) = ТИП(Документ.СчетНаОплатуПоставщика)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ = &Исходящий
		|	И ВЫБОР
		|			КОГДА ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Кратность, 0) = 0
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ (ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот) * ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Курс * &КратностьОплаты / ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Кратность * &КурсОплаты > &Сумма
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка,
		|	ЗаказПокупателя.СуммаДокумента,
		|	ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот, 0) + ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот, 0),
		|	ЗаказПокупателя.СуммаДокумента - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот, 0) - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот, 0),
		|	ЗаказПокупателя.Дата,
		|	ЗаказПокупателя.Номер,
		|	"""",
		|	"""",
		|	ЗаказПокупателя.Договор
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(
		|				,
		|				,
		|				,
		|				Организация = &Организация
		|					И СчетНаОплату.Контрагент = &Контрагент) КАК ОплатаСчетовИЗаказовОбороты
		|		ПО (ОплатаСчетовИЗаказовОбороты.СчетНаОплату = ЗаказПокупателя.Ссылка)
		|			И (ОплатаСчетовИЗаказовОбороты.СуммаОборот = 0)
		|ГДЕ
		|	ЗаказПокупателя.Проведен
		|	И ЗаказПокупателя.Контрагент = &Контрагент
		|	И НЕ ЗаказПокупателя.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
		|	И НЕ &Исходящий
		|	И ВЫБОР
		|			КОГДА ЕСТЬNULL(ЗаказПокупателя.Кратность, 0) = 0
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ (ЗаказПокупателя.СуммаДокумента - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот, 0) - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот, 0)) * ЗаказПокупателя.Курс * &КратностьОплаты / (ЗаказПокупателя.Кратность * &КурсОплаты) > &Сумма
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Сумма", СтрокаДокумента.СуммаДокумента);
		Запрос.УстановитьПараметр("Исходящий", СтрокаДокумента.Исходящий);
		
		СтруктураКурсВалюта = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(СтрокаДокумента.ДатаДок, Новый Структура("Валюта", Объект.БанковскийСчет.ВалютаДенежныхСредств));
		Запрос.УстановитьПараметр("КурсОплаты", ?(СтруктураКурсВалюта.Курс = 0, 1, СтруктураКурсВалюта.Курс));
		Запрос.УстановитьПараметр("КратностьОплаты", ?(СтруктураКурсВалюта.Кратность = 0, 1, СтруктураКурсВалюта.Кратность));
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Сначала обработаем документы, которые точно совпадают по сумме.
		РезультатЗапроса = МассивРезультатов[0];
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаЗаказовИСчетов = РезультатЗапроса.Выбрать();
			
			// Поищем номер в основании платежа.
			// Нужно учесть номер и год документа, а также вид документа и флаги учета взаиморасчетов, которые установлены в договоре.
			
			ДоговорЗаказаНайденныйПоНомеру = Неопределено;
			ДоговорСчетаНайденныйПоНомеру = Неопределено;
			ЗаказНайденныйПоНомеру = Неопределено;
			СчетНайденныйПоНомеру = Неопределено;
			
			Пока ВыборкаЗаказовИСчетов.Следующий() Цикл
				// Сценарий, когда дата документа > 2011.01.01.
				НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаЗаказовИСчетов.Номер, Истина, Истина);
				НомерСПрефиксом = СокрЛП(ВыборкаЗаказовИСчетов.Номер);
				
				Если ((ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику")) ИЛИ
					(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика"))) И
					ЗначениеЗаполнено(ВыборкаЗаказовИСчетов.НомерВходящегоДокумента) Тогда
					НомерДляПоиска = СокрЛП(ВыборкаЗаказовИСчетов.НомерВходящегоДокумента);
				Иначе
					НомерДляПоиска = НомерНаПечать;
				КонецЕсли;
				
				Если ((ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику")) ИЛИ
					(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика"))) И
					ЗначениеЗаполнено(ВыборкаЗаказовИСчетов.ДатаВходящегоДокумента) Тогда
					ДатаДляПоиска = ВыборкаЗаказовИСчетов.ДатаВходящегоДокумента;
				Иначе
					ДатаДляПоиска = ВыборкаЗаказовИСчетов.Дата;
				КонецЕсли;
				
				Если СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерСПрефиксом) > 0
					Или СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерСПрефиксом) > 0
					Или СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерДляПоиска) > 0
					Или СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерДляПоиска) > 0 Тогда
					
					НомерГода = СтрЗаменить(Год(ДатаДляПоиска), Символы.НПП, "");
					
					Если СтрНайти(СтрокаДокумента.НазначениеПлатежа, НомерГода) > 0 Тогда // Поищем год.
						
						Если Не НашлиЗаказ И
							//СтрокаДокумента.Контрагент.ВестиРасчетыПоЗаказам И // Такую проверку лучше не делать, т.к. можно заказ использовать
							// для заполнения информации об основании.
							(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПокупателя")) ИЛИ
							(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
							СтрокаДокумента.Заказ = ВыборкаЗаказовИСчетов.Документ;
							ДоговорЗаказа = ВыборкаЗаказовИСчетов.Договор;
							НашлиЗаказ = Истина;
						ИначеЕсли Не НашлиСчет И
							//СтрокаДокумента.Контрагент.ВестиУчетОплатыПоСчетам И // Такую проверку лучше не делать, т.к. если счета есть, то
							// будет нагляднее, если будем их выводить.
							(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплату")) ИЛИ
							(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")) Тогда
							СтрокаДокумента.СчетНаОплату = ВыборкаЗаказовИСчетов.Документ;
							ДоговорСчета = ВыборкаЗаказовИСчетов.Договор;
							НашлиСчет = Истина;
						КонецЕсли;
						Если НашлиЗаказ И НашлиСчет Тогда
							Прервать;
						КонецЕсли;
						
					Иначе
						
						Если (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПокупателя")) ИЛИ
							(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
							ЗаказНайденныйПоНомеру = ВыборкаЗаказовИСчетов.Документ;
							ДоговорЗаказаНайденныйПоНомеру = ВыборкаЗаказовИСчетов.Договор;
						ИначеЕсли (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплату")) ИЛИ
							(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")) Тогда
							СчетНайденныйПоНомеру = ВыборкаЗаказовИСчетов.Документ;
							ДоговорСчетаНайденныйПоНомеру = ВыборкаЗаказовИСчетов.Договор;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если Не НашлиЗаказ И Не НашлиСчет Тогда
				Если ЗаказНайденныйПоНомеру <> Неопределено Тогда
					СтрокаДокумента.Заказ = ЗаказНайденныйПоНомеру;
					ДоговорЗаказа = ДоговорЗаказаНайденныйПоНомеру;
					НашлиЗаказ = Истина;
				ИначеЕсли СчетНайденныйПоНомеру <> Неопределено Тогда
					СтрокаДокумента.СчетНаОплату = СчетНайденныйПоНомеру;
					ДоговорСчета = ДоговорСчетаНайденныйПоНомеру;
					НашлиСчет = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Во вторую очередь обработаем ситуацию, когда с клиентом оформлен только один не оплаченный заказ или счёт.
		// Если сумма этого документа > суммы платежа, то выберем этот документ.
		// Документ будет выбран, если в назначении нет информации о заказе или счете.
		Если Не НашлиЗаказ И Не НашлиСчет Тогда
			
			РезультатЗапроса = МассивРезультатов[1];
			Если Не РезультатЗапроса.Пустой() Тогда
				
				ВыборкаЗаказовИСчетов = РезультатЗапроса.Выбрать();
				Если ВыборкаЗаказовИСчетов.Количество() = 1 Тогда
					ВыборкаЗаказовИСчетов.Следующий();
					
					НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаЗаказовИСчетов.Номер, Истина, Истина);
					Если ((ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику")) ИЛИ
						(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика"))) И
						ЗначениеЗаполнено(ВыборкаЗаказовИСчетов.НомерВходящегоДокумента) Тогда
						НомерДляПоиска = СокрЛП(ВыборкаЗаказовИСчетов.НомерВходящегоДокумента);
					Иначе
						НомерДляПоиска = НомерНаПечать;
					КонецЕсли;
					
					Если (СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерДляПоиска) > 0 ИЛИ
						СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерДляПоиска) > 0) Тогда
						
						Если ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ
							ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
							СтрокаДокумента.Заказ = ВыборкаЗаказовИСчетов.Документ;
							ДоговорЗаказа = ВыборкаЗаказовИСчетов.Договор;
							НашлиЗаказ = Истина;
						Иначе // Это счет на оплату или счет на оплату от поставщика.
							СтрокаДокумента.СчетНаОплату = ВыборкаЗаказовИСчетов.Документ;
							ДоговорСчета = ВыборкаЗаказовИСчетов.Договор;
							НашлиСчет = Истина;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НашлиСчет И НЕ НашлиЗаказ И НЕ ЗначениеЗаполнено(СтрокаДокумента.Заказ) Тогда
		
		Если (СтрокаДокумента.Исходящий И ТипЗнч(СтрокаДокумента.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И
			ТипЗнч(СтрокаДокумента.СчетНаОплату.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику"))
			ИЛИ
			(НЕ СтрокаДокумента.Исходящий И ТипЗнч(СтрокаДокумента.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплату") И
			ТипЗнч(СтрокаДокумента.СчетНаОплату.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя"))
			Тогда
			
			СтрокаДокумента.Заказ = СтрокаДокумента.СчетНаОплату.ДокументОснование;
			
		КонецЕсли;
		
	ИначеЕсли НЕ НашлиСчет И НашлиЗаказ И НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетНаОплату) Тогда
		
		Если ТипЗнч(СтрокаДокумента.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетНаОплату.Ссылка КАК СчетНаОплату
			|ИЗ
			|	Документ.СчетНаОплату КАК СчетНаОплату
			|ГДЕ
			|	СчетНаОплату.ДокументОснование = &ДокументОснование
			|	И НЕ СчетНаОплату.ПометкаУдаления";
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетНаОплатуПоставщика.Ссылка КАК СчетНаОплату
			|ИЗ
			|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
			|ГДЕ
			|	СчетНаОплатуПоставщика.ДокументОснование = &ДокументОснование
			|	И НЕ СчетНаОплатуПоставщика.ПометкаУдаления";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДокументОснование", СтрокаДокумента.Заказ);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 1
			И Выборка.Следующий() Тогда
			
			СтрокаДокумента.СчетНаОплату = Выборка.СчетНаОплату;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НашлиЗаказ Тогда
		Возврат ДоговорЗаказа;
	ИначеЕсли НашлиСчет Тогда
		Возврат ДоговорСчета;
	Иначе
		Возврат ДоговорЗаказа;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьПлатежноеПоручение(СтрокаДокумента)
	
	НашлиПП = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение,
	|	ПлатежноеПоручение.Номер КАК Номер,
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.ДокументОснование КАК ДокументОснование,
	|	ПлатежноеПоручение.ДокументОснование.Договор КАК Договор,
	|	ПлатежноеПоручение.ВидОперации КАК ВидОперации,
	|	ПлатежноеПоручение.Корреспонденция КАК Корреспонденция,
	|	ПлатежноеПоручение.Статья КАК СтатьяДДС
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.СуммаДокумента = &СуммаДокумента
	|	И ПлатежноеПоручение.Дата <= &ДатаОкончания
	|	И НЕ ПлатежноеПоручение.Оплачено
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.Контрагент = &Контрагент
	|	И ПлатежноеПоручение.Номер ПОДОБНО ""%"" + &НомерДок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручение УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Сотрудники") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПлатежноеПоручение.Контрагент", "И ПлатежноеПоручение.Подотчетник");
	КонецЕсли;
	
	ДатаОкончания = КонецДня(СтрокаДокумента.ДатаДок);
	
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
	Запрос.УстановитьПараметр("СуммаДокумента", СтрокаДокумента.СуммаДокумента);
	Запрос.УстановитьПараметр("НомерДок", СтрокаДокумента.НомерДок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПП = РезультатЗапроса.Выбрать();
	
	ДокументНайденныйПоНомеру = Неопределено;
	ДокументОснованиеПП = Неопределено;
	ДоговорДокОснПП = Неопределено;
	ВидОперацииПП = Неопределено;
	СтатьяДДС_ПП = Неопределено;
	КорреспонденцияПП = Неопределено;
	
	Пока ВыборкаПП.Следующий() Цикл
		
		// Сценарий, когда дата документа > 2011.01.01.
		НомерДляПоиска = ВыборкаПП.Номер;
		ДатаДляПоиска = ВыборкаПП.Дата;
		
		Если НомерДляПоиска = СокрЛП(СтрокаДокумента.НомерДок) Тогда
			
			ДокументНайденныйПоНомеру = ВыборкаПП.ПлатежноеПоручение;
			ДокументОснованиеПП = ВыборкаПП.ДокументОснование;
			ДоговорДокОснПП = ВыборкаПП.Договор;
			ВидОперацииПП = ВыборкаПП.ВидОперации;
			СтатьяДДС_ПП = ВыборкаПП.СтатьяДДС;
			КорреспонденцияПП = ВыборкаПП.Корреспонденция;
			
			НомерГода = СтрЗаменить(Год(ДатаДляПоиска), Символы.НПП, "");
			
			Если Год(ДатаДляПоиска) = Год(СтрокаДокумента.ДатаДок) Тогда // Поищем год.
				
				СтрокаДокумента.ПлатежноеПоручение = ВыборкаПП.ПлатежноеПоручение;
				НашлиПП = Истина;
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не НашлиПП И ДокументНайденныйПоНомеру <> Неопределено Тогда
		СтрокаДокумента.ПлатежноеПоручение = ДокументНайденныйПоНомеру;
		НашлиПП = Истина;
	КонецЕсли;
	
	СтруктураВозврат = Новый Структура();
	СтруктураВозврат.Вставить("НашлиПП", НашлиПП);
	СтруктураВозврат.Вставить("ДокументОснованиеПП", ДокументОснованиеПП);
	СтруктураВозврат.Вставить("Договор", ДоговорДокОснПП);
	СтруктураВозврат.Вставить("ВидОперацииПП", ВидОперацииПП);
	СтруктураВозврат.Вставить("СтатьяДДС_ПП", СтатьяДДС_ПП);
	СтруктураВозврат.Вставить("КорреспонденцияПП", КорреспонденцияПП);
	
	Возврат СтруктураВозврат;
	
КонецФункции

Функция УдалитьДанныеИзОписанияОшибкиНаСервере(ТекстУдаления, Знач ОписаниеОшибок, ДанныеСтроки)
	
	НовоеОписаниеОшибок = "";
	
	СимволТекстаУдаления = СтрНайти(ОписаниеОшибок, ТекстУдаления);
	Если СимволТекстаУдаления = 0 Тогда
		НовоеОписаниеОшибок = ОписаниеОшибок;
	Иначе
		НовоеОписаниеОшибок = Лев(ОписаниеОшибок, СимволТекстаУдаления - 1);
		
		ДанныеСправаОтТекстаУдаления = Сред(ОписаниеОшибок, СимволТекстаУдаления + 1);
		СимволТочки = СтрНайти(ДанныеСправаОтТекстаУдаления, "!");
		Если СимволТочки = 0 Тогда
			СимволТочкиИСкобки = СтрНайти(ДанныеСправаОтТекстаУдаления, ").");
		КонецЕсли;
		Если СимволТочки = 0 Тогда
			СимволТочки = СтрНайти(ДанныеСправаОтТекстаУдаления, ".");
		КонецЕсли;
		Если СимволТочки <> 0 Тогда
			НовоеОписаниеОшибок = НовоеОписаниеОшибок + Сред(ДанныеСправаОтТекстаУдаления, СимволТочки + 1);
		Иначе
			СимволВосклицательногоЗнака = СтрНайти(ДанныеСправаОтТекстаУдаления, "!");
			Если СимволВосклицательногоЗнака <> 0 Тогда
				НовоеОписаниеОшибок = НовоеОписаниеОшибок + Сред(ДанныеСправаОтТекстаУдаления, СимволВосклицательногоЗнака + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НовоеОписаниеОшибок;
	
КонецФункции // УдалитьИзОписанияОшибки()

Функция ОрганизацияПлательщик(ВидДокумента)
	
	Если ВидДокумента = "ПоступлениеНаСчет" Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ОрганизацияПлательщик()

Функция ПроверитьВидОперации(СтрокаДокумента, ПараметрыВыделенияКолонок, СтруктураЗначенийИзСоответствия)
	
	Если СтруктураЗначенийИзСоответствия.СоответствиеНайдено Тогда
		Результат = ЗаполнитьСтатьюДДСИСвязанныеЭлементыПоСтруктуреСоответствий(СтрокаДокумента, СтруктураЗначенийИзСоответствия);
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьКлючевоеСлово = СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'СЧЕТ'")) > 0 ИЛИ
	СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'ЗАКАЗ'")) > 0 ИЛИ
	СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'СЧЁТ'")) > 0 ИЛИ
	СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'НАКЛ'")) > 0;
	
	ЕстьСловаОРасчетномОбслуживании = СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'Р/О'")) > 0 ИЛИ
	СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), ВРег(НСтр("ru = 'Расчетное обслуживание'"))) > 0 ИЛИ
	СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), ВРег(НСтр("ru = 'Расчетные услуги'"))) > 0 ИЛИ
	СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), ВРег(НСтр("ru = 'Расчётные услуги'"))) > 0 ИЛИ
	СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'Р\О'")) > 0 ИЛИ
	СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'Р\У'")) > 0 ИЛИ
	СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), ВРег(НСтр("ru = 'Расчётное обслуживание'"))) > 0;
	
	ЕслиСловоВозврат = СтрНайти(СтрокаДокумента.НазначениеПлатежа, НСтр("ru = 'Возврат'")) > 0;
	
	Если Не ЕстьКлючевоеСлово Или ЕстьСловаОРасчетномОбслуживании ИЛИ ЕслиСловоВозврат Тогда
		
		//СтрокаДокумента.ВидОперацииНеНайденКартинка = 0;
		СтрокаЗамечание = НСтр("ru = 'Проверьте операцию!'");
		ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
		ПараметрыВыделенияКолонок.ВыделитьКолонкуВидОперации = Истина;
		
	Иначе
		
		//СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
		
	КонецЕсли;
	
	Если СтрокаДокумента.Исходящий Тогда
		Возврат Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
	Иначе
		Возврат Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя;
	КонецЕсли;
	
КонецФункции

Функция ЭтоКомиссияБанка(Знач СтрокаДокумента, Знач Исходящий)
	
	СчетКонтрагентаДляПоиска = ?(Исходящий, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
	ВидОплаты = ВидОплатыЧислом(СтрокаДокумента.ВидОплаты);
	Операция  = ВРег(СтрЗаменить(СтрокаДокумента.Операция, " ", ""));
	ЭтоКомиссияБанка = СтрокаДокумента.ПолучательБИК = СтрокаДокумента.ПлательщикБИК
	И (Операция = "МЕМОРИАЛЬНЫЙОРДЕР" ИЛИ Операция = "БАНКОВСКИЙОРДЕР" ИЛИ Операция = "ВНУТРЕННИЙПЕРЕВОД")
	ИЛИ ВидОплаты > 1 И ВидОплаты <> 3;
	
	// последняя проверка по корр.счету
	Если НЕ ЭтоКомиссияБанка Тогда
		БалансовыйСчет = БалансовыйСчет(СчетКонтрагентаДляПоиска);
		Если БалансовыйСчет    = "70601" // доходы (банка)
			ИЛИ БалансовыйСчет = "61301" // Доходы (банка) будущих периодов по кредитным операциям
			ИЛИ БалансовыйСчет = "61304" // Доходы (банка) будущих периодов по другим операциям
			Тогда
			ЭтоКомиссияБанка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоКомиссияБанка;
	
КонецФункции

Функция БалансовыйСчет(НомерСчета) Экспорт
	
	Возврат Лев(НомерСчета, 5);
	
КонецФункции

Функция ВидОплатыЧислом(Знач ВидОплатыИзФайла)
	
	Если ПустаяСтрока(ВидОплатыИзФайла) Тогда
		ВидОплаты = 1;
	Иначе
		Попытка
			ВидОплаты = Число(ВидОплатыИзФайла);
		Исключение
			ВидОплаты = 1;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ВидОплаты;
	
КонецФункции

Функция ЭтоСчетКассыКредитнойОрганизации(БалансовыйСчет) Экспорт
	
	Возврат БалансовыйСчет = "20202" // "Касса кредитных организаций"
	Или БалансовыйСчет = "20208"; // "Денежные средства в банкоматах и платежных терминалах"
	
КонецФункции

Функция ПолучитьДатуИзСтроки(Приемник, Источник)
	
	Буфер = Источник;
	ПозицияТочки = СтрНайти(Буфер, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru = 'Неверный формат строки с датой'");
	КонецЕсли;
	ЧислоДаты = Лев(Буфер, ПозицияТочки - 1);
	Буфер = Сред(Буфер, ПозицияТочки + 1);
	ПозицияТочки = СтрНайти(Буфер, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru = 'Неверный формат строки с датой'");
	КонецЕсли;
	МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
	ГодДаты = Сред(Буфер, ПозицияТочки + 1);
	Если СтрДлина(ГодДаты) = 2 Тогда
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты ;
		КонецЕсли;
	КонецЕсли;
	Попытка
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
	Исключение 
		Попытка
			Приемник = НачалоДня(Дата(Источник));
		Исключение
			Возврат НСтр("ru = 'Не удалось преобразовать строку в дату'");
		КонецПопытки;
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции // ПолучитьДатуИзСтроки()

Функция ЕстьНеЦифрыНаСервере(Знач СтрокаПроверки)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Длина = СтрДлина(СтрокаПроверки);
	Для Сч = 1 По Длина Цикл
		Если СтрНайти("0123456789", Сред(СтрокаПроверки, Сч, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ЕстьНеЦифры()

Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания, ВНачало = Ложь)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания, ВНачало);
	СтруктураДокумента.НомерКартинки = 1;
	УстановитьНомерКартинкиДляПодвалаНаСервере(СтруктураДокумента);
	
КонецПроцедуры

Процедура УстановитьНомерКартинкиДляПодвалаНаСервере(ДанныеСтроки)
	
	ДанныеСтроки.НомерКартинкиДляПодвала = ?(ДанныеСтроки.НомерКартинки = -1, 0, ДанныеСтроки.НомерКартинки);
	
КонецПроцедуры

Процедура ДобавитьВСтроку(Буфер, НоваяСтрока, ВНачало = Ложь)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	ИначеЕсли ВНачало Тогда
		Буфер = НоваяСтрока + Символы.ПС + Буфер;
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
	КонецЕсли;
	
КонецПроцедуры 

Функция ПолучитьДанныеИзСоответствияНазначенияПлатежа(СтрокаДокумента)
	
	СтруктураЗначенийИзСоответствия = Новый Структура("СоответствиеНайдено, ВидОперацииПоступленияНаСчет, ВидОперацииРасходаСоСчета, СтатьяДДС, Корреспонденция", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СМП_СоответствияНазначенийИРеквизитовПлатежа.ВидОперацииПоступленияНаСчет,
	|	СМП_СоответствияНазначенийИРеквизитовПлатежа.ВидОперацииРасходаСоСчета,
	|	СМП_СоответствияНазначенийИРеквизитовПлатежа.СтатьяДДС,
	|	ВЫРАЗИТЬ(СМП_СоответствияНазначенийИРеквизитовПлатежа.ФразаДляПоискаВНазначенииПлатежа КАК СТРОКА(1024)) КАК Фраза
	|ИЗ
	|	Справочник.СМП_СоответствияНазначенийИРеквизитовПлатежа КАК СМП_СоответствияНазначенийИРеквизитовПлатежа
	|ГДЕ
	|	НЕ СМП_СоответствияНазначенийИРеквизитовПлатежа.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), ВРег(Выборка.Фраза)) > 0 Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураЗначенийИзСоответствия, Выборка);
			СтруктураЗначенийИзСоответствия.СоответствиеНайдено = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураЗначенийИзСоответствия;
	
КонецФункции

Функция ЕстьЗаписиВСправочникеСоответствий()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СМП_СоответствияНазначенийИРеквизитовПлатежа.Ссылка
	|ИЗ
	|	Справочник.СМП_СоответствияНазначенийИРеквизитовПлатежа КАК СМП_СоответствияНазначенийИРеквизитовПлатежа
	|ГДЕ
	|	НЕ СМП_СоответствияНазначенийИРеквизитовПлатежа.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)
	
	Если ЗначениеЗаполнено(ТекущаяГотовность)
		И ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяГотовность) Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;
	
КонецПроцедуры // УстановитьГотовность()

Процедура ПроверитьНаПустоеЗначениеИмпорта(СтрокаИмпорта, ИмяСвойства, ПредставлениеСвойства, ИмпортНеПустые) Экспорт
	
	Если ИмпортНеПустые[0][ИмяСвойства] = Истина Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаИмпорта[ИмяСвойства]) Тогда
			СтрокаЗамечание = НСтр("ru = 'Не заполнено ""%ИмяСвойства%""!'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИмяСвойства%", ИмяСвойства);
			ДобавитьЗамечание(СтрокаИмпорта, 3, СтрокаЗамечание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаПустоеЗначениеИмпорта()

Процедура ЗаписатьЗначениеСведения(Владелец, Значение, ДатаЗначения)
	Рег = РегистрыСведений.СМП_НомерПоследнейТранзакции.СоздатьМенеджерЗаписи();
	Рег.БанковскийСчет = Владелец;
	Рег.ИДТранзакции = Значение;
	Рег.ДатаТранзакции = ДатаЗначения;
	Рег.Записать();
КонецПроцедуры

Функция ПолучитьЗначениеСведения(Владелец)
	Рег = РегистрыСведений.СМП_НомерПоследнейТранзакции.СоздатьМенеджерЗаписи();
	Рег.БанковскийСчет = Владелец;
	Рег.Прочитать();
	Если Рег.Выбран() Тогда
		Данные = Новый Структура;
		Данные.Вставить("ИДТранзакции", Рег.ИДТранзакции);
		Данные.Вставить("ДатаТранзакции", Рег.ДатаТранзакции);
		Возврат Данные;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции


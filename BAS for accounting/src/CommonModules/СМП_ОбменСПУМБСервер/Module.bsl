
#Область РаботаСАпиБанка

Процедура ПолучитьДанныеССервисаБанкаПоСчету(ДанныеДляПоиска,ДанныеАвторизации,ТаблицаПлатежей)
	
	ТокенДоступа = ПолучитьТокенДоступа(ДанныеАвторизации);
	
	НомерСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляПоиска.БанковскийСчет,"НомерСчета");
	
	Если Не УправлениеДенежнымиСредствами.НомерБанковскогоСчетаСоответствуетСтандартуIBAN(НомерСчета) Тогда
	
		ВызватьИсключение("Номер рахунку "+ НомерСчета+"не відповідає стандарту IBAN");
	
	КонецЕсли; 
	
	СоединениеССервисом   = ПолучитьСоединениеССервисомБанка();
	
	ЗапросПоискаДокумента = ПолучитьЗапросSearcher(ТокенДоступа,ДанныеДляПоиска.БанковскийСчет,ДанныеДляПоиска.ДатаНачала,ДанныеДляПоиска.ДатаОкончания,СоединениеССервисом);

	Результат = СоединениеССервисом.ОтправитьДляОбработки(ЗапросПоискаДокумента);
	
	Если Результат.КодСостояния <> 200 Тогда
		 ВызватьИсключение(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
	КонецЕсли;
	
	МассивДокументов = ПолучитьСответствиеИзОтветаСервера(Результат.ПолучитьТелоКакСтроку());
			
	Для каждого Строка Из МассивДокументов Цикл
		   				
		МассивВыписки = ПолучитьВыпискуПоИдентификатору(ТокенДоступа,СоединениеССервисом,Строка.Получить("hostId"),Строка.Получить("docId")); 
				
		СуммаДебит  = ПолучитьЧислоИзСтроки(МассивВыписки.Vegadoc.docbody.dt_turn);
		
		СуммаКредит = ПолучитьЧислоИзСтроки(МассивВыписки.Vegadoc.docbody.cr_turn);
		
		Если СуммаДебит = 0 И  СуммаКредит = 0  Тогда
		
			 Продолжить;
		
		КонецЕсли;
		
		Если ТипЗнч(МассивВыписки.vegadoc.docbody.tran) = Тип("СписокXDTO") Тогда 	
			
			Для каждого Объект Из МассивВыписки.vegadoc.docbody.tran Цикл
				
			   ОбработатьТранзакцию(Объект,ДанныеДляПоиска.БанковскийСчет,ТаблицаПлатежей); 
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(МассивВыписки.vegadoc.docbody.tran) = Тип("ОбъектXDTO") Тогда 	
			
			   ОбработатьТранзакцию(МассивВыписки.vegadoc.docbody.tran,ДанныеДляПоиска.БанковскийСчет,ТаблицаПлатежей);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры // ПолучитьДанныеССервисаБанкаПоСчету()

Функция ПолучитьТокенДоступа(ДанныеАвторизации)Экспорт
	    
    ПараметрыPOST = ПолучитьСтрокуПараметровПост(ДанныеАвторизации);
		
	Соединение = Новый HTTPСоединение("auth.fuib.com",,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	
	ЗапросHTTP = Новый HTTPЗапрос("/auth/realms/VegaNet/protocol/openid-connect/token");
	ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	ЗапросHTTP.УстановитьТелоИзСтроки(ПараметрыPOST);
	
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP);
	
	Если Ответ.КодСостояния = 200 Тогда
	      		 
		 СоответсвиеОтвета = ПолучитьСответствиеИзОтветаСервера(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		 
		 ТокенДоступа = СоответсвиеОтвета.Получить("access_token");
		 
		 Возврат ТокенДоступа;
		 
	Иначе 
		
		ВызватьИсключение("Получен не определенный ответ от сервиса банка");
		 
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьЗапросSearcher(ТокенДоступа,БанковскийСчет,ДатаНачала,ДатаОкончания,СоединениеССервисом)

	СтрокаЗапроса = "/war_veganet_api/document/searcher";
	
	ИдентификаторСчета = ПолучитьИдентификаторСчета(ТокенДоступа,СоединениеССервисом,БанковскийСчет);
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ИдентификаторСчета);
	
	СтуктураЗапроса = Новый Структура;
	СтуктураЗапроса.Вставить("fromDate"		,НачалоДня(ДатаНачала));
	СтуктураЗапроса.Вставить("toDate"		,КонецДня(ДатаОкончания));
	СтуктураЗапроса.Вставить("documentType"	,"[""STM""]"); 
	СтуктураЗапроса.Вставить("documentAccounts",МассивСчетов);
	
	Заголовки = ПолучитьЗаголовкиЗапроса(ТокенДоступа);
	
	ТелоЗапроса = СформироватьJSON(СтуктураЗапроса);
	
	ЗапросHTTP = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
	ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса,КодировкаТекста.UTF8);
	
	Возврат ЗапросHTTP

КонецФункции // ПолучитьЗапрос()

Функция ПолучитьВыпискуПоИдентификатору(ТокенДоступа,СоединениеССервисом,ХостАйди,АйдиВыписки)

	СтрокаЗапроса = "/war_veganet_api/document/body/"+ХостАйди+"/"+Формат(АйдиВыписки,"ЧГ=");

	Заголовки = ПолучитьЗаголовкиЗапроса(ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
		
	Результат = СоединениеССервисом.Получить(ЗапросHTTP);
	
	Если Результат.КодСостояния <> 200 Тогда
		
		ВызватьИсключение(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		 
	КонецЕсли;
	
	Данные = ПрочитатьСтрокуОтветаИзТекста(Результат.ПолучитьТелоКакСтроку());
	
	Возврат Данные
	
КонецФункции 

Функция ПолучитьИдентификаторСчета(ТокенДоступа,СоединениеССервисом,БанковскийСчет)Экспорт

	ВалютаСчета		 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет,"ВалютаДенежныхСредств");
	
	КодВалютыСчета   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВалютаСчета,"Наименование");
	
	НомерСчета 	     = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет,"НомерСчета");
	
	СтрокаЗапроса = "/war_veganet_api/account";

	Заголовки = ПолучитьЗаголовкиЗапроса(ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
		
	Результат = СоединениеССервисом.Получить(ЗапросHTTP);
	
	Если Результат.КодСостояния <> 200 Тогда
		
		ВызватьИсключение(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		 
	КонецЕсли;

	МассивСчетов = ПолучитьСответствиеИзОтветаСервера(Результат.ПолучитьТелоКакСтроку());
	
	ИдентификаторСчета = "";
	
	Для каждого Счет Из МассивСчетов Цикл
	
		Если Счет.Получить("iban") = НомерСчета
			И Счет.Получить("currency") = КодВалютыСчета Тогда
		
			ИдентификаторСчета = Формат(Счет.Получить("accountId"),"ЧГ=");
			Прервать;
		
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат ИдентификаторСчета

КонецФункции // ПолучитьИдентификаторСчета()
 

#КонецОбласти  

#Область ПрочиеВспомогательныеМетоды

Функция ПолучитьСтрокуПараметровПост(ДанныеАвторизации)

	ШаблонСтроки = "grant_type=password&client_id=%1&username=%2&password=%3&client_secret=%4";
	
	СтрокаЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
																			ДанныеАвторизации.client_id,
																			ДанныеАвторизации.username,
																			ДанныеАвторизации.password,
																			ДанныеАвторизации.client_secret);
	
	Возврат СтрокаЗапроса

КонецФункции // ()
 
Функция ПрочитатьСтрокуОтветаИзТекста(строкаОтвета)
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(строкаОтвета);
	ФабрикаХДТО = Новый ФабрикаXDTO;
	
	Возврат ФабрикаХДТО.ПрочитатьXML(ЧтениеХМЛ);

КонецФункции 

Функция ПолучитьСответствиеИзОтветаСервера(СтрокаJson) 
	
	Чтениеjson = new ЧтениеJSON;
	Чтениеjson.УстановитьСтроку(СтрокаJson); 	
	СооответствиеЧтения = ПрочитатьJSON(Чтениеjson,Истина);
		
	Возврат СооответствиеЧтения

КонецФункции

Функция СформироватьJSON(Структура, ФормироватьСПереносами = Ложь)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	Если ФормироватьСПереносами Тогда
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(,Символы.Таб));
	Иначе
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,Символы.Таб));
	КонецЕсли; 
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;

	ЗаписатьJSON(ЗаписьJSON, Структура, НастройкиСериализацииJSON);
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

Функция ПолучитьСоединениеССервисомБанка()

	Сервер 	= "service.fuib.com";
	Порт 	= 4103;
	Логин 	= "";
	Пароль 	= "";
		
	Ssl 	= Новый ЗащищенноеСоединениеOpenSSL();
	Прокси 	= Новый ИнтернетПрокси(Ложь);
	
	СоединениеHTTP = Новый HTTPСоединение(Сервер, Порт, Логин, Пароль, Прокси,,Ssl);

	Возврат СоединениеHTTP
	
КонецФункции // ПолучитьСоединениеССервисомБанка()

Функция ПолучитьЗаголовкиЗапроса(ТокенДоступа)

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type","application/json");
	Заголовки.Вставить("Authorization","Bearer " +ТокенДоступа); 
	Заголовки.Вставить("X-App-Channel","pure-api");
	Заголовки.Вставить("X-Flow-ID","5:6:EX");

	Возврат Заголовки

КонецФункции // ПолучитьЗаголовкиЗапроса()

Функция ПолучитьЧислоИзСтроки(ЧислоСтрокой)

	Попытка
	
		ЧислоИзСтроки = Число(ЧислоСтрокой);
	
	Исключение
		
		ЧислоИзСтроки = 0;
		
	КонецПопытки; 
	
	Возврат ЧислоИзСтроки

КонецФункции 

Функция ПолучитьТаблицуПлатежей()

	ТаблицаПлатежей = Новый ТаблицаЗначений;
		
	ТаблицаПлатежей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
	ТаблицаПлатежей.Колонки.Добавить("НомерДок",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("Номер",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("ДатаДок", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаПлатежей.Колонки.Добавить("Списано", Новый ОписаниеТипов("Дата"));
	ТаблицаПлатежей.Колонки.Добавить("Поступило", Новый ОписаниеТипов("Дата"));
	ТаблицаПлатежей.Колонки.Добавить("ДатаПоступило",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("ДатаСписано",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("СчетОрганизации",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("Плательщик",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("Получатель",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("ПолучательСчет",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("ПлательщикСчет",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("НазначениеПлатежа",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("СуммаДокумента", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаПлатежей.Колонки.Добавить("СуммаСписано", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаПлатежей.Колонки.Добавить("СуммаПоступило", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаПлатежей.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаПлатежей.Колонки.Добавить("ПлательщикОКПО",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("ПолучательОКПО",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	
	Возврат ТаблицаПлатежей
	
КонецФункции // ПолучитьТаблицуПлатежей()

Функция ПолучитьСтруктуруОтбора(БанковскийСчет,НачалоПериода,КонецПериода)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ДатаНачала",НачалоПериода);
	СтруктураОтбора.Вставить("ДатаОкончания",КонецПериода);
	СтруктураОтбора.Вставить("БанковскийСчет",БанковскийСчет);
	
	Возврат СтруктураОтбора
	
КонецФункции

Функция ПолучитьДанныеАвторизацииПоСчету(БанковскийСчет)
	  	
  СтруктураАвторизации = Новый Структура("Username,password,client_id,client_secret");;
    
  Запрос = Новый Запрос("ВЫБРАТЬ
  |	СМП_УчетныеЗаписиБанков.Username КАК Username,
  |	СМП_УчетныеЗаписиБанков.password КАК password,
  |	СМП_УчетныеЗаписиБанков.client_id КАК client_id,
  |	СМП_УчетныеЗаписиБанков.client_secret КАК client_secret
  |ИЗ
  |	Справочник.СМП_УчетныеЗаписиБанков КАК СМП_УчетныеЗаписиБанков
  |ГДЕ
  |	СМП_УчетныеЗаписиБанков.БанковскийСчет = &БанковскийСчет
  |	И СМП_УчетныеЗаписиБанков.Банк = ЗНАЧЕНИЕ(Перечисление.СМП_ПоддерживаемыеИнтеграцииСБанками.Пумб)");
  Запрос.УстановитьПараметр("БанковскийСчет",БанковскийСчет);
  
  Выборка = Запрос.Выполнить().Выбрать();
  
  Если Выборка.Следующий() Тогда
	  
	  ЗаполнитьЗначенияСвойств(СтруктураАвторизации,Выборка);
	  
	  
  Иначе
	  
	  ВызватьИсключение("Банковский счет не поддерживает обмен по апи с банком ПУБМ");
  
  КонецЕсли; 
  
  Возврат СтруктураАвторизации

КонецФункции

#КонецОбласти 

#Область ЗаполнениеДанных 

Процедура ОбработатьТранзакцию(Транзакция,БанковскийСчет,ТаблицаПлатежей)
	
	НоваяСтрока = ТаблицаПлатежей.Добавить();
	НоваяСтрока.НомерСтроки 		= ТаблицаПлатежей.Количество()+1;
	НоваяСтрока.НомерДок    		= Транзакция.ref_id;
	НоваяСтрока.Номер       		= Транзакция.ref_id;
	НоваяСтрока.ДатаДок     		= Транзакция.td;
	НоваяСтрока.Дата        		= Дата(Транзакция.td);	                                                    
	НоваяСтрока.НазначениеПлатежа   = Транзакция.dscr;	
	НоваяСтрока.СуммаСписано        = ПолучитьЧислоИзСтроки(Транзакция.dt);
	НоваяСтрока.СуммаПоступило      = ПолучитьЧислоИзСтроки(Транзакция.сt);
		                                         
	Если НоваяСтрока.СуммаСписано > 0 Тогда 
		
		НоваяСтрока.СуммаДокумента      = НоваяСтрока.СуммаСписано;
		НоваяСтрока.Сумма               = НоваяСтрока.СуммаСписано;
		НоваяСтрока.ПолучательОКПО      = Транзакция.okpo;
		НоваяСтрока.Получатель          = Транзакция.name;		
		НоваяСтрока.ПолучательСчет      = Транзакция.corr_iban;
		НоваяСтрока.ДатаСписано         = Транзакция.td;
		НоваяСтрока.Списано     		= Дата(Транзакция.td);
		
	Иначе
		
		НоваяСтрока.СуммаДокумента      = НоваяСтрока.СуммаПоступило;
		НоваяСтрока.Сумма               = НоваяСтрока.СуммаПоступило;
		НоваяСтрока.ПлательщикОКПО      = Транзакция.okpo;
		НоваяСтрока.Плательщик          = Транзакция.name;
		НоваяСтрока.ПлательщикСчет      = Транзакция.corr_iban;
		НоваяСтрока.Поступило   		= Дата(Транзакция.td);
		НоваяСтрока.ДатаПоступило       = Транзакция.td;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТаблицуПлатежейИзБанка(БанковскийСчет,НачалоПериода,КонецПериода,ПоместитьВХранилище = Ложь)Экспорт 
		
	ТаблицаПлатежей =  ПолучитьТаблицуПлатежей();
		
	СтруктураАвторизации = ПолучитьДанныеАвторизацииПоСчету(БанковскийСчет);
	СтруктураОтбора 	 = ПолучитьСтруктуруОтбора(БанковскийСчет,НачалоПериода,КонецПериода);
	
	ПолучитьДанныеССервисаБанкаПоСчету(СтруктураОтбора,СтруктураАвторизации,ТаблицаПлатежей);

	
	Если ПоместитьВХранилище Тогда
	
		 АдресВХранилище = ПоместитьВоВременноеХранилище(ТаблицаПлатежей);
		 
		 Возврат АдресВХранилище 
		 
	Иначе
		 
		 Возврат ТаблицаПлатежей
	
	КонецЕсли; 

КонецФункции // ПолучитьТаблицуПлатежейИзБанка()
 
#КонецОбласти  
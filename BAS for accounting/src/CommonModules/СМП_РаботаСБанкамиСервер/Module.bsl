#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// См. РегламентныеЗаданияСлужебный.РегламентныеЗаданияЗависимыеОтФункциональныхОпций
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	стрНастройка = Настройки.Добавить();
	стрНастройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.СМП_ОбменСБанкамиAPI;
	стрНастройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры //ПриОпределенииНастроекРегламентныхЗаданий

// Обработчик регламентного задания.
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура РегламентноеЗаданиеВыполнитьОбмен(пУчетнаяЗапись) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СМП_ОбменСБанкамиAPI);
	
	УстановитьПривилегированныйРежим(Истина);
	
	сДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(пУчетнаяЗапись, 
		"Наименование, ПометкаУдаления, ИспользоватьРегламентноеЗадание, ИдентификаторРегламентногоЗадания");
	
	Если сДанные.ПометкаУдаления = Истина Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Обмен с банком'; uk='Обмін з банком'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		УровеньЖурналаРегистрации.Ошибка, 
		Метаданные.Справочники.СМП_УчетныеЗаписиБанков, 
		пУчетнаяЗапись, 
		СтрШаблон(
		НСтр("ru='Учетная запись ""%1"" помечена на удаление. Обмен отменен.'; uk='Обліковий запис ""%1"" помічено до видалення. Обмін відмінено.'"), 
		сДанные.Наименование));
		
		Если ЗначениеЗаполнено(сДанные.ИдентификаторРегламентногоЗадания) Тогда
			РегламентныеЗаданияСервер.УдалитьЗадание(сДанные.ИдентификаторРегламентногоЗадания);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ сДанные.ИспользоватьРегламентноеЗадание Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Обмен с банком'; uk='Обмін з банком'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		УровеньЖурналаРегистрации.Ошибка, 
		Метаданные.Справочники.СМП_УчетныеЗаписиБанков, 
		пУчетнаяЗапись, 
		СтрШаблон(
		НСтр("ru='Использование регламентного задания для учетной записи ""%1"" отключено. Обмен отменен.';"
		+ " uk='Використання регламентного завдання для облікового запису ""%1"" вимкнено. Обмін відмінено.'"), 
		сДанные.Наименование));
		
		Если ЗначениеЗаполнено(сДанные.ИдентификаторРегламентногоЗадания) Тогда
			РегламентныеЗаданияСервер.УдалитьЗадание(сДанные.ИдентификаторРегламентногоЗадания);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбмен(пУчетнаяЗапись);
	
КонецПроцедуры //РегламентноеЗаданиеВыполнитьОбмен

// .
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ВыполнитьОбмен(пУчетнаяЗапись) 
	
	Обработка = ИнициализироватьОбработкуКлиентБанк(пУчетнаяЗапись);
	сДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(пУчетнаяЗапись, "Банк, ИД, Токен, ГруппаДляНовыхКонтрагентов, ВедениеВзаиморасчетов");
	сПараметры = ПараметрыОбмена(пУчетнаяЗапись, Обработка);
	АдресВХ = ПоместитьВоВременноеХранилище(Неопределено);
	
	сПараметры.Вставить("ЭтоРеглЗадание", Истина);
	Обработки.КлиентБанк.ФоноваяЧтениеДокументовКИмпорту(сПараметры, АдресВХ);
	сДанныеДляЗаполнения = ПолучитьИзВременногоХранилища(АдресВХ);
	
	Если сДанныеДляЗаполнения.ДокументыКИмпорту.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЗ Из сДанныеДляЗаполнения.ДокументыКИмпорту Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Документ) Тогда
			СтрокаТЗ.Загружать = Истина;
		КонецЕсли;
	КонецЦикла;
	
	НеобходимоЗагружатьКонтрагентов = Обработка.СоздаватьНенайденныеЭлементы И 
		сДанныеДляЗаполнения.ДеревоКонтрагентов.Строки.Количество() > 0;
		
	ОбработатьДеревоКонтрагентов(сДанныеДляЗаполнения.ДеревоКонтрагентов, сДанныеДляЗаполнения.ДокументыКИмпорту);
	тзДокументыКИмпорту = ПолучитьТаблицуДокументов(сДанныеДляЗаполнения.ДокументыКИмпорту, сДанныеДляЗаполнения.ДеревоКонтрагентов, 
		сПараметры.БанковскийСчет);
		
	СтруктураПараметров = Новый Структура(
	"ДокументыКИмпорту, 
	|СтруктураДанныхИмпорта, 
	|ДеревоКонтрагентов, 
	|ГруппаДляНовыхКонтрагентов,
	|МассивКонтрагентов, 
	|Импорт_Заголовок, 
	|Организация, 
	|Импорт_РасчетныеСчета, 
	|ИспользоватьГраницуОбработки,
	|НастройкаЗаполнения, 
	|ДатаГраницыОбработки, 
	|БанковскийСчет, 
	|СтекОповещений, 
	|ВедениеВзаиморасчетов",
	тзДокументыКИмпорту, 
	Новый Соответствие, 
	сДанныеДляЗаполнения.ДеревоКонтрагентов, 
	сДанные.ГруппаДляНовыхКонтрагентов, 
	Неопределено, 
	сПараметры.Импорт_Заголовок, 
	Обработка.Организация, 
	сПараметры.Импорт_РасчетныеСчета, 
	Ложь, 
	сПараметры.НастройкаЗаполнения, 
	Дата("00010101"), 
	сПараметры.БанковскийСчет, 
	Новый Массив, 
	сДанные.ВедениеВзаиморасчетов);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	Если НеобходимоЗагружатьКонтрагентов Тогда
		Обработки.КлиентБанк.ФоноваяЗагрузкаКонтрагентовИДокументов(СтруктураПараметров, АдресХранилища);
	Иначе
		Обработки.КлиентБанк.ФоноваяЗагрузкаДокументовКИмпорту(СтруктураПараметров, АдресХранилища);
	КонецЕсли;
	
	сРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
	МаксИндекс = сРезультат.ДокументыКИмпорту.Количество() - 1;
	РегистрыСведений.СМП_НомерПоследнейТранзакции.ЗаписатьДанные(сПараметры.БанковскийСчет, 
	сРезультат.ДокументыКИмпорту[МаксИндекс].ДокументИД, сРезультат.ДокументыКИмпорту[МаксИндекс].ДатаПроведенияБанком);
	
КонецПроцедуры //ВыполнитьОбмен

Процедура ОбменСБанкамиAPI(КодНастройки) Экспорт
	
	Ссылка = Справочники.СМП_УчетныеЗаписиБанков.НайтиПоКоду(КодНастройки);
	
	Если ЗначениеЗаполнено(Ссылка) И НЕ Ссылка.ПометкаУдаления Тогда
		
		Попытка
			
			ОбменСБанком(Ссылка);
			
			//Если Результат.Успех Тогда
			//	Инфо = "Обмен с банком прошел успешно. " + Результат.Информация;
			//Иначе
			//	Инфо = "Обмен с банком не прошел.";
			//КонецЕсли;
			//Инфо = Формат(Результат.ДатаОбновления, "ДФ='dd.MM.yyyy HH:mm:ss'") + " " + Инфо;
			
			//Если ЗначениеЗаполнено(Результат.Ошибка) Тогда
			//	Инфо = Инфо + Символы.ПС + "При обмене с банком произошли следующие ошибки:" + Символы.ПС + Результат.Ошибка;
			//КонецЕсли;
			
			//Объект = Ссылка.ПолучитьОбъект();
			//Объект.Протокол = Инфо + Символы.ПС + Символы.ПС + Объект.Протокол; 
			//Объект.Записать();
			
		Исключение
			
			ЗаписьЖурналаРегистрации(Ссылка.Наименование,
			УровеньЖурналаРегистрации.Ошибка,,,
			ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбменСБанком(Ссылка) Экспорт
	
	//Обработка = Обработки.КлиентБанк.Создать();
	//Обработка.БанковскийСчет = Ссылка.БанковскийСчет;
	//Обработка.Организация = Ссылка.Организация;
	//Обработка.ГруппаДоступа = Ссылка.ГруппаДоступаДляНовыхКонтрагентов;
	//Обработка.ПроводитьЗагружаемые = Истина;
	//Обработка.КонПериода = ТекущаяДата();
	//Обработка.НачПериода = ТекущаяДата() - 864000;
	//Обработка.АвтоматическиПодставлятьДокументы = Истина;
	//Обработка.СоздаватьКонтрагентов = ?(Ссылка.СоздаватьНенайденныеЭлементы, 2, 1);
	//
	//Если Ссылка.Банк = Перечисления.СМП_ПоддерживаемыеИнтеграцииСБанками.ПриватБанк Тогда
	//	СМП_РаботаСБанкамиПриватБанкAPIСервер.ВыполнитьРегламент(Обработка, Ссылка);
	//КонецЕсли;
	//
	//ИмпортЗаголовок = Неопределено;
	//ТаблицаРезультата = Неопределено;
	//ТаблицаПомеченныхНаУдалениеКакДубль = Неопределено;
	//
	//Если Обработка.Загрузка.Количество() > 0 Тогда
	//	Обработка.Загрузить(ИмпортЗаголовок, ТаблицаРезультата, ТаблицаПомеченныхНаУдалениеКакДубль);
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// .
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция ИнициализироватьОбработкуКлиентБанк(пУчетнаяЗапись) 
	
	сДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(пУчетнаяЗапись, "Организация, БанковскийСчет, Банк, Кодировка");
	Обработка = Обработки.КлиентБанк.Создать();

	сНастройки = Обработки.КлиентБанк.ПолучитьНастройкиПрограммыКлиентаБанка(сДанные.Организация, сДанные.БанковскийСчет);
	Обработка.Организация = сДанные.Организация;
	Обработка.БанковскийСчет = сДанные.БанковскийСчет;
	Обработка.СМП_УчетнаяЗаписьБанка = сНастройки.СМП_УчетнаяЗаписьБанка; 
	Обработка.Кодировка = сДанные.Кодировка;
	
	//тзНастройкаЗаполнения = Новый ТаблицаЗначений;
	//тзНастройкаЗаполнения.Колонки.Добавить("Документ", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	//тзНастройкаЗаполнения.Колонки.Добавить("Проводить", Новый ОписаниеТипов("Булево"));
	//тзНастройкаЗаполнения.Колонки.Добавить("СтатьяДДС", Новый ОписаниеТипов("СправочникСсылка.СтатьиДенежныхСредств"));
	
	НастройкаЗаполненияСтрока = Обработка["НастройкаЗаполнения"].Добавить();
	НастройкаЗаполненияСтрока.Документ = "Поступление на расчетный счет";
	НастройкаЗаполненияСтрока.Проводить = сНастройки.ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет;
	НастройкаЗаполненияСтрока.СтатьяДДС = сНастройки.СтатьяДДСПоступлениеНаРасчетныйСчет;
	
	НастройкаЗаполненияСтрока = Обработка["НастройкаЗаполнения"].Добавить();
	НастройкаЗаполненияСтрока.Документ = "Списание с расчетного счета";
	НастройкаЗаполненияСтрока.Проводить = сНастройки.ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета;
	НастройкаЗаполненияСтрока.СтатьяДДС = сНастройки.СтатьяДДССписаниеСРасчетногоСчета;
	
	//НайденнаяСтрока = НастройкаЗаполнения.НайтиСтроки(Новый Структура("Документ", "Поступление на расчетный счет"));
	//НайденнаяСтрока[0].Проводить = Настройки.ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет;
	//НайденнаяСтрока[0].СтатьяДДС = Настройки.СтатьяДДСПоступлениеНаРасчетныйСчет;
	//
	//НайденнаяСтрока = НастройкаЗаполнения.НайтиСтроки(Новый Структура("Документ", "Списание с расчетного счета"));
	//НайденнаяСтрока[0].Проводить = Настройки.ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета;
	//НайденнаяСтрока[0].СтатьяДДС = Настройки.СтатьяДДССписаниеСРасчетногоСчета;
	
	ГруппаДляНовыхКонтрагентов = сНастройки.ГруппаДляНовыхКонтрагентов;
	
	Обработка.Кодировка = сДанные.Кодировка;
	Обработка.СМП_ПрямойОбмен = Истина;
	//Обработка.ФайлВыгрузки                             = сНастройки.ФайлВыгрузки;
	//Обработка.ФайлЗагрузки                             = сНастройки.ФайлЗагрузки;
	Обработка.ВыгружатьПлатежноеПоручение              = сНастройки.Платежное_Поручение;
	Обработка.ВыгружатьПлатежноеТребование             = сНастройки.Платежное_Требование;
	Обработка.СоздаватьНенайденныеЭлементы             = сНастройки.СоздаватьНенайденныеЭлементы;
	
	Обработка.ВыгружатьПлатежноеПоручение				= Истина;
	Обработка.ВыгружатьПлатежноеТребование				= Истина;
	
	Возврат Обработка;
	
КонецФункции // ИнициализироватьОбработкуКлиентБанк

// .
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция ПараметрыОбмена(пУчетнаяЗапись, пОбработка) 
	
	сПараметрыОбмена = Новый Структура(
	"ДокументыКИмпорту, 
	|СтруктураДанныхИмпорта, 
	|ВыводитьСообщения, 
	|БанковскийСчет, 
	|Кодировка,
	|Организация, 
	|НастройкаЗаполнения, 
	|ДеревоКонтрагентов, 
	|Импорт_Заголовок, 
	|Импорт_РасчетныеСчета,
	|ДвоичныеДанныеФайла, 
	|СоздаватьНенайденныеЭлементы, 
	|НачПериода, 
	|КонПериода,
	|СтекОповещений, 
	|ТребуетсяПовторноеЧтениеФайла, 
	|СМП_ОбработкаПротокола, 
	|СМП_УчетнаяЗаписьБанка, 
	|СМП_ПрямойОбмен,ИскатьВСправочникеСоответствий",
	
	ТаблицаДокументыКИмпорту(), 
	Новый Соответствие, // ПолучитьСтруктуруДанныхИмпорта(), 
	Ложь, 
	пОбработка.БанковскийСчет, 
	пОбработка.Кодировка,
	пОбработка.Организация, 
	пОбработка["НастройкаЗаполнения"].Выгрузить(), 
	ДеревоКонтрагентов(), 
	"", 
	ИмпортРасчетныеСчета(),
	Неопределено, 
	пОбработка.СоздаватьНенайденныеЭлементы, 
	НачалоДня(ТекущаяДатаСеанса()), 
	КонецДня(ТекущаяДатаСеанса()),
	Новый Массив, 
	Истина, 
	Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка(), 
	пОбработка.СМП_УчетнаяЗаписьБанка, 
	пОбработка.СМП_ПрямойОбмен, 
	Справочники.СМП_СоответствияНазначенийИРеквизитовПлатежа.ЕстьЗаписи());
	
	сПараметрыОбмена.НастройкаЗаполнения.Колонки.Удалить("НомерСтроки");
	
	Возврат сПараметрыОбмена;
	
КонецФункции // ПараметрыОбмена

// .
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция ТаблицаДокументыКИмпорту() 
	
	тзДокументы = Новый ТаблицаЗначений;
	//тзДокументы.Колонки.Добавить("", Новый ОписаниеТипов(""));
	тзДокументы.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
	тзДокументы.Колонки.Добавить("Загружать", Новый ОписаниеТипов("Булево"));
	тзДокументы.Колонки.Добавить("Готовность", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	тзДокументы.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	тзДокументы.Колонки.Добавить("НомерДок", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("Номер", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("ДатаДок", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	тзДокументы.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("Операция", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("СчетОрганизации", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета, Строка"));
	тзДокументы.Колонки.Добавить("СуммаДокумента", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	тзДокументы.Колонки.Добавить("СуммаСписано", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	тзДокументы.Колонки.Добавить("СуммаПоступило", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	тзДокументы.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты, СправочникСсылка.Организации, Строка"));
	тзДокументы.Колонки.Добавить("СчетКонтрагента", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета, Строка"));
	тзДокументы.Колонки.Добавить("Списано", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	тзДокументы.Колонки.Добавить("ДатаСписано", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("Поступило", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	тзДокументы.Колонки.Добавить("ДатаПоступило", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("ДатаПроведения", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	тзДокументы.Колонки.Добавить("ПлательщикСчет", ОбщегоНазначения.ОписаниеТипаСтрока(34));
	тзДокументы.Колонки.Добавить("Плательщик", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("ПолучательСчет", ОбщегоНазначения.ОписаниеТипаСтрока(34));
	тзДокументы.Колонки.Добавить("Получатель", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("НазначениеПлатежа", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("ПлатежПоПредст", ОбщегоНазначения.ОписаниеТипаСтрока(34));
	тзДокументы.Колонки.Добавить("ДополнУсловия", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("НомерСчетаПоставщика", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("ДатаОтсылкиДок", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("ДатаОтсылки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	тзДокументы.Колонки.Добавить("Документ", Новый ОписаниеТипов(
		"ДокументСсылка.ПлатежноеПоручение, ДокументСсылка.СписаниеСРасчетногоСчета, ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств," 
		+ " ДокументСсылка.ПоступлениеНаРасчетныйСчет, ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
	тзДокументы.Колонки.Добавить("ПлатежныйОрдер", Новый ОписаниеТипов("ДокументСсылка.СписаниеСРасчетногоСчета, ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
	тзДокументы.Колонки.Добавить("СекцияДокумент", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("СтатьяДДС", Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
	тзДокументы.Колонки.Добавить("ТипДокумента", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	тзДокументы.Колонки.Добавить("ВидДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоступлениеДенежныхСредств, ПеречислениеСсылка.ВидыОперацийСписаниеДенежныхСредств"));
	тзДокументы.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов, Строка"));
	тзДокументы.Колонки.Добавить("СостояниеДокумента", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	тзДокументы.Колонки.Добавить("ДатаПлПоручения", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	тзДокументы.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	тзДокументы.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручение, ДокументСсылка.СписаниеСРасчетногоСчета"));
	тзДокументы.Колонки.Добавить("НомерДокументаНекорректен", Новый ОписаниеТипов("Булево"));
	тзДокументы.Колонки.Добавить("ОписаниеОшибок", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("ДоговорКонтрагентаНеНайден", Новый ОписаниеТипов("Булево"));
	тзДокументы.Колонки.Добавить("Код", ОбщегоНазначения.ОписаниеТипаСтрока(25));
	тзДокументы.Колонки.Добавить("ЕстьОшибка", Новый ОписаниеТипов("Булево"));
	тзДокументы.Колонки.Добавить("ОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	тзДокументы.Колонки.Добавить("ДокументИД", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("КодВалюты", ОбщегоНазначения.ОписаниеТипаСтрока(3));
	тзДокументы.Колонки.Добавить("СтатусДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("ПлательщикОКПО", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	тзДокументы.Колонки.Добавить("ПолучательОКПО", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	тзДокументы.Колонки.Добавить("ПлательщикМФО", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	тзДокументы.Колонки.Добавить("ПолучательМФО", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	тзДокументы.Колонки.Добавить("ПлательщикБанк", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("ПолучательБанк", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("СтатусСоставителя", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзДокументы.Колонки.Добавить("ДокументРасчетов", Новый ОписаниеТипов(Документы.ТипВсеСсылки(), "Строка"));
	тзДокументы.Колонки.Добавить("ДатаПроведенияБанком", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Возврат тзДокументы;
	
КонецФункции // ТаблицаДокументыКИмпорту

// .
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция ДеревоКонтрагентов() 
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Представление", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	Дерево.Колонки.Добавить("Значение", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	Дерево.Колонки.Добавить("Реквизит", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Дерево.Колонки.Добавить("НомСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10,, ДопустимыйЗнак.Неотрицательный));
	Дерево.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ЭтоРодитель", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("УчаствуетВНесколькихСтроках", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ДопСтрокиВКоторыхУчаствуетКонтрагент", Новый ОписаниеТипов("СписокЗначений"));
	
	Возврат Дерево;
	
КонецФункции // ДеревоКонтрагентов

// ИмпортРасчетныеСчета.
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция ИмпортРасчетныеСчета() 
	
	тзРасчетныеСчета = Новый ТаблицаЗначений;
	//тзРасчетныеСчета.Колонки.Добавить("", Новый ОписаниеТипов(""));
	тзРасчетныеСчета.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзРасчетныеСчета.Колонки.Добавить("ДатаКонца", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзРасчетныеСчета.Колонки.Добавить("РасчСчетОрг", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзРасчетныеСчета.Колонки.Добавить("НачальныйОстаток", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзРасчетныеСчета.Колонки.Добавить("ВсегоПоступило", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзРасчетныеСчета.Колонки.Добавить("ВсегоСписано", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзРасчетныеСчета.Колонки.Добавить("КонечныйОстаток", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	тзРасчетныеСчета.Колонки.Добавить("Начало", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	тзРасчетныеСчета.Колонки.Добавить("Конец", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	тзРасчетныеСчета.Колонки.Добавить("РасчетныйСчет", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	тзРасчетныеСчета.Колонки.Добавить("НачальнаяСумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	тзРасчетныеСчета.Колонки.Добавить("Поступило", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	тзРасчетныеСчета.Колонки.Добавить("Списано", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	тзРасчетныеСчета.Колонки.Добавить("КонечнаяСумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат тзРасчетныеСчета;
	
КонецФункции // ИмпортРасчетныеСчета

// .
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция ПолучитьТаблицуДокументов(пДокументыКИмпорту, пДеревоКонтрагентов, пБанковскийСчет) 
	
	ТаблицаДокументовКИмпорту = пДокументыКИмпорту.Скопировать();
	ТаблицаДокументовКИмпорту.Колонки.Добавить("РеквизитыКонтрагента");
	//ТаблицаДокументовКИмпорту.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом");
	//ТаблицаДокументовКИмпорту.Колонки.Добавить("СубконтоДт1");
	//ТаблицаДокументовКИмпорту.Колонки.Добавить("СубконтоДт2");
	//ТаблицаДокументовКИмпорту.Колонки.Добавить("СубконтоДт3");
	
	Для Каждого СтрокаСекции ИЗ ТаблицаДокументовКИмпорту Цикл
		ТипКонтрагента  = ?(СтрокаСекции.ПлательщикСчет = пБанковскийСчет.НомерСчета, "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
		
		ПолеПоиска       = НСтр("ru='ЕДРПОУ';uk='ЄДРПОУ'");
		ЗначениеПоиска   = СтрокаСекции[ТипКонтрагента + "ОКПО"];
		// Если ИНН контрагента в файле не задан, то ищем по имени
		Если ПустаяСтрока(ЗначениеПоиска) Тогда
			ПолеПоиска     = НСтр("ru='Наименование';uk='Найменування'");
			ЗначениеПоиска = СтрокаСекции[ТипКонтрагента];
			
			Если ПустаяСтрока(ЗначениеПоиска) Тогда
				ЗначениеПоиска = СтрокаСекции[ТипКонтрагента];
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Представление, Значение", ПолеПоиска, ЗначениеПоиска);
		НайденныеЗаписиОКонтрагенте = пДеревоКонтрагентов.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		
		СтрокаСекции.РеквизитыКонтрагента = Неопределено;
		
		Если НайденныеЗаписиОКонтрагенте.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеЗаписиОКонтрагенте[0];
			
			Родитель = НайденнаяСтрока.Родитель;
			Если Родитель <> Неопределено Тогда
				НайденнаяСтрока = Родитель;
			КонецЕсли;
			
			РеквизитыКонтрагента = Новый ТаблицаЗначений();
			РеквизитыКонтрагента.Колонки.Добавить("Значение");
			РеквизитыКонтрагента.Колонки.Добавить("Представление");
			РеквизитыКонтрагента.Колонки.Добавить("Реквизит");
			
			СтрокаСекции.РеквизитыКонтрагента = РеквизитыКонтрагента;
			
			Для Счет = 0 По 2 Цикл
				НовыйРеквизит = РеквизитыКонтрагента.Добавить();
				НовыйРеквизит.Представление = НайденнаяСтрока.Строки[Счет].Представление;
				НовыйРеквизит.Значение      = НайденнаяСтрока.Строки[Счет].Значение;
				НовыйРеквизит.Реквизит      = НайденнаяСтрока.Строки[Счет].Реквизит;
			КонецЦикла;
			
			Если СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
				ВидДоговора = НСтр("ru='С покупателем';uk='З покупцем'");
			ИначеЕсли СтрокаСекции.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
				ВидДоговора = НСтр("ru='С поставщиком';uk='З постачальником'");
			Иначе
				ВидДоговора = НСтр("ru='другой';uk='інший'");
			КонецЕсли;
			
			Для каждого Строка Из НайденнаяСтрока.Строки Цикл
				Если Строка.Представление = НСтр("ru='Счет';uk='Рахунок'") И Строка.Значение = СтрокаСекции[ТипКонтрагента + "СЧЕТ"] Тогда
					
					НовыйРеквизит = РеквизитыКонтрагента.Добавить();
					НовыйРеквизит.Представление = Строка.Представление;
					НовыйРеквизит.Значение      = Строка.Значение;
					НовыйРеквизит.Реквизит      = Строка.Реквизит;
					
					Для каждого ПодСтрока Из Строка.Строки Цикл
						НовыйРеквизит = РеквизитыКонтрагента.Добавить();
						НовыйРеквизит.Представление = ПодСтрока.Представление;
						НовыйРеквизит.Значение      = ПодСтрока.Значение;
						НовыйРеквизит.Реквизит      = ПодСтрока.Реквизит;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Строка Из НайденнаяСтрока.Строки Цикл
				Если Строка.Представление = НСтр("ru='Договор';uk='Договір'") И Строка.Значение = ВидДоговора Тогда
					
					НовыйРеквизит = РеквизитыКонтрагента.Добавить();
					НовыйРеквизит.Представление = Строка.Представление;
					НовыйРеквизит.Значение      = Строка.Значение;
					НовыйРеквизит.Реквизит      = Строка.Реквизит;
					
					Для каждого ПодСтрока Из Строка.Строки Цикл
						НовыйРеквизит = РеквизитыКонтрагента.Добавить();
						НовыйРеквизит.Представление = ПодСтрока.Представление;
						НовыйРеквизит.Значение      = ПодСтрока.Значение;
						НовыйРеквизит.Реквизит      = ПодСтрока.Реквизит;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДокументовКИмпорту;
	
КонецФункции // ПолучитьТаблицуДокументов

// .
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОбработатьДеревоКонтрагентов(пДеревоКонтрагентов, пДокументыКИмпорту) 
	
	ТипСтрока = Тип("Строка");
	СоответствиеОтмеченных = Новый Соответствие();
	Для каждого СтрокаИмпорта Из пДокументыКИмпорту Цикл
		Загружать = СтрокаИмпорта.Загружать;
		Если Загружать Тогда
			Загружать = НЕ(ТипЗнч(СтрокаИмпорта.Контрагент)      <> ТипСтрока И ЗначениеЗаполнено(СтрокаИмпорта.Контрагент)
						 И ТипЗнч(СтрокаИмпорта.СчетКонтрагента) <> ТипСтрока И ЗначениеЗаполнено(СтрокаИмпорта.СчетКонтрагента)
						 И ТипЗнч(СтрокаИмпорта.Договор)         <> ТипСтрока И ЗначениеЗаполнено(СтрокаИмпорта.Договор));
		КонецЕсли;
		
		СоответствиеОтмеченных.Вставить(СтрокаИмпорта.НомерСтроки, Новый Структура("Загружать", Загружать));
		
		Если Загружать Тогда
			Если ТипЗнч(СтрокаИмпорта.Контрагент)   <> ТипСтрока И ЗначениеЗаполнено(СтрокаИмпорта.Контрагент)
			И ТипЗнч(СтрокаИмпорта.СчетКонтрагента) <> ТипСтрока И НЕ ЗначениеЗаполнено(СтрокаИмпорта.СчетКонтрагента) Тогда
				СоответствиеОтмеченных[СтрокаИмпорта.НомерСтроки].Вставить("Контрагент", СтрокаИмпорта.Контрагент);
			КонецЕсли;
			
			Если ТипЗнч(СтрокаИмпорта.Договор) = ТипСтрока Тогда
				ВидыДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(СтрокаИмпорта.ВидОперации);
				Если ВидыДоговоров.Количество() > 0 Тогда
					ВидДоговора = Строка(ВидыДоговоров[0]);
				Иначе
					ВидДоговора = Неопределено;
				КонецЕсли;
				
				СоответствиеОтмеченных[СтрокаИмпорта.НомерСтроки].Вставить("ВидДоговора", ВидДоговора);
			Иначе
				СоответствиеОтмеченных[СтрокаИмпорта.НомерСтроки].Вставить("Договор", СтрокаИмпорта.Договор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НенайденныйКонтрагент Из пДеревоКонтрагентов.Строки Цикл
		Если НенайденныйКонтрагент.УчаствуетВНесколькихСтроках Тогда
			Пометка = СоответствиеОтмеченных[НенайденныйКонтрагент.НомСтроки].Загружать;
			Для каждого СтрокаУчастия Из НенайденныйКонтрагент.ДопСтрокиВКоторыхУчаствуетКонтрагент Цикл
				Пометка = Пометка ИЛИ СоответствиеОтмеченных[СтрокаУчастия.Значение].Загружать;
			КонецЦикла;
			
			НенайденныйКонтрагент.Пометка = Пометка;
		Иначе
			НенайденныйКонтрагент.Пометка = СоответствиеОтмеченных[НенайденныйКонтрагент.НомСтроки].Загружать;
		КонецЕсли;
		
		Если НенайденныйКонтрагент.Пометка Тогда
			// если контрагент выбран пользователем, то заполним в дереве ненайденных ссылку на этого контрагента
			Если СоответствиеОтмеченных[НенайденныйКонтрагент.НомСтроки].Свойство("Контрагент") Тогда
				ВыбранныйКонтрагент = СоответствиеОтмеченных[НенайденныйКонтрагент.НомСтроки].Контрагент;
				Если НенайденныйКонтрагент.Реквизит <> ВыбранныйКонтрагент Тогда
					НенайденныйКонтрагент.Реквизит = ВыбранныйКонтрагент;
					НенайденныйКонтрагент.Представление = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйКонтрагент, "Наименование"));
				КонецЕсли;
			КонецЕсли;
			
			НенайденныйКонтрагент.ЭтоРодитель = Истина;
			ПодчиненныеТекущемуЭлементы = НенайденныйКонтрагент.Строки;
			
			// актуализируем Вид договора, в зависимости от Вида операции
			АктуализироватьНенайденныеДоговора(ПодчиненныеТекущемуЭлементы, НенайденныйКонтрагент.НомСтроки, СоответствиеОтмеченных);
			Для каждого НомерДопСтроки Из НенайденныйКонтрагент.ДопСтрокиВКоторыхУчаствуетКонтрагент Цикл
				АктуализироватьНенайденныеДоговора(ПодчиненныеТекущемуЭлементы, НомерДопСтроки.Значение, СоответствиеОтмеченных, Истина);
			КонецЦикла;
		Иначе
			НенайденныйКонтрагент.ЭтоРодитель = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ОбработатьДеревоКонтрагентов

Процедура АктуализироватьНенайденныеДоговора(ЭлементыДерева, Знач НомСтроки, Знач СоответствиеОтмеченных, Знач ЭтоДопСтрока = Ложь)
	
	Если СоответствиеОтмеченных[НомСтроки].Свойство("ВидДоговора") Тогда
		ВидДоговора = СоответствиеОтмеченных[НомСтроки].ВидДоговора;
		ПодчиненныйЭлемент = НайтиЭлементДерева(ЭлементыДерева, "Значение", ВидДоговора);
		Если ЭтоДопСтрока Тогда
			Если ПодчиненныйЭлемент = Неопределено Тогда
				ПодчиненныйЭлемент = ЭлементыДерева.Добавить();
				ПодчиненныйЭлемент.Пометка       = Истина;
				ПодчиненныйЭлемент.Представление = НСтр("ru='Договор';uk='Договір'");
				ПодчиненныйЭлемент.Значение      = ВидДоговора;
				Обработки.КлиентБанк.ДобавитьРеквизитыДоговора(ПодчиненныйЭлемент.Строки, ВидДоговора);
			Иначе
				ПодчиненныйЭлемент.Пометка = Истина;
			КонецЕсли;
		ИначеЕсли ПодчиненныйЭлемент = Неопределено Тогда
			ПодчиненныйЭлемент = НайтиЭлементДерева(ЭлементыДерева, "Представление", НСтр("ru='Договор';uk='Договір'"));
			Если ПодчиненныйЭлемент = Неопределено Тогда
				ПодчиненныйЭлемент = ЭлементыДерева.Добавить();
				ПодчиненныйЭлемент.Пометка       = Истина;
				ПодчиненныйЭлемент.Представление = НСтр("ru='Договор';uk='Договір'");
				ПодчиненныйЭлемент.Значение      = ВидДоговора;
				Обработки.КлиентБанк.ДобавитьРеквизитыДоговора(ПодчиненныйЭлемент.Строки, ВидДоговора);
			ИначеЕсли ПодчиненныйЭлемент.Значение <> ВидДоговора Тогда
				ПодчиненныйЭлемент.Значение = ВидДоговора;
				ПодчиненныйЭлемент.Реквизит = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				Для каждого ЭлементДоговора Из ПодчиненныйЭлемент.ПолучитьЭлементы() Цикл
					Если ЭлементДоговора.Представление = НСтр("ru='Наименование';uk='Найменування'") Тогда
						ЭлементДоговора.Значение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Основной договор %1';uk='Основний договір %1'"), НРег(ВидДоговора));
					КонецЕсли;
					
					Если ЭлементДоговора.Представление = НСтр("ru='Вид';uk='Вид'") Тогда
						ЭлементДоговора.Значение = ВидДоговора;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ПодчиненныйЭлемент.Пометка = Истина;
		КонецЕсли;
	ИначеЕсли СоответствиеОтмеченных[НомСтроки].Свойство("Договор") И НЕ ЭтоДопСтрока Тогда
		Договор = СоответствиеОтмеченных[НомСтроки].Договор;
		ПодчиненныйЭлемент = НайтиЭлементДерева(ЭлементыДерева, "Реквизит", Договор);
		Если ПодчиненныйЭлемент = Неопределено Тогда
			ПодчиненныйЭлемент = НайтиЭлементДерева(ЭлементыДерева, "Представление", НСтр("ru='Договор';uk='Договір'"));
			Если ПодчиненныйЭлемент <> Неопределено И ПодчиненныйЭлемент.Реквизит <> Договор Тогда
				ПодчиненныйЭлемент.Пометка  = Ложь;
				ПодчиненныйЭлемент.Реквизит = Договор;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлементДерева(Знач ЭлементыДерева, Знач ПолеПоиска, Знач ЗначениеПоиска)
	
	Для каждого ЭлементДоговора Из ЭлементыДерева Цикл
		Если ЭлементДоговора[ПолеПоиска] = ЗначениеПоиска Тогда
			Возврат ЭлементДоговора;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено; // ничего не нашли
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область РаботаСАпиБанка

Процедура ПолучитьДанныеССервисаБанкаПоСчету(ДанныеДляПоиска, ДанныеАвторизации, ТаблицаПлатежей)
	
	ТокенДоступа = ПолучитьТокенДоступа(ДанныеАвторизации);
	НомерСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляПоиска.БанковскийСчет, "НомерСчета");
	
	Если Не УправлениеДенежнымиСредствами.НомерБанковскогоСчетаСоответствуетСтандартуIBAN(НомерСчета) Тогда
		
		ВызватьИсключение("Номер рахунку " + НомерСчета + "не відповідає стандарту IBAN");
		
	КонецЕсли;
	
	СоединениеССервисом = ПолучитьСоединениеССервисомБанка();
	ЗапросПоискаДокумента = ПолучитьЗапросSearcher(
		ТокенДоступа, ДанныеДляПоиска.БанковскийСчет, ДанныеДляПоиска.ДатаНачала, ДанныеДляПоиска.ДатаОкончания, СоединениеССервисом);
	
	Результат = СоединениеССервисом.ОтправитьДляОбработки(ЗапросПоискаДокумента);
	
	Если Результат.КодСостояния <> 200 Тогда
		ВызватьИсключение(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
	КонецЕсли;
	
	МассивДокументов = ПолучитьСответствиеИзОтветаСервера(Результат.ПолучитьТелоКакСтроку());
	ЗаполнитьТаблицуПлатежей(ТаблицаПлатежей, МассивДокументов, НомерСчета);
	
	//// МЕХАНИЗМ ПОЛУЧЕНИЯ ДАНННЫХ ЧЕРЕЗ ВЫПИСКУ
	//Для каждого Строка Из МассивДокументов Цикл
	//	
	//	МассивВыписки = ПолучитьВыпискуПоИдентификатору(ТокенДоступа, СоединениеССервисом, Строка.Получить("hostId"), Строка.Получить("docId")); 
	//	
	//	СуммаДебит  = ПолучитьЧислоИзСтроки(МассивВыписки.Vegadoc.docbody.dt_turn);
	//	
	//	СуммаКредит = ПолучитьЧислоИзСтроки(МассивВыписки.Vegadoc.docbody.cr_turn);
	//	
	//	Если СуммаДебит = 0 И  СуммаКредит = 0  Тогда
	//		
	//		Продолжить;
	//		
	//	КонецЕсли;
	//	
	//	Если ТипЗнч(МассивВыписки.vegadoc.docbody.tran) = Тип("СписокXDTO") Тогда 	
	//		
	//		Для каждого Объект Из МассивВыписки.vegadoc.docbody.tran Цикл
	//			
	//			ОбработатьТранзакцию(Объект, НомерСчета, ТаблицаПлатежей); 
	//			
	//		КонецЦикла;
	//		
	//	ИначеЕсли ТипЗнч(МассивВыписки.vegadoc.docbody.tran) = Тип("ОбъектXDTO") Тогда 	
	//		
	//		ОбработатьТранзакцию(МассивВыписки.vegadoc.docbody.tran, НомерСчета, ТаблицаПлатежей);
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;	
	
КонецПроцедуры // ПолучитьДанныеССервисаБанкаПоСчету()

Функция ПолучитьТокенДоступа(ДанныеАвторизации)Экспорт
	
	ПараметрыPOST = ПолучитьСтрокуПараметровПост(ДанныеАвторизации);
	
	Соединение = Новый HTTPСоединение("auth.fuib.com",,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	
	ЗапросHTTP = Новый HTTPЗапрос("/auth/realms/VegaNet/protocol/openid-connect/token");
	ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	ЗапросHTTP.УстановитьТелоИзСтроки(ПараметрыPOST);
	
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP);
	
	Если Ответ.КодСостояния = 200 Тогда
		
		СоответсвиеОтвета = ПолучитьСответствиеИзОтветаСервера(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		
		ТокенДоступа = СоответсвиеОтвета.Получить("access_token");
		
		Возврат ТокенДоступа;
		
	Иначе 
		
		ВызватьИсключение(НСтр("ru='Ошибка при получении токена.'; uk='Помилка отримання токена доступу'"));
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗапросSearcher(ТокенДоступа, БанковскийСчет, ДатаНачала, ДатаОкончания, СоединениеССервисом)
	
	СтрокаЗапроса = "/war_veganet_api/document/searcher";
	
	ИдентификаторСчета = ПолучитьИдентификаторСчета(ТокенДоступа, СоединениеССервисом, БанковскийСчет);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторСчета) Тогда
		ВызватьИсключение(НСтр("ru='В ответе банка не найден счет.'; uk='У відповіді банка не знайдений рахунок'"));
	КонецЕсли;
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ИдентификаторСчета);
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("fromDate", Формат(ДатаНачала, "ДФ='dd.MM.yyyy HH:mm:ss'"));
	СтруктураЗапроса.Вставить("toDate", Формат(ДатаОкончания, "ДФ='dd.MM.yyyy HH:mm:ss'"));
	
	мСтатусы = Новый Массив;
	мСтатусы.Добавить("PROCESSED");
	СтруктураЗапроса.Вставить("documentState", мСтатусы);
	
	мТипы = Новый Массив;
	//мТипы.Добавить("STM"); // Выписка за день
	мТипы.Добавить("UAH"); // конкретные транзакции
	СтруктураЗапроса.Вставить("documentType" ,мТипы);
	СтруктураЗапроса.Вставить("documentAccounts", МассивСчетов);
	
	Заголовки = ПолучитьЗаголовкиЗапроса(ТокенДоступа);
	ТелоЗапроса = СформироватьJSON(СтруктураЗапроса);
	ЗапросHTTP = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
	ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8);
	
	Возврат ЗапросHTTP

КонецФункции // ПолучитьЗапрос()

Функция ПолучитьВыпискуПоИдентификатору(ТокенДоступа,СоединениеССервисом,ХостАйди,АйдиВыписки)

	СтрокаЗапроса = "/war_veganet_api/document/body/"+ХостАйди+"/"+Формат(АйдиВыписки,"ЧГ=");

	Заголовки = ПолучитьЗаголовкиЗапроса(ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
		
	Результат = СоединениеССервисом.Получить(ЗапросHTTP);
	
	Если Результат.КодСостояния <> 200 Тогда
		
		ВызватьИсключение(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		 
	КонецЕсли;
	
	Данные = ПрочитатьСтрокуОтветаИзТекста(Результат.ПолучитьТелоКакСтроку());
	
	Возврат Данные
	
КонецФункции 

Функция ПолучитьИдентификаторСчета(ТокенДоступа, СоединениеССервисом, БанковскийСчет)Экспорт

	сДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет,"НомерСчета, ВалютаДенежныхСредств.Наименование");
	
	Если СтрНайти(НРег(сДанные.ВалютаДенежныхСредствНаименование), "грн") > 0 Тогда
		КодВалютыСчета = "UAH";
	Иначе
		КодВалютыСчета = сДанные.ВалютаДенежныхСредствНаименование;
	КонецЕсли;
	
	СтрокаЗапроса = "/war_veganet_api/account";
	Заголовки = ПолучитьЗаголовкиЗапроса(ТокенДоступа);
	ЗапросHTTP = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
	Результат = СоединениеССервисом.Получить(ЗапросHTTP);
	
	Если Результат.КодСостояния <> 200 Тогда
		
		ВызватьИсключение(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		
	КонецЕсли;

	МассивСчетов = ПолучитьСответствиеИзОтветаСервера(Результат.ПолучитьТелоКакСтроку());
	
	ИдентификаторСчета = "";
	
	Для каждого Счет Из МассивСчетов Цикл
	
		Если Счет.Получить("iban") = сДанные.НомерСчета
			И Счет.Получить("currency") = КодВалютыСчета Тогда
		
			ИдентификаторСчета = Формат(Счет.Получить("accountId"),"ЧГ=");
			Прервать;
		
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторСчета

КонецФункции // ПолучитьИдентификаторСчета()

#КонецОбласти

#Область ПрочиеВспомогательныеМетоды

Функция ПолучитьСтрокуПараметровПост(ДанныеАвторизации)

	ШаблонСтроки = "grant_type=password&client_id=%1&username=%2&password=%3&client_secret=%4";
	СтрокаЗапроса = СтрШаблон(ШаблонСтроки, ДанныеАвторизации.ИД, ДанныеАвторизации.Логин, ДанныеАвторизации.Пароль, ДанныеАвторизации.Токен);
	
	Возврат СтрокаЗапроса

КонецФункции // ()

Функция ПрочитатьСтрокуОтветаИзТекста(строкаОтвета)
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(строкаОтвета);
	ФабрикаХДТО = Новый ФабрикаXDTO;
	
	Возврат ФабрикаХДТО.ПрочитатьXML(ЧтениеХМЛ);

КонецФункции 

Функция ПолучитьСответствиеИзОтветаСервера(СтрокаJson) 
	
	Чтениеjson = new ЧтениеJSON;
	Чтениеjson.УстановитьСтроку(СтрокаJson); 	
	СооответствиеЧтения = ПрочитатьJSON(Чтениеjson,Истина);
		
	Возврат СооответствиеЧтения

КонецФункции

Функция СформироватьJSON(Структура, ФормироватьСПереносами = Ложь)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	Если ФормироватьСПереносами Тогда
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(,Символы.Таб));
	Иначе
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,Символы.Таб));
	КонецЕсли; 
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;

	ЗаписатьJSON(ЗаписьJSON, Структура, НастройкиСериализацииJSON);
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

Функция ПолучитьСоединениеССервисомБанка()
	
	Сервер = "service.fuib.com";
	Порт = 4103;
	Логин = "";
	Пароль = "";
	Ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Прокси = Новый ИнтернетПрокси(Ложь);
	СоединениеHTTP = Новый HTTPСоединение(Сервер, Порт, Логин, Пароль, Прокси, , Ssl);
	
	Возврат СоединениеHTTP
	
КонецФункции // ПолучитьСоединениеССервисомБанка()

Функция ПолучитьЗаголовкиЗапроса(ТокенДоступа)

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type","application/json");
	Заголовки.Вставить("Authorization","Bearer " +ТокенДоступа); 
	Заголовки.Вставить("X-App-Channel","pure-api");
	Заголовки.Вставить("X-Flow-ID","5:6:EX");

	Возврат Заголовки

КонецФункции // ПолучитьЗаголовкиЗапроса()

Функция ПолучитьЧислоИзСтроки(ЧислоСтрокой)

	Попытка
	
		ЧислоИзСтроки = Число(ЧислоСтрокой);
	
	Исключение
		
		ЧислоИзСтроки = 0;
		
	КонецПопытки; 
	
	Возврат ЧислоИзСтроки

КонецФункции 

Функция ПолучитьТаблицуПлатежей()

	ТаблицаПлатежей = Новый ТаблицаЗначений;
		
	ТаблицаПлатежей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
	ТаблицаПлатежей.Колонки.Добавить("НомерДок",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("Номер",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	//ТаблицаПлатежей.Колонки.Добавить("ДатаДок", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаПлатежей.Колонки.Добавить("Списано", Новый ОписаниеТипов("Дата"));
	ТаблицаПлатежей.Колонки.Добавить("Поступило", Новый ОписаниеТипов("Дата"));
	ТаблицаПлатежей.Колонки.Добавить("ДатаПоступило",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("ДатаСписано",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("СчетОрганизации",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("Плательщик",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("Получатель",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("ПолучательСчет",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("ПлательщикСчет",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("НазначениеПлатежа",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("СуммаДокумента", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаПлатежей.Колонки.Добавить("СуммаСписано", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаПлатежей.Колонки.Добавить("СуммаПоступило", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаПлатежей.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаПлатежей.Колонки.Добавить("ПлательщикОКПО",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("ПолучательОКПО",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024,ДопустимаяДлина.Переменная)));
	ТаблицаПлатежей.Колонки.Добавить("ПлательщикМФО", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ТаблицаПлатежей.Колонки.Добавить("ПолучательМФО", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ТаблицаПлатежей.Колонки.Добавить("ПлательщикБанк", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	ТаблицаПлатежей.Колонки.Добавить("ПолучательБанк", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	
	Возврат ТаблицаПлатежей
	
КонецФункции // ПолучитьТаблицуПлатежей()

Функция ПолучитьСтруктуруОтбора(БанковскийСчет, НачалоПериода, КонецПериода, ЭтоРеглЗадание)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ДатаНачала", ?(ЭтоРеглЗадание, НачалоДня(НачалоПериода) - 86400, НачалоДня(НачалоПериода)));
	СтруктураОтбора.Вставить("ДатаОкончания", ?(ЭтоРеглЗадание, КонецДня(КонецПериода) - 86400, КонецДня(КонецПериода)));
	СтруктураОтбора.Вставить("БанковскийСчет", БанковскийСчет);
	
	Возврат СтруктураОтбора
	
КонецФункции

// Заполнение таблицы платежей данными транзакций.
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ЗаполнитьТаблицуПлатежей(ТаблицаПлатежей, МассивДокументов, НомерСчета) 
	
	НомерСтроки = 1;
	
	Для Каждого сДокумент Из МассивДокументов Цикл
		
		СтрокаПлатеж = ТаблицаПлатежей.Добавить();
		СтрокаПлатеж.НомерСтроки = НомерСтроки;
		СтрокаПлатеж.НомерДок = Формат(?(сДокумент["id"] = Неопределено, сДокумент["docId"], сДокумент["id"]), "ЧГ=0"); 
		СтрокаПлатеж.Номер = СтрокаПлатеж.НомерДок;
		//СтрокаПлатеж.ДатаДок = сДокумент["operationDate"];
		СтрокаПлатеж.Дата = Дата(сДокумент["operationDate"]);
		//СтрокаПлатеж.ДатаПоступило = сДокумент["operationDate"];
		//СтрокаПлатеж.ДатаСписано = сДокумент["operationDate"];
		//СтрокаПлатеж.СчетОрганизации = НомерСчета;
		СтрокаПлатеж.Плательщик = сДокумент["senderName"];
		СтрокаПлатеж.Получатель = сДокумент["correspondentName"];
		СтрокаПлатеж.ПолучательСчет = сДокумент["correspondentIBAN"];
		СтрокаПлатеж.ПлательщикСчет = сДокумент["senderIBAN"];
		СтрокаПлатеж.НазначениеПлатежа = сДокумент["description"];
		СтрокаПлатеж.СуммаДокумента = сДокумент["amount"];
		СтрокаПлатеж.Сумма =  сДокумент["amount"];
		СтрокаПлатеж.ПлательщикОКПО =  сДокумент["senderTaxId"];
		СтрокаПлатеж.ПолучательОКПО =  сДокумент["correspondentTaxId"];
		СтрокаПлатеж.ПлательщикМФО = сДокумент["senderBankMfo"];
		СтрокаПлатеж.ПолучательМФО = сДокумент["correspondentBankMfo"];
		СтрокаПлатеж.ПлательщикБанк = сДокумент["senderBankName"];
		СтрокаПлатеж.ПолучательБанк = сДокумент["correspondentBankName"];
		
		Если НомерСчета = сДокумент["senderIBAN"] Тогда
			
			СтрокаПлатеж.Списано = Дата(сДокумент["operationDate"]);
			СтрокаПлатеж.СуммаСписано = сДокумент["amount"];
			
		Иначе
			
			СтрокаПлатеж.Поступило = Дата(сДокумент["operationDate"]);
			СтрокаПлатеж.СуммаПоступило = сДокумент["amount"];
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры //Заполнение таблицы платежей данными транзакций

#КонецОбласти 

#Область ЗаполнениеДанных 

Процедура ОбработатьТранзакцию(Транзакция, НомерСчета, ТаблицаПлатежей)
	
	НоваяСтрока = ТаблицаПлатежей.Добавить();
	НоваяСтрока.НомерСтроки 		= ТаблицаПлатежей.Количество()+1;
	НоваяСтрока.НомерДок    		= Транзакция.ref_id;
	НоваяСтрока.Номер       		= Транзакция.ref_id;
	НоваяСтрока.ДатаДок     		= Транзакция.td;
	НоваяСтрока.Дата        		= Дата(Транзакция.td);
	НоваяСтрока.НазначениеПлатежа   = Транзакция.dscr;
	НоваяСтрока.СуммаСписано        = ПолучитьЧислоИзСтроки(Транзакция.dt);
	НоваяСтрока.СуммаПоступило      = ПолучитьЧислоИзСтроки(Транзакция.cr);
	
	Если НоваяСтрока.СуммаСписано > 0 Тогда 
		
		НоваяСтрока.СуммаДокумента      = НоваяСтрока.СуммаСписано;
		НоваяСтрока.Сумма               = НоваяСтрока.СуммаСписано;
		НоваяСтрока.ПолучательОКПО      = Транзакция.okpo;
		НоваяСтрока.Получатель          = Транзакция.name;
		НоваяСтрока.ПолучательСчет      = Транзакция.corr_iban;
		НоваяСтрока.ДатаСписано         = Транзакция.td;
		НоваяСтрока.Списано     		= Дата(Транзакция.td);
		НоваяСтрока.ПолучательМФО = Транзакция.mfo;
		
		НоваяСтрока.ПлательщикСчет = НомерСчета;
		
	Иначе
		
		НоваяСтрока.СуммаДокумента      = НоваяСтрока.СуммаПоступило;
		НоваяСтрока.Сумма               = НоваяСтрока.СуммаПоступило;
		НоваяСтрока.ПлательщикОКПО      = Транзакция.okpo;
		НоваяСтрока.Плательщик          = Транзакция.name;
		НоваяСтрока.ПлательщикСчет      = Транзакция.corr_iban;
		НоваяСтрока.Поступило   		= Дата(Транзакция.td);
		НоваяСтрока.ДатаПоступило       = Транзакция.td;
		НоваяСтрока.ПлательщикМФО = Транзакция.mfo;
		
		НоваяСтрока.ПолучательСчет = НомерСчета;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Прочитать(пСтруктураПараметров, пУчетнаяЗапись, пЭтоРеглЗадание = Ложь)Экспорт 
	
	ТаблицаПлатежей = ПолучитьТаблицуПлатежей();
	СтруктураОтбора = ПолучитьСтруктуруОтбора(пСтруктураПараметров.БанковскийСчет, пСтруктураПараметров.НачПериода, 
		пСтруктураПараметров.КонПериода, пЭтоРеглЗадание);
	ПолучитьДанныеССервисаБанкаПоСчету(СтруктураОтбора, пСтруктураПараметров.ПараметрыДоступа, ТаблицаПлатежей);
	
	//ОрганизацияЕДРПОУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(пСтруктураПараметров.Организация, "КодПоЕДРПОУ");
	
	пСтруктураПараметров.Импорт_Заголовок = Новый Структура;
	Импорт_Заголовок = пСтруктураПараметров.Импорт_Заголовок;
	Импорт_Заголовок.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	Импорт_Заголовок.Вставить("ДатаКонца", КонецДня(ТекущаяДатаСеанса()));
	
	// Заполнение таблицы из обработки:
	пСтруктураПараметров.ДокументыКИмпорту.Очистить();
	Для Каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
		
		ДатаВФормате = Формат(Дата(СтрокаПлатеж.Дата), "ДФ=гг") 
		+ "-" + Формат(Дата(СтрокаПлатеж.Дата), "ДФ=ММ") 
		+ "-" + Формат(Дата(СтрокаПлатеж.Дата), "ДФ=дд");
		
		СтрокаДок = пСтруктураПараметров.ДокументыКИмпорту.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДок, СтрокаПлатеж);
		
		//Если СтрокаДок.СуммаСписано > 0 Тогда
		//	СтрокаДок.ПлательщикОКПО = ОрганизацияЕДРПОУ;
		//	СтрокаДок.Операция = "ПлатежноеПоручение";
		//Иначе
		//	СтрокаДок.ПолучательОКПО = ОрганизацияЕДРПОУ;
		//	СтрокаДок.Операция = "ПлатежноеТребование";
		//КонецЕсли;
		
		СтрокаДок.Дата = ДатаВФормате;
		СтрокаДок.ДатаОтсылкиДок = ДатаВФормате;
		СтрокаДок.ДатаПоступило = ДатаВФормате;
		СтрокаДок.ДатаСписано = ДатаВФормате;
		//СтрокаДок.ДатаДок = ДатаВФормате;
		СтрокаДок.ДатаПроведенияБанком = СтрокаПлатеж.Дата;
		
		Импорт_Заголовок.ДатаНачала = Мин(Импорт_Заголовок.ДатаНачала, СтрокаПлатеж.Дата);
		Импорт_Заголовок.ДатаКонца = Макс(Импорт_Заголовок.ДатаКонца, КонецДня(СтрокаПлатеж.Дата));
		
	КонецЦикла;
	
КонецПроцедуры // Прочитать()

#КонецОбласти
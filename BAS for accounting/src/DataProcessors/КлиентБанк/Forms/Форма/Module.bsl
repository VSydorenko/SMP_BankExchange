
&НаСервере
&ИзменениеИКонтроль("ЗаполнитьДокументыНаИмпорт")
Функция СМП_ЗаполнитьДокументыНаИмпорт(ИБФайловая, ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла)
	
	ТаблицаКонтрагентов.ПолучитьЭлементы().Очистить();
	ДеревоКонтрагентов  = РеквизитФормыВЗначение("ТаблицаКонтрагентов");
	
	ДвоичныеДанныеФайла = ?(ТребуетсяПовторноеЧтениеФайла, ПолучитьИзВременногоХранилища(АдресФайла), Неопределено);
	
	СтекОповещений      = Новый Массив;
	СтруктураПараметров = Новый Структура(
		"ДокументыКИмпорту, СтруктураДанныхИмпорта, ВыводитьСообщения, БанковскийСчет, Кодировка,
		|Организация, НастройкаЗаполнения, ДеревоКонтрагентов, Импорт_Заголовок, Импорт_РасчетныеСчета,
		|ДвоичныеДанныеФайла, СоздаватьНенайденныеЭлементы,
		//СМП_РаботаСБанками +++
		//|СтекОповещений, ТребуетсяПовторноеЧтениеФайла",
		|СтекОповещений, ТребуетсяПовторноеЧтениеФайла, СМП_ОбработкаПротокола",
		//СМП_РаботаСБанками ---
		ДокументыКИмпорту.Выгрузить(), ПолучитьСтруктуруДанныхИмпорта(), ВыводитьСообщения, Объект.БанковскийСчет, Объект.Кодировка,
		Объект.Организация, НастройкаЗаполнения.Выгрузить(), ДеревоКонтрагентов, Импорт_Заголовок, Импорт_РасчетныеСчета.Выгрузить(),
		ДвоичныеДанныеФайла, Объект.СоздаватьНенайденныеЭлементы,
		//СМП_РаботаСБанками +++
		//СтекОповещений, ТребуетсяПовторноеЧтениеФайла);
		СтекОповещений, ТребуетсяПовторноеЧтениеФайла, Объект.СМП_УчетнаяЗаписьБанка.ПодключаемаяОбработка);
		//СМП_РаботаСБанками ---
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Обработки.КлиентБанк.ФоноваяЧтениеДокументовКИмпорту(СтруктураПараметров, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		НаименованиеЗадания = НСтр("ru='Чтение данных из файла импорта банка-клиента';uk='Читання даних з файлу імпорту банку-клієнта'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.КлиентБанк.ФоноваяЧтениеДокументовКИмпорту",
			СтруктураПараметров,
			НаименованиеЗадания);
		
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("СтруктураДанныхКлиента", ЗагрузитьПодготовленныеДанные(ТребуетсяПовторноеЧтениеФайла));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
&ИзменениеИКонтроль("ВыборФайлаДляВыгрузкиИЗагрузки")
Процедура СМП_ВыборФайлаДляВыгрузкиИЗагрузки(Элемент, Режим)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	//СМП_РаботаСБанками +++
	//ДиалогВыбора.Фильтр                      = НСтр("ru='XML файл';uk='XML файл'") + " (*.xml)|*.xml";
	ДиалогВыбора.Фильтр                      = НСтр("ru='" + Объект.СМП_РасширениеФайлаИмпорта + " файл';uk='" + Объект.СМП_РасширениеФайлаИмпорта + " файл'") + " (*." + Объект.СМП_РасширениеФайлаИмпорта + ")|*." + Объект.СМП_РасширениеФайлаИмпорта;
	//СМП_РаботаСБанками ---
	ДиалогВыбора.Заголовок                   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Выберите файл для %1 данных из клиента банка';uk='Виберіть файл для %1 даних з клієнта банку'"), Режим);
	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.Расширение                  = "xml";
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПолноеИмяФайла              = ?(ПустаяСтрока(Элемент.ТекстРедактирования),
		?(Режим = НСтр("ru='выгрузки';uk='вивантаження'"), "1C_to_CB.xml", "CB_to_1C.xml"), Элемент.ТекстРедактирования);
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбора.Выбрать() Тогда
		Если Режим = НСтр("ru='загрузки';uk='завантаження'") Тогда
			Объект.ФайлЗагрузки = ДиалогВыбора.ПолноеИмяФайла;
			
			Оповестить("ВыбранФайлЗагрузки");
		Иначе
			Объект.ФайлВыгрузки = ДиалогВыбора.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("ВыполнитьНастройкуКлиентБанка")
Процедура СМП_ВыполнитьНастройкуКлиентБанка()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Организация");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Организация");
		Возврат;
	КонецЕсли;
	
	//СМП_РаботаСБанками +++
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("Организация",                                    Объект.Организация);
	//ПараметрыФормы.Вставить("БанковскийСчет",                                 Объект.БанковскийСчет);
	//ПараметрыФормы.Вставить("ГруппаДляНовыхКонтрагентов",                     ГруппаДляНовыхКонтрагентов);
	//ПараметрыФормы.Вставить("СтатьяДДССписаниеСРасчетногоСчета",              СтатьяДДССписаниеСРасчетногоСчета);
	//ПараметрыФормы.Вставить("СтатьяДДСПоступлениеНаРасчетныйСчет",            СтатьяДДСПоступлениеНаРасчетныйСчет);
	//ПараметрыФормы.Вставить("ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета",   ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета);
	//ПараметрыФормы.Вставить("ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет", ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет);
	
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.СМП_УчетнаяЗаписьБанка) Тогда
		СсылкаУЗБ = Объект.СМП_УчетнаяЗаписьБанка;
		ПараметрыФормы.Вставить("Ключ", СсылкаУЗБ);
	Иначе
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("БанковскийСчет", Объект.БанковскийСчет);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыполнитьНастройкуКлиентБанкаЗавершение", ЭтотОбъект);
	
	//ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаНастройкиЗаполнения", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	ОткрытьФорму("Справочник.СМП_УчетныеЗаписиБанков.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	//СМП_РаботаСБанками ---
	
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ЗагрузитьНастройкиДляБанковскогоСчета")
Процедура СМП_ЗагрузитьНастройкиДляБанковскогоСчета()
	
	НастройкаВыполнена     = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		
		Настройки = Обработки.КлиентБанк.ПолучитьНастройкиПрограммыКлиентаБанка(Объект.Организация, Объект.БанковскийСчет);
		
		Объект.Программа                                = Настройки.Программа;
		
		//СМП_РаботаСБанками +++
		Объект.СМП_УчетнаяЗаписьБанка                   = Настройки.СМП_УчетнаяЗаписьБанка;
		Если ЗначениеЗаполнено(Объект.СМП_УчетнаяЗаписьБанка) И ЗначениеЗаполнено(Объект.СМП_УчетнаяЗаписьБанка.ПодключаемаяОбработка) Тогда
			Объект.СМП_РасширениеФайлаИмпорта           = Обработки.КлиентБанк.СМП_ПолучитьФорматФайла(Объект.СМП_УчетнаяЗаписьБанка.ПодключаемаяОбработка);
		КонецЕсли;
		
		Если НастройкаЗаполнения.Количество() = 0 Тогда
			НастройкаЗаполненияСтрока = НастройкаЗаполнения.Добавить();
			НастройкаЗаполненияСтрока.Документ = "Поступление на расчетный счет";
			НастройкаЗаполненияСтрока = НастройкаЗаполнения.Добавить();
			НастройкаЗаполненияСтрока.Документ = "Списание с расчетного счета";
		КонецЕсли;

		НайденнаяСтрока = НастройкаЗаполнения.НайтиСтроки(Новый Структура("Документ", "Поступление на расчетный счет"));
		НайденнаяСтрока[0].Проводить = Настройки.ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет;
		НайденнаяСтрока[0].СтатьяДДС = Настройки.СтатьяДДСПоступлениеНаРасчетныйСчет;
		
		НайденнаяСтрока = НастройкаЗаполнения.НайтиСтроки(Новый Структура("Документ", "Списание с расчетного счета"));
		НайденнаяСтрока[0].Проводить = Настройки.ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета;
		НайденнаяСтрока[0].СтатьяДДС = Настройки.СтатьяДДССписаниеСРасчетногоСчета;
		
		ГруппаДляНовыхКонтрагентов                      = Настройки.ГруппаДляНовыхКонтрагентов;
		//СМП_РаботаСБанками ---
		
		Объект.Кодировка                                = Настройки.Кодировка;
		Объект.ФайлВыгрузки                             = Настройки.ФайлВыгрузки;
		Объект.ФайлЗагрузки                             = Настройки.ФайлЗагрузки;
		Объект.ВыгружатьПлатежноеПоручение              = Настройки.Платежное_Поручение;
		Объект.ВыгружатьПлатежноеТребование             = Настройки.Платежное_Требование;
		Объект.СоздаватьНенайденныеЭлементы             = Настройки.СоздаватьНенайденныеЭлементы;
		НастройкаВыполнена                              = Настройки.НастройкиЗагружены;
		
		
		УправлениеФормойНаСервере();
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура СМП_ПриСозданииНаСервереВместо(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
	Объект.НачПериода = ОбщегоНазначенияБП.ПолучитьРабочуюДату();
	Объект.КонПериода = ОбщегоНазначенияБП.ПолучитьРабочуюДату();
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Объект.БанковскийСчет = БухгалтерскийУчетПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(Объект.Организация);
	КонецЕсли;
	
	Если Параметры.Свойство("РежимПоУмолчанию") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[Параметры.РежимПоУмолчанию];
	КонецЕсли;
	
	ЗаполнитьВидыДокументов(ТаблицаДокументов);
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ИспользоватьСтатьиДДС          = Истина;
	
	//СМП_РаботаСБанками +++
	//ЗагрузитьНастройкиДляБанковскогоСчета();
	//СМП_РаботаСБанками ---
	
	Если Параметры.Свойство("ЭлектроннаяВыпискаБанка") Тогда
		ЭлектроннаяВыпискаБанка = Параметры.ЭлектроннаяВыпискаБанка;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыгрузка Тогда
		ДокументыНаЭкспортОбновитьСервер(Объект.ВыгружатьПлатежноеПоручение, Объект.ВыгружатьПлатежноеТребование);
	КонецЕсли;
	
	УправлениеФормойНаСервере();
	
	ОрганизацияЗаголовок = НСтр("ru='Организация:';uk='Організація:'");
	
КонецПроцедуры

&НаКлиенте
Процедура СМП_ПриОткрытииПеред(Отказ)
	
	//СМП_РаботаСБанками +++
	ЗагрузитьНастройкиДляБанковскогоСчета();
	//СМП_РаботаСБанками ---
	
КонецПроцедуры

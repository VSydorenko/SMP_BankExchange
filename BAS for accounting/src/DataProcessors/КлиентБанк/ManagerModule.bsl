
Функция СМП_ПолучитьФорматФайла(ОбработкаПротокола) Экспорт
	
	Если ЗначениеЗаполнено(ОбработкаПротокола) И ТИПЗНЧ(ОбработкаПротокола) <> ТИП("СправочникСсылка.СМП_УчетныеЗаписиБанков") Тогда
		Попытка
			ИмяФайла = ПолучитьИмяВременногоФайла("epf");
			ОбработкаОткр = ОбработкаПротокола.ХранилищеОбработки.Получить();
			ОбработкаОткр.Записать(ИмяФайла);
			ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
			Формат = ВнешняяОбработка.ФорматФайла();
			УдалитьФайлы(ИмяФайла);
			Возврат Формат;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат "xml";
	
КонецФункции

&ИзменениеИКонтроль("ПолучитьНастройкиПрограммыКлиентаБанка")
Функция СМП_ПолучитьНастройкиПрограммыКлиентаБанка(Организация, БанковскийСчет)
	
	Настройки = Новый Структура;
	Настройки.Вставить("НастройкиЗагружены",                       Ложь);
	Настройки.Вставить("Кодировка",                                "Windows");
	Настройки.Вставить("Программа",                                "");
	Настройки.Вставить("ФайлВыгрузки",                             "");
	Настройки.Вставить("ФайлЗагрузки",                             "");
	Настройки.Вставить("Платежное_Поручение",                      Истина);
	Настройки.Вставить("Платежное_Требование",                     Ложь);
	Настройки.Вставить("СоздаватьНенайденныеЭлементы",             Истина);
	
	#Вставка
	Настройки.Вставить("ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета",        Ложь);
	Настройки.Вставить("ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет",      Ложь);
	Настройки.Вставить("СтатьяДДССписаниеСРасчетногоСчета",        Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	Настройки.Вставить("СтатьяДДСПоступлениеНаРасчетныйСчет",      Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	Настройки.Вставить("ГруппаДляНовыхКонтрагентов",      		   Справочники.Контрагенты.ПустаяСсылка());
	Настройки.Вставить("СМП_УчетнаяЗаписьБанка",                   Неопределено);
	#КонецВставки
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Удаление
	"ВЫБРАТЬ
	|	НастройкиОбменаСКлиентомБанка.Программа,
	|	НастройкиОбменаСКлиентомБанка.Кодировка,
	|	НастройкиОбменаСКлиентомБанка.ФайлЗагрузки,
	|	НастройкиОбменаСКлиентомБанка.ФайлВыгрузки,
	|	НастройкиОбменаСКлиентомБанка.ВидыВыгружаемыхПлатДокументов,
	|	НастройкиОбменаСКлиентомБанка.ОтключитьАвтоматическоеСозданиеНенайденныхЭлементов
	|ИЗ
	|	РегистрСведений.НастройкиОбменаСКлиентомБанка КАК НастройкиОбменаСКлиентомБанка
	|ГДЕ
	|	НастройкиОбменаСКлиентомБанка.БанковскийСчет = &Счет
	|	И НастройкиОбменаСКлиентомБанка.Организация = &Организация";
	#КонецУдаления
	#Вставка
	"ВЫБРАТЬ
	|	СМП_УчетныеЗаписиБанков.Кодировка КАК Кодировка,
	|	СМП_УчетныеЗаписиБанков.ФайлЗагрузки КАК ФайлЗагрузки,
	|	СМП_УчетныеЗаписиБанков.ФайлВыгрузки КАК ФайлВыгрузки,
	|	СМП_УчетныеЗаписиБанков.СоздаватьНенайденныеЭлементы КАК СоздаватьНенайденныеЭлементы,
	|	СМП_УчетныеЗаписиБанков.Ссылка КАК Ссылка,
	|	СМП_УчетныеЗаписиБанков.ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета КАК ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета,
	|	СМП_УчетныеЗаписиБанков.ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет КАК ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет,
	|	СМП_УчетныеЗаписиБанков.СтатьяДДССписаниеСРасчетногоСчета КАК СтатьяДДССписаниеСРасчетногоСчета,
	|	СМП_УчетныеЗаписиБанков.СтатьяДДСПоступлениеНаРасчетныйСчет КАК СтатьяДДСПоступлениеНаРасчетныйСчет,
	|	СМП_УчетныеЗаписиБанков.ГруппаДляНовыхКонтрагентов КАК ГруппаДляНовыхКонтрагентов
	|ИЗ
	|	Справочник.СМП_УчетныеЗаписиБанков КАК СМП_УчетныеЗаписиБанков
	|ГДЕ
	|	СМП_УчетныеЗаписиБанков.БанковскийСчет = &Счет
	|	И СМП_УчетныеЗаписиБанков.Организация = &Организация";
	#КонецВставки
	
	Запрос.УстановитьПараметр("Счет",        БанковскийСчет);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Настройки.Вставить("НастройкиЗагружены",                       Истина);
		Настройки.Вставить("Кодировка",                                Выборка.Кодировка);
		
		#Удаление
		Настройки.Вставить("Программа",                                Выборка.Программа);
		#КонецУдаления
		#Вставка
		Настройки.Вставить("СМП_УчетнаяЗаписьБанка",                   Выборка.Ссылка);
		#КонецВставки
		
		Настройки.Вставить("ФайлВыгрузки",                             Выборка.ФайлВыгрузки);
		Настройки.Вставить("ФайлЗагрузки",                             Выборка.ФайлЗагрузки);
		
		#Удаление
		Настройки.Вставить("СоздаватьНенайденныеЭлементы",             НЕ Выборка.ОтключитьАвтоматическоеСозданиеНенайденныхЭлементов);
		#КонецУдаления
		#Вставка
		Настройки.Вставить("СоздаватьНенайденныеЭлементы",						Выборка.СоздаватьНенайденныеЭлементы);
		Настройки.Вставить("ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета",		Выборка.ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета);
		Настройки.Вставить("ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет",	Выборка.ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет);
		Настройки.Вставить("СтатьяДДССписаниеСРасчетногоСчета",					Выборка.СтатьяДДССписаниеСРасчетногоСчета);
		Настройки.Вставить("СтатьяДДСПоступлениеНаРасчетныйСчет",				Выборка.СтатьяДДСПоступлениеНаРасчетныйСчет);
		Настройки.Вставить("ГруппаДляНовыхКонтрагентов",						Выборка.ГруппаДляНовыхКонтрагентов);
		#КонецВставки
		
		#Удаление
		ВидыВыгружаемыхПлатДокументов = Выборка.ВидыВыгружаемыхПлатДокументов.Получить();
		Если ВидыВыгружаемыхПлатДокументов <> Неопределено Тогда
			Для каждого Вид Из ВидыВыгружаемыхПлатДокументов Цикл
				Настройки.Вставить(СтрЗаменить(Вид.Документ, " ", "_"), Вид.Пометка);
			КонецЦикла;
		КонецЕсли;
		#КонецУдаления
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&ИзменениеИКонтроль("СоздатьКонтрагента")
Функция СМП_СоздатьКонтрагента(СтрокаКонтрагент, ГруппаДляНовыхКонтрагентов, Организация, СтекОповещений)
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если СтекОповещений = Неопределено Тогда
		СтекОповещений = Новый Массив;
	КонецЕсли;
	
	// Эти элементы есть у всех справочников.
	Если НЕ ЗначениеЗаполнено(СтрокаКонтрагент.Реквизит) Тогда
		
		НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
		
		НовыйЭлемент.Наименование       = СтрокаКонтрагент.Представление;
		НовыйЭлемент.НаименованиеПолное = НовыйЭлемент.Наименование;
		НовыйЭлемент.Родитель           = ГруппаДляНовыхКонтрагентов;
		НовыйЭлемент.КодПоЕДРПОУ        = СтрокаКонтрагент.Строки[1].Значение;
		НовыйЭлемент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		
		Если НовыйЭлемент.ПолучитьСсылкуНового().Пустая() Тогда
			НовыйЭлемент.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку());
		КонецЕсли;
		
		НовыйЭлемент.ГоловнойКонтрагент = НовыйЭлемент.ПолучитьСсылкуНового();
		НовыйЭлемент.Записать();
		
		СтекОповещений.Добавить(Новый Структура("Ссылка", НовыйЭлемент.Ссылка));
		
	Иначе
		
		НовыйЭлемент = СтрокаКонтрагент.Реквизит.ПолучитьОбъект();
		
	КонецЕсли;
	
	Для каждого Строка Из СтрокаКонтрагент.Строки Цикл
		
		Если Строка.Представление = НСтр("ru='Счет';uk='Рахунок'") Тогда
			
			Попытка
				
				НомерСчета = Строка.Значение;
				НовыйСчет  = Справочники.БанковскиеСчета.СоздатьЭлемент();
				
				РССчет = Строка.Строки;
				
				ВалютаСчета = "";
				КодВалюты = РССчет[2].Значение; //Валюта платежа
				Если ЗначениеЗаполнено(КодВалюты) Тогда
					ВалютаСчета = Справочники.Валюты.НайтиПоКоду(КодВалюты);
				КонецЕсли;	
				
				НовыйСчет.НомерСчета = НомерСчета;
				НовыйСчет.Владелец   = НовыйЭлемент.Ссылка;
				НовыйСчет.ВидСчета   = "Расчетный";
				НовыйСчет.ВалютаДенежныхСредств = ?(ЗначениеЗаполнено(ВалютаСчета), ВалютаСчета, ВалютаРегламентированногоУчета);
				
				
					// Банк контрагента.
					НовыйБанк = НайтиБанк(РССчет[1].Значение); // МФО
					Если НовыйБанк = Справочники.Банки.ПустаяСсылка() Тогда
						НовыйБанк = Справочники.Банки.СоздатьЭлемент();
						НовыйБанк.Наименование = РССчет[0].Значение;
						НовыйБанк.Код          = РССчет[1].Значение;
						НовыйБанк.Записать();
					КонецЕсли;
					
					НовыйСчет.Банк = НовыйБанк.Ссылка;
				
				Если ЗначениеЗаполнено(НовыйСчет.Банк) Тогда
					БанкДляНаименования    = НовыйСчет.Банк;
					НовыйСчет.Наименование = Лев(НовыйСчет.НомерСчета + ", " + БанкДляНаименования, 100);
					НовыйСчет.Записать();

					Если НЕ ЗначениеЗаполнено(НовыйЭлемент.ОсновнойБанковскийСчет) Тогда
						НовыйЭлемент.ОсновнойБанковскийСчет = НовыйСчет.Ссылка;
					КонецЕсли;
					
					СтекОповещений.Добавить(Новый Структура("Ссылка", НовыйСчет.Ссылка));
				Иначе
					ВызватьИсключение НСтр("ru='У банковского счета не определено поле Банк';uk='У банківського рахунки не визначено поле Банк'");
				КонецЕсли;
				
			Исключение
				
				ТекстСообщения = НСтр("ru='Не удалось создать банковский счет контрагента!';uk='Не вдалося створити банківський рахунок контрагента!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				ОписаниеОшибки = ИнформацияОбОшибке();
				
				ТекстОшибки = НСтр("ru='%1
|Произошли ошибки при записи!';uk='%1
|Відбулися помилки при записі!'");
			
				ЗаписьЖурналаРегистрации(
					НСтр("ru='Данные. Изменение';uk='Дані. Зміна'"),
					УровеньЖурналаРегистрации.Ошибка, НовыйСчет.Метаданные(),,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
						ОписаниеОшибки.Описание));
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если Строка.Представление = НСтр("ru='Договор';uk='Договір'") И Строка.Пометка Тогда
			
			Попытка
				
				НайденныйДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				НайденныйДоговорОбъект.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
				
				КодВалюты = Строка.Строки[3].Значение; //Валюта платежа				
				
				Если ЗначениеЗаполнено(КодВалюты) Тогда
					НайденныйДоговорОбъект.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду(КодВалюты);
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
					НайденныйДоговорОбъект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВедениеВзаиморасчетов) Тогда
					НайденныйДоговорОбъект.ВедениеВзаиморасчетов 	= Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
					НайденныйДоговорОбъект.ВедениеВзаиморасчетовНУ 	= Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
					
					#Вставка
					НайденныйДоговорОбъект.СхемаНалоговогоУчета 		= Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.ПоПервомуСобытию;
					НайденныйДоговорОбъект.СхемаНалоговогоУчетаПоТаре 	= Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.ПоПервомуСобытию;
					НайденныйДоговорОбъект.ВидДоговораПоГК 				= Справочники.ВидыДоговоровПоГК.Поставка;
					#КонецВставки
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.Организация) Тогда
					НайденныйДоговорОбъект.Организация = Организация;
				КонецЕсли;
				
				НайденныйДоговорОбъект.Владелец = НовыйЭлемент.Ссылка;
				Вид = Строка.Значение;
				Если Вид = НСтр("ru='С покупателем';uk='З покупцем'") Тогда
					НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
				ИначеЕсли Вид = НСтр("ru='С поставщиком';uk='З постачальником'") Тогда
					НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
				Иначе
					НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
				КонецЕсли;
				
				НайденныйДоговорОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Основной договор (%1).';uk='Основний договір (%1).'"), НРег(Вид));
				НайденныйДоговорОбъект.Записать();
				НайденныйДоговор = НайденныйДоговорОбъект.Ссылка;
				
				Если НЕ ЗначениеЗаполнено(НовыйЭлемент.ОсновнойДоговорКонтрагента) Тогда
					НовыйЭлемент.ОсновнойДоговорКонтрагента = НайденныйДоговор;
				КонецЕсли;
				
				СтекОповещений.Добавить(Новый Структура("Ссылка", НайденныйДоговор));
			Исключение
				
				ТекстСообщения = НСтр("ru='Не удалось создать договор контрагента!';uk='Не вдалося створити договір контрагента!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				ОписаниеОшибки = ИнформацияОбОшибке();
			
				ТекстОшибки = НСтр("ru='%1
|Произошли ошибки при записи!';uk='%1
|Відбулися помилки при записі!'");
			
				ЗаписьЖурналаРегистрации(
					НСтр("ru='Данные. Изменение';uk='Дані. Зміна'"),
					УровеньЖурналаРегистрации.Ошибка, НайденныйДоговорОбъект.Метаданные(),,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
						ОписаниеОшибки.Описание));
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

&ИзменениеИКонтроль("ПодготовитьДанныеВСтрокедокумента")
Процедура СМП_ПодготовитьДанныеВСтрокедокумента(СтрокаДокумента, Организация, БанковскийСчет, НомерСчета, СписокБанковскихСчетовОрганизации, НастройкиПоУмолчаниюДляДокументов)

	//1) Определим вид платежа – входящий или исходящий
	ПлатежноеПоручение  = ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ";
	ПлатежноеТребование = ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕТРЕБОВАНИЕ";
	
	Исходящий           = СтрокаДокумента.ПлательщикСчет = НомерСчета;
	СтрокаДокумента.Исходящий = Исходящий;
	
	//_______________________________________________________________________________________________________________
	//2) Определим вид документа в программе
	ВидДокумента = ?(Исходящий, "СписаниеСРасчетногоСчета",    "ПоступлениеНаРасчетныйСчет");
	ИмяДокумента = ?(Исходящий, "Списание с расчетного счета", "Поступление на расчетный счет");
	
	СтрокаДокумента.ВидДокумента = ВидДокумента;
	СтрокаДокумента.ИмяДокумента = ИмяДокумента;
	РеквизитСчета = ?(Исходящий, "СчетОрганизации", "СчетКонтрагента");
	
	//_______________________________________________________________________________________________________________
	//3) Найдем ранее загруженный (введенный вручную) документ.
	//Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.
	
	// Распознаем дату документа
	ВсеРеквизитыПоискаЕсть   = Ложь;
	ДокументНайден           = Ложь;	
	СтрокаДокумента.НомерДок = СтрокаДокумента.Номер;
	Если НЕ ПустаяСТрока(СтрокаДокумента.Дата) Тогда
		ДатаПлДокумента = ПолучитьДатуИзСтроки('00010101', СтрокаДокумента.Дата);
	Иначе
		ДатаПлДокумента = '00010101';
	КонецЕсли;
	
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаСписано) Тогда
		ДатаИзСтроки = ПолучитьДатуИзСтроки('00010101', СтрокаДокумента.ДатаСписано);
	ИначеЕсли НЕ ПустаяСТрока(СтрокаДокумента.ДатаПоступило) Тогда
		ДатаИзСтроки = ПолучитьДатуИзСтроки('00010101', СтрокаДокумента.ДатаПоступило);
	Иначе
		ДатаИзСтроки = ДатаПлДокумента;
	КонецЕсли;
	
	РеквизитыПлатежки = Новый Структура("Ссылка, Контрагент, СчетКонтрагента, ДоговорКонтрагента, ВидДоговора, СтавкаНДС,
		|ДокументОснование");
	
	Если ЗначениеЗаполнено(ДатаИзСтроки) Тогда
		СтрокаДокумента.ЕстьДатаПлатежа  = Истина;
		СтрокаДокумента.ДатаПлПоручения  = ДатаПлДокумента;
		СтрокаДокумента.ДатаДок          = ДатаИзСтроки;
		
		СтрокаДокумента.ЭтоПлатежноеПоручение = Исходящий И ПлатежноеПоручение;
		СтрокаДокумента.СчетДляПоискаДок = ?(Исходящий, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
		СтрокаДокумента.ОКПОДляПоискаДок  = ?(Исходящий, СтрокаДокумента.ПолучательОКПО,  СтрокаДокумента.ПлательщикОКПО);
	КонецЕсли;
	
	//Ставка НДС из платежки
	СтрокаДокумента.СтавкаНДС = РеквизитыПлатежки.СтавкаНДС;
	
	//_______________________________________________________________________________________________________________
	//4) Определяем вид операции документа
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		Если Исходящий Тогда
			Если ЗначениеЗаполнено(РеквизитыПлатежки.Ссылка) Тогда
				// Используем тот же алгоритм, что и при вводе списания с расчетного счета на основании платежного поручения
				Если ТипЗнч(РеквизитыПлатежки.ДокументОснование) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
				Иначе
					Если РеквизитыПлатежки.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
 						ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю;
					ИначеЕсли РеквизитыПлатежки.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
						ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
					Иначе
						ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СписокБанковскихСчетовОрганизации.НайтиСтроки(
					Новый Структура("НомерСчета, МФО", СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПолучательМФО)).Количество() > 0 Тогда
				ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
			Иначе
				ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
			КонецЕсли; 
		Иначе // входящий платеж
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
		КонецЕсли;
		
		СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
	Иначе
		ВидОперацииДокумента = СтрокаДокумента.ВидОперации;
	КонецЕсли;
	
	СтрокаДокумента.ВидОперацииДокумента = ВидОперацииДокумента;
	
	//_______________________________________________________________________________________________________________
	//5) Определяем банковский счет организации
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетОрганизации) Тогда
		СтрокаДокумента.СчетОрганизации = БанковскийСчет;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//6) Определяем банковский счет контрагента
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) ИЛИ ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка")
		И Найти(СтрокаДокумента.СчетКонтрагента, НСтр("ru='Не загружен';uk='Не завантажений'")) > 0 Тогда
		
		Если ЗначениеЗаполнено(РеквизитыПлатежки.Ссылка) Тогда
			СтрокаДокумента.СчетКонтрагента = РеквизитыПлатежки.СчетКонтрагента;
		Иначе
			СтрокаДокумента.НайтиКонтрагента = Истина;
			Если СтрокаДокумента.Исходящий Тогда
				СтрокаДокумента.СчетКонтрагентаДляПоиска = СокрЛП(СтрокаДокумента.ПолучательСчет);
				СтрокаДокумента.ОКПОКонтрагента  = СокрЛП(СтрокаДокумента.ПолучательОКПО);
					СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Получатель;
				
			Иначе
				СтрокаДокумента.СчетКонтрагентаДляПоиска = СокрЛП(СтрокаДокумента.ПлательщикСчет);
				СтрокаДокумента.ОКПОКонтрагента  = СокрЛП(СтрокаДокумента.ПлательщикОКПО);
					СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Плательщик;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	//_______________________________________________________________________________________________________________
	//7) Определим контрагента
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент) ИЛИ ТипЗнч(СтрокаДокумента.Контрагент) = Тип("Строка")
		И Найти(СтрокаДокумента.Контрагент, НСтр("ru='Не загружен';uk='Не завантажений'")) > 0 Тогда
		
		Если ЗначениеЗаполнено(РеквизитыПлатежки.Ссылка) Тогда
			СтрокаДокумента.Контрагент = РеквизитыПлатежки.Контрагент;
		ИначеЕсли ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
			СтрокаДокумента.Контрагент = Организация;
		КонецЕсли;
		
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//8) Определим договор контрагента
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Договор)
		ИЛИ ТипЗнч(СтрокаДокумента.Договор) = Тип("Строка") Тогда
		
		Если ЗначениеЗаполнено(РеквизитыПлатежки.ДоговорКонтрагента) Тогда
			СтрокаДокумента.Договор = РеквизитыПлатежки.ДоговорКонтрагента;
		Иначе
			Если ВидОперацииДокумента  = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет 
				И ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
				И УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперацииДокумента).Количество() = 0  Тогда
				СтрокаДокумента.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//9) Определим Статью ДДС по умолчанию
		
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
		СтрокаДокумента.СтатьяДДС = НастройкиПоУмолчаниюДляДокументов[ИмяДокумента].СтатьяДДС;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//10) Определим сумму
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
	
	#Вставка
	Буфер = СтрЗаменить(Буфер, Символы.НПП, "");
	#КонецВставки
	
	Если НЕ ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(Буфер, ".", ""), "-", ""), ",", "")) И Буфер <> "" Тогда
		Сумма = Число(Буфер);
		
		Если Сумма < 0 Тогда
			Сумма = - Сумма;      
		КонецЕсли;
		
		СтрокаДокумента.СуммаДокумента = Сумма;
		Если Исходящий Тогда
			СтрокаДокумента.СуммаСписано   = Сумма;
		Иначе
			СтрокаДокумента.СуммаПоступило = Сумма;
		КонецЕсли;
		
	Иначе
		ДобавитьЗамечание(СтрокаДокумента, 4, "Указана неверная сумма документа(" + Буфер + ")!");
		
	КонецЕсли;
	
	
	//_______________________________________________________________________________________________________________
	//12) Определим ДатаОтсылкиДок(для Платежного требования выставленное)
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаОтсылкиДок) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаОтсылки, СтрокаДокумента.ДатаОтсылкиДок);
	КонецЕсли;
	
	
	//_______________________________________________________________________________________________________________
	//14) ДатаСписано и ДатаПоступило, ДатаПроведения
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаСписано) И СтрокаДокумента.СуммаСписано <> 0 Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Списано, СтрокаДокумента.ДатаСписано);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Списано = '00010101';
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Списано = '00010101';
		СтрокаДокумента.ДатаПроведения = СтрокаДокумента.ДатаДок;
	КонецЕсли;
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаПоступило) И СтрокаДокумента.СуммаПоступило <> 0 Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Поступило, СтрокаДокумента.ДатаПоступило);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Поступило = '00010101';
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Поступило = '00010101';
		СтрокаДокумента.ДатаПроведения = СтрокаДокумента.ДатаДок;
	КонецЕсли;
	
	
КонецПроцедуры

&ИзменениеИКонтроль("РаспознатьДанные")
Процедура СМП_РаспознатьДанные(ДокументыДляИмпорта, ДеревоКонтрагентов, Организация, БанковскийСчет, НомерСчета, СоздаватьНенайденныеЭлементы, СтекОповещений)
	
	Если ДокументыДляИмпорта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ВалютаДенежныхСредств");
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;
		
	//Если документ уже есть в ИБ, то берем все данные из него.
	СоответствиеРеквизитовПлатежки = Новый Соответствие;
	
	МассивСтрокСКонтрагентами = Новый Массив;
	НайденныеКонтрагенты      = Новый Соответствие;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	МассивПлатежек = ДокументыДляИмпорта.НайтиСтроки(
		Новый Структура("Исходящий, ЭтоПлатежноеПоручение", Истина, Истина));
	Если МассивПлатежек.Количество() > 0 Тогда
		ТаблицаПлатежек = ДокументыДляИмпорта.Скопировать(МассивПлатежек,
			"НомерСтроки, ДатаПлПоручения, ПолучательСчет");
		
		Запрос.УстановитьПараметр("СчетОрганизации", БанковскийСчет);
		Запрос.УстановитьПараметр("ТаблицаПлатежек", ТаблицаПлатежек);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПлатежек.НомерСтроки,
		|	ТаблицаПлатежек.ДатаПлПоручения КАК ДатаПлПоручения,
		|	ТаблицаПлатежек.ПолучательСчет
		|ПОМЕСТИТЬ ВТ_ТаблицаПлатежек
		|ИЗ
		|	&ТаблицаПлатежек КАК ТаблицаПлатежек
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаПлПоручения,
		|	ТаблицаПлатежек.ПолучательСчет";
		
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.Ссылка,
		|	Док.Дата,
		|	Док.Номер,
		|	Док.Контрагент,
		|	Док.СчетКонтрагента,
		|	Док.ДоговорКонтрагента,
		|	ЕСТЬNULL(Док.ДоговорКонтрагента.ВидДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора,
		|	Док.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА Док.ДокументОснование
		|		ИНАЧЕ ЕСТЬNULL(СписаниеСРасчетногоСчета.Ссылка, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ КАК ДокументОснование,
		|	ТаблицаПлатежек.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(Док.ДокументОснование КАК Документ.СписаниеСРасчетногоСчета).Проведен
		|		ИНАЧЕ СписаниеСРасчетногоСчета.Проведен
		|	КОНЕЦ КАК ДокументОснованиеПроведен,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(Док.ДокументОснование КАК Документ.СписаниеСРасчетногоСчета).НомерВходящегоДокумента
		|		ИНАЧЕ СписаниеСРасчетногоСчета.НомерВходящегоДокумента
		|	КОНЕЦ КАК НомерВходящегоДокумента,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(Док.ДокументОснование КАК Документ.СписаниеСРасчетногоСчета).ДатаВходящегоДокумента
		|		ИНАЧЕ СписаниеСРасчетногоСчета.ДатаВходящегоДокумента
		|	КОНЕЦ КАК ДатаВходящегоДокумента,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(Док.ДокументОснование КАК Документ.СписаниеСРасчетногоСчета).ВидОперации
		|		ИНАЧЕ СписаниеСРасчетногоСчета.ВидОперации
		|	КОНЕЦ КАК ДокументОснованиеВидОперации,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(Док.ДокументОснование КАК Документ.СписаниеСРасчетногоСчета).СчетКонтрагента
		|		ИНАЧЕ СписаниеСРасчетногоСчета.СчетКонтрагента
		|	КОНЕЦ КАК ДокументОснованиеСчетКонтрагента,
		|	ВЫБОР
		|		КОГДА Док.Проведен
		|			ТОГДА 0
		|		КОГДА Док.ПометкаУдаления
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	ВТ_ТаблицаПлатежек КАК ТаблицаПлатежек
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК Док
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
		|			ПО (ТИПЗНАЧЕНИЯ(СписаниеСРасчетногоСчета.ДокументОснование) = ТИП(Документ.ПлатежноеПоручение))
		|				И Док.Ссылка = СписаниеСРасчетногоСчета.ДокументОснование
		|		ПО ТаблицаПлатежек.ПолучательСчет = Док.СчетКонтрагента.НомерСчета
		|			И (ТаблицаПлатежек.ДатаПлПоручения = НАЧАЛОПЕРИОДА(Док.Дата, ДЕНЬ))
		|ГДЕ
		|	Док.Организация = &Организация
		|	И Док.СчетОрганизации = &СчетОрганизации
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	Приоритет";
		
		ДокументыДляИмпорта.Индексы.Добавить("НомерСтроки");
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			РеквизитыПлатежки = Новый Структура("Ссылка, Контрагент, СчетКонтрагента, ДоговорКонтрагента,
				|ВидДоговора, СтавкаНДС,
				|ДокументОснование, ДокументОснованиеПроведен, ДокументОснованиеВидОперации, ДокументОснованиеСчетКонтрагента,
				|НомерВходящегоДокумента, ДатаВходящегоДокумента");
				
			СтрокаДокумента = ДокументыДляИмпорта.Найти(Выборка.НомерСтроки, "НомерСтроки");
			Пока Выборка.Следующий() Цикл
				НомерДок     = СокрЛП(Выборка.Номер);
				ВыборкаНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер, Истина, Истина);
				
				НомераРавны = ВыборкаНомер = СтрокаДокумента.НомерДок;
				Если НЕ НомераРавны Тогда
					ЧислоНомерДок        = ПолучитьЧислоИзСтроки(НомерДок);
					ЧислоВСтрокеНомерДок = ПолучитьЧислоИзСтроки(СтрокаДокумента.НомерДок);
					НомераРавны          = ЧислоНомерДок = ЧислоВСтрокеНомерДок;
				КонецЕсли;
				
				Если НомераРавны Тогда
					ЗаполнитьЗначенияСвойств(РеквизитыПлатежки, Выборка);
					СтрокаДокумента.ДокументОснование = РеквизитыПлатежки.Ссылка;
					
					Если ЗначениеЗаполнено(РеквизитыПлатежки.ДокументОснование) И
						ТипЗнч(РеквизитыПлатежки.ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда 
						
						Документ = РеквизитыПлатежки.ДокументОснование;
						СтрокаДокумента.Документ        = Документ;
						СтрокаДокумента.Проведен        = РеквизитыПлатежки.ДокументОснованиеПроведен;
						СтрокаДокумента.Номер           = РеквизитыПлатежки.НомерВходящегоДокумента;
						СтрокаДокумента.ДатаДок         = РеквизитыПлатежки.ДатаВходящегоДокумента; 
						СтрокаДокумента.ВидОперации     = РеквизитыПлатежки.ДокументОснованиеВидОперации;
						СтрокаДокумента.СчетКонтрагента = РеквизитыПлатежки.ДокументОснованиеСчетКонтрагента;
						СтрокаДокумента.СостояниеДокумента = ?(СтрокаДокумента.Проведен, 1, 0);
						
						Если Документ.РасшифровкаПлатежа.Количество() > 0 Тогда
							СтрокаДокумента.СтатьяДДС   = Документ.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств; 
							СтрокаДокумента.Договор     = Документ.РасшифровкаПлатежа[0].ДоговорКонтрагента;
							СтрокаДокумента.СтавкаНДС   = Документ.РасшифровкаПлатежа[0].СтавкаНДС;
						КонецЕсли;
						
						Если Документ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
							СтрокаДокумента.Контрагент  = Документ.Организация;
						Иначе
							СтрокаДокумента.Контрагент  = Документ.Контрагент;
						КонецЕсли;
					Иначе
						ЗаполнитьЗначенияСвойств(СтрокаДокумента, РеквизитыПлатежки,, "ДокументОснование");
						СтрокаДокумента.Договор   = Выборка.ДоговорКонтрагента;
						СтрокаДокумента.СтатьяДДС = Выборка.СтатьяДвиженияДенежныхСредств;
					КонецЕсли;
					
					СоответствиеРеквизитовПлатежки.Вставить(Выборка.НомерСтроки, РеквизитыПлатежки);
					
					Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
						НайденныеКонтрагенты.Вставить(Выборка.НомерСтроки, СтрокаДокумента.Контрагент);
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//3) Найдем ранее загруженный (введенный вручную) документ.
	//Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.
	
	МассивПлатежейПолучено = ДокументыДляИмпорта.НайтиСтроки(
		Новый Структура("ЕстьДатаПлатежа, ВидДокумента", Истина, "ПоступлениеНаРасчетныйСчет"));
	МассивПлатежейСписано = ДокументыДляИмпорта.НайтиСтроки(
		Новый Структура("ЕстьДатаПлатежа, ВидДокумента", Истина, "СписаниеСРасчетногоСчета"));
	Если МассивПлатежейПолучено.Количество() > 0 ИЛИ МассивПлатежейСписано.Количество() > 0 Тогда
		Если МассивПлатежейПолучено.Количество() > 0 Тогда
			МассивСтрок = МассивПлатежейПолучено;
			Если МассивПлатежейСписано.Количество() > 0 Тогда
				Для инд = 0 По МассивПлатежейСписано.ВГраница() Цикл
					МассивСтрок.Добавить(МассивПлатежейСписано[инд]);
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли МассивПлатежейСписано.Количество() > 0 Тогда
			МассивСтрок = МассивПлатежейСписано;
		КонецЕсли;
		
		ТаблицаСтрок = ДокументыДляИмпорта.Скопировать(МассивСтрок,
			"НомерСтроки, НомерДок, Номер, НомерДокументаНекорректен, ДатаДок, ДатаПлПоручения, ПолучательСчет, ПолучательОКПО, ПлательщикСчет, ПлательщикОКПО, Исходящий, Документ");
		
		ТаблицаДат = ТаблицаСтрок.Скопировать(, "ДатаДок, ДатаПлПоручения");
		ТаблицаДат.Сортировать("ДатаДок");
		МаксимальнаяДата = ТаблицаДат[ТаблицаДат.Количество() - 1].ДатаДок;
		МинимальнаяДата  = МаксимальнаяДата;
		Для каждого СтрокаТаблицы Из ТаблицаДат Цикл
			Если СтрокаТаблицы.ДатаДок = '00010101' Тогда
				Продолжить;
			КонецЕсли;
			
			Если МинимальнаяДата <= СтрокаТаблицы.ДатаДок Тогда
				Прервать;
			Иначе
				МинимальнаяДата = СтрокаТаблицы.ДатаДок;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаДат.Сортировать("ДатаПлПоручения");
		МаксимальнаяДатаПлПоручения = ТаблицаДат[ТаблицаДат.Количество() - 1].ДатаПлПоручения;
		МинимальнаяДатаПлПоручения  = МаксимальнаяДатаПлПоручения;
		Для каждого СтрокаТаблицы Из ТаблицаДат Цикл
			Если СтрокаТаблицы.ДатаПлПоручения = '00010101' Тогда
				Продолжить;
			КонецЕсли;
			
			Если МинимальнаяДатаПлПоручения <= СтрокаТаблицы.ДатаПлПоручения Тогда
				Прервать;
			Иначе
				МинимальнаяДатаПлПоручения = СтрокаТаблицы.ДатаПлПоручения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//При наличии нескольких предпочтении отдается первому с совпадающим номером счета
	ЗапросПоискаДокумента = Новый Запрос;
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежныеДокументы.Ссылка КАК Ссылка,
	|	ПлатежныеДокументы.Проведен КАК Проведен,
	|	ПлатежныеДокументы.НомерВходящегоДокумента КАК Номер,
	|	ПлатежныеДокументы.Дата КАК Дата,
	|	НАЧАЛОПЕРИОДА(ПлатежныеДокументы.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	НАЧАЛОПЕРИОДА(ПлатежныеДокументы.ДатаВходящегоДокумента, ДЕНЬ) КАК ДатаНачалоДняПл,
	|	ЕСТЬNULL(ПлатежныеДокументы.СчетКонтрагента.НомерСчета, """") КАК КонтрагентНомерСчета,
	|	ПлатежныеДокументы.Контрагент.КодПоЕДРПОУ КАК КонтрагентОКПО,
	|	ПлатежныеДокументы.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ПлатежныеДокументы.Проведен
	|			ТОГДА 0
	|		КОГДА ПлатежныеДокументы.ПометкаУдаления
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПлатежныеДокументы
	|ГДЕ
	|	(НАЧАЛОПЕРИОДА(ПлатежныеДокументы.Дата, ДЕНЬ) МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата
	|			ИЛИ НАЧАЛОПЕРИОДА(ПлатежныеДокументы.ДатаВходящегоДокумента, ДЕНЬ) МЕЖДУ &МинДатаПлПоручения И &МаксДатаПлПоручения)
	|	И ПлатежныеДокументы.СчетОрганизации = &СчетОрганизации
	|	И ПлатежныеДокументы.Организация = &Организация";
	
	ТекстЗапроса = "";
	Если МассивПлатежейПолучено.Количество() > 0 Тогда
		ТекстЗапроса = ШаблонТекстаЗапроса;
	КонецЕсли;
	
	Если МассивПлатежейСписано.Количество() > 0 Тогда
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "ПоступлениеНаРасчетныйСчет", "СписаниеСРасчетногоСчета");
		Если ТекстЗапроса <> "" Тогда
			ШаблонТекстаЗапроса = "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|" +
			СтрЗаменить(ШаблонТекстаЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ШаблонТекстаЗапроса;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтрагентНомерСчета УБЫВ,
		|	КонтрагентОКПО УБЫВ,
		|	Приоритет";
		
		ЗапросПоискаДокумента.Текст = ТекстЗапроса;
		
		ЗапросПоискаДокумента.УстановитьПараметр("МинимальнаяДата",     МинимальнаяДата);
		ЗапросПоискаДокумента.УстановитьПараметр("МаксимальнаяДата",    МаксимальнаяДата);
		ЗапросПоискаДокумента.УстановитьПараметр("МинДатаПлПоручения",  МинимальнаяДатаПлПоручения);
		ЗапросПоискаДокумента.УстановитьПараметр("МаксДатаПлПоручения", МаксимальнаяДатаПлПоручения);
		ЗапросПоискаДокумента.УстановитьПараметр("Организация",         Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("СчетОрганизации",     БанковскийСчет);
		
		ТаблицаДокументовИзБазы = ЗапросПоискаДокумента.Выполнить().Выгрузить();
		ТаблицаДокументовИзБазы.Индексы.Добавить("ДатаНачалоДня");
		ТаблицаДокументовИзБазы.Индексы.Добавить("ДатаНачалоДняПл");
		
		Для каждого СтрокаДокумента Из ТаблицаСтрок Цикл
			// часть строк заполнили из платежек, их обрабатывать не нужно
			Если СоответствиеРеквизитовПлатежки.Получить(СтрокаДокумента.НомерСтроки) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РеквизитыПлатежки = Новый Структура("Ссылка, Контрагент, СчетКонтрагента, ДоговорКонтрагента,
				|ВидДоговора, СтавкаНДС,
				|ДокументОснование");
			
			ДлинаНомера = СтрДлина(СтрокаДокумента.НомерДок);
			ДлинаНомера = ?(ДлинаНомера < 6, 6, ДлинаНомера);
			
			МассивСтрокПоДню = ТаблицаДокументовИзБазы.НайтиСтроки(Новый Структура("ДатаНачалоДня", СтрокаДокумента.ДатаДок));
			ИндексСтрок = Новый Соответствие;
			Для инд = 0 По МассивСтрокПоДню.ВГраница() Цикл
				ИндексСтрок.Вставить(ТаблицаДокументовИзБазы.Индекс(МассивСтрокПоДню[инд]), МассивСтрокПоДню[инд]);
			КонецЦикла;
			
			МассивСтрокПоДнюПл = ТаблицаДокументовИзБазы.НайтиСтроки(Новый Структура("ДатаНачалоДняПл", СтрокаДокумента.ДатаПлПоручения));
			Для инд = 0 По МассивСтрокПоДнюПл.ВГраница() Цикл
				Если ИндексСтрок[ТаблицаДокументовИзБазы.Индекс(МассивСтрокПоДнюПл[инд])] = Неопределено Тогда
					МассивСтрокПоДню.Добавить(МассивСтрокПоДнюПл[инд]);
					ИндексСтрок.Вставить(ТаблицаДокументовИзБазы.Индекс(МассивСтрокПоДнюПл[инд]), МассивСтрокПоДнюПл[инд]);
				КонецЕсли;
			КонецЦикла;
			
			Если МассивСтрокПоДню.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СчетДляПоискаДок = ?(СтрокаДокумента.Исходящий, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
			ОКПОДляПоискаДок  = ?(СтрокаДокумента.Исходящий, СтрокаДокумента.ПолучательОКПО,  СтрокаДокумента.ПлательщикОКПО);
			
			ДокументНайден = Ложь;
			КоличествоДок  = 0;
			Для инд = 0 По МассивСтрокПоДню.ВГраница() Цикл
				Результат    = МассивСтрокПоДню[инд];
				ВыборкаНомер = СокрЛ(Прав(СокрП(Результат.Номер), ДлинаНомера));
				
				ЕстьРеквизитДляПроверки = ЗначениеЗаполнено(Результат.КонтрагентНомерСчета) ИЛИ ЗначениеЗаполнено(Результат.КонтрагентОКПО);
				РСРавны  = Результат.КонтрагентНомерСчета = СчетДляПоискаДок
					ИЛИ НЕ ЗначениеЗаполнено(Результат.КонтрагентНомерСчета);
				ОКПОРавны = Результат.КонтрагентОКПО = ОКПОДляПоискаДок
					ИЛИ НЕ ЗначениеЗаполнено(Результат.КонтрагентОКПО);
					
				#Удаление
				Если ВыборкаНомер = СтрокаДокумента.НомерДок
				#КонецУдаления
				#Вставка
				Если ВыборкаНомер = СокрЛП(СтрокаДокумента.НомерДок)
				#КонецВставки
				
					И ЕстьРеквизитДляПроверки И РСРавны И ОКПОРавны Тогда
					
					Если КоличествоДок = 0 Тогда
						СтрокаИсходногоДокумента = ДокументыДляИмпорта.Найти(СтрокаДокумента.НомерСтроки, "НомерСтроки");
						СтрокаИсходногоДокумента.Документ = Результат.Ссылка;
						СтрокаИсходногоДокумента.Проведен = Результат.Проведен;
						СтрокаИсходногоДокумента.НомерДок = Результат.Номер;
						СтрокаИсходногоДокумента.ДатаДок  = Результат.Дата;
						
						ДокументНайден = ЗначениеЗаполнено(СтрокаИсходногоДокумента.Документ);
					КонецЕсли;
					
					КоличествоДок = КоличествоДок + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если КоличествоДок > 1 Тогда
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В информационной базе найдено несколько (%1) соответствующих документов!';uk='В інформаційній базі знайдено кілька (%1) відповідних документів!'"), КоличествоДок);
				ДобавитьЗамечание(СтрокаИсходногоДокумента, 1, ОписаниеОшибки);
			КонецЕсли;
			
			//Если документ уже есть в ИБ, то берем все данные из него.
			Если ДокументНайден Тогда
				Документ = СтрокаИсходногоДокумента.Документ; 
				СтрокаИсходногоДокумента.ВидОперации = Документ.ВидОперации; 
				Если Документ.РасшифровкаПлатежа.Количество() > 0 Тогда
					СтрокаИсходногоДокумента.СтатьяДДС = Документ.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств; 
					СтрокаИсходногоДокумента.Договор = Документ.РасшифровкаПлатежа[0].ДоговорКонтрагента;
				КонецЕсли;
				
				СтрокаИсходногоДокумента.СчетКонтрагента = Документ.СчетКонтрагента;
				СтрокаИсходногоДокумента.СчетОрганизации = БанковскийСчет;
				СтрокаИсходногоДокумента.СостояниеДокумента  = ?(СтрокаИсходногоДокумента.Проведен, 1, 0);
				
				Если Документ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
					СтрокаИсходногоДокумента.Контрагент = Документ.Организация;
				Иначе
					СтрокаИсходногоДокумента.Контрагент = Документ.Контрагент;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаИсходногоДокумента.Контрагент) Тогда
					НайденныеКонтрагенты.Вставить(СтрокаИсходногоДокумента.НомерСтроки, СтрокаИсходногоДокумента.Контрагент);
				КонецЕсли;
				
				СтрокаИсходногоДокумента.ДокументОснование = Документ.ДокументОснование;
				РеквизитыПлатежки.Ссылка = Документ.ДокументОснование;
				ЗаполнитьЗначенияСвойств(РеквизитыПлатежки, Документ);
				СоответствиеРеквизитовПлатежки.Вставить(СтрокаИсходногоДокумента.НомерСтроки, РеквизитыПлатежки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//6 и 7) Определим контрагента и р/с контрагента
	
	МассивОКПО            = Новый Массив;
	МассивНомеровСчетов  = Новый Массив;
	МассивСтрокКУдалению = Новый Массив;
	ТаблицаКонтрагентов  = ДокументыДляИмпорта.Скопировать(,
		"НомерСтроки, СчетКонтрагентаДляПоиска, ОКПОКонтрагента, ИмяКонтрагента");
	
	Для каждого СтрокаДокумента Из ТаблицаКонтрагентов Цикл
		Если СоответствиеРеквизитовПлатежки.Получить(СтрокаДокумента.НомерСтроки) <> Неопределено Тогда
			МассивСтрокКУдалению.Добавить(СтрокаДокумента);
		ИначеЕсли ПустаяСтрока(СтрокаДокумента.СчетКонтрагентаДляПоиска)
			И ПустаяСтрока(СтрокаДокумента.ОКПОКонтрагента)
			И ПустаяСтрока(СтрокаДокумента.ИмяКонтрагента) Тогда
			МассивСтрокКУдалению.Добавить(СтрокаДокумента);
		Иначе
			Если НЕ ПустаяСтрока(СтрокаДокумента.ОКПОКонтрагента) Тогда
				МассивОКПО.Добавить(СтрокаДокумента.ОКПОКонтрагента)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(СтрокаДокумента.СчетКонтрагентаДляПоиска) Тогда
				МассивНомеровСчетов.Добавить(СтрокаДокумента.СчетКонтрагентаДляПоиска)
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для инд = 0 По МассивСтрокКУдалению.ВГраница() Цикл
		ТаблицаКонтрагентов.Удалить(МассивСтрокКУдалению[инд]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаКонтрагентов", ТаблицаКонтрагентов);
	Запрос.УстановитьПараметр("СписокОКПО",           МассивОКПО);
	Запрос.УстановитьПараметр("СписокСчетов",        МассивНомеровСчетов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска КАК СТРОКА(34)) КАК СчетКонтрагентаДляПоиска,
	|	ВЫРАЗИТЬ(ТаблицаКонтрагентов.ОКПОКонтрагента КАК СТРОКА(12)) КАК ОКПОКонтрагента,
	|	ВЫРАЗИТЬ(ТаблицаКонтрагентов.ИмяКонтрагента КАК СТРОКА(100)) КАК ИмяКонтрагента
	|ПОМЕСТИТЬ ТаблицаКонтрагентов
	|ИЗ
	|	&ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОКПОКонтрагента,
	|	СчетКонтрагентаДляПоиска";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Контрагенты).КодПоЕДРПОУ КАК ОКПО,
	|	ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска КАК НомерСчета,
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Контрагенты).Наименование КАК ВладелецНаименование,
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Контрагенты).НаименованиеПолное КАК ВладелецНаименованиеПолное
	|ПОМЕСТИТЬ ВТ_БанковскиеСчета
	|ИЗ
	|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска = БанковскиеСчета.НомерСчета
	|ГДЕ
	|	ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска <> """"
	|	И БанковскиеСчета.НомерСчета В(&СписокСчетов)
	|	И ТИПЗНАЧЕНИЯ(БанковскиеСчета.Владелец) = ТИП(Справочник.Контрагенты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВладелецНаименование,
	|	ВладелецНаименованиеПолное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.КодПоЕДРПОУ КАК ОКПО,
	|	ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
	|	2 КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет2
	|ИЗ
	|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ТаблицаКонтрагентов.ОКПОКонтрагента = Контрагенты.КодПоЕДРПОУ
	|ГДЕ
	|	ТаблицаКонтрагентов.ОКПОКонтрагента <> """"
	|	И Контрагенты.КодПоЕДРПОУ В(&СписокОКПО)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_БанковскиеСчета.Контрагент КАК Контрагент,
	|	ВТ_БанковскиеСчета.ОКПО КАК ОКПО,
	|	ВТ_БанковскиеСчета.НомерСтроки КАК НомерСтроки,
	|	3 КАК Приоритет,
	|	ВТ_БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	ВТ_БанковскиеСчета.БанковскийСчет КАК БанковскийСчет
	|ПОМЕСТИТЬ ВТ_Приоритет3
	|ИЗ
	|	ВТ_БанковскиеСчета КАК ВТ_БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ПО ВТ_БанковскиеСчета.ВладелецНаименование = ТаблицаКонтрагентов.ИмяКонтрагента
	|			И ВТ_БанковскиеСчета.НомерСтроки = ТаблицаКонтрагентов.НомерСтроки
	|ГДЕ
	|	ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска <> """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_БанковскиеСчета.Контрагент,
	|	ВТ_БанковскиеСчета.ОКПО,
	|	ВТ_БанковскиеСчета.НомерСтроки,
	|	3,
	|	ВТ_БанковскиеСчета.НомерСчета,
	|	ВТ_БанковскиеСчета.БанковскийСчет
	|ИЗ
	|	ВТ_БанковскиеСчета КАК ВТ_БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ПО ВТ_БанковскиеСчета.ВладелецНаименованиеПолное = ТаблицаКонтрагентов.ИмяКонтрагента
	|			И ВТ_БанковскиеСчета.НомерСтроки = ТаблицаКонтрагентов.НомерСтроки
	|ГДЕ
	|	ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска <> """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_БанковскиеСчета.Контрагент,
	|	ВТ_БанковскиеСчета.ОКПО,
	|	ВТ_БанковскиеСчета.НомерСтроки,
	|	3,
	|	ВТ_БанковскиеСчета.НомерСчета,
	|	ВТ_БанковскиеСчета.БанковскийСчет
	|ИЗ
	|	ВТ_БанковскиеСчета КАК ВТ_БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ПО ВТ_БанковскиеСчета.ОКПО = ТаблицаКонтрагентов.ОКПОКонтрагента
	|			И ВТ_БанковскиеСчета.НомерСтроки = ТаблицаКонтрагентов.НомерСтроки
	|ГДЕ
	|	ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска <> """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.КодПоЕДРПОУ КАК ОКПО,
	|	ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
	|	4 КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет4
	|ИЗ
	|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ТаблицаКонтрагентов.ОКПОКонтрагента = Контрагенты.ИНН
	|ГДЕ
	|	ТаблицаКонтрагентов.ОКПОКонтрагента <> """"
	|	И Контрагенты.КодПоЕДРПОУ В(&СписокОКПО)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Приоритет2.Контрагент КАК Контрагент,
	|	ВТ_Приоритет2.ОКПО КАК ОКПО,
	|	ВТ_Приоритет2.НомерСтроки КАК НомерСтроки,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет1
	|ИЗ
	|	ВТ_Приоритет2 КАК ВТ_Приоритет2
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Приоритет4 КАК ВТ_Приоритет4
	|		ПО ВТ_Приоритет2.Контрагент = ВТ_Приоритет4.Контрагент
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_Приоритет3.Контрагент,
	|	ВТ_Приоритет3.ОКПО,
	|	ВТ_Приоритет3.НомерСтроки,
	|	1
	|ИЗ
	|	ВТ_Приоритет3 КАК ВТ_Приоритет3
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Приоритет4 КАК ВТ_Приоритет4
	|		ПО ВТ_Приоритет3.Контрагент = ВТ_Приоритет4.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Приоритет1.Контрагент КАК Контрагент,
	|	ВТ_Приоритет1.ОКПО КАК ОКПО,
	|	ВТ_Приоритет1.НомерСтроки КАК НомерСтроки,
	|	0 КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет0
	|ИЗ
	|	ВТ_Приоритет1 КАК ВТ_Приоритет1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ПО ВТ_Приоритет1.Контрагент.Наименование = ТаблицаКонтрагентов.ИмяКонтрагента
	|			И ВТ_Приоритет1.НомерСтроки = ТаблицаКонтрагентов.НомерСтроки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_Приоритет1.Контрагент,
	|	ВТ_Приоритет1.ОКПО,
	|	ВТ_Приоритет1.НомерСтроки,
	|	0
	|ИЗ
	|	ВТ_Приоритет1 КАК ВТ_Приоритет1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ПО ВТ_Приоритет1.Контрагент.НаименованиеПолное = ТаблицаКонтрагентов.ИмяКонтрагента
	|			И ВТ_Приоритет1.НомерСтроки = ТаблицаКонтрагентов.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.ОКПО КАК ОКПО,
	|	МИНИМУМ(ВложенныйЗапрос.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ КонтрагентыСгруппированныеПоПриоритетам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Приоритет1.Контрагент КАК Контрагент,
	|		ВТ_Приоритет1.ОКПО КАК ОКПО,
	|		ВТ_Приоритет1.НомерСтроки КАК НомерСтроки,
	|		ВТ_Приоритет1.Приоритет КАК Приоритет
	|	ИЗ
	|		ВТ_Приоритет1 КАК ВТ_Приоритет1
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Приоритет2.Контрагент,
	|		ВТ_Приоритет2.ОКПО КАК ОКПО,
	|		ВТ_Приоритет2.НомерСтроки,
	|		ВТ_Приоритет2.Приоритет
	|	ИЗ
	|		ВТ_Приоритет2 КАК ВТ_Приоритет2
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Приоритет3.Контрагент,
	|		ВТ_Приоритет3.ОКПО КАК ОКПО,
	|		ВТ_Приоритет3.НомерСтроки,
	|		ВТ_Приоритет3.Приоритет
	|	ИЗ
	|		ВТ_Приоритет3 КАК ВТ_Приоритет3
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Приоритет4.Контрагент,
	|		ВТ_Приоритет4.ОКПО КАК ОКПО,
	|		ВТ_Приоритет4.НомерСтроки,
	|		ВТ_Приоритет4.Приоритет
	|	ИЗ
	|		ВТ_Приоритет4 КАК ВТ_Приоритет4) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.ОКПО,
	|	ВложенныйЗапрос.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыСгруппированныеПоПриоритетам.Контрагент КАК Контрагент,
	|	МИНИМУМ(КонтрагентыСгруппированныеПоПриоритетам.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ МинимальныйПриоритетВРазрезеКонтрагентов
	|ИЗ
	|	КонтрагентыСгруппированныеПоПриоритетам КАК КонтрагентыСгруппированныеПоПриоритетам
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтрагентыСгруппированныеПоПриоритетам.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыСгруппированныеПоПриоритетам.Контрагент КАК Контрагент,
	|	КонтрагентыСгруппированныеПоПриоритетам.НомерСтроки,
	|	КонтрагентыСгруппированныеПоПриоритетам.ОКПО,
	|	КонтрагентыСгруппированныеПоПриоритетам.Приоритет
	|ПОМЕСТИТЬ КонтрагентыСМинимальнымПриоритетом
	|ИЗ
	|	КонтрагентыСгруппированныеПоПриоритетам КАК КонтрагентыСгруппированныеПоПриоритетам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныйПриоритетВРазрезеКонтрагентов КАК МинимальныйПриоритетВРазрезеКонтрагентов
	|		ПО КонтрагентыСгруппированныеПоПриоритетам.Контрагент = МинимальныйПриоритетВРазрезеКонтрагентов.Контрагент
	|			И КонтрагентыСгруппированныеПоПриоритетам.Приоритет = МинимальныйПриоритетВРазрезеКонтрагентов.Приоритет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрагентыСМинимальнымПриоритетом.Контрагент КАК Контрагент,
	|	КонтрагентыСМинимальнымПриоритетом.ОКПО КАК ОКПО,
	|	КонтрагентыСМинимальнымПриоритетом.Приоритет КАК Приоритет,
	|	КонтрагентыСМинимальнымПриоритетом.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	КонтрагентыСМинимальнымПриоритетом КАК КонтрагентыСМинимальнымПриоритетом
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыСМинимальнымПриоритетом.Контрагент КАК Контрагент,
	|	ВТ_Приоритет3.БанковскийСчет КАК БанковскийСчет,
	|	ВТ_Приоритет3.НомерСчета КАК НомерСчета,
	|	КонтрагентыСМинимальнымПриоритетом.Приоритет КАК Приоритет,
	|	КонтрагентыСМинимальнымПриоритетом.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ВТ_Приоритет3.БанковскийСчет КАК Справочник.БанковскиеСчета).Владелец КАК Владелец
	|ИЗ
	|	КонтрагентыСМинимальнымПриоритетом КАК КонтрагентыСМинимальнымПриоритетом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Приоритет3 КАК ВТ_Приоритет3
	|		ПО КонтрагентыСМинимальнымПриоритетом.Контрагент = ВТ_Приоритет3.Контрагент
	|			И КонтрагентыСМинимальнымПриоритетом.НомерСтроки = ВТ_Приоритет3.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКонтрагентов";
	
	Пакет = Запрос.ВыполнитьПакет();
	Выборка = Пакет[0].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		СтрокаДокумента = ДокументыДляИмпорта.Найти(Выборка.НомерСтроки, "НомерСтроки");
		// учтем дубли с одинаковым приоритетом
		НайденоКонтрагентов = 0;
		Пока Выборка.Следующий() Цикл
			ОКПОКонтрагента      = Выборка.ОКПО;
			НайденоКонтрагентов = НайденоКонтрагентов + 1;
			Если НайденоКонтрагентов = 1 Тогда
				СтрокаДокумента.Контрагент = Выборка.Контрагент;
				МассивСтрокСКонтрагентами.Добавить(СтрокаДокумента);
				НайденныеКонтрагенты.Вставить(Выборка.НомерСтроки, Выборка.Контрагент);
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоКонтрагентов > 1 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 2, "В информационной базе найдено несколько("
				+ НайденоКонтрагентов + ") контрагентов с одинаковым кодом ЕДРПОУ ("
				+ ОКПОКонтрагента + ")!");
		КонецЕсли;
	КонецЦикла;
	
	//_______________________________________________________________________________________________________________
	// банковский счет контрагента
	Выборка = Пакет[1].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		СтрокаДокумента = ДокументыДляИмпорта.Найти(Выборка.НомерСтроки, "НомерСтроки");
		// учтем дубли с одинаковым приоритетом
		НайденоРС = 0;
		Пока Выборка.Следующий() Цикл
			Владелец = НайденныеКонтрагенты.Получить(Выборка.НомерСтроки);
			Если Владелец = Неопределено
				ИЛИ Владелец <> Выборка.Владелец Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСчета = Выборка.НомерСчета;
			НайденоРС  = НайденоРС + 1;
			Если НайденоРС = 1 Тогда
				СтрокаДокумента.СчетКонтрагента = Выборка.БанковскийСчет;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоРС > 1 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 2, "В информационной базе найдено несколько("
				+ НайденоРС + ") одинаковых банковских счетов ("
				+ НомерСчета + ")!");
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрокПустыхКонтрагентов = ДокументыДляИмпорта.НайтиСтроки(Новый Структура("Контрагент", Неопределено));
	Для инд = 0 По МассивСтрокПустыхКонтрагентов.ВГраница() Цикл
		СтрокаДокумента = МассивСтрокПустыхКонтрагентов[инд];
		ЕстьЗамечание   =  НЕ ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		СтрокаДокумента.Контрагент      =
			?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы, НСтр("ru='Не найден (';uk='Не знайдений ('"), НСтр("ru='Не загружен (';uk='Не завантажений ('")) + СтрокаДокумента.ИмяКонтрагента + ")"; 
		СтрокаДокумента.СчетКонтрагента =
			?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы, НСтр("ru='Не найден (';uk='Не знайдений ('"), НСтр("ru='Не загружен (';uk='Не завантажений ('")) + СтрокаДокумента.СчетКонтрагентаДляПоиска + ")";
		СтрокаДокумента.Договор         = ?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы, НСтр("ru='Не найден';uk='Не знайдений'"), НСтр("ru='Не создан';uk='Не створений'"));
		СтрокаДокумента.ДоговорКонтрагентаНеНайден = Истина;
		
		СписокНенайденных(СтрокаДокумента, ДеревоКонтрагентов);
		Если НЕ СоздаватьНенайденныеЭлементы Тогда

			ДобавитьЗамечание(СтрокаДокумента, 2, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru='Не найден контрагент (%1, ЕДРПОУ %2).';uk='Не знайдений контрагент (%1, ЄДРПОУ %2).'"), СтрокаДокумента.ИмяКонтрагента, СтрокаДокумента.ОКПОКонтрагента));
			ДобавитьЗамечание(СтрокаДокумента, 2, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru='Не найден счет контрагента (%1).';uk='Не знайдений рахунок контрагента (%1).'"), СтрокаДокумента.СчетКонтрагентаДляПоиска));
			ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru='Не найден договор. ';uk='Не знайдений договір. '"));
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрокПустыхРасчетныхСчетов = ДокументыДляИмпорта.НайтиСтроки(Новый Структура("СчетКонтрагента", Неопределено));
	Для инд = 0 По МассивСтрокПустыхРасчетныхСчетов.ВГраница() Цикл
		СтрокаДокумента = МассивСтрокПустыхРасчетныхСчетов[инд];
		ЕстьЗамечание   =  НЕ ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		СтрокаДокумента.СчетКонтрагента =
			?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы, НСтр("ru='Не найден (';uk='Не знайдений ('"), НСтр("ru='Не загружен (';uk='Не завантажений ('")) + СтрокаДокумента.СчетКонтрагентаДляПоиска + ")";
		
		СписокНенайденных(СтрокаДокумента, ДеревоКонтрагентов);
		Если НЕ СоздаватьНенайденныеЭлементы Тогда
			ДобавитьЗамечание(СтрокаДокумента, 2, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru='Не найден счет контрагента (%1).';uk='Не знайдений рахунок контрагента (%1).'"), СтрокаДокумента.СчетКонтрагентаДляПоиска));
		КонецЕсли;
	КонецЦикла;
	
	//_______________________________________________________________________________________________________________
	//8) Определим договор контрагента
		
	МассивПустыхДоговоров = ДокументыДляИмпорта.НайтиСтроки(Новый Структура("Договор", Неопределено));
	Если МассивПустыхДоговоров.Количество() > 0 Тогда
		ТаблицаПустыхДоговоров = ДокументыДляИмпорта.Скопировать(МассивПустыхДоговоров,
			"НомерСтроки, Контрагент, ВидОперации");
		
		ТаблицаСвязейВидаОперацииВидДоговора = ПолучитьТаблицуСвязей();
		
		Запрос.УстановитьПараметр("ТаблицаКонтрагентов", ТаблицаПустыхДоговоров);
		Запрос.УстановитьПараметр("ТаблицаСвязей",       ТаблицаСвязейВидаОперацииВидДоговора);
		Запрос.УстановитьПараметр("Организация",         Организация);
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСвязей.ВидОперации КАК ВидОперации,
		|	ТаблицаСвязей.ВидДоговора КАК ВидДоговора,
		|	ТаблицаСвязей.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ ТаблицаСвязей
		|ИЗ
		|	&ТаблицаСвязей КАК ТаблицаСвязей
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидДоговора,
		|	ВидОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(ТаблицаКонтрагентов.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
		|	ТаблицаКонтрагентов.ВидОперации КАК ВидОперации
		|ПОМЕСТИТЬ ТаблицаКонтрагентов
		|ИЗ
		|	&ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаКонтрагентов.Контрагент КАК Контрагент,
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора,
		|	ТаблицаКонтрагентов.ВидОперации КАК ВидОперации
		|ПОМЕСТИТЬ ВТ_Договора
		|ИЗ
		|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ТаблицаКонтрагентов.Контрагент = ДоговорыКонтрагентов.Владелец
		|			И (ДоговорыКонтрагентов.Организация = &Организация)
		|			И (ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
		|ГДЕ
		|	ДоговорыКонтрагентов.Организация = &Организация
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.Договор,
		|	ВложенныйЗапрос.ВидОперации,
		|	МИНИМУМ(ВложенныйЗапрос.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТ_ДоговараМин
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Договора.НомерСтроки КАК НомерСтроки,
		|		ВТ_Договора.Контрагент КАК Контрагент,
		|		ВТ_Договора.Договор КАК Договор,
		|		ВТ_Договора.ВидОперации КАК ВидОперации,
		|		ТаблицаСвязей.Приоритет КАК Приоритет
		|	ИЗ
		|		ВТ_Договора КАК ВТ_Договора
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСвязей КАК ТаблицаСвязей
		|			ПО ВТ_Договора.ВидДоговора = ТаблицаСвязей.ВидДоговора
		|				И ВТ_Договора.ВидОперации = ТаблицаСвязей.ВидОперации) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ВидОперации,
		|	ВложенныйЗапрос.НомерСтроки,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДоговараМин.НомерСтроки КАК НомерСтроки,
		|	ВТ_ДоговараМин.Контрагент,
		|	ВТ_ДоговараМин.Договор,
		|	ВТ_ДоговараМин.ВидОперации,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ВТ_ДоговараМин.Договор = ВТ_ДоговараМин.Контрагент.ОсновнойДоговорКонтрагента
		|				ТОГДА -1
		|			ИНАЧЕ ВТ_ДоговараМин.Приоритет
		|		КОНЕЦ) КАК Приоритет
		|ИЗ
		|	ВТ_ДоговараМин КАК ВТ_ДоговараМин
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДоговараМин.ВидОперации,
		|	ВТ_ДоговараМин.НомерСтроки,
		|	ВТ_ДоговараМин.Контрагент,
		|	ВТ_ДоговараМин.Договор
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	Приоритет";
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			СтрокаДокумента = ДокументыДляИмпорта.Найти(Выборка.НомерСтроки, "НомерСтроки");
			// учтем дубли с одинаковым приоритетом
			Если Выборка.Следующий() Тогда
				СтрокаДокумента.Договор = Выборка.Договор;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для инд = 0 По МассивСтрокСКонтрагентами.ВГраница() Цикл
		Если ЗначениеЗаполнено(МассивСтрокСКонтрагентами[инд].Договор) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДокумента      = МассивСтрокСКонтрагентами[инд];
		ВидОперацииДокумента = СтрокаДокумента.ВидОперации;
		
		СписокВидовДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперацииДокумента);
		Если ВидОперацииДокумента  <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет 
			И ВидОперацииДокумента <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
			И СписокВидовДоговоров.Количество() > 0  Тогда
			ЕстьЗамечание = НЕ ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
			СтрокаДокумента.ДоговорКонтрагентаНеНайден = Истина;
			СтрокаДокумента.Договор = ?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы, НСтр("ru='Не найден';uk='Не знайдений'"), НСтр("ru='Не создан';uk='Не створений'"));
			
			СписокНенайденных(СтрокаДокумента, ДеревоКонтрагентов);
			Если НЕ СоздаватьНенайденныеЭлементы Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru='Не найден договор. ';uk='Не знайдений договір. '"));
			КонецЕсли;
		Иначе
			СтрокаДокумента.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&ИзменениеИКонтроль("ФоноваяЗагрузкаКонтрагентовИДокументов")
Процедура СМП_ФоноваяЗагрузкаКонтрагентовИДокументов(СтруктураПараметров, АдресХранилища)
	
	НастройкиПоУмолчаниюДляДокументов = ПолучитьСтруктуруНастроек(СтруктураПараметров.НастройкаЗаполнения);
	
	МассивСтрок = СтруктураПараметров.ДеревоКонтрагентов.Строки.НайтиСтроки(
		Новый Структура("Пометка", Ложь), Истина);
	
	#Удаление
	Для инд = 0 По МассивСтрок.ВГраница() Цикл
		МассивСтрок[инд].Пометка = Истина;
	КонецЦикла;
	#КонецУдаления
	
	ДанныеДляЗаполнения  = Новый Структура;
	КешСвойствДокументов = ЗаполнитьКешСвойств();
	
	СоздатьКонтрагентов(СтруктураПараметров.ДеревоКонтрагентов,
						СтруктураПараметров.ГруппаДляНовыхКонтрагентов,
						СтруктураПараметров.Организация,
						СтруктураПараметров.МассивКонтрагентов,
						СтруктураПараметров.СтекОповещений);
	
	ДанныеДляЗаполнения.Вставить("ДеревоКонтрагентов", СтруктураПараметров.ДеревоКонтрагентов);
	ДанныеДляЗаполнения.Вставить("МассивКонтрагентов", СтруктураПараметров.МассивКонтрагентов);
	
	ОчиститьНенайденныеПоля(СтруктураПараметров.ДокументыКИмпорту);
	ОпределитьСсылочныеДанные(КешСвойствДокументов,
							СтруктураПараметров.ДокументыКИмпорту,
							СтруктураПараметров.СтруктураДанныхИмпорта,
							СтруктураПараметров.Организация,
							СтруктураПараметров.БанковскийСчет,
							СтруктураПараметров.ДеревоКонтрагентов,
							НастройкиПоУмолчаниюДляДокументов,
							Истина,
							СтруктураПараметров.СтекОповещений);
	
	Загрузить(СтруктураПараметров.ДокументыКИмпорту,
			  СтруктураПараметров.Импорт_Заголовок,
			  СтруктураПараметров.Организация,
			  СтруктураПараметров.Импорт_РасчетныеСчета,
			  СтруктураПараметров.ИспользоватьГраницуОбработки,
			  НастройкиПоУмолчаниюДляДокументов,
			  СтруктураПараметров.ДатаГраницыОбработки,
			  СтруктураПараметров.БанковскийСчет,
			  СтруктураПараметров.СтекОповещений);
	
	ДанныеДляЗаполнения.Вставить("ДокументыКИмпорту",  СтруктураПараметров.ДокументыКИмпорту);
	ДанныеДляЗаполнения.Вставить("СтекОповещений",     СтруктураПараметров.СтекОповещений);
	ДанныеДляЗаполнения.Вставить("СостояниеЗагрузки",  2);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

&ИзменениеИКонтроль("ФоноваяЧтениеДокументовКИмпорту")
Процедура СМП_ФоноваяЧтениеДокументовКИмпорту(СтруктураПараметров, АдресХранилища)
	
	НомерСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.БанковскийСчет, "НомерСчета");
	НастройкиПоУмолчаниюДляДокументов = ПолучитьСтруктуруНастроек(СтруктураПараметров.НастройкаЗаполнения);
	
	КодВалютыБанковскогоСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.БанковскийСчет, "ВалютаДенежныхСредств.Код");
	
	ДанныеДляЗаполнения  = Новый Структура;
	
	КешСвойствДокументов = ЗаполнитьКешСвойств();
	НайденКонецФайла     = НЕ СтруктураПараметров.ТребуетсяПовторноеЧтениеФайла;
	Если СтруктураПараметров.ТребуетсяПовторноеЧтениеФайла Тогда
		
		#Вставка
		Если ЗначениеЗаполнено(СтруктураПараметров.СМП_ОбработкаПротокола) тогда
			
			ИмяВременногоФайла  = ПолучитьИмяВременногоФайла(СМП_ПолучитьФорматФайла(СтруктураПараметров.СМП_ОбработкаПротокола));
			ДвоичныеДанныеФайла = СтруктураПараметров.ДвоичныеДанныеФайла;
			ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
			
			ИмяФайла = ПолучитьИмяВременногоФайла("epf");
			ОбработкаОткр = СтруктураПараметров.СМП_ОбработкаПротокола.ХранилищеОбработки.Получить();
			ОбработкаОткр.Записать(ИмяФайла);
			ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
			НайденКонецФайла = ВнешняяОбработка.Загрузить_Бух( 
										СтруктураПараметров.ДокументыКИмпорту,
										СтруктураПараметров.СтруктураДанныхИмпорта,
										СтруктураПараметров.ВыводитьСообщения,
										НомерСчета,
										КодВалютыБанковскогоСчета,
										СтруктураПараметров.Кодировка,
										СтруктураПараметров.Организация,
										СтруктураПараметров.Импорт_Заголовок,
										СтруктураПараметров.Импорт_РасчетныеСчета,
										ИмяВременногоФайла,
										СтруктураПараметров.СоздаватьНенайденныеЭлементы,
										СтруктураПараметров.СтекОповещений);
			УдалитьФайлы(ИмяФайла);
			УдалитьФайлы(ИмяВременногоФайла);
			
		Иначе
		#КонецВставки
		
		ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанныеФайла = СтруктураПараметров.ДвоичныеДанныеФайла;
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
		
		НайденКонецФайла = РазобратьФайлИмпортаXML(
							СтруктураПараметров.ДокументыКИмпорту,
							СтруктураПараметров.СтруктураДанныхИмпорта,
							СтруктураПараметров.ВыводитьСообщения,
							НомерСчета,
							КодВалютыБанковскогоСчета,
							СтруктураПараметров.Кодировка,
							СтруктураПараметров.Организация,
							СтруктураПараметров.Импорт_Заголовок,
							СтруктураПараметров.Импорт_РасчетныеСчета,
							ИмяВременногоФайла,
							СтруктураПараметров.СоздаватьНенайденныеЭлементы,
							СтруктураПараметров.СтекОповещений);
		#Вставка
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли;
		#КонецВставки
		
	Иначе
		ОчиститьНенайденныеПоля(СтруктураПараметров.ДокументыКИмпорту);
	КонецЕсли;
	
	Если НайденКонецФайла Тогда
		ОпределитьСсылочныеДанные(КешСвойствДокументов,
							СтруктураПараметров.ДокументыКИмпорту,
							СтруктураПараметров.СтруктураДанныхИмпорта,
							СтруктураПараметров.Организация,
							СтруктураПараметров.БанковскийСчет,
							СтруктураПараметров.ДеревоКонтрагентов,
							НастройкиПоУмолчаниюДляДокументов,
							СтруктураПараметров.СоздаватьНенайденныеЭлементы,
							СтруктураПараметров.СтекОповещений);
		ДанныеДляЗаполнения.Вставить("СостояниеЗагрузки", 1);
	Иначе
		ДанныеДляЗаполнения.Вставить("СостояниеЗагрузки", 0);
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("ДокументыКИмпорту",     СтруктураПараметров.ДокументыКИмпорту);
	ДанныеДляЗаполнения.Вставить("ДеревоКонтрагентов",    СтруктураПараметров.ДеревоКонтрагентов);
	ДанныеДляЗаполнения.Вставить("Импорт_Заголовок",      СтруктураПараметров.Импорт_Заголовок);
	ДанныеДляЗаполнения.Вставить("Импорт_РасчетныеСчета", СтруктураПараметров.Импорт_РасчетныеСчета);
	ДанныеДляЗаполнения.Вставить("СтекОповещений",        СтруктураПараметров.СтекОповещений);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения,    АдресХранилища);
	
КонецПроцедуры
